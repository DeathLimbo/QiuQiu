// Code generated by protoc-gen-go.
// source: conf.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 活动时间类型
type ActivityTimeType int32

const (
	ActivityTimeType_Code       ActivityTimeType = 0
	ActivityTimeType_OpenServer ActivityTimeType = 1
	ActivityTimeType_Date       ActivityTimeType = 2
	ActivityTimeType_RoleCreate ActivityTimeType = 3
)

var ActivityTimeType_name = map[int32]string{
	0: "Code",
	1: "OpenServer",
	2: "Date",
	3: "RoleCreate",
}
var ActivityTimeType_value = map[string]int32{
	"Code":       0,
	"OpenServer": 1,
	"Date":       2,
	"RoleCreate": 3,
}

func (x ActivityTimeType) Enum() *ActivityTimeType {
	p := new(ActivityTimeType)
	*p = x
	return p
}
func (x ActivityTimeType) String() string {
	return proto.EnumName(ActivityTimeType_name, int32(x))
}
func (x *ActivityTimeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActivityTimeType_value, data, "ActivityTimeType")
	if err != nil {
		return err
	}
	*x = ActivityTimeType(value)
	return nil
}
func (ActivityTimeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

// 活动分组类型
type ActivityGroupType int32

const (
	// 区服
	ActivityGroupType_AGT_Zone ActivityGroupType = 1
	// 小分组
	ActivityGroupType_AGT_LittleGroup ActivityGroupType = 2
	// 大分组
	ActivityGroupType_AGT_BigGroup ActivityGroupType = 3
)

var ActivityGroupType_name = map[int32]string{
	1: "AGT_Zone",
	2: "AGT_LittleGroup",
	3: "AGT_BigGroup",
}
var ActivityGroupType_value = map[string]int32{
	"AGT_Zone":        1,
	"AGT_LittleGroup": 2,
	"AGT_BigGroup":    3,
}

func (x ActivityGroupType) Enum() *ActivityGroupType {
	p := new(ActivityGroupType)
	*p = x
	return p
}
func (x ActivityGroupType) String() string {
	return proto.EnumName(ActivityGroupType_name, int32(x))
}
func (x *ActivityGroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActivityGroupType_value, data, "ActivityGroupType")
	if err != nil {
		return err
	}
	*x = ActivityGroupType(value)
	return nil
}
func (ActivityGroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

type RichmanGridType int32

const (
	RichmanGridType_RGT_Normal RichmanGridType = 1
	RichmanGridType_RGT_Buff   RichmanGridType = 2
	RichmanGridType_RGT_Game   RichmanGridType = 3
)

var RichmanGridType_name = map[int32]string{
	1: "RGT_Normal",
	2: "RGT_Buff",
	3: "RGT_Game",
}
var RichmanGridType_value = map[string]int32{
	"RGT_Normal": 1,
	"RGT_Buff":   2,
	"RGT_Game":   3,
}

func (x RichmanGridType) Enum() *RichmanGridType {
	p := new(RichmanGridType)
	*p = x
	return p
}
func (x RichmanGridType) String() string {
	return proto.EnumName(RichmanGridType_name, int32(x))
}
func (x *RichmanGridType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RichmanGridType_value, data, "RichmanGridType")
	if err != nil {
		return err
	}
	*x = RichmanGridType(value)
	return nil
}
func (RichmanGridType) EnumDescriptor() ([]byte, []int) { return fileDescriptor18, []int{2} }

type ItemConfig struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Number           *int32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ItemConfig) Reset()                    { *m = ItemConfig{} }
func (m *ItemConfig) String() string            { return proto.CompactTextString(m) }
func (*ItemConfig) ProtoMessage()               {}
func (*ItemConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

func (m *ItemConfig) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemConfig) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 扣除增加的类型_id_num
type ItemVaryConfig struct {
	// 类型
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// id
	Id *int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// 数量
	Number           *int32 `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ItemVaryConfig) Reset()                    { *m = ItemVaryConfig{} }
func (m *ItemVaryConfig) String() string            { return proto.CompactTextString(m) }
func (*ItemVaryConfig) ProtoMessage()               {}
func (*ItemVaryConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

func (m *ItemVaryConfig) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ItemVaryConfig) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemVaryConfig) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 道具列表
type ItemVaryConfigList struct {
	ItemList         []*ItemVaryConfig `protobuf:"bytes,1,rep,name=itemList" json:"itemList,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ItemVaryConfigList) Reset()                    { *m = ItemVaryConfigList{} }
func (m *ItemVaryConfigList) String() string            { return proto.CompactTextString(m) }
func (*ItemVaryConfigList) ProtoMessage()               {}
func (*ItemVaryConfigList) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{2} }

func (m *ItemVaryConfigList) GetItemList() []*ItemVaryConfig {
	if m != nil {
		return m.ItemList
	}
	return nil
}

// 通用类型的type_value
type TypeValueConfig struct {
	// 类型
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// 数量
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TypeValueConfig) Reset()                    { *m = TypeValueConfig{} }
func (m *TypeValueConfig) String() string            { return proto.CompactTextString(m) }
func (*TypeValueConfig) ProtoMessage()               {}
func (*TypeValueConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{3} }

func (m *TypeValueConfig) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TypeValueConfig) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 玩家等级表
type AccLv struct {
	AccLv             *int32             `protobuf:"varint,1,opt,name=acc_lv" json:"acc_lv,omitempty"`
	AccExp            *int32             `protobuf:"varint,2,opt,name=acc_exp" json:"acc_exp,omitempty"`
	Salary            *int32             `protobuf:"varint,3,opt,name=salary" json:"salary,omitempty"`
	UnlockAlternate   *int32             `protobuf:"varint,4,opt,name=unlock_alternate" json:"unlock_alternate,omitempty"`
	PhysicalLimit     *int32             `protobuf:"varint,6,opt,name=physical_limit" json:"physical_limit,omitempty"`
	PhysicalRecovery  *int32             `protobuf:"varint,7,opt,name=physical_recovery" json:"physical_recovery,omitempty"`
	OpenPosition      *int32             `protobuf:"varint,9,opt,name=open_position" json:"open_position,omitempty"`
	DollarCardinality *int32             `protobuf:"varint,10,opt,name=dollar_cardinality" json:"dollar_cardinality,omitempty"`
	TacticLv          []*TypeValueConfig `protobuf:"bytes,11,rep,name=tactic_lv" json:"tactic_lv,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *AccLv) Reset()                    { *m = AccLv{} }
func (m *AccLv) String() string            { return proto.CompactTextString(m) }
func (*AccLv) ProtoMessage()               {}
func (*AccLv) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{4} }

func (m *AccLv) GetAccLv() int32 {
	if m != nil && m.AccLv != nil {
		return *m.AccLv
	}
	return 0
}

func (m *AccLv) GetAccExp() int32 {
	if m != nil && m.AccExp != nil {
		return *m.AccExp
	}
	return 0
}

func (m *AccLv) GetSalary() int32 {
	if m != nil && m.Salary != nil {
		return *m.Salary
	}
	return 0
}

func (m *AccLv) GetUnlockAlternate() int32 {
	if m != nil && m.UnlockAlternate != nil {
		return *m.UnlockAlternate
	}
	return 0
}

func (m *AccLv) GetPhysicalLimit() int32 {
	if m != nil && m.PhysicalLimit != nil {
		return *m.PhysicalLimit
	}
	return 0
}

func (m *AccLv) GetPhysicalRecovery() int32 {
	if m != nil && m.PhysicalRecovery != nil {
		return *m.PhysicalRecovery
	}
	return 0
}

func (m *AccLv) GetOpenPosition() int32 {
	if m != nil && m.OpenPosition != nil {
		return *m.OpenPosition
	}
	return 0
}

func (m *AccLv) GetDollarCardinality() int32 {
	if m != nil && m.DollarCardinality != nil {
		return *m.DollarCardinality
	}
	return 0
}

func (m *AccLv) GetTacticLv() []*TypeValueConfig {
	if m != nil {
		return m.TacticLv
	}
	return nil
}

// 道具表
type ItemBase struct {
	// 道具id
	ItemId *int32 `protobuf:"varint,1,opt,name=item_id" json:"item_id,omitempty"`
	// 道具名字
	ItemName *string `protobuf:"bytes,2,opt,name=item_name" json:"item_name,omitempty"`
	// 道具大类
	ItemClass *int32 `protobuf:"varint,3,opt,name=item_class" json:"item_class,omitempty"`
	// 道具小类
	ItemType *int32 `protobuf:"varint,4,opt,name=item_type" json:"item_type,omitempty"`
	// 道具品质
	Quality *int32 `protobuf:"varint,5,opt,name=quality" json:"quality,omitempty"`
	// 叠加数量
	SuperposeLimit *int32 `protobuf:"varint,6,opt,name=superpose_limit" json:"superpose_limit,omitempty"`
	// 是否可以使用1:可使用, 0:不可使用
	IsUsable *int32 `protobuf:"varint,7,opt,name=is_usable" json:"is_usable,omitempty"`
	// 批量使用上限
	UseLimits *int32 `protobuf:"varint,8,opt,name=use_limits" json:"use_limits,omitempty"`
	// 道具参数映射
	Param *int32 `protobuf:"varint,9,opt,name=param" json:"param,omitempty"`
	// 是否可出售 1：可寄卖 0：不可寄卖
	IsSell *int32 `protobuf:"varint,10,opt,name=is_sell" json:"is_sell,omitempty"`
	// 出售价格
	SellPrice *ItemVaryConfig `protobuf:"bytes,11,opt,name=sell_price" json:"sell_price,omitempty"`
	// 是否限时道具 // 1:限时 0：不限时
	IsTimelimit *int32 `protobuf:"varint,12,opt,name=is_timelimit" json:"is_timelimit,omitempty"`
	// 道具消失时间
	LimitTime *string `protobuf:"bytes,13,opt,name=limit_time" json:"limit_time,omitempty"`
	// 是否自动使用
	AutoUse *int32 `protobuf:"varint,14,opt,name=auto_use" json:"auto_use,omitempty"`
	// 结果
	AutoCondition []*ItemVaryConfig `protobuf:"bytes,15,rep,name=auto_condition" json:"auto_condition,omitempty"`
	// 是否可以在gm后台使用(0:不能在后台使用 1：在后台使用)
	GmUse            *int32 `protobuf:"varint,16,opt,name=gm_use" json:"gm_use,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ItemBase) Reset()                    { *m = ItemBase{} }
func (m *ItemBase) String() string            { return proto.CompactTextString(m) }
func (*ItemBase) ProtoMessage()               {}
func (*ItemBase) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{5} }

func (m *ItemBase) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ItemBase) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

func (m *ItemBase) GetItemClass() int32 {
	if m != nil && m.ItemClass != nil {
		return *m.ItemClass
	}
	return 0
}

func (m *ItemBase) GetItemType() int32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *ItemBase) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *ItemBase) GetSuperposeLimit() int32 {
	if m != nil && m.SuperposeLimit != nil {
		return *m.SuperposeLimit
	}
	return 0
}

func (m *ItemBase) GetIsUsable() int32 {
	if m != nil && m.IsUsable != nil {
		return *m.IsUsable
	}
	return 0
}

func (m *ItemBase) GetUseLimits() int32 {
	if m != nil && m.UseLimits != nil {
		return *m.UseLimits
	}
	return 0
}

func (m *ItemBase) GetParam() int32 {
	if m != nil && m.Param != nil {
		return *m.Param
	}
	return 0
}

func (m *ItemBase) GetIsSell() int32 {
	if m != nil && m.IsSell != nil {
		return *m.IsSell
	}
	return 0
}

func (m *ItemBase) GetSellPrice() *ItemVaryConfig {
	if m != nil {
		return m.SellPrice
	}
	return nil
}

func (m *ItemBase) GetIsTimelimit() int32 {
	if m != nil && m.IsTimelimit != nil {
		return *m.IsTimelimit
	}
	return 0
}

func (m *ItemBase) GetLimitTime() string {
	if m != nil && m.LimitTime != nil {
		return *m.LimitTime
	}
	return ""
}

func (m *ItemBase) GetAutoUse() int32 {
	if m != nil && m.AutoUse != nil {
		return *m.AutoUse
	}
	return 0
}

func (m *ItemBase) GetAutoCondition() []*ItemVaryConfig {
	if m != nil {
		return m.AutoCondition
	}
	return nil
}

func (m *ItemBase) GetGmUse() int32 {
	if m != nil && m.GmUse != nil {
		return *m.GmUse
	}
	return 0
}

type ItemBaseConfig struct {
	Data             []*ItemBase `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ItemBaseConfig) Reset()                    { *m = ItemBaseConfig{} }
func (m *ItemBaseConfig) String() string            { return proto.CompactTextString(m) }
func (*ItemBaseConfig) ProtoMessage()               {}
func (*ItemBaseConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{6} }

func (m *ItemBaseConfig) GetData() []*ItemBase {
	if m != nil {
		return m.Data
	}
	return nil
}

// 碎片兑换球员配置
type ShardExchangePlayerCfg struct {
	// item param 关联id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 类型1：不使用交换球员，类型2：使用交换球员
	Type *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 消耗数量
	ConsumeNum *int32 `protobuf:"varint,3,opt,name=consume_num" json:"consume_num,omitempty"`
	// 掉落池id
	DropId           *int32 `protobuf:"varint,4,opt,name=drop_id" json:"drop_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShardExchangePlayerCfg) Reset()                    { *m = ShardExchangePlayerCfg{} }
func (m *ShardExchangePlayerCfg) String() string            { return proto.CompactTextString(m) }
func (*ShardExchangePlayerCfg) ProtoMessage()               {}
func (*ShardExchangePlayerCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{7} }

func (m *ShardExchangePlayerCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ShardExchangePlayerCfg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ShardExchangePlayerCfg) GetConsumeNum() int32 {
	if m != nil && m.ConsumeNum != nil {
		return *m.ConsumeNum
	}
	return 0
}

func (m *ShardExchangePlayerCfg) GetDropId() int32 {
	if m != nil && m.DropId != nil {
		return *m.DropId
	}
	return 0
}

// 开放功能时间表
type CycleTime struct {
	CycleId          *int32  `protobuf:"varint,1,opt,name=cycle_id" json:"cycle_id,omitempty"`
	StartDay         *string `protobuf:"bytes,2,opt,name=start_day" json:"start_day,omitempty"`
	StartTime        *int32  `protobuf:"varint,3,opt,name=start_time" json:"start_time,omitempty"`
	ContinueTime     *int32  `protobuf:"varint,4,opt,name=continue_time" json:"continue_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CycleTime) Reset()                    { *m = CycleTime{} }
func (m *CycleTime) String() string            { return proto.CompactTextString(m) }
func (*CycleTime) ProtoMessage()               {}
func (*CycleTime) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{8} }

func (m *CycleTime) GetCycleId() int32 {
	if m != nil && m.CycleId != nil {
		return *m.CycleId
	}
	return 0
}

func (m *CycleTime) GetStartDay() string {
	if m != nil && m.StartDay != nil {
		return *m.StartDay
	}
	return ""
}

func (m *CycleTime) GetStartTime() int32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CycleTime) GetContinueTime() int32 {
	if m != nil && m.ContinueTime != nil {
		return *m.ContinueTime
	}
	return 0
}

// 掉落ID表
type MultipeDrop struct {
	DropId           *int32                     `protobuf:"varint,1,opt,name=drop_id" json:"drop_id,omitempty"`
	MaxRandnum       *uint32                    `protobuf:"varint,2,opt,name=max_randnum" json:"max_randnum,omitempty"`
	DropPackage      []*MultipeDrop_DropPackage `protobuf:"bytes,3,rep,name=drop_package" json:"drop_package,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *MultipeDrop) Reset()                    { *m = MultipeDrop{} }
func (m *MultipeDrop) String() string            { return proto.CompactTextString(m) }
func (*MultipeDrop) ProtoMessage()               {}
func (*MultipeDrop) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{9} }

func (m *MultipeDrop) GetDropId() int32 {
	if m != nil && m.DropId != nil {
		return *m.DropId
	}
	return 0
}

func (m *MultipeDrop) GetMaxRandnum() uint32 {
	if m != nil && m.MaxRandnum != nil {
		return *m.MaxRandnum
	}
	return 0
}

func (m *MultipeDrop) GetDropPackage() []*MultipeDrop_DropPackage {
	if m != nil {
		return m.DropPackage
	}
	return nil
}

type MultipeDrop_DropPackage struct {
	CommodityType    *int32 `protobuf:"varint,1,opt,name=commodity_type" json:"commodity_type,omitempty"`
	CommodityId      *int32 `protobuf:"varint,2,opt,name=commodity_id" json:"commodity_id,omitempty"`
	CommodityNumber  *int32 `protobuf:"varint,3,opt,name=commodity_number" json:"commodity_number,omitempty"`
	Weight           *int32 `protobuf:"varint,6,opt,name=weight" json:"weight,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MultipeDrop_DropPackage) Reset()                    { *m = MultipeDrop_DropPackage{} }
func (m *MultipeDrop_DropPackage) String() string            { return proto.CompactTextString(m) }
func (*MultipeDrop_DropPackage) ProtoMessage()               {}
func (*MultipeDrop_DropPackage) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{9, 0} }

func (m *MultipeDrop_DropPackage) GetCommodityType() int32 {
	if m != nil && m.CommodityType != nil {
		return *m.CommodityType
	}
	return 0
}

func (m *MultipeDrop_DropPackage) GetCommodityId() int32 {
	if m != nil && m.CommodityId != nil {
		return *m.CommodityId
	}
	return 0
}

func (m *MultipeDrop_DropPackage) GetCommodityNumber() int32 {
	if m != nil && m.CommodityNumber != nil {
		return *m.CommodityNumber
	}
	return 0
}

func (m *MultipeDrop_DropPackage) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

// 改名消耗配置
type ChangeNameExpend struct {
	ModifyCount      *int32            `protobuf:"varint,1,opt,name=modify_count" json:"modify_count,omitempty"`
	ExpendMoney      []*ItemVaryConfig `protobuf:"bytes,2,rep,name=expend_money" json:"expend_money,omitempty"`
	OtherSpend       *ItemVaryConfig   `protobuf:"bytes,3,opt,name=other_spend" json:"other_spend,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ChangeNameExpend) Reset()                    { *m = ChangeNameExpend{} }
func (m *ChangeNameExpend) String() string            { return proto.CompactTextString(m) }
func (*ChangeNameExpend) ProtoMessage()               {}
func (*ChangeNameExpend) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{10} }

func (m *ChangeNameExpend) GetModifyCount() int32 {
	if m != nil && m.ModifyCount != nil {
		return *m.ModifyCount
	}
	return 0
}

func (m *ChangeNameExpend) GetExpendMoney() []*ItemVaryConfig {
	if m != nil {
		return m.ExpendMoney
	}
	return nil
}

func (m *ChangeNameExpend) GetOtherSpend() *ItemVaryConfig {
	if m != nil {
		return m.OtherSpend
	}
	return nil
}

// 球员基础配置
type PlayerBaseAttConf struct {
	// 球员ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员名称
	Showname *string `protobuf:"bytes,2,opt,name=showname" json:"showname,omitempty"`
	// 稀有度
	Rarity *int32 `protobuf:"varint,3,opt,name=rarity" json:"rarity,omitempty"`
	// 球员工资
	Salary *int32 `protobuf:"varint,4,opt,name=salary" json:"salary,omitempty"`
	// 球员首发位置
	Firstplace *int32 `protobuf:"varint,5,opt,name=firstplace" json:"firstplace,omitempty"`
	// 等级组
	LvGroup *int32 `protobuf:"varint,6,opt,name=lv_group" json:"lv_group,omitempty"`
	// 星级组
	StarGroup *int32 `protobuf:"varint,7,opt,name=star_group" json:"star_group,omitempty"`
	// 球员头像
	PlayerAvatar *int32 `protobuf:"varint,8,opt,name=player_avatar" json:"player_avatar,omitempty"`
	// 球员是否开放 1开放
	IsOpen *int32 `protobuf:"varint,12,opt,name=is_open" json:"is_open,omitempty"`
	// 球员碎片道具ID
	PlayerPieceItem *int32 `protobuf:"varint,13,opt,name=player_piece_item" json:"player_piece_item,omitempty"`
	// 合成所需碎片数量
	PlayerPieceCompound *int32 `protobuf:"varint,14,opt,name=player_piece_compound" json:"player_piece_compound,omitempty"`
	// 球员所属队伍
	PlayerTeam *int32 `protobuf:"varint,15,opt,name=player_team" json:"player_team,omitempty"`
	// 球员身高
	Height *int32 `protobuf:"varint,16,opt,name=height" json:"height,omitempty"`
	// 羁绊
	PlayerFetter []int32 `protobuf:"varint,19,rep,name=player_fetter" json:"player_fetter,omitempty"`
	// 进阶槽位组
	SlotGroup *int32 `protobuf:"varint,20,opt,name=slot_group" json:"slot_group,omitempty"`
	// 升阶天赋组
	TalentGroup *int32 `protobuf:"varint,21,opt,name=talent_group" json:"talent_group,omitempty"`
	// 称号
	Title []int32 `protobuf:"varint,22,rep,name=title" json:"title,omitempty"`
	// 图鉴天赋组
	RosterGroup *int32 `protobuf:"varint,23,opt,name=roster_group" json:"roster_group,omitempty"`
	// 专属动作触发id （-1：无专属时刻 !=1 有专属时刻：且为专属时刻触发id）
	ExclusiveTrig *int32 `protobuf:"varint,24,opt,name=exclusive_trig" json:"exclusive_trig,omitempty"`
	// 专属动作激活（1:小星级激活, 2 等级激活）
	ExclusiveActivate []*ItemVaryConfig `protobuf:"bytes,25,rep,name=exclusive_activate" json:"exclusive_activate,omitempty"`
	// espn
	EspnId *int32 `protobuf:"varint,26,opt,name=espn_id" json:"espn_id,omitempty"`
	// 球员合同id(id==0 不可交易)
	PlayerContractItem *int32 `protobuf:"varint,27,opt,name=player_contract_item" json:"player_contract_item,omitempty"`
	// 球星组合id
	StarCompose *int32 `protobuf:"varint,28,opt,name=star_compose" json:"star_compose,omitempty"`
	// 球员绰号
	NickId *int32 `protobuf:"varint,29,opt,name=nick_id" json:"nick_id,omitempty"`
	// 组合
	Combine []int32 `protobuf:"varint,30,rep,name=combine" json:"combine,omitempty"`
	// 标签
	PlayerSign []int32 `protobuf:"varint,32,rep,name=player_sign" json:"player_sign,omitempty"`
	// 球员名称文本ID
	ShownameT *int32 `protobuf:"varint,33,opt,name=showname_t" json:"showname_t,omitempty"`
	// 球员新形象:-1=无新形象
	NewImage         *int32 `protobuf:"varint,34,opt,name=new_image" json:"new_image,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerBaseAttConf) Reset()                    { *m = PlayerBaseAttConf{} }
func (m *PlayerBaseAttConf) String() string            { return proto.CompactTextString(m) }
func (*PlayerBaseAttConf) ProtoMessage()               {}
func (*PlayerBaseAttConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{11} }

func (m *PlayerBaseAttConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerBaseAttConf) GetShowname() string {
	if m != nil && m.Showname != nil {
		return *m.Showname
	}
	return ""
}

func (m *PlayerBaseAttConf) GetRarity() int32 {
	if m != nil && m.Rarity != nil {
		return *m.Rarity
	}
	return 0
}

func (m *PlayerBaseAttConf) GetSalary() int32 {
	if m != nil && m.Salary != nil {
		return *m.Salary
	}
	return 0
}

func (m *PlayerBaseAttConf) GetFirstplace() int32 {
	if m != nil && m.Firstplace != nil {
		return *m.Firstplace
	}
	return 0
}

func (m *PlayerBaseAttConf) GetLvGroup() int32 {
	if m != nil && m.LvGroup != nil {
		return *m.LvGroup
	}
	return 0
}

func (m *PlayerBaseAttConf) GetStarGroup() int32 {
	if m != nil && m.StarGroup != nil {
		return *m.StarGroup
	}
	return 0
}

func (m *PlayerBaseAttConf) GetPlayerAvatar() int32 {
	if m != nil && m.PlayerAvatar != nil {
		return *m.PlayerAvatar
	}
	return 0
}

func (m *PlayerBaseAttConf) GetIsOpen() int32 {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return 0
}

func (m *PlayerBaseAttConf) GetPlayerPieceItem() int32 {
	if m != nil && m.PlayerPieceItem != nil {
		return *m.PlayerPieceItem
	}
	return 0
}

func (m *PlayerBaseAttConf) GetPlayerPieceCompound() int32 {
	if m != nil && m.PlayerPieceCompound != nil {
		return *m.PlayerPieceCompound
	}
	return 0
}

func (m *PlayerBaseAttConf) GetPlayerTeam() int32 {
	if m != nil && m.PlayerTeam != nil {
		return *m.PlayerTeam
	}
	return 0
}

func (m *PlayerBaseAttConf) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *PlayerBaseAttConf) GetPlayerFetter() []int32 {
	if m != nil {
		return m.PlayerFetter
	}
	return nil
}

func (m *PlayerBaseAttConf) GetSlotGroup() int32 {
	if m != nil && m.SlotGroup != nil {
		return *m.SlotGroup
	}
	return 0
}

func (m *PlayerBaseAttConf) GetTalentGroup() int32 {
	if m != nil && m.TalentGroup != nil {
		return *m.TalentGroup
	}
	return 0
}

func (m *PlayerBaseAttConf) GetTitle() []int32 {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *PlayerBaseAttConf) GetRosterGroup() int32 {
	if m != nil && m.RosterGroup != nil {
		return *m.RosterGroup
	}
	return 0
}

func (m *PlayerBaseAttConf) GetExclusiveTrig() int32 {
	if m != nil && m.ExclusiveTrig != nil {
		return *m.ExclusiveTrig
	}
	return 0
}

func (m *PlayerBaseAttConf) GetExclusiveActivate() []*ItemVaryConfig {
	if m != nil {
		return m.ExclusiveActivate
	}
	return nil
}

func (m *PlayerBaseAttConf) GetEspnId() int32 {
	if m != nil && m.EspnId != nil {
		return *m.EspnId
	}
	return 0
}

func (m *PlayerBaseAttConf) GetPlayerContractItem() int32 {
	if m != nil && m.PlayerContractItem != nil {
		return *m.PlayerContractItem
	}
	return 0
}

func (m *PlayerBaseAttConf) GetStarCompose() int32 {
	if m != nil && m.StarCompose != nil {
		return *m.StarCompose
	}
	return 0
}

func (m *PlayerBaseAttConf) GetNickId() int32 {
	if m != nil && m.NickId != nil {
		return *m.NickId
	}
	return 0
}

func (m *PlayerBaseAttConf) GetCombine() []int32 {
	if m != nil {
		return m.Combine
	}
	return nil
}

func (m *PlayerBaseAttConf) GetPlayerSign() []int32 {
	if m != nil {
		return m.PlayerSign
	}
	return nil
}

func (m *PlayerBaseAttConf) GetShownameT() int32 {
	if m != nil && m.ShownameT != nil {
		return *m.ShownameT
	}
	return 0
}

func (m *PlayerBaseAttConf) GetNewImage() int32 {
	if m != nil && m.NewImage != nil {
		return *m.NewImage
	}
	return 0
}

// new_image.csv
type NewImageCfg struct {
	Id       *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BallerId *int32 `protobuf:"varint,2,opt,name=baller_id" json:"baller_id,omitempty"`
	// 条件 2_36: 类型2：小星数
	Condition        *TypeValueConfig `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *NewImageCfg) Reset()                    { *m = NewImageCfg{} }
func (m *NewImageCfg) String() string            { return proto.CompactTextString(m) }
func (*NewImageCfg) ProtoMessage()               {}
func (*NewImageCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{12} }

func (m *NewImageCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NewImageCfg) GetBallerId() int32 {
	if m != nil && m.BallerId != nil {
		return *m.BallerId
	}
	return 0
}

func (m *NewImageCfg) GetCondition() *TypeValueConfig {
	if m != nil {
		return m.Condition
	}
	return nil
}

// 球星组合配置
type BallerComposeCfg struct {
	// 组合ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 激活类型
	ActivateType *int32 `protobuf:"varint,2,opt,name=ActivateType" json:"ActivateType,omitempty"`
	// 激活参数
	// 球星组合配置
	ActivateParam []*TypeValueConfig `protobuf:"bytes,3,rep,name=ActivateParam" json:"ActivateParam,omitempty"`
	// 最低需求数量
	MinNum *int32 `protobuf:"varint,4,opt,name=MinNum" json:"MinNum,omitempty"`
	// 组合效果
	ComposeEffect    []*ItemVaryConfig `protobuf:"bytes,5,rep,name=ComposeEffect" json:"ComposeEffect,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BallerComposeCfg) Reset()                    { *m = BallerComposeCfg{} }
func (m *BallerComposeCfg) String() string            { return proto.CompactTextString(m) }
func (*BallerComposeCfg) ProtoMessage()               {}
func (*BallerComposeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{13} }

func (m *BallerComposeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BallerComposeCfg) GetActivateType() int32 {
	if m != nil && m.ActivateType != nil {
		return *m.ActivateType
	}
	return 0
}

func (m *BallerComposeCfg) GetActivateParam() []*TypeValueConfig {
	if m != nil {
		return m.ActivateParam
	}
	return nil
}

func (m *BallerComposeCfg) GetMinNum() int32 {
	if m != nil && m.MinNum != nil {
		return *m.MinNum
	}
	return 0
}

func (m *BallerComposeCfg) GetComposeEffect() []*ItemVaryConfig {
	if m != nil {
		return m.ComposeEffect
	}
	return nil
}

// 球员身价系数表
type PlayerWorthCoefficientCfg struct {
	Id                *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Min               *int32 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
	Fg                *int32 `protobuf:"varint,3,opt,name=fg" json:"fg,omitempty"`
	X3Pt              *int32 `protobuf:"varint,4,opt,name=x3Pt" json:"x3Pt,omitempty"`
	Ft                *int32 `protobuf:"varint,5,opt,name=ft" json:"ft,omitempty"`
	Reb               *int32 `protobuf:"varint,6,opt,name=reb" json:"reb,omitempty"`
	Ast               *int32 `protobuf:"varint,7,opt,name=ast" json:"ast,omitempty"`
	Blk               *int32 `protobuf:"varint,8,opt,name=blk" json:"blk,omitempty"`
	Stl               *int32 `protobuf:"varint,9,opt,name=stl" json:"stl,omitempty"`
	Pf                *int32 `protobuf:"varint,10,opt,name=pf" json:"pf,omitempty"`
	To                *int32 `protobuf:"varint,11,opt,name=to" json:"to,omitempty"`
	Pts               *int32 `protobuf:"varint,12,opt,name=pts" json:"pts,omitempty"`
	Average           *int32 `protobuf:"varint,13,opt,name=average" json:"average,omitempty"`
	AverageProportion *int32 `protobuf:"varint,14,opt,name=averageProportion" json:"averageProportion,omitempty"`
	LatelyProportion  *int32 `protobuf:"varint,15,opt,name=latelyProportion" json:"latelyProportion,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *PlayerWorthCoefficientCfg) Reset()                    { *m = PlayerWorthCoefficientCfg{} }
func (m *PlayerWorthCoefficientCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerWorthCoefficientCfg) ProtoMessage()               {}
func (*PlayerWorthCoefficientCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{14} }

func (m *PlayerWorthCoefficientCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetMin() int32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetFg() int32 {
	if m != nil && m.Fg != nil {
		return *m.Fg
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetX3Pt() int32 {
	if m != nil && m.X3Pt != nil {
		return *m.X3Pt
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetFt() int32 {
	if m != nil && m.Ft != nil {
		return *m.Ft
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetReb() int32 {
	if m != nil && m.Reb != nil {
		return *m.Reb
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetAst() int32 {
	if m != nil && m.Ast != nil {
		return *m.Ast
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetBlk() int32 {
	if m != nil && m.Blk != nil {
		return *m.Blk
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetStl() int32 {
	if m != nil && m.Stl != nil {
		return *m.Stl
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetPf() int32 {
	if m != nil && m.Pf != nil {
		return *m.Pf
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetTo() int32 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetPts() int32 {
	if m != nil && m.Pts != nil {
		return *m.Pts
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetAverage() int32 {
	if m != nil && m.Average != nil {
		return *m.Average
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetAverageProportion() int32 {
	if m != nil && m.AverageProportion != nil {
		return *m.AverageProportion
	}
	return 0
}

func (m *PlayerWorthCoefficientCfg) GetLatelyProportion() int32 {
	if m != nil && m.LatelyProportion != nil {
		return *m.LatelyProportion
	}
	return 0
}

// 球员排名身价配置
type PlayerWorthRankingListCfg struct {
	// 排名
	Ranking *int32 `protobuf:"varint,1,opt,name=ranking" json:"ranking,omitempty"`
	// 市场价
	Value *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	// buff
	Buff             *int32 `protobuf:"varint,3,opt,name=buff" json:"buff,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerWorthRankingListCfg) Reset()                    { *m = PlayerWorthRankingListCfg{} }
func (m *PlayerWorthRankingListCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerWorthRankingListCfg) ProtoMessage()               {}
func (*PlayerWorthRankingListCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{15} }

func (m *PlayerWorthRankingListCfg) GetRanking() int32 {
	if m != nil && m.Ranking != nil {
		return *m.Ranking
	}
	return 0
}

func (m *PlayerWorthRankingListCfg) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *PlayerWorthRankingListCfg) GetBuff() int32 {
	if m != nil && m.Buff != nil {
		return *m.Buff
	}
	return 0
}

// 球员数据
type DataStatisticsCfg struct {
	// 球员id
	PlayerId *int32 `protobuf:"varint,1,opt,name=player_id" json:"player_id,omitempty"`
	// 篮板
	Reb *string `protobuf:"bytes,2,opt,name=reb" json:"reb,omitempty"`
	// 助攻
	Ast *string `protobuf:"bytes,3,opt,name=ast" json:"ast,omitempty"`
	// 抢断
	Stl *string `protobuf:"bytes,4,opt,name=stl" json:"stl,omitempty"`
	// 盖帽
	Blk *string `protobuf:"bytes,5,opt,name=blk" json:"blk,omitempty"`
	// 失误
	Pf *string `protobuf:"bytes,6,opt,name=pf" json:"pf,omitempty"`
	// 犯规
	To *string `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`
	// 得分
	Pts              *string `protobuf:"bytes,8,opt,name=pts" json:"pts,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DataStatisticsCfg) Reset()                    { *m = DataStatisticsCfg{} }
func (m *DataStatisticsCfg) String() string            { return proto.CompactTextString(m) }
func (*DataStatisticsCfg) ProtoMessage()               {}
func (*DataStatisticsCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{16} }

func (m *DataStatisticsCfg) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *DataStatisticsCfg) GetReb() string {
	if m != nil && m.Reb != nil {
		return *m.Reb
	}
	return ""
}

func (m *DataStatisticsCfg) GetAst() string {
	if m != nil && m.Ast != nil {
		return *m.Ast
	}
	return ""
}

func (m *DataStatisticsCfg) GetStl() string {
	if m != nil && m.Stl != nil {
		return *m.Stl
	}
	return ""
}

func (m *DataStatisticsCfg) GetBlk() string {
	if m != nil && m.Blk != nil {
		return *m.Blk
	}
	return ""
}

func (m *DataStatisticsCfg) GetPf() string {
	if m != nil && m.Pf != nil {
		return *m.Pf
	}
	return ""
}

func (m *DataStatisticsCfg) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *DataStatisticsCfg) GetPts() string {
	if m != nil && m.Pts != nil {
		return *m.Pts
	}
	return ""
}

// 交易行配置1 次数限制、品质限制、等级限制等 Trading_Center_currency.csv
type TradingCenterCurrencyCfg struct {
	// 索引id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 等级下限
	Level1 *int32 `protobuf:"varint,2,opt,name=level1" json:"level1,omitempty"`
	// 等级上限
	Level2 *int32 `protobuf:"varint,3,opt,name=level2" json:"level2,omitempty"`
	// 可交易品质列表
	Quality []int32 `protobuf:"varint,4,rep,name=quality" json:"quality,omitempty"`
	// 每周代币交易的上架次数
	PlayerSellNum *int32 `protobuf:"varint,5,opt,name=player_sell_num" json:"player_sell_num,omitempty"`
	// 每周代币交易的购买次数
	PlayerPurchaseNum *int32 `protobuf:"varint,6,opt,name=player_purchase_num" json:"player_purchase_num,omitempty"`
	// 球员自动下架时间（秒）
	PlayerDownTime *int32 `protobuf:"varint,7,opt,name=player_down_time" json:"player_down_time,omitempty"`
	// 每周球员交换的次数
	PlayerExchangeNum *int32 `protobuf:"varint,8,opt,name=player_exchange_num" json:"player_exchange_num,omitempty"`
	// 球员交换时限制市价差(百分比)
	ValueLimit       *int32 `protobuf:"varint,9,opt,name=Value_limit" json:"Value_limit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TradingCenterCurrencyCfg) Reset()                    { *m = TradingCenterCurrencyCfg{} }
func (m *TradingCenterCurrencyCfg) String() string            { return proto.CompactTextString(m) }
func (*TradingCenterCurrencyCfg) ProtoMessage()               {}
func (*TradingCenterCurrencyCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{17} }

func (m *TradingCenterCurrencyCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetLevel1() int32 {
	if m != nil && m.Level1 != nil {
		return *m.Level1
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetLevel2() int32 {
	if m != nil && m.Level2 != nil {
		return *m.Level2
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetQuality() []int32 {
	if m != nil {
		return m.Quality
	}
	return nil
}

func (m *TradingCenterCurrencyCfg) GetPlayerSellNum() int32 {
	if m != nil && m.PlayerSellNum != nil {
		return *m.PlayerSellNum
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetPlayerPurchaseNum() int32 {
	if m != nil && m.PlayerPurchaseNum != nil {
		return *m.PlayerPurchaseNum
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetPlayerDownTime() int32 {
	if m != nil && m.PlayerDownTime != nil {
		return *m.PlayerDownTime
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetPlayerExchangeNum() int32 {
	if m != nil && m.PlayerExchangeNum != nil {
		return *m.PlayerExchangeNum
	}
	return 0
}

func (m *TradingCenterCurrencyCfg) GetValueLimit() int32 {
	if m != nil && m.ValueLimit != nil {
		return *m.ValueLimit
	}
	return 0
}

// 交易行配置2 代币交易时的价格区间 Trading_Center_Guidance.csv
type TradingCenterGuidanceCfg struct {
	// 索引id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员品质
	Quality *int32 `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	// 代币出售价格下限
	Sell1 *int32 `protobuf:"varint,3,opt,name=sell1" json:"sell1,omitempty"`
	// 代币出售价格上限
	Sell2            *int32 `protobuf:"varint,4,opt,name=sell2" json:"sell2,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TradingCenterGuidanceCfg) Reset()                    { *m = TradingCenterGuidanceCfg{} }
func (m *TradingCenterGuidanceCfg) String() string            { return proto.CompactTextString(m) }
func (*TradingCenterGuidanceCfg) ProtoMessage()               {}
func (*TradingCenterGuidanceCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{18} }

func (m *TradingCenterGuidanceCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TradingCenterGuidanceCfg) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *TradingCenterGuidanceCfg) GetSell1() int32 {
	if m != nil && m.Sell1 != nil {
		return *m.Sell1
	}
	return 0
}

func (m *TradingCenterGuidanceCfg) GetSell2() int32 {
	if m != nil && m.Sell2 != nil {
		return *m.Sell2
	}
	return 0
}

// 宝箱掉落集合配置
type MultipleDropAggregate struct {
	DropAggregateId  *int32            `protobuf:"varint,1,opt,name=drop_aggregate_id" json:"drop_aggregate_id,omitempty"`
	DropAggregate    []int32           `protobuf:"varint,2,rep,name=drop_aggregate" json:"drop_aggregate,omitempty"`
	ExDrop           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=ex_drop" json:"ex_drop,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MultipleDropAggregate) Reset()                    { *m = MultipleDropAggregate{} }
func (m *MultipleDropAggregate) String() string            { return proto.CompactTextString(m) }
func (*MultipleDropAggregate) ProtoMessage()               {}
func (*MultipleDropAggregate) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{19} }

func (m *MultipleDropAggregate) GetDropAggregateId() int32 {
	if m != nil && m.DropAggregateId != nil {
		return *m.DropAggregateId
	}
	return 0
}

func (m *MultipleDropAggregate) GetDropAggregate() []int32 {
	if m != nil {
		return m.DropAggregate
	}
	return nil
}

func (m *MultipleDropAggregate) GetExDrop() []*ItemVaryConfig {
	if m != nil {
		return m.ExDrop
	}
	return nil
}

// 创建角色给予的道具
type CreateRoleAddItem struct {
	Id               *int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Temp             *ItemVaryConfig `protobuf:"bytes,2,opt,name=temp" json:"temp,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CreateRoleAddItem) Reset()                    { *m = CreateRoleAddItem{} }
func (m *CreateRoleAddItem) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleAddItem) ProtoMessage()               {}
func (*CreateRoleAddItem) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{20} }

func (m *CreateRoleAddItem) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CreateRoleAddItem) GetTemp() *ItemVaryConfig {
	if m != nil {
		return m.Temp
	}
	return nil
}

// 球员属性值
type PlayerAttrValue struct {
	ScopeType        *int32 `protobuf:"varint,1,opt,name=scope_type" json:"scope_type,omitempty"`
	ScopeValue       *int32 `protobuf:"varint,2,opt,name=scope_value" json:"scope_value,omitempty"`
	MainId           *int32 `protobuf:"varint,3,opt,name=main_id" json:"main_id,omitempty"`
	DeputyType       *int32 `protobuf:"varint,4,opt,name=deputy_type" json:"deputy_type,omitempty"`
	AttrValue        *int32 `protobuf:"varint,5,opt,name=attr_value" json:"attr_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerAttrValue) Reset()                    { *m = PlayerAttrValue{} }
func (m *PlayerAttrValue) String() string            { return proto.CompactTextString(m) }
func (*PlayerAttrValue) ProtoMessage()               {}
func (*PlayerAttrValue) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{21} }

func (m *PlayerAttrValue) GetScopeType() int32 {
	if m != nil && m.ScopeType != nil {
		return *m.ScopeType
	}
	return 0
}

func (m *PlayerAttrValue) GetScopeValue() int32 {
	if m != nil && m.ScopeValue != nil {
		return *m.ScopeValue
	}
	return 0
}

func (m *PlayerAttrValue) GetMainId() int32 {
	if m != nil && m.MainId != nil {
		return *m.MainId
	}
	return 0
}

func (m *PlayerAttrValue) GetDeputyType() int32 {
	if m != nil && m.DeputyType != nil {
		return *m.DeputyType
	}
	return 0
}

func (m *PlayerAttrValue) GetAttrValue() int32 {
	if m != nil && m.AttrValue != nil {
		return *m.AttrValue
	}
	return 0
}

// 球员buff值
type PlayerBuffValue struct {
	ScopeType        *int32 `protobuf:"varint,1,opt,name=scope_type" json:"scope_type,omitempty"`
	ScopeValue       *int32 `protobuf:"varint,2,opt,name=scope_value" json:"scope_value,omitempty"`
	BuffId           *int32 `protobuf:"varint,3,opt,name=buff_id" json:"buff_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerBuffValue) Reset()                    { *m = PlayerBuffValue{} }
func (m *PlayerBuffValue) String() string            { return proto.CompactTextString(m) }
func (*PlayerBuffValue) ProtoMessage()               {}
func (*PlayerBuffValue) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{22} }

func (m *PlayerBuffValue) GetScopeType() int32 {
	if m != nil && m.ScopeType != nil {
		return *m.ScopeType
	}
	return 0
}

func (m *PlayerBuffValue) GetScopeValue() int32 {
	if m != nil && m.ScopeValue != nil {
		return *m.ScopeValue
	}
	return 0
}

func (m *PlayerBuffValue) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

// 球员升级配置
type PlayerLv struct {
	Sid              *int32             `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
	LvGroup          *int32             `protobuf:"varint,2,opt,name=lv_group" json:"lv_group,omitempty"`
	Level            *int32             `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Exp              *int32             `protobuf:"varint,4,opt,name=exp" json:"exp,omitempty"`
	MaxLv            *uint32            `protobuf:"varint,5,opt,name=max_lv" json:"max_lv,omitempty"`
	FightAttr        []*PlayerAttrValue `protobuf:"bytes,6,rep,name=fight_attr" json:"fight_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerLv) Reset()                    { *m = PlayerLv{} }
func (m *PlayerLv) String() string            { return proto.CompactTextString(m) }
func (*PlayerLv) ProtoMessage()               {}
func (*PlayerLv) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{23} }

func (m *PlayerLv) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

func (m *PlayerLv) GetLvGroup() int32 {
	if m != nil && m.LvGroup != nil {
		return *m.LvGroup
	}
	return 0
}

func (m *PlayerLv) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *PlayerLv) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *PlayerLv) GetMaxLv() uint32 {
	if m != nil && m.MaxLv != nil {
		return *m.MaxLv
	}
	return 0
}

func (m *PlayerLv) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

// 球员升星配置
type PlayerStar struct {
	Sid              *int32             `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
	StarGroup        *int32             `protobuf:"varint,2,opt,name=star_group" json:"star_group,omitempty"`
	StarLevel        *int32             `protobuf:"varint,5,opt,name=star_level" json:"star_level,omitempty"`
	StarLv           *int32             `protobuf:"varint,6,opt,name=star_lv" json:"star_lv,omitempty"`
	PieceNum         *int32             `protobuf:"varint,7,opt,name=piece_num" json:"piece_num,omitempty"`
	MaxStar          *int32             `protobuf:"varint,9,opt,name=max_star" json:"max_star,omitempty"`
	FightAttr        []*PlayerAttrValue `protobuf:"bytes,11,rep,name=fight_attr" json:"fight_attr,omitempty"`
	SkillStar        []*TypeValueConfig `protobuf:"bytes,13,rep,name=skill_star" json:"skill_star,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerStar) Reset()                    { *m = PlayerStar{} }
func (m *PlayerStar) String() string            { return proto.CompactTextString(m) }
func (*PlayerStar) ProtoMessage()               {}
func (*PlayerStar) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{24} }

func (m *PlayerStar) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

func (m *PlayerStar) GetStarGroup() int32 {
	if m != nil && m.StarGroup != nil {
		return *m.StarGroup
	}
	return 0
}

func (m *PlayerStar) GetStarLevel() int32 {
	if m != nil && m.StarLevel != nil {
		return *m.StarLevel
	}
	return 0
}

func (m *PlayerStar) GetStarLv() int32 {
	if m != nil && m.StarLv != nil {
		return *m.StarLv
	}
	return 0
}

func (m *PlayerStar) GetPieceNum() int32 {
	if m != nil && m.PieceNum != nil {
		return *m.PieceNum
	}
	return 0
}

func (m *PlayerStar) GetMaxStar() int32 {
	if m != nil && m.MaxStar != nil {
		return *m.MaxStar
	}
	return 0
}

func (m *PlayerStar) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

func (m *PlayerStar) GetSkillStar() []*TypeValueConfig {
	if m != nil {
		return m.SkillStar
	}
	return nil
}

// 球员绰号配置
type NickNameCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 绰号名称
	NickName *string `protobuf:"bytes,2,opt,name=nick_name" json:"nick_name,omitempty"`
	// 激活消耗
	Consume []*ItemVaryConfig `protobuf:"bytes,3,rep,name=consume" json:"consume,omitempty"`
	// 战斗属性
	FightAttr        []*PlayerAttrValue `protobuf:"bytes,4,rep,name=fight_attr" json:"fight_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *NickNameCfg) Reset()                    { *m = NickNameCfg{} }
func (m *NickNameCfg) String() string            { return proto.CompactTextString(m) }
func (*NickNameCfg) ProtoMessage()               {}
func (*NickNameCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{25} }

func (m *NickNameCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NickNameCfg) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *NickNameCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *NickNameCfg) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

// 联盟基本配置
type AllianceBase struct {
	AllianceLv       *int32             `protobuf:"varint,1,opt,name=alliance_lv" json:"alliance_lv,omitempty"`
	UpSpend          *int32             `protobuf:"varint,2,opt,name=up_spend" json:"up_spend,omitempty"`
	PositionNumber   []*TypeValueConfig `protobuf:"bytes,3,rep,name=position_number" json:"position_number,omitempty"`
	AllianceNumber   *int32             `protobuf:"varint,4,opt,name=alliance_number" json:"alliance_number,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *AllianceBase) Reset()                    { *m = AllianceBase{} }
func (m *AllianceBase) String() string            { return proto.CompactTextString(m) }
func (*AllianceBase) ProtoMessage()               {}
func (*AllianceBase) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{26} }

func (m *AllianceBase) GetAllianceLv() int32 {
	if m != nil && m.AllianceLv != nil {
		return *m.AllianceLv
	}
	return 0
}

func (m *AllianceBase) GetUpSpend() int32 {
	if m != nil && m.UpSpend != nil {
		return *m.UpSpend
	}
	return 0
}

func (m *AllianceBase) GetPositionNumber() []*TypeValueConfig {
	if m != nil {
		return m.PositionNumber
	}
	return nil
}

func (m *AllianceBase) GetAllianceNumber() int32 {
	if m != nil && m.AllianceNumber != nil {
		return *m.AllianceNumber
	}
	return 0
}

// 联盟权限功能配置
type AllianceJob struct {
	PositionId       *int32  `protobuf:"varint,1,opt,name=position_id" json:"position_id,omitempty"`
	PositionName     *string `protobuf:"bytes,2,opt,name=position_name" json:"position_name,omitempty"`
	AuthorityId      []int32 `protobuf:"varint,3,rep,name=authority_id" json:"authority_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AllianceJob) Reset()                    { *m = AllianceJob{} }
func (m *AllianceJob) String() string            { return proto.CompactTextString(m) }
func (*AllianceJob) ProtoMessage()               {}
func (*AllianceJob) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{27} }

func (m *AllianceJob) GetPositionId() int32 {
	if m != nil && m.PositionId != nil {
		return *m.PositionId
	}
	return 0
}

func (m *AllianceJob) GetPositionName() string {
	if m != nil && m.PositionName != nil {
		return *m.PositionName
	}
	return ""
}

func (m *AllianceJob) GetAuthorityId() []int32 {
	if m != nil {
		return m.AuthorityId
	}
	return nil
}

// 球员成长属性
type PlayerGrowAttr struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FightAttr        []*PlayerAttrValue `protobuf:"bytes,26,rep,name=fight_attr" json:"fight_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerGrowAttr) Reset()                    { *m = PlayerGrowAttr{} }
func (m *PlayerGrowAttr) String() string            { return proto.CompactTextString(m) }
func (*PlayerGrowAttr) ProtoMessage()               {}
func (*PlayerGrowAttr) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{28} }

func (m *PlayerGrowAttr) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerGrowAttr) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

// 创建人选配置
type CreatePlayer struct {
	Playersid              *int32             `protobuf:"varint,1,opt,name=playersid" json:"playersid,omitempty"`
	Place                  *int32             `protobuf:"varint,2,opt,name=place" json:"place,omitempty"`
	NonCorePlayers         []*TypeValueConfig `protobuf:"bytes,3,rep,name=non_core_players" json:"non_core_players,omitempty"`
	NewplayerDropAggregate *int32             `protobuf:"varint,5,opt,name=newplayer_drop_aggregate" json:"newplayer_drop_aggregate,omitempty"`
	CardbagId              *int32             `protobuf:"varint,6,opt,name=cardbag_id" json:"cardbag_id,omitempty"`
	CourseCardbagid        *int32             `protobuf:"varint,7,opt,name=course_cardbagid" json:"course_cardbagid,omitempty"`
	XXX_unrecognized       []byte             `json:"-"`
}

func (m *CreatePlayer) Reset()                    { *m = CreatePlayer{} }
func (m *CreatePlayer) String() string            { return proto.CompactTextString(m) }
func (*CreatePlayer) ProtoMessage()               {}
func (*CreatePlayer) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{29} }

func (m *CreatePlayer) GetPlayersid() int32 {
	if m != nil && m.Playersid != nil {
		return *m.Playersid
	}
	return 0
}

func (m *CreatePlayer) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

func (m *CreatePlayer) GetNonCorePlayers() []*TypeValueConfig {
	if m != nil {
		return m.NonCorePlayers
	}
	return nil
}

func (m *CreatePlayer) GetNewplayerDropAggregate() int32 {
	if m != nil && m.NewplayerDropAggregate != nil {
		return *m.NewplayerDropAggregate
	}
	return 0
}

func (m *CreatePlayer) GetCardbagId() int32 {
	if m != nil && m.CardbagId != nil {
		return *m.CardbagId
	}
	return 0
}

func (m *CreatePlayer) GetCourseCardbagid() int32 {
	if m != nil && m.CourseCardbagid != nil {
		return *m.CourseCardbagid
	}
	return 0
}

// 队伍配置
type CreateTeam struct {
	Teamid           *int32 `protobuf:"varint,1,opt,name=teamid" json:"teamid,omitempty"`
	TeamDefaultId    *int32 `protobuf:"varint,2,opt,name=team_default_id" json:"team_default_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateTeam) Reset()                    { *m = CreateTeam{} }
func (m *CreateTeam) String() string            { return proto.CompactTextString(m) }
func (*CreateTeam) ProtoMessage()               {}
func (*CreateTeam) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{30} }

func (m *CreateTeam) GetTeamid() int32 {
	if m != nil && m.Teamid != nil {
		return *m.Teamid
	}
	return 0
}

func (m *CreateTeam) GetTeamDefaultId() int32 {
	if m != nil && m.TeamDefaultId != nil {
		return *m.TeamDefaultId
	}
	return 0
}

// 球队配置
type BasketballTeam struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 队伍名称
	TeamName *string `protobuf:"bytes,2,opt,name=team_name" json:"team_name,omitempty"`
	// 队伍分区
	TeamPart *int32 `protobuf:"varint,3,opt,name=team_part" json:"team_part,omitempty"`
	// 创建自定义球员时,对应球队不能使用的球衣号码
	Number []int32 `protobuf:"varint,4,rep,name=number" json:"number,omitempty"`
	// 队伍名称文本ID
	TeamNameT *int32 `protobuf:"varint,5,opt,name=team_name_t" json:"team_name_t,omitempty"`
	// 队伍英文名
	TeamNameE *string `protobuf:"bytes,6,opt,name=team_name_e" json:"team_name_e,omitempty"`
	// 队伍英文缩写
	TeamNameA        *string `protobuf:"bytes,7,opt,name=team_name_a" json:"team_name_a,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BasketballTeam) Reset()                    { *m = BasketballTeam{} }
func (m *BasketballTeam) String() string            { return proto.CompactTextString(m) }
func (*BasketballTeam) ProtoMessage()               {}
func (*BasketballTeam) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{31} }

func (m *BasketballTeam) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BasketballTeam) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *BasketballTeam) GetTeamPart() int32 {
	if m != nil && m.TeamPart != nil {
		return *m.TeamPart
	}
	return 0
}

func (m *BasketballTeam) GetNumber() []int32 {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *BasketballTeam) GetTeamNameT() int32 {
	if m != nil && m.TeamNameT != nil {
		return *m.TeamNameT
	}
	return 0
}

func (m *BasketballTeam) GetTeamNameE() string {
	if m != nil && m.TeamNameE != nil {
		return *m.TeamNameE
	}
	return ""
}

func (m *BasketballTeam) GetTeamNameA() string {
	if m != nil && m.TeamNameA != nil {
		return *m.TeamNameA
	}
	return ""
}

// PLAYER战斗力计算
type PlayerAttBasic struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Parameter        *string `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
	PowerFactor      *uint32 `protobuf:"varint,3,opt,name=power_factor" json:"power_factor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerAttBasic) Reset()                    { *m = PlayerAttBasic{} }
func (m *PlayerAttBasic) String() string            { return proto.CompactTextString(m) }
func (*PlayerAttBasic) ProtoMessage()               {}
func (*PlayerAttBasic) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{32} }

func (m *PlayerAttBasic) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerAttBasic) GetParameter() string {
	if m != nil && m.Parameter != nil {
		return *m.Parameter
	}
	return ""
}

func (m *PlayerAttBasic) GetPowerFactor() uint32 {
	if m != nil && m.PowerFactor != nil {
		return *m.PowerFactor
	}
	return 0
}

// pvp机器人配置
type NpcRobot struct {
	IntervalId       *int32  `protobuf:"varint,1,opt,name=interval_id" json:"interval_id,omitempty"`
	RankingFloor     *int32  `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	RankingToplimit  *int32  `protobuf:"varint,3,opt,name=ranking_toplimit" json:"ranking_toplimit,omitempty"`
	NpcLv            *int32  `protobuf:"varint,5,opt,name=npc_lv" json:"npc_lv,omitempty"`
	BallerLv         *int32  `protobuf:"varint,6,opt,name=baller_lv" json:"baller_lv,omitempty"`
	BallerQuality    *int32  `protobuf:"varint,7,opt,name=baller_quality" json:"baller_quality,omitempty"`
	BallerStar       *int32  `protobuf:"varint,8,opt,name=baller_star" json:"baller_star,omitempty"`
	MainBallers      []int32 `protobuf:"varint,9,rep,name=main_ballers" json:"main_ballers,omitempty"`
	BackupBallers    []int32 `protobuf:"varint,10,rep,name=backup_ballers" json:"backup_ballers,omitempty"`
	ExtraValue       *int32  `protobuf:"varint,11,opt,name=extra_value" json:"extra_value,omitempty"`
	MinPower         *int32  `protobuf:"varint,12,opt,name=min_power" json:"min_power,omitempty"`
	MaxPower         *int32  `protobuf:"varint,13,opt,name=max_power" json:"max_power,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NpcRobot) Reset()                    { *m = NpcRobot{} }
func (m *NpcRobot) String() string            { return proto.CompactTextString(m) }
func (*NpcRobot) ProtoMessage()               {}
func (*NpcRobot) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{33} }

func (m *NpcRobot) GetIntervalId() int32 {
	if m != nil && m.IntervalId != nil {
		return *m.IntervalId
	}
	return 0
}

func (m *NpcRobot) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *NpcRobot) GetRankingToplimit() int32 {
	if m != nil && m.RankingToplimit != nil {
		return *m.RankingToplimit
	}
	return 0
}

func (m *NpcRobot) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *NpcRobot) GetBallerLv() int32 {
	if m != nil && m.BallerLv != nil {
		return *m.BallerLv
	}
	return 0
}

func (m *NpcRobot) GetBallerQuality() int32 {
	if m != nil && m.BallerQuality != nil {
		return *m.BallerQuality
	}
	return 0
}

func (m *NpcRobot) GetBallerStar() int32 {
	if m != nil && m.BallerStar != nil {
		return *m.BallerStar
	}
	return 0
}

func (m *NpcRobot) GetMainBallers() []int32 {
	if m != nil {
		return m.MainBallers
	}
	return nil
}

func (m *NpcRobot) GetBackupBallers() []int32 {
	if m != nil {
		return m.BackupBallers
	}
	return nil
}

func (m *NpcRobot) GetExtraValue() int32 {
	if m != nil && m.ExtraValue != nil {
		return *m.ExtraValue
	}
	return 0
}

func (m *NpcRobot) GetMinPower() int32 {
	if m != nil && m.MinPower != nil {
		return *m.MinPower
	}
	return 0
}

func (m *NpcRobot) GetMaxPower() int32 {
	if m != nil && m.MaxPower != nil {
		return *m.MaxPower
	}
	return 0
}

// npc队伍配置
type NpcTeam struct {
	NpcTeamId        *int32  `protobuf:"varint,1,opt,name=npc_team_id" json:"npc_team_id,omitempty"`
	NbaTeamId        *int32  `protobuf:"varint,2,opt,name=nba_team_id" json:"nba_team_id,omitempty"`
	MainPlayers      []int32 `protobuf:"varint,3,rep,name=main_players" json:"main_players,omitempty"`
	BackupPlayers    []int32 `protobuf:"varint,4,rep,name=backup_players" json:"backup_players,omitempty"`
	BattleValue      *int32  `protobuf:"varint,5,opt,name=battle_value" json:"battle_value,omitempty"`
	TeamExValues     []int32 `protobuf:"varint,6,rep,name=TeamExValues" json:"TeamExValues,omitempty"`
	TeamBuffs        []int32 `protobuf:"varint,7,rep,name=TeamBuffs" json:"TeamBuffs,omitempty"`
	PlayerBuffs      []int32 `protobuf:"varint,8,rep,name=PlayerBuffs" json:"PlayerBuffs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NpcTeam) Reset()                    { *m = NpcTeam{} }
func (m *NpcTeam) String() string            { return proto.CompactTextString(m) }
func (*NpcTeam) ProtoMessage()               {}
func (*NpcTeam) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{34} }

func (m *NpcTeam) GetNpcTeamId() int32 {
	if m != nil && m.NpcTeamId != nil {
		return *m.NpcTeamId
	}
	return 0
}

func (m *NpcTeam) GetNbaTeamId() int32 {
	if m != nil && m.NbaTeamId != nil {
		return *m.NbaTeamId
	}
	return 0
}

func (m *NpcTeam) GetMainPlayers() []int32 {
	if m != nil {
		return m.MainPlayers
	}
	return nil
}

func (m *NpcTeam) GetBackupPlayers() []int32 {
	if m != nil {
		return m.BackupPlayers
	}
	return nil
}

func (m *NpcTeam) GetBattleValue() int32 {
	if m != nil && m.BattleValue != nil {
		return *m.BattleValue
	}
	return 0
}

func (m *NpcTeam) GetTeamExValues() []int32 {
	if m != nil {
		return m.TeamExValues
	}
	return nil
}

func (m *NpcTeam) GetTeamBuffs() []int32 {
	if m != nil {
		return m.TeamBuffs
	}
	return nil
}

func (m *NpcTeam) GetPlayerBuffs() []int32 {
	if m != nil {
		return m.PlayerBuffs
	}
	return nil
}

// npc参数
type NpcParam struct {
	// 队伍ID
	NpcId          *int32  `protobuf:"varint,1,opt,name=npc_id" json:"npc_id,omitempty"`
	NpcName        *string `protobuf:"bytes,2,opt,name=npc_name" json:"npc_name,omitempty"`
	NpcPrototypeId *int32  `protobuf:"varint,3,opt,name=npc_prototype_id" json:"npc_prototype_id,omitempty"`
	// 首发位置
	NpcFirstplace *int32 `protobuf:"varint,4,opt,name=npc_firstplace" json:"npc_firstplace,omitempty"`
	NpcRare       *int32 `protobuf:"varint,5,opt,name=npc_rare" json:"npc_rare,omitempty"`
	NpcQuality    *int32 `protobuf:"varint,6,opt,name=npc_quality" json:"npc_quality,omitempty"`
	NpcLv         *int32 `protobuf:"varint,7,opt,name=npc_lv" json:"npc_lv,omitempty"`
	NpcStar       *int32 `protobuf:"varint,8,opt,name=npc_star" json:"npc_star,omitempty"`
	// 属性数值列表
	NpcAttrValues []int32 `protobuf:"varint,9,rep,name=NpcAttrValues" json:"NpcAttrValues,omitempty"`
	// 战斗力
	Power *int32 `protobuf:"varint,10,opt,name=power" json:"power,omitempty"`
	// NPC球员技能buff
	NpcBuffs         []int32 `protobuf:"varint,11,rep,name=NpcBuffs" json:"NpcBuffs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NpcParam) Reset()                    { *m = NpcParam{} }
func (m *NpcParam) String() string            { return proto.CompactTextString(m) }
func (*NpcParam) ProtoMessage()               {}
func (*NpcParam) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{35} }

func (m *NpcParam) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *NpcParam) GetNpcName() string {
	if m != nil && m.NpcName != nil {
		return *m.NpcName
	}
	return ""
}

func (m *NpcParam) GetNpcPrototypeId() int32 {
	if m != nil && m.NpcPrototypeId != nil {
		return *m.NpcPrototypeId
	}
	return 0
}

func (m *NpcParam) GetNpcFirstplace() int32 {
	if m != nil && m.NpcFirstplace != nil {
		return *m.NpcFirstplace
	}
	return 0
}

func (m *NpcParam) GetNpcRare() int32 {
	if m != nil && m.NpcRare != nil {
		return *m.NpcRare
	}
	return 0
}

func (m *NpcParam) GetNpcQuality() int32 {
	if m != nil && m.NpcQuality != nil {
		return *m.NpcQuality
	}
	return 0
}

func (m *NpcParam) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *NpcParam) GetNpcStar() int32 {
	if m != nil && m.NpcStar != nil {
		return *m.NpcStar
	}
	return 0
}

func (m *NpcParam) GetNpcAttrValues() []int32 {
	if m != nil {
		return m.NpcAttrValues
	}
	return nil
}

func (m *NpcParam) GetPower() int32 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *NpcParam) GetNpcBuffs() []int32 {
	if m != nil {
		return m.NpcBuffs
	}
	return nil
}

// npc属性
type NpcAttribute struct {
	AttrValueId      *int32             `protobuf:"varint,1,opt,name=attr_value_id" json:"attr_value_id,omitempty"`
	NpcAttr          []*PlayerAttrValue `protobuf:"bytes,3,rep,name=npc_attr" json:"npc_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *NpcAttribute) Reset()                    { *m = NpcAttribute{} }
func (m *NpcAttribute) String() string            { return proto.CompactTextString(m) }
func (*NpcAttribute) ProtoMessage()               {}
func (*NpcAttribute) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{36} }

func (m *NpcAttribute) GetAttrValueId() int32 {
	if m != nil && m.AttrValueId != nil {
		return *m.AttrValueId
	}
	return 0
}

func (m *NpcAttribute) GetNpcAttr() []*PlayerAttrValue {
	if m != nil {
		return m.NpcAttr
	}
	return nil
}

// 竞技场挑战范围
type ArenaChallengeRange struct {
	Id                       *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RankingFloor             *int32  `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	RankingCeiling           *int32  `protobuf:"varint,3,opt,name=ranking_ceiling" json:"ranking_ceiling,omitempty"`
	StrongOpponentsRankRatio []int32 `protobuf:"varint,4,rep,name=strong_opponents_rank_ratio" json:"strong_opponents_rank_ratio,omitempty"`
	WeakOpponentRankRatio    *int32  `protobuf:"varint,5,opt,name=weak_opponent_rank_ratio" json:"weak_opponent_rank_ratio,omitempty"`
	StrongOpponentsRandom    []int32 `protobuf:"varint,6,rep,name=strong_opponents_random" json:"strong_opponents_random,omitempty"`
	WeakOpponentRandom       *int32  `protobuf:"varint,7,opt,name=weak_opponent_random" json:"weak_opponent_random,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *ArenaChallengeRange) Reset()                    { *m = ArenaChallengeRange{} }
func (m *ArenaChallengeRange) String() string            { return proto.CompactTextString(m) }
func (*ArenaChallengeRange) ProtoMessage()               {}
func (*ArenaChallengeRange) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{37} }

func (m *ArenaChallengeRange) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaChallengeRange) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *ArenaChallengeRange) GetRankingCeiling() int32 {
	if m != nil && m.RankingCeiling != nil {
		return *m.RankingCeiling
	}
	return 0
}

func (m *ArenaChallengeRange) GetStrongOpponentsRankRatio() []int32 {
	if m != nil {
		return m.StrongOpponentsRankRatio
	}
	return nil
}

func (m *ArenaChallengeRange) GetWeakOpponentRankRatio() int32 {
	if m != nil && m.WeakOpponentRankRatio != nil {
		return *m.WeakOpponentRankRatio
	}
	return 0
}

func (m *ArenaChallengeRange) GetStrongOpponentsRandom() []int32 {
	if m != nil {
		return m.StrongOpponentsRandom
	}
	return nil
}

func (m *ArenaChallengeRange) GetWeakOpponentRandom() int32 {
	if m != nil && m.WeakOpponentRandom != nil {
		return *m.WeakOpponentRandom
	}
	return 0
}

// pvp机器人配置
type ArenaRobot struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RankingFloor     *int32  `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	RankingToplimit  *int32  `protobuf:"varint,3,opt,name=ranking_toplimit" json:"ranking_toplimit,omitempty"`
	NpcLv            *int32  `protobuf:"varint,5,opt,name=npc_lv" json:"npc_lv,omitempty"`
	BallerLv         *int32  `protobuf:"varint,6,opt,name=baller_lv" json:"baller_lv,omitempty"`
	BallerQuality    *int32  `protobuf:"varint,7,opt,name=baller_quality" json:"baller_quality,omitempty"`
	BallerStar       *int32  `protobuf:"varint,8,opt,name=baller_star" json:"baller_star,omitempty"`
	MainBallers      []int32 `protobuf:"varint,9,rep,name=main_ballers" json:"main_ballers,omitempty"`
	BackupBallers    []int32 `protobuf:"varint,10,rep,name=backup_ballers" json:"backup_ballers,omitempty"`
	ExtraValue       *int32  `protobuf:"varint,11,opt,name=extra_value" json:"extra_value,omitempty"`
	ExtraPower       *int32  `protobuf:"varint,12,opt,name=extra_power" json:"extra_power,omitempty"`
	ExtraPerPower    *int32  `protobuf:"varint,13,opt,name=extra_per_power" json:"extra_per_power,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ArenaRobot) Reset()                    { *m = ArenaRobot{} }
func (m *ArenaRobot) String() string            { return proto.CompactTextString(m) }
func (*ArenaRobot) ProtoMessage()               {}
func (*ArenaRobot) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{38} }

func (m *ArenaRobot) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaRobot) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *ArenaRobot) GetRankingToplimit() int32 {
	if m != nil && m.RankingToplimit != nil {
		return *m.RankingToplimit
	}
	return 0
}

func (m *ArenaRobot) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *ArenaRobot) GetBallerLv() int32 {
	if m != nil && m.BallerLv != nil {
		return *m.BallerLv
	}
	return 0
}

func (m *ArenaRobot) GetBallerQuality() int32 {
	if m != nil && m.BallerQuality != nil {
		return *m.BallerQuality
	}
	return 0
}

func (m *ArenaRobot) GetBallerStar() int32 {
	if m != nil && m.BallerStar != nil {
		return *m.BallerStar
	}
	return 0
}

func (m *ArenaRobot) GetMainBallers() []int32 {
	if m != nil {
		return m.MainBallers
	}
	return nil
}

func (m *ArenaRobot) GetBackupBallers() []int32 {
	if m != nil {
		return m.BackupBallers
	}
	return nil
}

func (m *ArenaRobot) GetExtraValue() int32 {
	if m != nil && m.ExtraValue != nil {
		return *m.ExtraValue
	}
	return 0
}

func (m *ArenaRobot) GetExtraPower() int32 {
	if m != nil && m.ExtraPower != nil {
		return *m.ExtraPower
	}
	return 0
}

func (m *ArenaRobot) GetExtraPerPower() int32 {
	if m != nil && m.ExtraPerPower != nil {
		return *m.ExtraPerPower
	}
	return 0
}

// 竞技场机器人随机库
type ArenaRobotRand struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RandNpcAggregate []*TypeValueConfig `protobuf:"bytes,2,rep,name=rand_npc_aggregate" json:"rand_npc_aggregate,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ArenaRobotRand) Reset()                    { *m = ArenaRobotRand{} }
func (m *ArenaRobotRand) String() string            { return proto.CompactTextString(m) }
func (*ArenaRobotRand) ProtoMessage()               {}
func (*ArenaRobotRand) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{39} }

func (m *ArenaRobotRand) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaRobotRand) GetRandNpcAggregate() []*TypeValueConfig {
	if m != nil {
		return m.RandNpcAggregate
	}
	return nil
}

// 功能模块表
type FunctionModule struct {
	Id        *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ModulesId *int32 `protobuf:"varint,2,opt,name=modules_id" json:"modules_id,omitempty"`
	// optional string modules_name = 3; // 模块名称
	SubmoduleId *int32 `protobuf:"varint,4,opt,name=submodule_id" json:"submodule_id,omitempty"`
	// optional string submodule_name = 5; // 子模块名称
	OpenLevle        *int32 `protobuf:"varint,6,opt,name=open_levle" json:"open_levle,omitempty"`
	OpenModules      *int32 `protobuf:"varint,7,opt,name=open_modules" json:"open_modules,omitempty"`
	RedDot           *int32 `protobuf:"varint,8,opt,name=red_dot" json:"red_dot,omitempty"`
	OpenEffect       *int32 `protobuf:"varint,9,opt,name=open_effect" json:"open_effect,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FunctionModule) Reset()                    { *m = FunctionModule{} }
func (m *FunctionModule) String() string            { return proto.CompactTextString(m) }
func (*FunctionModule) ProtoMessage()               {}
func (*FunctionModule) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{40} }

func (m *FunctionModule) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FunctionModule) GetModulesId() int32 {
	if m != nil && m.ModulesId != nil {
		return *m.ModulesId
	}
	return 0
}

func (m *FunctionModule) GetSubmoduleId() int32 {
	if m != nil && m.SubmoduleId != nil {
		return *m.SubmoduleId
	}
	return 0
}

func (m *FunctionModule) GetOpenLevle() int32 {
	if m != nil && m.OpenLevle != nil {
		return *m.OpenLevle
	}
	return 0
}

func (m *FunctionModule) GetOpenModules() int32 {
	if m != nil && m.OpenModules != nil {
		return *m.OpenModules
	}
	return 0
}

func (m *FunctionModule) GetRedDot() int32 {
	if m != nil && m.RedDot != nil {
		return *m.RedDot
	}
	return 0
}

func (m *FunctionModule) GetOpenEffect() int32 {
	if m != nil && m.OpenEffect != nil {
		return *m.OpenEffect
	}
	return 0
}

// 邮件文本配置
type MailProfile struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Function         *string `protobuf:"bytes,2,opt,name=function" json:"function,omitempty"`
	Title            *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Addresser        *string `protobuf:"bytes,4,opt,name=addresser" json:"addresser,omitempty"`
	Content          *string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MailProfile) Reset()                    { *m = MailProfile{} }
func (m *MailProfile) String() string            { return proto.CompactTextString(m) }
func (*MailProfile) ProtoMessage()               {}
func (*MailProfile) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{41} }

func (m *MailProfile) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MailProfile) GetFunction() string {
	if m != nil && m.Function != nil {
		return *m.Function
	}
	return ""
}

func (m *MailProfile) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *MailProfile) GetAddresser() string {
	if m != nil && m.Addresser != nil {
		return *m.Addresser
	}
	return ""
}

func (m *MailProfile) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

// 联盟礼包配置
type AllianceGift struct {
	GiftId           *int32            `protobuf:"varint,1,opt,name=gift_id" json:"gift_id,omitempty"`
	GiftName         *string           `protobuf:"bytes,2,opt,name=gift_name" json:"gift_name,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	Consume          *int32            `protobuf:"varint,4,opt,name=consume" json:"consume,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AllianceGift) Reset()                    { *m = AllianceGift{} }
func (m *AllianceGift) String() string            { return proto.CompactTextString(m) }
func (*AllianceGift) ProtoMessage()               {}
func (*AllianceGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{42} }

func (m *AllianceGift) GetGiftId() int32 {
	if m != nil && m.GiftId != nil {
		return *m.GiftId
	}
	return 0
}

func (m *AllianceGift) GetGiftName() string {
	if m != nil && m.GiftName != nil {
		return *m.GiftName
	}
	return ""
}

func (m *AllianceGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *AllianceGift) GetConsume() int32 {
	if m != nil && m.Consume != nil {
		return *m.Consume
	}
	return 0
}

// 联盟福利配置
type AllianceWelfare struct {
	AllianceLv       *int32  `protobuf:"varint,1,opt,name=alliance_lv" json:"alliance_lv,omitempty"`
	GiftAggregate    []int32 `protobuf:"varint,2,rep,name=gift_aggregate" json:"gift_aggregate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AllianceWelfare) Reset()                    { *m = AllianceWelfare{} }
func (m *AllianceWelfare) String() string            { return proto.CompactTextString(m) }
func (*AllianceWelfare) ProtoMessage()               {}
func (*AllianceWelfare) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{43} }

func (m *AllianceWelfare) GetAllianceLv() int32 {
	if m != nil && m.AllianceLv != nil {
		return *m.AllianceLv
	}
	return 0
}

func (m *AllianceWelfare) GetGiftAggregate() []int32 {
	if m != nil {
		return m.GiftAggregate
	}
	return nil
}

// 挑战赛关卡配置
type AllianceChallengChapter struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *int32            `protobuf:"varint,2,opt,name=name" json:"name,omitempty"`
	Npc              *int32            `protobuf:"varint,3,opt,name=npc" json:"npc,omitempty"`
	Chapter          *int32            `protobuf:"varint,7,opt,name=chapter" json:"chapter,omitempty"`
	WinReward        []*ItemVaryConfig `protobuf:"bytes,4,rep,name=win_reward" json:"win_reward,omitempty"`
	BoxReward        []*ItemVaryConfig `protobuf:"bytes,5,rep,name=box_reward" json:"box_reward,omitempty"`
	Condition        *int32            `protobuf:"varint,6,opt,name=condition" json:"condition,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AllianceChallengChapter) Reset()                    { *m = AllianceChallengChapter{} }
func (m *AllianceChallengChapter) String() string            { return proto.CompactTextString(m) }
func (*AllianceChallengChapter) ProtoMessage()               {}
func (*AllianceChallengChapter) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{44} }

func (m *AllianceChallengChapter) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AllianceChallengChapter) GetName() int32 {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return 0
}

func (m *AllianceChallengChapter) GetNpc() int32 {
	if m != nil && m.Npc != nil {
		return *m.Npc
	}
	return 0
}

func (m *AllianceChallengChapter) GetChapter() int32 {
	if m != nil && m.Chapter != nil {
		return *m.Chapter
	}
	return 0
}

func (m *AllianceChallengChapter) GetWinReward() []*ItemVaryConfig {
	if m != nil {
		return m.WinReward
	}
	return nil
}

func (m *AllianceChallengChapter) GetBoxReward() []*ItemVaryConfig {
	if m != nil {
		return m.BoxReward
	}
	return nil
}

func (m *AllianceChallengChapter) GetCondition() int32 {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return 0
}

// 联盟挑战赛章节配置
type AllianceChapterBasic struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Precondition     *int32            `protobuf:"varint,2,opt,name=precondition" json:"precondition,omitempty"`
	Table            []int32           `protobuf:"varint,3,rep,name=table" json:"table,omitempty"`
	BoxReward        []*ItemVaryConfig `protobuf:"bytes,4,rep,name=box_reward" json:"box_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AllianceChapterBasic) Reset()                    { *m = AllianceChapterBasic{} }
func (m *AllianceChapterBasic) String() string            { return proto.CompactTextString(m) }
func (*AllianceChapterBasic) ProtoMessage()               {}
func (*AllianceChapterBasic) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{45} }

func (m *AllianceChapterBasic) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AllianceChapterBasic) GetPrecondition() int32 {
	if m != nil && m.Precondition != nil {
		return *m.Precondition
	}
	return 0
}

func (m *AllianceChapterBasic) GetTable() []int32 {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *AllianceChapterBasic) GetBoxReward() []*ItemVaryConfig {
	if m != nil {
		return m.BoxReward
	}
	return nil
}

// 加速消耗配置
type SpeedDiamondExpen struct {
	Id                   *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type                 *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Timefloor            *int32 `protobuf:"varint,3,opt,name=timefloor" json:"timefloor,omitempty"`
	Timetoplimit         *int32 `protobuf:"varint,4,opt,name=timetoplimit" json:"timetoplimit,omitempty"`
	Unitpricemolecular   *int32 `protobuf:"varint,5,opt,name=unitpricemolecular" json:"unitpricemolecular,omitempty"`
	Unitpricedenominator *int32 `protobuf:"varint,6,opt,name=unitpricedenominator" json:"unitpricedenominator,omitempty"`
	Pricefloor           *int32 `protobuf:"varint,7,opt,name=pricefloor" json:"pricefloor,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *SpeedDiamondExpen) Reset()                    { *m = SpeedDiamondExpen{} }
func (m *SpeedDiamondExpen) String() string            { return proto.CompactTextString(m) }
func (*SpeedDiamondExpen) ProtoMessage()               {}
func (*SpeedDiamondExpen) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{46} }

func (m *SpeedDiamondExpen) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SpeedDiamondExpen) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SpeedDiamondExpen) GetTimefloor() int32 {
	if m != nil && m.Timefloor != nil {
		return *m.Timefloor
	}
	return 0
}

func (m *SpeedDiamondExpen) GetTimetoplimit() int32 {
	if m != nil && m.Timetoplimit != nil {
		return *m.Timetoplimit
	}
	return 0
}

func (m *SpeedDiamondExpen) GetUnitpricemolecular() int32 {
	if m != nil && m.Unitpricemolecular != nil {
		return *m.Unitpricemolecular
	}
	return 0
}

func (m *SpeedDiamondExpen) GetUnitpricedenominator() int32 {
	if m != nil && m.Unitpricedenominator != nil {
		return *m.Unitpricedenominator
	}
	return 0
}

func (m *SpeedDiamondExpen) GetPricefloor() int32 {
	if m != nil && m.Pricefloor != nil {
		return *m.Pricefloor
	}
	return 0
}

// 货币类型显示
type CurrencyTypeImage struct {
	// 货币类型id
	CurrencyTypeId *int32 `protobuf:"varint,1,opt,name=currencyTypeId" json:"currencyTypeId,omitempty"`
	// 货币类型name
	CurrencyType *string `protobuf:"bytes,2,opt,name=currencyType" json:"currencyType,omitempty"`
	// 货币上限 -1无上限
	CurrencyMax      *int32 `protobuf:"varint,3,opt,name=currency_max" json:"currency_max,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CurrencyTypeImage) Reset()                    { *m = CurrencyTypeImage{} }
func (m *CurrencyTypeImage) String() string            { return proto.CompactTextString(m) }
func (*CurrencyTypeImage) ProtoMessage()               {}
func (*CurrencyTypeImage) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{47} }

func (m *CurrencyTypeImage) GetCurrencyTypeId() int32 {
	if m != nil && m.CurrencyTypeId != nil {
		return *m.CurrencyTypeId
	}
	return 0
}

func (m *CurrencyTypeImage) GetCurrencyType() string {
	if m != nil && m.CurrencyType != nil {
		return *m.CurrencyType
	}
	return ""
}

func (m *CurrencyTypeImage) GetCurrencyMax() int32 {
	if m != nil && m.CurrencyMax != nil {
		return *m.CurrencyMax
	}
	return 0
}

// 新手引导配置
type GuideConf struct {
	Id          *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GuideType   *int32 `protobuf:"varint,2,opt,name=guide_type" json:"guide_type,omitempty"`
	NextId      *int32 `protobuf:"varint,3,opt,name=next_id" json:"next_id,omitempty"`
	ReconnectId *int32 `protobuf:"varint,4,opt,name=reconnect_id" json:"reconnect_id,omitempty"`
	CyStepNum   *int32 `protobuf:"varint,5,opt,name=cy_step_num" json:"cy_step_num,omitempty"`
	// 显示名(用于数数后台维度表)
	GuideText        *string `protobuf:"bytes,6,opt,name=guide_text" json:"guide_text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GuideConf) Reset()                    { *m = GuideConf{} }
func (m *GuideConf) String() string            { return proto.CompactTextString(m) }
func (*GuideConf) ProtoMessage()               {}
func (*GuideConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{48} }

func (m *GuideConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GuideConf) GetGuideType() int32 {
	if m != nil && m.GuideType != nil {
		return *m.GuideType
	}
	return 0
}

func (m *GuideConf) GetNextId() int32 {
	if m != nil && m.NextId != nil {
		return *m.NextId
	}
	return 0
}

func (m *GuideConf) GetReconnectId() int32 {
	if m != nil && m.ReconnectId != nil {
		return *m.ReconnectId
	}
	return 0
}

func (m *GuideConf) GetCyStepNum() int32 {
	if m != nil && m.CyStepNum != nil {
		return *m.CyStepNum
	}
	return 0
}

func (m *GuideConf) GetGuideText() string {
	if m != nil && m.GuideText != nil {
		return *m.GuideText
	}
	return ""
}

// 新手引导全局配置
type GuideGlobalConf struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 新手引导赛季固定战术
	GuideSeasonTactic []*PlayerAttrValue `protobuf:"bytes,2,rep,name=guide_season_tactic" json:"guide_season_tactic,omitempty"`
	// 新手引导开关(0:关，1开)
	GuideSwitch *int32 `protobuf:"varint,3,opt,name=guide_switch" json:"guide_switch,omitempty"`
	// 新手引导结束ID
	GuideEnd *int32 `protobuf:"varint,4,opt,name=guide_end" json:"guide_end,omitempty"`
	// 新手位置选择节点播放
	GuideNode []string `protobuf:"bytes,5,rep,name=guide_node" json:"guide_node,omitempty"`
	// 全明星教练技能
	GuideSkill       []int32 `protobuf:"varint,6,rep,name=guide_skill" json:"guide_skill,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GuideGlobalConf) Reset()                    { *m = GuideGlobalConf{} }
func (m *GuideGlobalConf) String() string            { return proto.CompactTextString(m) }
func (*GuideGlobalConf) ProtoMessage()               {}
func (*GuideGlobalConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{49} }

func (m *GuideGlobalConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GuideGlobalConf) GetGuideSeasonTactic() []*PlayerAttrValue {
	if m != nil {
		return m.GuideSeasonTactic
	}
	return nil
}

func (m *GuideGlobalConf) GetGuideSwitch() int32 {
	if m != nil && m.GuideSwitch != nil {
		return *m.GuideSwitch
	}
	return 0
}

func (m *GuideGlobalConf) GetGuideEnd() int32 {
	if m != nil && m.GuideEnd != nil {
		return *m.GuideEnd
	}
	return 0
}

func (m *GuideGlobalConf) GetGuideNode() []string {
	if m != nil {
		return m.GuideNode
	}
	return nil
}

func (m *GuideGlobalConf) GetGuideSkill() []int32 {
	if m != nil {
		return m.GuideSkill
	}
	return nil
}

type TradingCenterGuideConf struct {
	// 序号
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 展示球员合同ID
	ContractId *ItemVaryConfig `protobuf:"bytes,2,opt,name=contract_id" json:"contract_id,omitempty"`
	// 展示球员价格
	PlayerNum *ItemVaryConfig `protobuf:"bytes,3,opt,name=player_num" json:"player_num,omitempty"`
	// 是否为引导可选球员
	OptionalPlayer   *int32 `protobuf:"varint,4,opt,name=optional_player" json:"optional_player,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TradingCenterGuideConf) Reset()                    { *m = TradingCenterGuideConf{} }
func (m *TradingCenterGuideConf) String() string            { return proto.CompactTextString(m) }
func (*TradingCenterGuideConf) ProtoMessage()               {}
func (*TradingCenterGuideConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{50} }

func (m *TradingCenterGuideConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TradingCenterGuideConf) GetContractId() *ItemVaryConfig {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *TradingCenterGuideConf) GetPlayerNum() *ItemVaryConfig {
	if m != nil {
		return m.PlayerNum
	}
	return nil
}

func (m *TradingCenterGuideConf) GetOptionalPlayer() int32 {
	if m != nil && m.OptionalPlayer != nil {
		return *m.OptionalPlayer
	}
	return 0
}

// 公告配置
type NoticeConf struct {
	// 公告ID
	NoticeId *int32 `protobuf:"varint,1,opt,name=notice_id" json:"notice_id,omitempty"`
	// 公告页签
	NoticeTab *string `protobuf:"bytes,2,opt,name=notice_tab" json:"notice_tab,omitempty"`
	// 公告标题
	NoticeTitle *string `protobuf:"bytes,3,opt,name=notice_title" json:"notice_title,omitempty"`
	// 公告内容
	NoticeContent *string `protobuf:"bytes,4,opt,name=notice_content" json:"notice_content,omitempty"`
	// 公告类型
	NoticeType *int32 `protobuf:"varint,5,opt,name=notice_type" json:"notice_type,omitempty"`
	// 渠道id
	NoticeChannel *int32 `protobuf:"varint,6,opt,name=notice_channel" json:"notice_channel,omitempty"`
	// 是否置顶
	NoticeTop *bool `protobuf:"varint,7,opt,name=notice_top" json:"notice_top,omitempty"`
	// 创建时间
	NoticeCreateTime *int64 `protobuf:"varint,8,opt,name=notice_create_time" json:"notice_create_time,omitempty"`
	// 公告内容类型（1:维护 2:活动 3:系统 4:其他）
	NoticeContentType *int32 `protobuf:"varint,9,opt,name=notice_content_type" json:"notice_content_type,omitempty"`
	// 生效时间
	NoticeEffectTime *int64 `protobuf:"varint,10,opt,name=notice_effect_time" json:"notice_effect_time,omitempty"`
	// 是否屏蔽
	NoticeShield     *bool  `protobuf:"varint,11,opt,name=notice_shield" json:"notice_shield,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NoticeConf) Reset()                    { *m = NoticeConf{} }
func (m *NoticeConf) String() string            { return proto.CompactTextString(m) }
func (*NoticeConf) ProtoMessage()               {}
func (*NoticeConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{51} }

func (m *NoticeConf) GetNoticeId() int32 {
	if m != nil && m.NoticeId != nil {
		return *m.NoticeId
	}
	return 0
}

func (m *NoticeConf) GetNoticeTab() string {
	if m != nil && m.NoticeTab != nil {
		return *m.NoticeTab
	}
	return ""
}

func (m *NoticeConf) GetNoticeTitle() string {
	if m != nil && m.NoticeTitle != nil {
		return *m.NoticeTitle
	}
	return ""
}

func (m *NoticeConf) GetNoticeContent() string {
	if m != nil && m.NoticeContent != nil {
		return *m.NoticeContent
	}
	return ""
}

func (m *NoticeConf) GetNoticeType() int32 {
	if m != nil && m.NoticeType != nil {
		return *m.NoticeType
	}
	return 0
}

func (m *NoticeConf) GetNoticeChannel() int32 {
	if m != nil && m.NoticeChannel != nil {
		return *m.NoticeChannel
	}
	return 0
}

func (m *NoticeConf) GetNoticeTop() bool {
	if m != nil && m.NoticeTop != nil {
		return *m.NoticeTop
	}
	return false
}

func (m *NoticeConf) GetNoticeCreateTime() int64 {
	if m != nil && m.NoticeCreateTime != nil {
		return *m.NoticeCreateTime
	}
	return 0
}

func (m *NoticeConf) GetNoticeContentType() int32 {
	if m != nil && m.NoticeContentType != nil {
		return *m.NoticeContentType
	}
	return 0
}

func (m *NoticeConf) GetNoticeEffectTime() int64 {
	if m != nil && m.NoticeEffectTime != nil {
		return *m.NoticeEffectTime
	}
	return 0
}

func (m *NoticeConf) GetNoticeShield() bool {
	if m != nil && m.NoticeShield != nil {
		return *m.NoticeShield
	}
	return false
}

// 购买体力
type StrengthBuy struct {
	BuyTimes         *int32          `protobuf:"varint,1,opt,name=buy_times" json:"buy_times,omitempty"`
	BuyPrice         *ItemVaryConfig `protobuf:"bytes,2,opt,name=buy_price" json:"buy_price,omitempty"`
	EnergyPoint      *uint32         `protobuf:"varint,3,opt,name=energy_point" json:"energy_point,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *StrengthBuy) Reset()                    { *m = StrengthBuy{} }
func (m *StrengthBuy) String() string            { return proto.CompactTextString(m) }
func (*StrengthBuy) ProtoMessage()               {}
func (*StrengthBuy) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{52} }

func (m *StrengthBuy) GetBuyTimes() int32 {
	if m != nil && m.BuyTimes != nil {
		return *m.BuyTimes
	}
	return 0
}

func (m *StrengthBuy) GetBuyPrice() *ItemVaryConfig {
	if m != nil {
		return m.BuyPrice
	}
	return nil
}

func (m *StrengthBuy) GetEnergyPoint() uint32 {
	if m != nil && m.EnergyPoint != nil {
		return *m.EnergyPoint
	}
	return 0
}

// 重复球员转换碎片配置表
type PlayerPieceCfg struct {
	Id                *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PlayerValue       *int32             `protobuf:"varint,2,opt,name=player_value" json:"player_value,omitempty"`
	RepeatPlayerPiece *int32             `protobuf:"varint,3,opt,name=repeat_player_piece" json:"repeat_player_piece,omitempty"`
	PieceChange       []*TypeValueConfig `protobuf:"bytes,4,rep,name=piece_change" json:"piece_change,omitempty"`
	Recycle           *ItemVaryConfig    `protobuf:"bytes,5,opt,name=recycle" json:"recycle,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *PlayerPieceCfg) Reset()                    { *m = PlayerPieceCfg{} }
func (m *PlayerPieceCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerPieceCfg) ProtoMessage()               {}
func (*PlayerPieceCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{53} }

func (m *PlayerPieceCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerPieceCfg) GetPlayerValue() int32 {
	if m != nil && m.PlayerValue != nil {
		return *m.PlayerValue
	}
	return 0
}

func (m *PlayerPieceCfg) GetRepeatPlayerPiece() int32 {
	if m != nil && m.RepeatPlayerPiece != nil {
		return *m.RepeatPlayerPiece
	}
	return 0
}

func (m *PlayerPieceCfg) GetPieceChange() []*TypeValueConfig {
	if m != nil {
		return m.PieceChange
	}
	return nil
}

func (m *PlayerPieceCfg) GetRecycle() *ItemVaryConfig {
	if m != nil {
		return m.Recycle
	}
	return nil
}

// 小助手模块评分
type AssistantModuleScore struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FunctionId       *int32 `protobuf:"varint,2,opt,name=function_id" json:"function_id,omitempty"`
	MinLevel         *int32 `protobuf:"varint,3,opt,name=min_level" json:"min_level,omitempty"`
	MaxLevel         *int32 `protobuf:"varint,4,opt,name=max_level" json:"max_level,omitempty"`
	Common           *int32 `protobuf:"varint,5,opt,name=common" json:"common,omitempty"`
	Excellent        *int32 `protobuf:"varint,6,opt,name=excellent" json:"excellent,omitempty"`
	Super            *int32 `protobuf:"varint,7,opt,name=super" json:"super,omitempty"`
	Legend           *int32 `protobuf:"varint,8,opt,name=legend" json:"legend,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AssistantModuleScore) Reset()                    { *m = AssistantModuleScore{} }
func (m *AssistantModuleScore) String() string            { return proto.CompactTextString(m) }
func (*AssistantModuleScore) ProtoMessage()               {}
func (*AssistantModuleScore) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{54} }

func (m *AssistantModuleScore) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AssistantModuleScore) GetFunctionId() int32 {
	if m != nil && m.FunctionId != nil {
		return *m.FunctionId
	}
	return 0
}

func (m *AssistantModuleScore) GetMinLevel() int32 {
	if m != nil && m.MinLevel != nil {
		return *m.MinLevel
	}
	return 0
}

func (m *AssistantModuleScore) GetMaxLevel() int32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

func (m *AssistantModuleScore) GetCommon() int32 {
	if m != nil && m.Common != nil {
		return *m.Common
	}
	return 0
}

func (m *AssistantModuleScore) GetExcellent() int32 {
	if m != nil && m.Excellent != nil {
		return *m.Excellent
	}
	return 0
}

func (m *AssistantModuleScore) GetSuper() int32 {
	if m != nil && m.Super != nil {
		return *m.Super
	}
	return 0
}

func (m *AssistantModuleScore) GetLegend() int32 {
	if m != nil && m.Legend != nil {
		return *m.Legend
	}
	return 0
}

// 战斗力分数
type AssistantPower struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MinLevel         *int32 `protobuf:"varint,2,opt,name=min_level" json:"min_level,omitempty"`
	MaxLevel         *int32 `protobuf:"varint,3,opt,name=max_level" json:"max_level,omitempty"`
	Common           *int32 `protobuf:"varint,4,opt,name=common" json:"common,omitempty"`
	Excellent        *int32 `protobuf:"varint,5,opt,name=excellent" json:"excellent,omitempty"`
	Super            *int32 `protobuf:"varint,6,opt,name=super" json:"super,omitempty"`
	Legend           *int32 `protobuf:"varint,7,opt,name=legend" json:"legend,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AssistantPower) Reset()                    { *m = AssistantPower{} }
func (m *AssistantPower) String() string            { return proto.CompactTextString(m) }
func (*AssistantPower) ProtoMessage()               {}
func (*AssistantPower) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{55} }

func (m *AssistantPower) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AssistantPower) GetMinLevel() int32 {
	if m != nil && m.MinLevel != nil {
		return *m.MinLevel
	}
	return 0
}

func (m *AssistantPower) GetMaxLevel() int32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

func (m *AssistantPower) GetCommon() int32 {
	if m != nil && m.Common != nil {
		return *m.Common
	}
	return 0
}

func (m *AssistantPower) GetExcellent() int32 {
	if m != nil && m.Excellent != nil {
		return *m.Excellent
	}
	return 0
}

func (m *AssistantPower) GetSuper() int32 {
	if m != nil && m.Super != nil {
		return *m.Super
	}
	return 0
}

func (m *AssistantPower) GetLegend() int32 {
	if m != nil && m.Legend != nil {
		return *m.Legend
	}
	return 0
}

// 小助手功能开启表ID
type FunctionIcon struct {
	FunctionId       *int32 `protobuf:"varint,1,opt,name=function_id" json:"function_id,omitempty"`
	FunctionOpenId   *int32 `protobuf:"varint,2,opt,name=function_open_id" json:"function_open_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FunctionIcon) Reset()                    { *m = FunctionIcon{} }
func (m *FunctionIcon) String() string            { return proto.CompactTextString(m) }
func (*FunctionIcon) ProtoMessage()               {}
func (*FunctionIcon) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{56} }

func (m *FunctionIcon) GetFunctionId() int32 {
	if m != nil && m.FunctionId != nil {
		return *m.FunctionId
	}
	return 0
}

func (m *FunctionIcon) GetFunctionOpenId() int32 {
	if m != nil && m.FunctionOpenId != nil {
		return *m.FunctionOpenId
	}
	return 0
}

// 战术等级
type TacticLevel struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TacticId         *int32             `protobuf:"varint,2,opt,name=tactic_id" json:"tactic_id,omitempty"`
	TacticLv         *int32             `protobuf:"varint,4,opt,name=tactic_lv" json:"tactic_lv,omitempty"`
	IsMaxLv          *int32             `protobuf:"varint,5,opt,name=is_max_lv" json:"is_max_lv,omitempty"`
	Bonuses          []*PlayerAttrValue `protobuf:"bytes,6,rep,name=bonuses" json:"bonuses,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TacticLevel) Reset()                    { *m = TacticLevel{} }
func (m *TacticLevel) String() string            { return proto.CompactTextString(m) }
func (*TacticLevel) ProtoMessage()               {}
func (*TacticLevel) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{57} }

func (m *TacticLevel) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TacticLevel) GetTacticId() int32 {
	if m != nil && m.TacticId != nil {
		return *m.TacticId
	}
	return 0
}

func (m *TacticLevel) GetTacticLv() int32 {
	if m != nil && m.TacticLv != nil {
		return *m.TacticLv
	}
	return 0
}

func (m *TacticLevel) GetIsMaxLv() int32 {
	if m != nil && m.IsMaxLv != nil {
		return *m.IsMaxLv
	}
	return 0
}

func (m *TacticLevel) GetBonuses() []*PlayerAttrValue {
	if m != nil {
		return m.Bonuses
	}
	return nil
}

// 战斗主属性&战斗力系数
type FightMainAttr struct {
	MainAttrId       *int32  `protobuf:"varint,1,opt,name=main_attr_id" json:"main_attr_id,omitempty"`
	ParamName        *string `protobuf:"bytes,2,opt,name=param_name" json:"param_name,omitempty"`
	PowerFactor      *int32  `protobuf:"varint,3,opt,name=power_factor" json:"power_factor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FightMainAttr) Reset()                    { *m = FightMainAttr{} }
func (m *FightMainAttr) String() string            { return proto.CompactTextString(m) }
func (*FightMainAttr) ProtoMessage()               {}
func (*FightMainAttr) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{58} }

func (m *FightMainAttr) GetMainAttrId() int32 {
	if m != nil && m.MainAttrId != nil {
		return *m.MainAttrId
	}
	return 0
}

func (m *FightMainAttr) GetParamName() string {
	if m != nil && m.ParamName != nil {
		return *m.ParamName
	}
	return ""
}

func (m *FightMainAttr) GetPowerFactor() int32 {
	if m != nil && m.PowerFactor != nil {
		return *m.PowerFactor
	}
	return 0
}

// 教学战斗配置
type BattleTeaching struct {
	BattleteachingId  *int32             `protobuf:"varint,1,opt,name=battleteaching_id" json:"battleteaching_id,omitempty"`
	Attackteam        *int32             `protobuf:"varint,2,opt,name=attackteam" json:"attackteam,omitempty"`
	TeamId            *int32             `protobuf:"varint,3,opt,name=team_id" json:"team_id,omitempty"`
	TreeName          []string           `protobuf:"bytes,4,rep,name=tree_name" json:"tree_name,omitempty"`
	Score             *int32             `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	NpcScore          *int32             `protobuf:"varint,6,opt,name=npc_score" json:"npc_score,omitempty"`
	Attacktactics     *string            `protobuf:"bytes,7,opt,name=attacktactics" json:"attacktactics,omitempty"`
	Defensetactics    *string            `protobuf:"bytes,8,opt,name=defensetactics" json:"defensetactics,omitempty"`
	NpcAttacktactics  *string            `protobuf:"bytes,9,opt,name=npc_attacktactics" json:"npc_attacktactics,omitempty"`
	NpcDefensetactics *string            `protobuf:"bytes,10,opt,name=npc_defensetactics" json:"npc_defensetactics,omitempty"`
	Exp               *int32             `protobuf:"varint,11,opt,name=exp" json:"exp,omitempty"`
	PlayerExp         *int32             `protobuf:"varint,12,opt,name=player_exp" json:"player_exp,omitempty"`
	TeachingTime      *string            `protobuf:"bytes,13,opt,name=teaching_time" json:"teaching_time,omitempty"`
	Drop              []*ItemVaryConfig  `protobuf:"bytes,14,rep,name=drop" json:"drop,omitempty"`
	MyteamId          *int32             `protobuf:"varint,15,opt,name=myteam_id" json:"myteam_id,omitempty"`
	BallerStrength    []*TypeValueConfig `protobuf:"bytes,16,rep,name=baller_strength" json:"baller_strength,omitempty"`
	Baller2Strength   []*TypeValueConfig `protobuf:"bytes,17,rep,name=baller2_strength" json:"baller2_strength,omitempty"`
	BallerNpc         []*TypeValueConfig `protobuf:"bytes,18,rep,name=baller_npc" json:"baller_npc,omitempty"`
	NpcSkill          *TypeValueConfig   `protobuf:"bytes,19,opt,name=npc_skill" json:"npc_skill,omitempty"`
	NpcTacticChange   *TypeValueConfig   `protobuf:"bytes,20,opt,name=npc_tactic_change" json:"npc_tactic_change,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *BattleTeaching) Reset()                    { *m = BattleTeaching{} }
func (m *BattleTeaching) String() string            { return proto.CompactTextString(m) }
func (*BattleTeaching) ProtoMessage()               {}
func (*BattleTeaching) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{59} }

func (m *BattleTeaching) GetBattleteachingId() int32 {
	if m != nil && m.BattleteachingId != nil {
		return *m.BattleteachingId
	}
	return 0
}

func (m *BattleTeaching) GetAttackteam() int32 {
	if m != nil && m.Attackteam != nil {
		return *m.Attackteam
	}
	return 0
}

func (m *BattleTeaching) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *BattleTeaching) GetTreeName() []string {
	if m != nil {
		return m.TreeName
	}
	return nil
}

func (m *BattleTeaching) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *BattleTeaching) GetNpcScore() int32 {
	if m != nil && m.NpcScore != nil {
		return *m.NpcScore
	}
	return 0
}

func (m *BattleTeaching) GetAttacktactics() string {
	if m != nil && m.Attacktactics != nil {
		return *m.Attacktactics
	}
	return ""
}

func (m *BattleTeaching) GetDefensetactics() string {
	if m != nil && m.Defensetactics != nil {
		return *m.Defensetactics
	}
	return ""
}

func (m *BattleTeaching) GetNpcAttacktactics() string {
	if m != nil && m.NpcAttacktactics != nil {
		return *m.NpcAttacktactics
	}
	return ""
}

func (m *BattleTeaching) GetNpcDefensetactics() string {
	if m != nil && m.NpcDefensetactics != nil {
		return *m.NpcDefensetactics
	}
	return ""
}

func (m *BattleTeaching) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *BattleTeaching) GetPlayerExp() int32 {
	if m != nil && m.PlayerExp != nil {
		return *m.PlayerExp
	}
	return 0
}

func (m *BattleTeaching) GetTeachingTime() string {
	if m != nil && m.TeachingTime != nil {
		return *m.TeachingTime
	}
	return ""
}

func (m *BattleTeaching) GetDrop() []*ItemVaryConfig {
	if m != nil {
		return m.Drop
	}
	return nil
}

func (m *BattleTeaching) GetMyteamId() int32 {
	if m != nil && m.MyteamId != nil {
		return *m.MyteamId
	}
	return 0
}

func (m *BattleTeaching) GetBallerStrength() []*TypeValueConfig {
	if m != nil {
		return m.BallerStrength
	}
	return nil
}

func (m *BattleTeaching) GetBaller2Strength() []*TypeValueConfig {
	if m != nil {
		return m.Baller2Strength
	}
	return nil
}

func (m *BattleTeaching) GetBallerNpc() []*TypeValueConfig {
	if m != nil {
		return m.BallerNpc
	}
	return nil
}

func (m *BattleTeaching) GetNpcSkill() *TypeValueConfig {
	if m != nil {
		return m.NpcSkill
	}
	return nil
}

func (m *BattleTeaching) GetNpcTacticChange() *TypeValueConfig {
	if m != nil {
		return m.NpcTacticChange
	}
	return nil
}

// 球员组合
type PlayerCombineCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 组合类型
	CombineType *int32 `protobuf:"varint,2,opt,name=combine_type" json:"combine_type,omitempty"`
	// 组合球员id
	PlayerIds []int32 `protobuf:"varint,3,rep,name=player_ids" json:"player_ids,omitempty"`
	// 球员属性
	Attrs []*PlayerAttrValue `protobuf:"bytes,4,rep,name=attrs" json:"attrs,omitempty"`
	// 球员buff
	Buffs            []*PlayerBuffValue `protobuf:"bytes,5,rep,name=buffs" json:"buffs,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerCombineCfg) Reset()                    { *m = PlayerCombineCfg{} }
func (m *PlayerCombineCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerCombineCfg) ProtoMessage()               {}
func (*PlayerCombineCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{60} }

func (m *PlayerCombineCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerCombineCfg) GetCombineType() int32 {
	if m != nil && m.CombineType != nil {
		return *m.CombineType
	}
	return 0
}

func (m *PlayerCombineCfg) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *PlayerCombineCfg) GetAttrs() []*PlayerAttrValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *PlayerCombineCfg) GetBuffs() []*PlayerBuffValue {
	if m != nil {
		return m.Buffs
	}
	return nil
}

// 球员标签表
type PlayerTagCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 标签
	Tag *int32 `protobuf:"varint,2,opt,name=tag" json:"tag,omitempty"`
	// 标签生效人数
	Num *int32 `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	// buffId列表
	Buffs []*PlayerBuffValue `protobuf:"bytes,4,rep,name=buffs" json:"buffs,omitempty"`
	// 属性
	Attrs            []*PlayerAttrValue `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerTagCfg) Reset()                    { *m = PlayerTagCfg{} }
func (m *PlayerTagCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerTagCfg) ProtoMessage()               {}
func (*PlayerTagCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{61} }

func (m *PlayerTagCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerTagCfg) GetTag() int32 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

func (m *PlayerTagCfg) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *PlayerTagCfg) GetBuffs() []*PlayerBuffValue {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *PlayerTagCfg) GetAttrs() []*PlayerAttrValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// 自定义球员标签表
type CustomerPlayerTagCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 标签类型
	Type *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 参数id
	ParamId *int32 `protobuf:"varint,3,opt,name=param_id" json:"param_id,omitempty"`
	// 标签id
	SignId           *int32 `protobuf:"varint,4,opt,name=sign_id" json:"sign_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CustomerPlayerTagCfg) Reset()                    { *m = CustomerPlayerTagCfg{} }
func (m *CustomerPlayerTagCfg) String() string            { return proto.CompactTextString(m) }
func (*CustomerPlayerTagCfg) ProtoMessage()               {}
func (*CustomerPlayerTagCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{62} }

func (m *CustomerPlayerTagCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomerPlayerTagCfg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CustomerPlayerTagCfg) GetParamId() int32 {
	if m != nil && m.ParamId != nil {
		return *m.ParamId
	}
	return 0
}

func (m *CustomerPlayerTagCfg) GetSignId() int32 {
	if m != nil && m.SignId != nil {
		return *m.SignId
	}
	return 0
}

// 巡演赛
type TourMatchCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GradeSection     []int32           `protobuf:"varint,2,rep,name=grade_section" json:"grade_section,omitempty"`
	LevelType        *int32            `protobuf:"varint,3,opt,name=level_type" json:"level_type,omitempty"`
	BattlePowerProp  *int32            `protobuf:"varint,4,opt,name=battle_power_prop" json:"battle_power_prop,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,5,rep,name=reward" json:"reward,omitempty"`
	RandRewardId     *int32            `protobuf:"varint,6,opt,name=rand_reward_id" json:"rand_reward_id,omitempty"`
	BuffPool         []*ItemConfig     `protobuf:"bytes,7,rep,name=buff_pool" json:"buff_pool,omitempty"`
	LevelIndex       *int32            `protobuf:"varint,9,opt,name=level_index" json:"level_index,omitempty"`
	PreLevelId       *int32            `protobuf:"varint,10,opt,name=pre_level_id" json:"pre_level_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TourMatchCfg) Reset()                    { *m = TourMatchCfg{} }
func (m *TourMatchCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchCfg) ProtoMessage()               {}
func (*TourMatchCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{63} }

func (m *TourMatchCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchCfg) GetGradeSection() []int32 {
	if m != nil {
		return m.GradeSection
	}
	return nil
}

func (m *TourMatchCfg) GetLevelType() int32 {
	if m != nil && m.LevelType != nil {
		return *m.LevelType
	}
	return 0
}

func (m *TourMatchCfg) GetBattlePowerProp() int32 {
	if m != nil && m.BattlePowerProp != nil {
		return *m.BattlePowerProp
	}
	return 0
}

func (m *TourMatchCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *TourMatchCfg) GetRandRewardId() int32 {
	if m != nil && m.RandRewardId != nil {
		return *m.RandRewardId
	}
	return 0
}

func (m *TourMatchCfg) GetBuffPool() []*ItemConfig {
	if m != nil {
		return m.BuffPool
	}
	return nil
}

func (m *TourMatchCfg) GetLevelIndex() int32 {
	if m != nil && m.LevelIndex != nil {
		return *m.LevelIndex
	}
	return 0
}

func (m *TourMatchCfg) GetPreLevelId() int32 {
	if m != nil && m.PreLevelId != nil {
		return *m.PreLevelId
	}
	return 0
}

// 巡演赛buff池
type TourMatchBuffPoolCfg struct {
	Id               *int32        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pool             []*ItemConfig `protobuf:"bytes,2,rep,name=pool" json:"pool,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TourMatchBuffPoolCfg) Reset()                    { *m = TourMatchBuffPoolCfg{} }
func (m *TourMatchBuffPoolCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchBuffPoolCfg) ProtoMessage()               {}
func (*TourMatchBuffPoolCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{64} }

func (m *TourMatchBuffPoolCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchBuffPoolCfg) GetPool() []*ItemConfig {
	if m != nil {
		return m.Pool
	}
	return nil
}

// 巡演赛buff配置
type TourMatchBuffCfg struct {
	Id               *int32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Buff             *PlayerAttrValue `protobuf:"bytes,2,opt,name=buff" json:"buff,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TourMatchBuffCfg) Reset()                    { *m = TourMatchBuffCfg{} }
func (m *TourMatchBuffCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchBuffCfg) ProtoMessage()               {}
func (*TourMatchBuffCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{65} }

func (m *TourMatchBuffCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchBuffCfg) GetBuff() *PlayerAttrValue {
	if m != nil {
		return m.Buff
	}
	return nil
}

// 巡演赛抽奖
type TourMatchLotteryCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level            []int32 `protobuf:"varint,2,rep,name=level" json:"level,omitempty"`
	DropId           *int32  `protobuf:"varint,3,opt,name=drop_id" json:"drop_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TourMatchLotteryCfg) Reset()                    { *m = TourMatchLotteryCfg{} }
func (m *TourMatchLotteryCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchLotteryCfg) ProtoMessage()               {}
func (*TourMatchLotteryCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{66} }

func (m *TourMatchLotteryCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchLotteryCfg) GetLevel() []int32 {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *TourMatchLotteryCfg) GetDropId() int32 {
	if m != nil && m.DropId != nil {
		return *m.DropId
	}
	return 0
}

// 巡演赛离散数据
type TourMatchDiscreteCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// buff随机数量
	BuffNum *int32 `protobuf:"varint,2,opt,name=buff_num" json:"buff_num,omitempty"`
	// 教练商店前置关卡
	CoachShopPreLevelIndex []int32 `protobuf:"varint,3,rep,name=coach_shop_pre_level_index" json:"coach_shop_pre_level_index,omitempty"`
	// 补给站前置关卡
	SupplyDepotPreLevel []int32 `protobuf:"varint,4,rep,name=supply_depot_pre_level" json:"supply_depot_pre_level,omitempty"`
	// 巡演赛复活道具
	ReviveItem *ItemVaryConfig `protobuf:"bytes,5,opt,name=revive_item" json:"revive_item,omitempty"`
	// 匹配时向上取值次数
	UpCount *int32 `protobuf:"varint,6,opt,name=up_count" json:"up_count,omitempty"`
	// 匹配时每次递增或递减范围,万分比
	Section *int32 `protobuf:"varint,7,opt,name=section" json:"section,omitempty"`
	// 抽奖消耗
	CoachShopCost []*ItemVaryConfig `protobuf:"bytes,8,rep,name=coach_shop_cost" json:"coach_shop_cost,omitempty"`
	// 修改NPC的属性列表
	NpcChangeAttrs []int32 `protobuf:"varint,9,rep,name=NpcChangeAttrs" json:"NpcChangeAttrs,omitempty"`
	// 匹配机器人战力上下浮动万分比,万分比
	NpcPowerRand     *int32 `protobuf:"varint,10,opt,name=NpcPowerRand" json:"NpcPowerRand,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TourMatchDiscreteCfg) Reset()                    { *m = TourMatchDiscreteCfg{} }
func (m *TourMatchDiscreteCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchDiscreteCfg) ProtoMessage()               {}
func (*TourMatchDiscreteCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{67} }

func (m *TourMatchDiscreteCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchDiscreteCfg) GetBuffNum() int32 {
	if m != nil && m.BuffNum != nil {
		return *m.BuffNum
	}
	return 0
}

func (m *TourMatchDiscreteCfg) GetCoachShopPreLevelIndex() []int32 {
	if m != nil {
		return m.CoachShopPreLevelIndex
	}
	return nil
}

func (m *TourMatchDiscreteCfg) GetSupplyDepotPreLevel() []int32 {
	if m != nil {
		return m.SupplyDepotPreLevel
	}
	return nil
}

func (m *TourMatchDiscreteCfg) GetReviveItem() *ItemVaryConfig {
	if m != nil {
		return m.ReviveItem
	}
	return nil
}

func (m *TourMatchDiscreteCfg) GetUpCount() int32 {
	if m != nil && m.UpCount != nil {
		return *m.UpCount
	}
	return 0
}

func (m *TourMatchDiscreteCfg) GetSection() int32 {
	if m != nil && m.Section != nil {
		return *m.Section
	}
	return 0
}

func (m *TourMatchDiscreteCfg) GetCoachShopCost() []*ItemVaryConfig {
	if m != nil {
		return m.CoachShopCost
	}
	return nil
}

func (m *TourMatchDiscreteCfg) GetNpcChangeAttrs() []int32 {
	if m != nil {
		return m.NpcChangeAttrs
	}
	return nil
}

func (m *TourMatchDiscreteCfg) GetNpcPowerRand() int32 {
	if m != nil && m.NpcPowerRand != nil {
		return *m.NpcPowerRand
	}
	return 0
}

// 巡演赛机器人
type TourMatchRobotCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 玩家等级下限
	MinLevel *int32 `protobuf:"varint,2,opt,name=minLevel" json:"minLevel,omitempty"`
	// 玩家等级上限
	MaxLevel *int32 `protobuf:"varint,3,opt,name=maxLevel" json:"maxLevel,omitempty"`
	// 机器人库
	Robots           []int32 `protobuf:"varint,4,rep,name=robots" json:"robots,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TourMatchRobotCfg) Reset()                    { *m = TourMatchRobotCfg{} }
func (m *TourMatchRobotCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchRobotCfg) ProtoMessage()               {}
func (*TourMatchRobotCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{68} }

func (m *TourMatchRobotCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchRobotCfg) GetMinLevel() int32 {
	if m != nil && m.MinLevel != nil {
		return *m.MinLevel
	}
	return 0
}

func (m *TourMatchRobotCfg) GetMaxLevel() int32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

func (m *TourMatchRobotCfg) GetRobots() []int32 {
	if m != nil {
		return m.Robots
	}
	return nil
}

// 巡演赛扫荡上限配置
type TourMatchSaoDangCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SweepingCeiling  *int32  `protobuf:"varint,2,opt,name=sweeping_ceiling" json:"sweeping_ceiling,omitempty"`
	PlayerLevel      []int32 `protobuf:"varint,3,rep,name=player_level" json:"player_level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TourMatchSaoDangCfg) Reset()                    { *m = TourMatchSaoDangCfg{} }
func (m *TourMatchSaoDangCfg) String() string            { return proto.CompactTextString(m) }
func (*TourMatchSaoDangCfg) ProtoMessage()               {}
func (*TourMatchSaoDangCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{69} }

func (m *TourMatchSaoDangCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TourMatchSaoDangCfg) GetSweepingCeiling() int32 {
	if m != nil && m.SweepingCeiling != nil {
		return *m.SweepingCeiling
	}
	return 0
}

func (m *TourMatchSaoDangCfg) GetPlayerLevel() []int32 {
	if m != nil {
		return m.PlayerLevel
	}
	return nil
}

// 联盟等级配置
type LeagueLevelCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 等级升级消耗
	UpSpend *int32 `protobuf:"varint,2,opt,name=up_spend" json:"up_spend,omitempty"`
	// 职位人数上限
	PositionNumber []*TypeValueConfig `protobuf:"bytes,3,rep,name=position_number" json:"position_number,omitempty"`
	// 联盟人数上限
	LeagueNumber *int32 `protobuf:"varint,4,opt,name=league_number" json:"league_number,omitempty"`
	// 宝箱所需贡献值
	TodayBuildValue []int32 `protobuf:"varint,5,rep,name=today_build_value" json:"today_build_value,omitempty"`
	// 今日建设度宝箱奖励1
	TodayBuildReward_01 []*ItemVaryConfig `protobuf:"bytes,6,rep,name=today_build_reward_01" json:"today_build_reward_01,omitempty"`
	// 今日建设度宝箱奖励2
	TodayBuildReward_02 []*ItemVaryConfig `protobuf:"bytes,7,rep,name=today_build_reward_02" json:"today_build_reward_02,omitempty"`
	// 今日建设度宝箱奖励3
	TodayBuildReward_03 []*ItemVaryConfig `protobuf:"bytes,8,rep,name=today_build_reward_03" json:"today_build_reward_03,omitempty"`
	XXX_unrecognized    []byte            `json:"-"`
}

func (m *LeagueLevelCfg) Reset()                    { *m = LeagueLevelCfg{} }
func (m *LeagueLevelCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueLevelCfg) ProtoMessage()               {}
func (*LeagueLevelCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{70} }

func (m *LeagueLevelCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueLevelCfg) GetUpSpend() int32 {
	if m != nil && m.UpSpend != nil {
		return *m.UpSpend
	}
	return 0
}

func (m *LeagueLevelCfg) GetPositionNumber() []*TypeValueConfig {
	if m != nil {
		return m.PositionNumber
	}
	return nil
}

func (m *LeagueLevelCfg) GetLeagueNumber() int32 {
	if m != nil && m.LeagueNumber != nil {
		return *m.LeagueNumber
	}
	return 0
}

func (m *LeagueLevelCfg) GetTodayBuildValue() []int32 {
	if m != nil {
		return m.TodayBuildValue
	}
	return nil
}

func (m *LeagueLevelCfg) GetTodayBuildReward_01() []*ItemVaryConfig {
	if m != nil {
		return m.TodayBuildReward_01
	}
	return nil
}

func (m *LeagueLevelCfg) GetTodayBuildReward_02() []*ItemVaryConfig {
	if m != nil {
		return m.TodayBuildReward_02
	}
	return nil
}

func (m *LeagueLevelCfg) GetTodayBuildReward_03() []*ItemVaryConfig {
	if m != nil {
		return m.TodayBuildReward_03
	}
	return nil
}

// 联盟建筑贡献配置
type LeagueDonateCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 消耗
	Consume []*ItemVaryConfig `protobuf:"bytes,2,rep,name=consume" json:"consume,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	// 经验值
	Exp              *int32 `protobuf:"varint,4,opt,name=exp" json:"exp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueDonateCfg) Reset()                    { *m = LeagueDonateCfg{} }
func (m *LeagueDonateCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueDonateCfg) ProtoMessage()               {}
func (*LeagueDonateCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{71} }

func (m *LeagueDonateCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueDonateCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *LeagueDonateCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *LeagueDonateCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// 联盟离散数据配置
type LeagueDiscreteDataCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 弹劾活跃度要求
	ImpeachActivityCondition *int32 `protobuf:"varint,7,opt,name=impeach_activity_condition" json:"impeach_activity_condition,omitempty"`
	// 每日全体邮件次数
	EmailNumber *int32 `protobuf:"varint,8,opt,name=email_number" json:"email_number,omitempty"`
	// 弹劾发起条件总裁连续离线时间
	OfflineTime *int32 `protobuf:"varint,9,opt,name=offline_time" json:"offline_time,omitempty"`
	// 联盟宣言最大字数
	NoticeMaxNum *int32 `protobuf:"varint,10,opt,name=notice_max_num" json:"notice_max_num,omitempty"`
	// 联盟最小名字
	NameMinNum *int32 `protobuf:"varint,11,opt,name=name_min_num" json:"name_min_num,omitempty"`
	// 联盟最大名字
	NameMaxNum *int32 `protobuf:"varint,12,opt,name=name_max_num" json:"name_max_num,omitempty"`
	// 联盟请求列表长度
	RecommendNum *int32 `protobuf:"varint,13,opt,name=recommend_num" json:"recommend_num,omitempty"`
	// 联盟创建默认加入设置
	SettingType *int32 `protobuf:"varint,14,opt,name=setting_type" json:"setting_type,omitempty"`
	// 联盟创建默认战斗力要求
	SettingPower *int32 `protobuf:"varint,15,opt,name=setting_power" json:"setting_power,omitempty"`
	// 玩家最大申请联盟次数
	ApplicationNum *int32 `protobuf:"varint,16,opt,name=application_num" json:"application_num,omitempty"`
	// 联盟申请接受上限
	ApplicationMaxNum *int32 `protobuf:"varint,17,opt,name=application_max_num" json:"application_max_num,omitempty"`
	// 联盟申请列表清空时间
	ApplicationTime *int32 `protobuf:"varint,18,opt,name=application_time" json:"application_time,omitempty"`
	// 创建联盟消耗
	CreateConsumeItem []*ItemVaryConfig `protobuf:"bytes,20,rep,name=create_consume_item" json:"create_consume_item,omitempty"`
	// 退出联盟cd
	QuitCd *int32 `protobuf:"varint,21,opt,name=quit_cd" json:"quit_cd,omitempty"`
	// 邮件标题最大字数
	MailTitleMaxNum *int32 `protobuf:"varint,22,opt,name=mail_title_max_num" json:"mail_title_max_num,omitempty"`
	// 邮件内容最大字数
	MailContentMaxNum *int32 `protobuf:"varint,23,opt,name=mail_content_max_num" json:"mail_content_max_num,omitempty"`
	// 弹劾观察期
	ImpeachProbationPeriodTime *int64 `protobuf:"varint,26,opt,name=impeach_probation_period_time" json:"impeach_probation_period_time,omitempty"`
	// 联盟日志最大条数
	LogMaxNum *int32 `protobuf:"varint,27,opt,name=log_max_num" json:"log_max_num,omitempty"`
	// 开服后N秒忽略退出cd
	IgnoreQuitCdTime *int32 `protobuf:"varint,28,opt,name=ignore_quit_cd_time" json:"ignore_quit_cd_time,omitempty"`
	// 改名消耗
	ChangeNameConsume []*ItemVaryConfig `protobuf:"bytes,29,rep,name=change_name_consume" json:"change_name_consume,omitempty"`
	// 保留最大聊天信息条数
	ChatInfoMaxNum *int32 `protobuf:"varint,30,opt,name=chat_info_max_num" json:"chat_info_max_num,omitempty"`
	// 每日最大捐献次数
	DailyMaxDonateCount *int32 `protobuf:"varint,31,opt,name=daily_max_donate_count" json:"daily_max_donate_count,omitempty"`
	// 每个成员每天发红包次数上限
	SingleMemberDailyGiveRedPacketCountLimit *int32 `protobuf:"varint,32,opt,name=single_member_daily_give_red_packet_count_limit" json:"single_member_daily_give_red_packet_count_limit,omitempty"`
	// 每个成员每天抢红包次数上限
	SingleMemberDailyGrabRedPacketCountLimit *int32 `protobuf:"varint,33,opt,name=single_member_daily_grab_red_packet_count_limit" json:"single_member_daily_grab_red_packet_count_limit,omitempty"`
	// 高级红包每日数量上限
	HighGradeRedPacketDailyNumLimit *int32 `protobuf:"varint,34,opt,name=highGradeRedPacketDailyNumLimit" json:"highGradeRedPacketDailyNumLimit,omitempty"`
	// 投资道具id
	InvestItemId *ItemVaryConfig `protobuf:"bytes,35,opt,name=invest_item_id" json:"invest_item_id,omitempty"`
	// 联盟理财经验值
	InvestExp *int32 `protobuf:"varint,36,opt,name=invest_exp" json:"invest_exp,omitempty"`
	// 完成联盟理财阶段奖励
	InvestStageReward []*ItemVaryConfig `protobuf:"bytes,37,rep,name=invest_stage_reward" json:"invest_stage_reward,omitempty"`
	// 理财操作奖励
	InvestReward []*ItemVaryConfig `protobuf:"bytes,38,rep,name=invest_reward" json:"invest_reward,omitempty"`
	// 理财分红宝箱奖励累积上限
	InvestRewardLimit *int32 `protobuf:"varint,39,opt,name=invest_reward_limit" json:"invest_reward_limit,omitempty"`
	// 每级经验
	ExpPerLevel *int32 `protobuf:"varint,40,opt,name=exp_per_level" json:"exp_per_level,omitempty"`
	// 联盟理财最高级
	FinancialMaxLevel *int32 `protobuf:"varint,41,opt,name=financial_max_level" json:"financial_max_level,omitempty"`
	// 玩家每日赠送碎片最大次数
	DailyGiveFragmentMaxCount *int32 `protobuf:"varint,42,opt,name=dailyGiveFragmentMaxCount" json:"dailyGiveFragmentMaxCount,omitempty"`
	// 联盟boss开启等级（联盟等级）
	LeagueBossOpenLv *int32 `protobuf:"varint,43,opt,name=league_boss_open_lv" json:"league_boss_open_lv,omitempty"`
	// 理财阶段宝箱奖励累积上限
	InvestStageRewardLimit *int32 `protobuf:"varint,44,opt,name=invest_stage_reward_limit" json:"invest_stage_reward_limit,omitempty"`
	// 可以交易的碎片稀有度列表
	LeagueTradePieceRarity []int32 `protobuf:"varint,45,rep,name=league_trade_piece_rarity" json:"league_trade_piece_rarity,omitempty"`
	// 赠予碎片奖励
	GiveFragmentReward []*ItemVaryConfig `protobuf:"bytes,46,rep,name=give_fragment_reward" json:"give_fragment_reward,omitempty"`
	// 联盟boss每日挑战次数
	LeagueBossDailyChallengeCount *int32 `protobuf:"varint,47,opt,name=league_boss_daily_challenge_count" json:"league_boss_daily_challenge_count,omitempty"`
	// 联盟boss最大挑战次数
	LeagueBossMaxFightCount *int32 `protobuf:"varint,48,opt,name=league_boss_max_fight_count" json:"league_boss_max_fight_count,omitempty"`
	XXX_unrecognized        []byte `json:"-"`
}

func (m *LeagueDiscreteDataCfg) Reset()                    { *m = LeagueDiscreteDataCfg{} }
func (m *LeagueDiscreteDataCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueDiscreteDataCfg) ProtoMessage()               {}
func (*LeagueDiscreteDataCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{72} }

func (m *LeagueDiscreteDataCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetImpeachActivityCondition() int32 {
	if m != nil && m.ImpeachActivityCondition != nil {
		return *m.ImpeachActivityCondition
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetEmailNumber() int32 {
	if m != nil && m.EmailNumber != nil {
		return *m.EmailNumber
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetOfflineTime() int32 {
	if m != nil && m.OfflineTime != nil {
		return *m.OfflineTime
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetNoticeMaxNum() int32 {
	if m != nil && m.NoticeMaxNum != nil {
		return *m.NoticeMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetNameMinNum() int32 {
	if m != nil && m.NameMinNum != nil {
		return *m.NameMinNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetNameMaxNum() int32 {
	if m != nil && m.NameMaxNum != nil {
		return *m.NameMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetRecommendNum() int32 {
	if m != nil && m.RecommendNum != nil {
		return *m.RecommendNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetSettingType() int32 {
	if m != nil && m.SettingType != nil {
		return *m.SettingType
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetSettingPower() int32 {
	if m != nil && m.SettingPower != nil {
		return *m.SettingPower
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetApplicationNum() int32 {
	if m != nil && m.ApplicationNum != nil {
		return *m.ApplicationNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetApplicationMaxNum() int32 {
	if m != nil && m.ApplicationMaxNum != nil {
		return *m.ApplicationMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetApplicationTime() int32 {
	if m != nil && m.ApplicationTime != nil {
		return *m.ApplicationTime
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetCreateConsumeItem() []*ItemVaryConfig {
	if m != nil {
		return m.CreateConsumeItem
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetQuitCd() int32 {
	if m != nil && m.QuitCd != nil {
		return *m.QuitCd
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetMailTitleMaxNum() int32 {
	if m != nil && m.MailTitleMaxNum != nil {
		return *m.MailTitleMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetMailContentMaxNum() int32 {
	if m != nil && m.MailContentMaxNum != nil {
		return *m.MailContentMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetImpeachProbationPeriodTime() int64 {
	if m != nil && m.ImpeachProbationPeriodTime != nil {
		return *m.ImpeachProbationPeriodTime
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetLogMaxNum() int32 {
	if m != nil && m.LogMaxNum != nil {
		return *m.LogMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetIgnoreQuitCdTime() int32 {
	if m != nil && m.IgnoreQuitCdTime != nil {
		return *m.IgnoreQuitCdTime
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetChangeNameConsume() []*ItemVaryConfig {
	if m != nil {
		return m.ChangeNameConsume
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetChatInfoMaxNum() int32 {
	if m != nil && m.ChatInfoMaxNum != nil {
		return *m.ChatInfoMaxNum
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetDailyMaxDonateCount() int32 {
	if m != nil && m.DailyMaxDonateCount != nil {
		return *m.DailyMaxDonateCount
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetSingleMemberDailyGiveRedPacketCountLimit() int32 {
	if m != nil && m.SingleMemberDailyGiveRedPacketCountLimit != nil {
		return *m.SingleMemberDailyGiveRedPacketCountLimit
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetSingleMemberDailyGrabRedPacketCountLimit() int32 {
	if m != nil && m.SingleMemberDailyGrabRedPacketCountLimit != nil {
		return *m.SingleMemberDailyGrabRedPacketCountLimit
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetHighGradeRedPacketDailyNumLimit() int32 {
	if m != nil && m.HighGradeRedPacketDailyNumLimit != nil {
		return *m.HighGradeRedPacketDailyNumLimit
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetInvestItemId() *ItemVaryConfig {
	if m != nil {
		return m.InvestItemId
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetInvestExp() int32 {
	if m != nil && m.InvestExp != nil {
		return *m.InvestExp
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetInvestStageReward() []*ItemVaryConfig {
	if m != nil {
		return m.InvestStageReward
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetInvestReward() []*ItemVaryConfig {
	if m != nil {
		return m.InvestReward
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetInvestRewardLimit() int32 {
	if m != nil && m.InvestRewardLimit != nil {
		return *m.InvestRewardLimit
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetExpPerLevel() int32 {
	if m != nil && m.ExpPerLevel != nil {
		return *m.ExpPerLevel
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetFinancialMaxLevel() int32 {
	if m != nil && m.FinancialMaxLevel != nil {
		return *m.FinancialMaxLevel
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetDailyGiveFragmentMaxCount() int32 {
	if m != nil && m.DailyGiveFragmentMaxCount != nil {
		return *m.DailyGiveFragmentMaxCount
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetLeagueBossOpenLv() int32 {
	if m != nil && m.LeagueBossOpenLv != nil {
		return *m.LeagueBossOpenLv
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetInvestStageRewardLimit() int32 {
	if m != nil && m.InvestStageRewardLimit != nil {
		return *m.InvestStageRewardLimit
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetLeagueTradePieceRarity() []int32 {
	if m != nil {
		return m.LeagueTradePieceRarity
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetGiveFragmentReward() []*ItemVaryConfig {
	if m != nil {
		return m.GiveFragmentReward
	}
	return nil
}

func (m *LeagueDiscreteDataCfg) GetLeagueBossDailyChallengeCount() int32 {
	if m != nil && m.LeagueBossDailyChallengeCount != nil {
		return *m.LeagueBossDailyChallengeCount
	}
	return 0
}

func (m *LeagueDiscreteDataCfg) GetLeagueBossMaxFightCount() int32 {
	if m != nil && m.LeagueBossMaxFightCount != nil {
		return *m.LeagueBossMaxFightCount
	}
	return 0
}

// 联盟建筑交易中心配置
type LeagueBuildingTradingCenterCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 经验
	Exp *int32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	// 请求碎片次数
	BegFragmentCount *int32 `protobuf:"varint,3,opt,name=beg_fragment_count" json:"beg_fragment_count,omitempty"`
	// 是否最高级
	IsMaxLevel       *bool  `protobuf:"varint,10,opt,name=is_max_level" json:"is_max_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueBuildingTradingCenterCfg) Reset()         { *m = LeagueBuildingTradingCenterCfg{} }
func (m *LeagueBuildingTradingCenterCfg) String() string { return proto.CompactTextString(m) }
func (*LeagueBuildingTradingCenterCfg) ProtoMessage()    {}
func (*LeagueBuildingTradingCenterCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{73}
}

func (m *LeagueBuildingTradingCenterCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBuildingTradingCenterCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *LeagueBuildingTradingCenterCfg) GetBegFragmentCount() int32 {
	if m != nil && m.BegFragmentCount != nil {
		return *m.BegFragmentCount
	}
	return 0
}

func (m *LeagueBuildingTradingCenterCfg) GetIsMaxLevel() bool {
	if m != nil && m.IsMaxLevel != nil {
		return *m.IsMaxLevel
	}
	return false
}

// 联盟建筑商店配置
type LeagueBuildingShopCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 经验
	Exp *int32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	// 是否最高级
	IsMaxLevel       *bool  `protobuf:"varint,10,opt,name=is_max_level" json:"is_max_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueBuildingShopCfg) Reset()                    { *m = LeagueBuildingShopCfg{} }
func (m *LeagueBuildingShopCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBuildingShopCfg) ProtoMessage()               {}
func (*LeagueBuildingShopCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{74} }

func (m *LeagueBuildingShopCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBuildingShopCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *LeagueBuildingShopCfg) GetIsMaxLevel() bool {
	if m != nil && m.IsMaxLevel != nil {
		return *m.IsMaxLevel
	}
	return false
}

// 联盟建筑红包配置
type LeagueBuildingRedPacketCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 经验
	Exp *int32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	// 系统红包奖励
	SystemRedpacketReward []int32 `protobuf:"varint,3,rep,name=system_redpacket_reward" json:"system_redpacket_reward,omitempty"`
	// 是否最高级
	IsMaxLevel       *bool  `protobuf:"varint,10,opt,name=is_max_level" json:"is_max_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueBuildingRedPacketCfg) Reset()                    { *m = LeagueBuildingRedPacketCfg{} }
func (m *LeagueBuildingRedPacketCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBuildingRedPacketCfg) ProtoMessage()               {}
func (*LeagueBuildingRedPacketCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{75} }

func (m *LeagueBuildingRedPacketCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBuildingRedPacketCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *LeagueBuildingRedPacketCfg) GetSystemRedpacketReward() []int32 {
	if m != nil {
		return m.SystemRedpacketReward
	}
	return nil
}

func (m *LeagueBuildingRedPacketCfg) GetIsMaxLevel() bool {
	if m != nil && m.IsMaxLevel != nil {
		return *m.IsMaxLevel
	}
	return false
}

type PlayerGlobalCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 阵容光环最低球员稀有度
	HaloMinRarity *int32 `protobuf:"varint,2,opt,name=halo_min_rarity" json:"halo_min_rarity,omitempty"`
	// 球员品质加成值
	RarityNum        []*TypeValueConfig `protobuf:"bytes,3,rep,name=rarity_num" json:"rarity_num,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerGlobalCfg) Reset()                    { *m = PlayerGlobalCfg{} }
func (m *PlayerGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerGlobalCfg) ProtoMessage()               {}
func (*PlayerGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{76} }

func (m *PlayerGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerGlobalCfg) GetHaloMinRarity() int32 {
	if m != nil && m.HaloMinRarity != nil {
		return *m.HaloMinRarity
	}
	return 0
}

func (m *PlayerGlobalCfg) GetRarityNum() []*TypeValueConfig {
	if m != nil {
		return m.RarityNum
	}
	return nil
}

// 联盟金融中心配置
type LeagueBuildingFinancialCenterCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 经验
	Exp *int32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	// 分红奖励
	LeagueWelfareReward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=league_welfare_reward" json:"league_welfare_reward,omitempty"`
	// 是否最高级
	IsMaxLevel       *bool  `protobuf:"varint,10,opt,name=is_max_level" json:"is_max_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueBuildingFinancialCenterCfg) Reset()         { *m = LeagueBuildingFinancialCenterCfg{} }
func (m *LeagueBuildingFinancialCenterCfg) String() string { return proto.CompactTextString(m) }
func (*LeagueBuildingFinancialCenterCfg) ProtoMessage()    {}
func (*LeagueBuildingFinancialCenterCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{77}
}

func (m *LeagueBuildingFinancialCenterCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBuildingFinancialCenterCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *LeagueBuildingFinancialCenterCfg) GetLeagueWelfareReward() []*ItemVaryConfig {
	if m != nil {
		return m.LeagueWelfareReward
	}
	return nil
}

func (m *LeagueBuildingFinancialCenterCfg) GetIsMaxLevel() bool {
	if m != nil && m.IsMaxLevel != nil {
		return *m.IsMaxLevel
	}
	return false
}

// 联盟职位
type LeaguePositionCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 权限
	PrivilegeId []int32 `protobuf:"varint,2,rep,name=privilege_id" json:"privilege_id,omitempty"`
	// 免费发红包次数
	FreeRedPacketCount *int32 `protobuf:"varint,3,opt,name=free_red_packet_count" json:"free_red_packet_count,omitempty"`
	// 职位名称
	PositionName     *string `protobuf:"bytes,4,opt,name=position_name" json:"position_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeaguePositionCfg) Reset()                    { *m = LeaguePositionCfg{} }
func (m *LeaguePositionCfg) String() string            { return proto.CompactTextString(m) }
func (*LeaguePositionCfg) ProtoMessage()               {}
func (*LeaguePositionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{78} }

func (m *LeaguePositionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeaguePositionCfg) GetPrivilegeId() []int32 {
	if m != nil {
		return m.PrivilegeId
	}
	return nil
}

func (m *LeaguePositionCfg) GetFreeRedPacketCount() int32 {
	if m != nil && m.FreeRedPacketCount != nil {
		return *m.FreeRedPacketCount
	}
	return 0
}

func (m *LeaguePositionCfg) GetPositionName() string {
	if m != nil && m.PositionName != nil {
		return *m.PositionName
	}
	return ""
}

// 每日宝箱
type LeagueDailyBoxCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 今日建设度
	TodayBuildValue *int32 `protobuf:"varint,2,opt,name=today_build_value" json:"today_build_value,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueDailyBoxCfg) Reset()                    { *m = LeagueDailyBoxCfg{} }
func (m *LeagueDailyBoxCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueDailyBoxCfg) ProtoMessage()               {}
func (*LeagueDailyBoxCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{79} }

func (m *LeagueDailyBoxCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueDailyBoxCfg) GetTodayBuildValue() int32 {
	if m != nil && m.TodayBuildValue != nil {
		return *m.TodayBuildValue
	}
	return 0
}

func (m *LeagueDailyBoxCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 联盟红包配置
type LeagueRedPacketCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 红包类型
	RedPacketType *int32 `protobuf:"varint,2,opt,name=red_packet_type" json:"red_packet_type,omitempty"`
	// 发红包消耗
	Consume []*ItemVaryConfig `protobuf:"bytes,3,rep,name=consume" json:"consume,omitempty"`
	// 红包总金额
	TotalMoney *int32 `protobuf:"varint,4,opt,name=total_money" json:"total_money,omitempty"`
	// 红包份数
	Num *int32 `protobuf:"varint,5,opt,name=num" json:"num,omitempty"`
	// 红包最小值
	MinRedPacket *int32 `protobuf:"varint,6,opt,name=min_red_packet" json:"min_red_packet,omitempty"`
	// 发红包奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,7,rep,name=reward" json:"reward,omitempty"`
	// 领红包额外奖励
	DropReward       *int32 `protobuf:"varint,8,opt,name=drop_reward" json:"drop_reward,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueRedPacketCfg) Reset()                    { *m = LeagueRedPacketCfg{} }
func (m *LeagueRedPacketCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueRedPacketCfg) ProtoMessage()               {}
func (*LeagueRedPacketCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{80} }

func (m *LeagueRedPacketCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueRedPacketCfg) GetRedPacketType() int32 {
	if m != nil && m.RedPacketType != nil {
		return *m.RedPacketType
	}
	return 0
}

func (m *LeagueRedPacketCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *LeagueRedPacketCfg) GetTotalMoney() int32 {
	if m != nil && m.TotalMoney != nil {
		return *m.TotalMoney
	}
	return 0
}

func (m *LeagueRedPacketCfg) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *LeagueRedPacketCfg) GetMinRedPacket() int32 {
	if m != nil && m.MinRedPacket != nil {
		return *m.MinRedPacket
	}
	return 0
}

func (m *LeagueRedPacketCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *LeagueRedPacketCfg) GetDropReward() int32 {
	if m != nil && m.DropReward != nil {
		return *m.DropReward
	}
	return 0
}

// 联盟工资
type LeagueSalaryCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 联盟等级
	LeagueLevel *int32 `protobuf:"varint,2,opt,name=league_level" json:"league_level,omitempty"`
	// 本周贡献下限
	ContributeCeiling *int32 `protobuf:"varint,3,opt,name=contribute_ceiling" json:"contribute_ceiling,omitempty"`
	// 本周贡献上限
	ContributeFloor *int32 `protobuf:"varint,4,opt,name=contribute_floor" json:"contribute_floor,omitempty"`
	// 可领工资基本奖励
	Salary           []*ItemVaryConfig `protobuf:"bytes,5,rep,name=salary" json:"salary,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueSalaryCfg) Reset()                    { *m = LeagueSalaryCfg{} }
func (m *LeagueSalaryCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueSalaryCfg) ProtoMessage()               {}
func (*LeagueSalaryCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{81} }

func (m *LeagueSalaryCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueSalaryCfg) GetLeagueLevel() int32 {
	if m != nil && m.LeagueLevel != nil {
		return *m.LeagueLevel
	}
	return 0
}

func (m *LeagueSalaryCfg) GetContributeCeiling() int32 {
	if m != nil && m.ContributeCeiling != nil {
		return *m.ContributeCeiling
	}
	return 0
}

func (m *LeagueSalaryCfg) GetContributeFloor() int32 {
	if m != nil && m.ContributeFloor != nil {
		return *m.ContributeFloor
	}
	return 0
}

func (m *LeagueSalaryCfg) GetSalary() []*ItemVaryConfig {
	if m != nil {
		return m.Salary
	}
	return nil
}

// 联盟boss关卡组配置
type LeagueBossLevelGroupCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 前置关卡组id
	PreLevelGroup *int32 `protobuf:"varint,2,opt,name=pre_level_group" json:"pre_level_group,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	// 关卡组名字
	Name             *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeagueBossLevelGroupCfg) Reset()                    { *m = LeagueBossLevelGroupCfg{} }
func (m *LeagueBossLevelGroupCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBossLevelGroupCfg) ProtoMessage()               {}
func (*LeagueBossLevelGroupCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{82} }

func (m *LeagueBossLevelGroupCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBossLevelGroupCfg) GetPreLevelGroup() int32 {
	if m != nil && m.PreLevelGroup != nil {
		return *m.PreLevelGroup
	}
	return 0
}

func (m *LeagueBossLevelGroupCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *LeagueBossLevelGroupCfg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 联盟boss关卡配置
type LeagueBossLevelCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 关卡组id
	LevelGroupId *int32 `protobuf:"varint,2,opt,name=level_group_id" json:"level_group_id,omitempty"`
	// 前置关卡id
	PreLevelId *int32 `protobuf:"varint,3,opt,name=pre_level_id" json:"pre_level_id,omitempty"`
	// 通关分数
	PassScore *int32 `protobuf:"varint,4,opt,name=pass_score" json:"pass_score,omitempty"`
	// 对手id
	OppoTeamId *int32 `protobuf:"varint,5,opt,name=oppo_team_id" json:"oppo_team_id,omitempty"`
	// 通关奖励
	PassReward []*ItemVaryConfig `protobuf:"bytes,6,rep,name=pass_reward" json:"pass_reward,omitempty"`
	// 战斗奖励
	FightReward      []*ItemVaryConfig `protobuf:"bytes,7,rep,name=fight_reward" json:"fight_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueBossLevelCfg) Reset()                    { *m = LeagueBossLevelCfg{} }
func (m *LeagueBossLevelCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBossLevelCfg) ProtoMessage()               {}
func (*LeagueBossLevelCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{83} }

func (m *LeagueBossLevelCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBossLevelCfg) GetLevelGroupId() int32 {
	if m != nil && m.LevelGroupId != nil {
		return *m.LevelGroupId
	}
	return 0
}

func (m *LeagueBossLevelCfg) GetPreLevelId() int32 {
	if m != nil && m.PreLevelId != nil {
		return *m.PreLevelId
	}
	return 0
}

func (m *LeagueBossLevelCfg) GetPassScore() int32 {
	if m != nil && m.PassScore != nil {
		return *m.PassScore
	}
	return 0
}

func (m *LeagueBossLevelCfg) GetOppoTeamId() int32 {
	if m != nil && m.OppoTeamId != nil {
		return *m.OppoTeamId
	}
	return 0
}

func (m *LeagueBossLevelCfg) GetPassReward() []*ItemVaryConfig {
	if m != nil {
		return m.PassReward
	}
	return nil
}

func (m *LeagueBossLevelCfg) GetFightReward() []*ItemVaryConfig {
	if m != nil {
		return m.FightReward
	}
	return nil
}

// 联盟boss buff配置
type LeagueBossBuffCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// buff (万分比，比赛积分=实际我方得分+额外加成积分(比赛中的实际上场位置累计积分*参数))
	Buff *int32 `protobuf:"varint,2,opt,name=buff" json:"buff,omitempty"`
	// 球员位置
	PlayerPos        *int32 `protobuf:"varint,3,opt,name=player_pos" json:"player_pos,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueBossBuffCfg) Reset()                    { *m = LeagueBossBuffCfg{} }
func (m *LeagueBossBuffCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBossBuffCfg) ProtoMessage()               {}
func (*LeagueBossBuffCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{84} }

func (m *LeagueBossBuffCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBossBuffCfg) GetBuff() int32 {
	if m != nil && m.Buff != nil {
		return *m.Buff
	}
	return 0
}

func (m *LeagueBossBuffCfg) GetPlayerPos() int32 {
	if m != nil && m.PlayerPos != nil {
		return *m.PlayerPos
	}
	return 0
}

// 联盟logo配置
type LeagueLogoCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LeagueIconTop    *int32 `protobuf:"varint,2,opt,name=league_icon_top" json:"league_icon_top,omitempty"`
	LeagueIconDown   *int32 `protobuf:"varint,3,opt,name=league_icon_down" json:"league_icon_down,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueLogoCfg) Reset()                    { *m = LeagueLogoCfg{} }
func (m *LeagueLogoCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueLogoCfg) ProtoMessage()               {}
func (*LeagueLogoCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{85} }

func (m *LeagueLogoCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueLogoCfg) GetLeagueIconTop() int32 {
	if m != nil && m.LeagueIconTop != nil {
		return *m.LeagueIconTop
	}
	return 0
}

func (m *LeagueLogoCfg) GetLeagueIconDown() int32 {
	if m != nil && m.LeagueIconDown != nil {
		return *m.LeagueIconDown
	}
	return 0
}

// 联盟boss次数购买配置
type LeagueBossFightCountCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuyCount         *int32            `protobuf:"varint,2,opt,name=buy_count" json:"buy_count,omitempty"`
	Consume          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=consume" json:"consume,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueBossFightCountCfg) Reset()                    { *m = LeagueBossFightCountCfg{} }
func (m *LeagueBossFightCountCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBossFightCountCfg) ProtoMessage()               {}
func (*LeagueBossFightCountCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{86} }

func (m *LeagueBossFightCountCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBossFightCountCfg) GetBuyCount() int32 {
	if m != nil && m.BuyCount != nil {
		return *m.BuyCount
	}
	return 0
}

func (m *LeagueBossFightCountCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

// 联盟boss排行榜奖励
type LeagueBossRankRewardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 联盟远征章节id
	LeagueLevel *int32 `protobuf:"varint,2,opt,name=league_level" json:"league_level,omitempty"`
	// 排名下限
	RankCeiling *int32 `protobuf:"varint,3,opt,name=rank_ceiling" json:"rank_ceiling,omitempty"`
	// 排名上限
	RankFloor *int32 `protobuf:"varint,4,opt,name=rank_floor" json:"rank_floor,omitempty"`
	// 排行榜奖励
	RankReward       []*ItemVaryConfig `protobuf:"bytes,5,rep,name=rank_reward" json:"rank_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueBossRankRewardCfg) Reset()                    { *m = LeagueBossRankRewardCfg{} }
func (m *LeagueBossRankRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBossRankRewardCfg) ProtoMessage()               {}
func (*LeagueBossRankRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{87} }

func (m *LeagueBossRankRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBossRankRewardCfg) GetLeagueLevel() int32 {
	if m != nil && m.LeagueLevel != nil {
		return *m.LeagueLevel
	}
	return 0
}

func (m *LeagueBossRankRewardCfg) GetRankCeiling() int32 {
	if m != nil && m.RankCeiling != nil {
		return *m.RankCeiling
	}
	return 0
}

func (m *LeagueBossRankRewardCfg) GetRankFloor() int32 {
	if m != nil && m.RankFloor != nil {
		return *m.RankFloor
	}
	return 0
}

func (m *LeagueBossRankRewardCfg) GetRankReward() []*ItemVaryConfig {
	if m != nil {
		return m.RankReward
	}
	return nil
}

// 联盟战跨服分组配置
type LeagueBattleServerGroupCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 跨服类型
	GroupType *int32 `protobuf:"varint,2,opt,name=group_type" json:"group_type,omitempty"`
	// 区服列表
	AreaList         []int32 `protobuf:"varint,3,rep,name=area_list" json:"area_list,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeagueBattleServerGroupCfg) Reset()                    { *m = LeagueBattleServerGroupCfg{} }
func (m *LeagueBattleServerGroupCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleServerGroupCfg) ProtoMessage()               {}
func (*LeagueBattleServerGroupCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{88} }

func (m *LeagueBattleServerGroupCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattleServerGroupCfg) GetGroupType() int32 {
	if m != nil && m.GroupType != nil {
		return *m.GroupType
	}
	return 0
}

func (m *LeagueBattleServerGroupCfg) GetAreaList() []int32 {
	if m != nil {
		return m.AreaList
	}
	return nil
}

// 联盟战全局表
type LeagueBattleGlobalCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 展示上一赛季前N名
	ShowLastSeasonTopNum *int32 `protobuf:"varint,2,opt,name=show_last_season_top_num" json:"show_last_season_top_num,omitempty"`
	// 开服多少天可以参加联盟战
	OpenAreaDayCanEnter *int32 `protobuf:"varint,3,opt,name=open_area_day_can_enter" json:"open_area_day_can_enter,omitempty"`
	// 报名阶段开始时间
	ApplyStageStartTime *string `protobuf:"bytes,4,opt,name=apply_stage_start_time" json:"apply_stage_start_time,omitempty"`
	// 准备阶段开始时间
	ReadyStageStartTime *string `protobuf:"bytes,5,opt,name=ready_stage_start_time" json:"ready_stage_start_time,omitempty"`
	// 积分赛阶段开始时间
	PointRaceStartTime *string `protobuf:"bytes,6,opt,name=point_race_start_time" json:"point_race_start_time,omitempty"`
	// 冠军赛阶段开始时间
	FinalStageStartTime *string `protobuf:"bytes,7,opt,name=final_stage_start_time" json:"final_stage_start_time,omitempty"`
	// 决赛8进4比赛时间
	FinalFirstRoundTime *string `protobuf:"bytes,8,opt,name=final_first_round_time" json:"final_first_round_time,omitempty"`
	// 决赛4进2比赛时间
	FinalSecondRoundTime *string `protobuf:"bytes,9,opt,name=final_second_round_time" json:"final_second_round_time,omitempty"`
	// 决赛比赛时间
	FinalTime *string `protobuf:"bytes,10,opt,name=final_time" json:"final_time,omitempty"`
	// 开启联盟战等级
	OpenLv *int32 `protobuf:"varint,11,opt,name=open_lv" json:"open_lv,omitempty"`
	// 挑战次数刷新间隔时间(秒)
	ChallengeCountRefreshTime *int64 `protobuf:"varint,12,opt,name=challenge_count_refresh_time" json:"challenge_count_refresh_time,omitempty"`
	// 挑战次数上限
	ChallengeCountLimit *int32 `protobuf:"varint,13,opt,name=challenge_count_limit" json:"challenge_count_limit,omitempty"`
	// 积分赛每次匹配人数
	MatchNum *int32 `protobuf:"varint,14,opt,name=match_num" json:"match_num,omitempty"`
	// 初始积分
	InitScore *int32 `protobuf:"varint,15,opt,name=init_score" json:"init_score,omitempty"`
	// 匹配cd
	MatchCd *int64 `protobuf:"varint,16,opt,name=match_cd" json:"match_cd,omitempty"`
	// 头部名次匹配
	MatchTopNum *int32 `protobuf:"varint,17,opt,name=match_top_num" json:"match_top_num,omitempty"`
	// 底部名次匹配
	MatchBottomNum *int32 `protobuf:"varint,18,opt,name=match_bottom_num" json:"match_bottom_num,omitempty"`
	// 每个成员可挑战次数上限
	EachMemberMaxMatchNum *int32 `protobuf:"varint,19,opt,name=each_member_max_match_num" json:"each_member_max_match_num,omitempty"`
	// 重复比赛buffId
	RepeatMatchBuff []int32 `protobuf:"varint,20,rep,name=repeat_match_buff" json:"repeat_match_buff,omitempty"`
	// 积分p值
	ScoreP *int32 `protobuf:"varint,21,opt,name=score_p" json:"score_p,omitempty"`
	// 赢S值
	WinS *int32 `protobuf:"varint,22,opt,name=win_s" json:"win_s,omitempty"`
	// 输S值
	LoseS *int32 `protobuf:"varint,23,opt,name=lose_s" json:"lose_s,omitempty"`
	// 进入决赛圈联盟数量
	IntoFinalLeagueNum *int32 `protobuf:"varint,24,opt,name=into_final_league_num" json:"into_final_league_num,omitempty"`
	// 决赛分组信息
	FinalGrouping *string `protobuf:"bytes,25,opt,name=final_grouping" json:"final_grouping,omitempty"`
	// 参加匹配最低人数限制
	MatchMinMemberNum *int32 `protobuf:"varint,26,opt,name=match_min_member_num" json:"match_min_member_num,omitempty"`
	// 大跨服最少联盟限制
	BigGroupMinNumLimit *int32 `protobuf:"varint,27,opt,name=big_group_min_num_limit" json:"big_group_min_num_limit,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *LeagueBattleGlobalCfg) Reset()                    { *m = LeagueBattleGlobalCfg{} }
func (m *LeagueBattleGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleGlobalCfg) ProtoMessage()               {}
func (*LeagueBattleGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{89} }

func (m *LeagueBattleGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetShowLastSeasonTopNum() int32 {
	if m != nil && m.ShowLastSeasonTopNum != nil {
		return *m.ShowLastSeasonTopNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetOpenAreaDayCanEnter() int32 {
	if m != nil && m.OpenAreaDayCanEnter != nil {
		return *m.OpenAreaDayCanEnter
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetApplyStageStartTime() string {
	if m != nil && m.ApplyStageStartTime != nil {
		return *m.ApplyStageStartTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetReadyStageStartTime() string {
	if m != nil && m.ReadyStageStartTime != nil {
		return *m.ReadyStageStartTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetPointRaceStartTime() string {
	if m != nil && m.PointRaceStartTime != nil {
		return *m.PointRaceStartTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetFinalStageStartTime() string {
	if m != nil && m.FinalStageStartTime != nil {
		return *m.FinalStageStartTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetFinalFirstRoundTime() string {
	if m != nil && m.FinalFirstRoundTime != nil {
		return *m.FinalFirstRoundTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetFinalSecondRoundTime() string {
	if m != nil && m.FinalSecondRoundTime != nil {
		return *m.FinalSecondRoundTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetFinalTime() string {
	if m != nil && m.FinalTime != nil {
		return *m.FinalTime
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetOpenLv() int32 {
	if m != nil && m.OpenLv != nil {
		return *m.OpenLv
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetChallengeCountRefreshTime() int64 {
	if m != nil && m.ChallengeCountRefreshTime != nil {
		return *m.ChallengeCountRefreshTime
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetChallengeCountLimit() int32 {
	if m != nil && m.ChallengeCountLimit != nil {
		return *m.ChallengeCountLimit
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetMatchNum() int32 {
	if m != nil && m.MatchNum != nil {
		return *m.MatchNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetInitScore() int32 {
	if m != nil && m.InitScore != nil {
		return *m.InitScore
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetMatchCd() int64 {
	if m != nil && m.MatchCd != nil {
		return *m.MatchCd
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetMatchTopNum() int32 {
	if m != nil && m.MatchTopNum != nil {
		return *m.MatchTopNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetMatchBottomNum() int32 {
	if m != nil && m.MatchBottomNum != nil {
		return *m.MatchBottomNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetEachMemberMaxMatchNum() int32 {
	if m != nil && m.EachMemberMaxMatchNum != nil {
		return *m.EachMemberMaxMatchNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetRepeatMatchBuff() []int32 {
	if m != nil {
		return m.RepeatMatchBuff
	}
	return nil
}

func (m *LeagueBattleGlobalCfg) GetScoreP() int32 {
	if m != nil && m.ScoreP != nil {
		return *m.ScoreP
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetWinS() int32 {
	if m != nil && m.WinS != nil {
		return *m.WinS
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetLoseS() int32 {
	if m != nil && m.LoseS != nil {
		return *m.LoseS
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetIntoFinalLeagueNum() int32 {
	if m != nil && m.IntoFinalLeagueNum != nil {
		return *m.IntoFinalLeagueNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetFinalGrouping() string {
	if m != nil && m.FinalGrouping != nil {
		return *m.FinalGrouping
	}
	return ""
}

func (m *LeagueBattleGlobalCfg) GetMatchMinMemberNum() int32 {
	if m != nil && m.MatchMinMemberNum != nil {
		return *m.MatchMinMemberNum
	}
	return 0
}

func (m *LeagueBattleGlobalCfg) GetBigGroupMinNumLimit() int32 {
	if m != nil && m.BigGroupMinNumLimit != nil {
		return *m.BigGroupMinNumLimit
	}
	return 0
}

// 联盟战匹配表
type LeagueBattleMatchCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Scope            []int32 `protobuf:"varint,2,rep,name=scope" json:"scope,omitempty"`
	UpNum            *int32  `protobuf:"varint,3,opt,name=up_num" json:"up_num,omitempty"`
	UpRanking        *int32  `protobuf:"varint,4,opt,name=up_ranking" json:"up_ranking,omitempty"`
	DownNum          *int32  `protobuf:"varint,5,opt,name=down_num" json:"down_num,omitempty"`
	DownRanking      *int32  `protobuf:"varint,6,opt,name=down_ranking" json:"down_ranking,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeagueBattleMatchCfg) Reset()                    { *m = LeagueBattleMatchCfg{} }
func (m *LeagueBattleMatchCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleMatchCfg) ProtoMessage()               {}
func (*LeagueBattleMatchCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{90} }

func (m *LeagueBattleMatchCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattleMatchCfg) GetScope() []int32 {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *LeagueBattleMatchCfg) GetUpNum() int32 {
	if m != nil && m.UpNum != nil {
		return *m.UpNum
	}
	return 0
}

func (m *LeagueBattleMatchCfg) GetUpRanking() int32 {
	if m != nil && m.UpRanking != nil {
		return *m.UpRanking
	}
	return 0
}

func (m *LeagueBattleMatchCfg) GetDownNum() int32 {
	if m != nil && m.DownNum != nil {
		return *m.DownNum
	}
	return 0
}

func (m *LeagueBattleMatchCfg) GetDownRanking() int32 {
	if m != nil && m.DownRanking != nil {
		return *m.DownRanking
	}
	return 0
}

// 联盟战连胜系数表
type LeagueBattleWinStreakRateCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	WinStreak        []int32 `protobuf:"varint,2,rep,name=win_streak" json:"win_streak,omitempty"`
	Rate             *int32  `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeagueBattleWinStreakRateCfg) Reset()                    { *m = LeagueBattleWinStreakRateCfg{} }
func (m *LeagueBattleWinStreakRateCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleWinStreakRateCfg) ProtoMessage()               {}
func (*LeagueBattleWinStreakRateCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{91} }

func (m *LeagueBattleWinStreakRateCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattleWinStreakRateCfg) GetWinStreak() []int32 {
	if m != nil {
		return m.WinStreak
	}
	return nil
}

func (m *LeagueBattleWinStreakRateCfg) GetRate() int32 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

// 联盟战连K值表
type LeagueBattleKValueCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ScoreRange       []int32 `protobuf:"varint,2,rep,name=score_range" json:"score_range,omitempty"`
	K                *int32  `protobuf:"varint,3,opt,name=k" json:"k,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeagueBattleKValueCfg) Reset()                    { *m = LeagueBattleKValueCfg{} }
func (m *LeagueBattleKValueCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleKValueCfg) ProtoMessage()               {}
func (*LeagueBattleKValueCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{92} }

func (m *LeagueBattleKValueCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattleKValueCfg) GetScoreRange() []int32 {
	if m != nil {
		return m.ScoreRange
	}
	return nil
}

func (m *LeagueBattleKValueCfg) GetK() int32 {
	if m != nil && m.K != nil {
		return *m.K
	}
	return 0
}

// 联盟战积分赛奖励
type LeagueBattlePointRaceRewardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排名范围
	RankRange []int32 `protobuf:"varint,2,rep,name=rank_range" json:"rank_range,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueBattlePointRaceRewardCfg) Reset()         { *m = LeagueBattlePointRaceRewardCfg{} }
func (m *LeagueBattlePointRaceRewardCfg) String() string { return proto.CompactTextString(m) }
func (*LeagueBattlePointRaceRewardCfg) ProtoMessage()    {}
func (*LeagueBattlePointRaceRewardCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{93}
}

func (m *LeagueBattlePointRaceRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattlePointRaceRewardCfg) GetRankRange() []int32 {
	if m != nil {
		return m.RankRange
	}
	return nil
}

func (m *LeagueBattlePointRaceRewardCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 联盟战决赛奖励
type LeagueBattleFinalRewardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排名范围
	RankDescribe *string `protobuf:"bytes,2,opt,name=rank_describe" json:"rank_describe,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueBattleFinalRewardCfg) Reset()                    { *m = LeagueBattleFinalRewardCfg{} }
func (m *LeagueBattleFinalRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleFinalRewardCfg) ProtoMessage()               {}
func (*LeagueBattleFinalRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{94} }

func (m *LeagueBattleFinalRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueBattleFinalRewardCfg) GetRankDescribe() string {
	if m != nil && m.RankDescribe != nil {
		return *m.RankDescribe
	}
	return ""
}

func (m *LeagueBattleFinalRewardCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 联盟活动全局表
type LeagueActivityGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 领奖时间（天）
	GetRewardTime *int32 `protobuf:"varint,2,opt,name=get_reward_time" json:"get_reward_time,omitempty"`
	// 活动界面展示排行榜个数
	ShowRankItemNum *int32 `protobuf:"varint,3,opt,name=show_rank_item_num" json:"show_rank_item_num,omitempty"`
	// 联盟活动道具1兑换道具
	Item1Change *ItemVaryConfig `protobuf:"bytes,4,opt,name=item1Change" json:"item1Change,omitempty"`
	// 联盟活动道具2兑换道具
	Item2Change *ItemVaryConfig `protobuf:"bytes,5,opt,name=item2Change" json:"item2Change,omitempty"`
	// 联盟活动代币兑换道具
	CoinChange       *ItemVaryConfig `protobuf:"bytes,6,opt,name=coinChange" json:"coinChange,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *LeagueActivityGlobalCfg) Reset()                    { *m = LeagueActivityGlobalCfg{} }
func (m *LeagueActivityGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityGlobalCfg) ProtoMessage()               {}
func (*LeagueActivityGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{95} }

func (m *LeagueActivityGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityGlobalCfg) GetGetRewardTime() int32 {
	if m != nil && m.GetRewardTime != nil {
		return *m.GetRewardTime
	}
	return 0
}

func (m *LeagueActivityGlobalCfg) GetShowRankItemNum() int32 {
	if m != nil && m.ShowRankItemNum != nil {
		return *m.ShowRankItemNum
	}
	return 0
}

func (m *LeagueActivityGlobalCfg) GetItem1Change() *ItemVaryConfig {
	if m != nil {
		return m.Item1Change
	}
	return nil
}

func (m *LeagueActivityGlobalCfg) GetItem2Change() *ItemVaryConfig {
	if m != nil {
		return m.Item2Change
	}
	return nil
}

func (m *LeagueActivityGlobalCfg) GetCoinChange() *ItemVaryConfig {
	if m != nil {
		return m.CoinChange
	}
	return nil
}

// 联盟活动贡献表
type LeagueActivityDonateCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 消耗id
	ItemId *int32 `protobuf:"varint,2,opt,name=itemId" json:"itemId,omitempty"`
	// 玩家每日捐献上限
	GamerDayLimit *int32 `protobuf:"varint,3,opt,name=gamer_day_limit" json:"gamer_day_limit,omitempty"`
	// 联盟每日捐献上限
	LeagueDayLimit *int32 `protobuf:"varint,4,opt,name=league_day_limit" json:"league_day_limit,omitempty"`
	// 奖励
	Rewards []*ItemVaryConfig `protobuf:"bytes,5,rep,name=rewards" json:"rewards,omitempty"`
	// 捐献提供经验
	Exp              *int32 `protobuf:"varint,6,opt,name=exp" json:"exp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueActivityDonateCfg) Reset()                    { *m = LeagueActivityDonateCfg{} }
func (m *LeagueActivityDonateCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityDonateCfg) ProtoMessage()               {}
func (*LeagueActivityDonateCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{96} }

func (m *LeagueActivityDonateCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityDonateCfg) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *LeagueActivityDonateCfg) GetGamerDayLimit() int32 {
	if m != nil && m.GamerDayLimit != nil {
		return *m.GamerDayLimit
	}
	return 0
}

func (m *LeagueActivityDonateCfg) GetLeagueDayLimit() int32 {
	if m != nil && m.LeagueDayLimit != nil {
		return *m.LeagueDayLimit
	}
	return 0
}

func (m *LeagueActivityDonateCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LeagueActivityDonateCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// 联盟活动等级表
type LeagueActivityLevelCfg struct {
	// id(等级)
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// exp
	Exp *int32 `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	// 奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,5,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueActivityLevelCfg) Reset()                    { *m = LeagueActivityLevelCfg{} }
func (m *LeagueActivityLevelCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityLevelCfg) ProtoMessage()               {}
func (*LeagueActivityLevelCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{97} }

func (m *LeagueActivityLevelCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityLevelCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *LeagueActivityLevelCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 联盟活动任务表
type LeagueActivityTaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 任务类型（1.普通，2.日常）
	TaskType *int32 `protobuf:"varint,2,opt,name=task_type" json:"task_type,omitempty"`
	// 条件id
	ConditionId *int32 `protobuf:"varint,3,opt,name=condition_id" json:"condition_id,omitempty"`
	// 奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,5,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueActivityTaskCfg) Reset()                    { *m = LeagueActivityTaskCfg{} }
func (m *LeagueActivityTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityTaskCfg) ProtoMessage()               {}
func (*LeagueActivityTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{98} }

func (m *LeagueActivityTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityTaskCfg) GetTaskType() int32 {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return 0
}

func (m *LeagueActivityTaskCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *LeagueActivityTaskCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 联盟活动排行奖励
type LeagueActivityRankRewardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排行
	Ranking []int32 `protobuf:"varint,2,rep,name=ranking" json:"ranking,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueActivityRankRewardCfg) Reset()                    { *m = LeagueActivityRankRewardCfg{} }
func (m *LeagueActivityRankRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityRankRewardCfg) ProtoMessage()               {}
func (*LeagueActivityRankRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{99} }

func (m *LeagueActivityRankRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityRankRewardCfg) GetRanking() []int32 {
	if m != nil {
		return m.Ranking
	}
	return nil
}

func (m *LeagueActivityRankRewardCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 联盟活动商店
type LeagueActivityShopCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	// 奖励
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// 积分条件
	Score *int32 `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	// 价格
	Price            []*ItemVaryConfig `protobuf:"bytes,5,rep,name=price" json:"price,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LeagueActivityShopCfg) Reset()                    { *m = LeagueActivityShopCfg{} }
func (m *LeagueActivityShopCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityShopCfg) ProtoMessage()               {}
func (*LeagueActivityShopCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{100} }

func (m *LeagueActivityShopCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityShopCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *LeagueActivityShopCfg) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *LeagueActivityShopCfg) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *LeagueActivityShopCfg) GetPrice() []*ItemVaryConfig {
	if m != nil {
		return m.Price
	}
	return nil
}

// 联盟活动特惠礼包
type LeagueActivityGiftCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	// 奖励
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// 充值id(充值id为0就是可以免费领取的)
	Topup            *int32 `protobuf:"varint,4,opt,name=topup" json:"topup,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeagueActivityGiftCfg) Reset()                    { *m = LeagueActivityGiftCfg{} }
func (m *LeagueActivityGiftCfg) String() string            { return proto.CompactTextString(m) }
func (*LeagueActivityGiftCfg) ProtoMessage()               {}
func (*LeagueActivityGiftCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{101} }

func (m *LeagueActivityGiftCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LeagueActivityGiftCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *LeagueActivityGiftCfg) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *LeagueActivityGiftCfg) GetTopup() int32 {
	if m != nil && m.Topup != nil {
		return *m.Topup
	}
	return 0
}

// buff拥有的效果
type BuffEffectConfig struct {
	Key              *int32 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Field            *int32 `protobuf:"varint,2,opt,name=field" json:"field,omitempty"`
	Value            *int32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BuffEffectConfig) Reset()                    { *m = BuffEffectConfig{} }
func (m *BuffEffectConfig) String() string            { return proto.CompactTextString(m) }
func (*BuffEffectConfig) ProtoMessage()               {}
func (*BuffEffectConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{102} }

func (m *BuffEffectConfig) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *BuffEffectConfig) GetField() int32 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *BuffEffectConfig) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// buffconfig
type BuffConfig struct {
	Id              *int32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuffMainId      *int32              `protobuf:"varint,2,opt,name=buff_main_id" json:"buff_main_id,omitempty"`
	BuffLv          *int32              `protobuf:"varint,3,opt,name=buff_lv" json:"buff_lv,omitempty"`
	BuffSigns       []int32             `protobuf:"varint,4,rep,name=buff_signs" json:"buff_signs,omitempty"`
	LastType        *int32              `protobuf:"varint,5,opt,name=last_type" json:"last_type,omitempty"`
	LastTime        *int32              `protobuf:"varint,6,opt,name=last_time" json:"last_time,omitempty"`
	EffectTrigTime  *int32              `protobuf:"varint,7,opt,name=effect_trig_time" json:"effect_trig_time,omitempty"`
	EffectCondition *string             `protobuf:"bytes,8,opt,name=effect_condition" json:"effect_condition,omitempty"`
	TrigProb        *int32              `protobuf:"varint,9,opt,name=trig_prob" json:"trig_prob,omitempty"`
	GapRound        *int32              `protobuf:"varint,10,opt,name=gap_round" json:"gap_round,omitempty"`
	TrigEffect      *string             `protobuf:"bytes,11,opt,name=trig_effect" json:"trig_effect,omitempty"`
	OwnEffectType   *int32              `protobuf:"varint,12,opt,name=own_effect_type" json:"own_effect_type,omitempty"`
	OwnEffect       []*BuffEffectConfig `protobuf:"bytes,13,rep,name=own_effect" json:"own_effect,omitempty"`
	TrigTimesLimit  *TypeValueConfig    `protobuf:"bytes,14,opt,name=trig_times_limit" json:"trig_times_limit,omitempty"`
	ComposType      *int32              `protobuf:"varint,15,opt,name=compos_type" json:"compos_type,omitempty"`
	// buff叠加限制1个参数为初始层数，2个参数为初始层和限制层数10;2（8-12之间限制）
	ComposLimit      []int32 `protobuf:"varint,16,rep,name=compos_limit" json:"compos_limit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BuffConfig) Reset()                    { *m = BuffConfig{} }
func (m *BuffConfig) String() string            { return proto.CompactTextString(m) }
func (*BuffConfig) ProtoMessage()               {}
func (*BuffConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{103} }

func (m *BuffConfig) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BuffConfig) GetBuffMainId() int32 {
	if m != nil && m.BuffMainId != nil {
		return *m.BuffMainId
	}
	return 0
}

func (m *BuffConfig) GetBuffLv() int32 {
	if m != nil && m.BuffLv != nil {
		return *m.BuffLv
	}
	return 0
}

func (m *BuffConfig) GetBuffSigns() []int32 {
	if m != nil {
		return m.BuffSigns
	}
	return nil
}

func (m *BuffConfig) GetLastType() int32 {
	if m != nil && m.LastType != nil {
		return *m.LastType
	}
	return 0
}

func (m *BuffConfig) GetLastTime() int32 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

func (m *BuffConfig) GetEffectTrigTime() int32 {
	if m != nil && m.EffectTrigTime != nil {
		return *m.EffectTrigTime
	}
	return 0
}

func (m *BuffConfig) GetEffectCondition() string {
	if m != nil && m.EffectCondition != nil {
		return *m.EffectCondition
	}
	return ""
}

func (m *BuffConfig) GetTrigProb() int32 {
	if m != nil && m.TrigProb != nil {
		return *m.TrigProb
	}
	return 0
}

func (m *BuffConfig) GetGapRound() int32 {
	if m != nil && m.GapRound != nil {
		return *m.GapRound
	}
	return 0
}

func (m *BuffConfig) GetTrigEffect() string {
	if m != nil && m.TrigEffect != nil {
		return *m.TrigEffect
	}
	return ""
}

func (m *BuffConfig) GetOwnEffectType() int32 {
	if m != nil && m.OwnEffectType != nil {
		return *m.OwnEffectType
	}
	return 0
}

func (m *BuffConfig) GetOwnEffect() []*BuffEffectConfig {
	if m != nil {
		return m.OwnEffect
	}
	return nil
}

func (m *BuffConfig) GetTrigTimesLimit() *TypeValueConfig {
	if m != nil {
		return m.TrigTimesLimit
	}
	return nil
}

func (m *BuffConfig) GetComposType() int32 {
	if m != nil && m.ComposType != nil {
		return *m.ComposType
	}
	return 0
}

func (m *BuffConfig) GetComposLimit() []int32 {
	if m != nil {
		return m.ComposLimit
	}
	return nil
}

// 球员技能
type BallerSkill struct {
	BallerId         *int32  `protobuf:"varint,1,opt,name=baller_id" json:"baller_id,omitempty"`
	Skills           []int32 `protobuf:"varint,2,rep,name=skills" json:"skills,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BallerSkill) Reset()                    { *m = BallerSkill{} }
func (m *BallerSkill) String() string            { return proto.CompactTextString(m) }
func (*BallerSkill) ProtoMessage()               {}
func (*BallerSkill) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{104} }

func (m *BallerSkill) GetBallerId() int32 {
	if m != nil && m.BallerId != nil {
		return *m.BallerId
	}
	return 0
}

func (m *BallerSkill) GetSkills() []int32 {
	if m != nil {
		return m.Skills
	}
	return nil
}

// 技能配置
type SkillConfig struct {
	SkillId          *int32  `protobuf:"varint,1,opt,name=skill_id" json:"skill_id,omitempty"`
	MainId           *int32  `protobuf:"varint,2,opt,name=main_id" json:"main_id,omitempty"`
	SkillLv          *int32  `protobuf:"varint,3,opt,name=skill_lv" json:"skill_lv,omitempty"`
	BuffId           *int32  `protobuf:"varint,4,opt,name=buff_id" json:"buff_id,omitempty"`
	Buffids          []int32 `protobuf:"varint,5,rep,name=buffids" json:"buffids,omitempty"`
	Power            *int32  `protobuf:"varint,7,opt,name=power" json:"power,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SkillConfig) Reset()                    { *m = SkillConfig{} }
func (m *SkillConfig) String() string            { return proto.CompactTextString(m) }
func (*SkillConfig) ProtoMessage()               {}
func (*SkillConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{105} }

func (m *SkillConfig) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *SkillConfig) GetMainId() int32 {
	if m != nil && m.MainId != nil {
		return *m.MainId
	}
	return 0
}

func (m *SkillConfig) GetSkillLv() int32 {
	if m != nil && m.SkillLv != nil {
		return *m.SkillLv
	}
	return 0
}

func (m *SkillConfig) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *SkillConfig) GetBuffids() []int32 {
	if m != nil {
		return m.Buffids
	}
	return nil
}

func (m *SkillConfig) GetPower() int32 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

// 额外专属值条件1_球员范围_行为_专属值, 2_回合类型_0_专属值
type ExclusiveCondition struct {
	CondType         *int32 `protobuf:"varint,1,opt,name=cond_type" json:"cond_type,omitempty"`
	CondKey          *int32 `protobuf:"varint,2,opt,name=cond_key" json:"cond_key,omitempty"`
	CondField        *int32 `protobuf:"varint,3,opt,name=cond_field" json:"cond_field,omitempty"`
	CondValue        *int32 `protobuf:"varint,4,opt,name=cond_value" json:"cond_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExclusiveCondition) Reset()                    { *m = ExclusiveCondition{} }
func (m *ExclusiveCondition) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveCondition) ProtoMessage()               {}
func (*ExclusiveCondition) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{106} }

func (m *ExclusiveCondition) GetCondType() int32 {
	if m != nil && m.CondType != nil {
		return *m.CondType
	}
	return 0
}

func (m *ExclusiveCondition) GetCondKey() int32 {
	if m != nil && m.CondKey != nil {
		return *m.CondKey
	}
	return 0
}

func (m *ExclusiveCondition) GetCondField() int32 {
	if m != nil && m.CondField != nil {
		return *m.CondField
	}
	return 0
}

func (m *ExclusiveCondition) GetCondValue() int32 {
	if m != nil && m.CondValue != nil {
		return *m.CondValue
	}
	return 0
}

// 专属时刻表
type ExclusiveTimeCfg struct {
	// 专属动作ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 专属节点类型1:成功 2：反击
	BranchType *int32 `protobuf:"varint,2,opt,name=branch_type" json:"branch_type,omitempty"`
	// 专属动作配置
	ExclusiveActionDispose *string `protobuf:"bytes,3,opt,name=exclusive_action_dispose" json:"exclusive_action_dispose,omitempty"`
	// 额外专属值条件1_球员范围_行为_专属值, 2_回合类型_0_专属值
	ExtreExclusiveCondition []*ExclusiveCondition `protobuf:"bytes,4,rep,name=extre_exclusive_condition" json:"extre_exclusive_condition,omitempty"`
	// 效果触发概率 0 无效果
	EffectTrigProb *int32 `protobuf:"varint,5,opt,name=effect_trig_prob" json:"effect_trig_prob,omitempty"`
	// 触发效果
	TrigEffect       []*BuffEffectConfig `protobuf:"bytes,6,rep,name=trig_effect" json:"trig_effect,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *ExclusiveTimeCfg) Reset()                    { *m = ExclusiveTimeCfg{} }
func (m *ExclusiveTimeCfg) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveTimeCfg) ProtoMessage()               {}
func (*ExclusiveTimeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{107} }

func (m *ExclusiveTimeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveTimeCfg) GetBranchType() int32 {
	if m != nil && m.BranchType != nil {
		return *m.BranchType
	}
	return 0
}

func (m *ExclusiveTimeCfg) GetExclusiveActionDispose() string {
	if m != nil && m.ExclusiveActionDispose != nil {
		return *m.ExclusiveActionDispose
	}
	return ""
}

func (m *ExclusiveTimeCfg) GetExtreExclusiveCondition() []*ExclusiveCondition {
	if m != nil {
		return m.ExtreExclusiveCondition
	}
	return nil
}

func (m *ExclusiveTimeCfg) GetEffectTrigProb() int32 {
	if m != nil && m.EffectTrigProb != nil {
		return *m.EffectTrigProb
	}
	return 0
}

func (m *ExclusiveTimeCfg) GetTrigEffect() []*BuffEffectConfig {
	if m != nil {
		return m.TrigEffect
	}
	return nil
}

// 专属时刻触发表
type ExclusiveTimeTrigCfg struct {
	// 触发配置ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 触发消耗专属值
	TrigPoint *int32 `protobuf:"varint,2,opt,name=trig_point" json:"trig_point,omitempty"`
	// 专属值上限
	PointCeiling *int32 `protobuf:"varint,3,opt,name=point_ceiling" json:"point_ceiling,omitempty"`
	// 触发间隔
	GapRound *int32 `protobuf:"varint,4,opt,name=gap_round" json:"gap_round,omitempty"`
	// 专属值基础增加方式
	PointAddMode     []*ExclusiveCondition `protobuf:"bytes,5,rep,name=point_add_mode" json:"point_add_mode,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ExclusiveTimeTrigCfg) Reset()                    { *m = ExclusiveTimeTrigCfg{} }
func (m *ExclusiveTimeTrigCfg) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveTimeTrigCfg) ProtoMessage()               {}
func (*ExclusiveTimeTrigCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{108} }

func (m *ExclusiveTimeTrigCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveTimeTrigCfg) GetTrigPoint() int32 {
	if m != nil && m.TrigPoint != nil {
		return *m.TrigPoint
	}
	return 0
}

func (m *ExclusiveTimeTrigCfg) GetPointCeiling() int32 {
	if m != nil && m.PointCeiling != nil {
		return *m.PointCeiling
	}
	return 0
}

func (m *ExclusiveTimeTrigCfg) GetGapRound() int32 {
	if m != nil && m.GapRound != nil {
		return *m.GapRound
	}
	return 0
}

func (m *ExclusiveTimeTrigCfg) GetPointAddMode() []*ExclusiveCondition {
	if m != nil {
		return m.PointAddMode
	}
	return nil
}

// 无双段位配置
type PeerlessDanCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 段位积分
	Condition []int32 `protobuf:"varint,2,rep,name=condition" json:"condition,omitempty"`
	// 主动挑战，胜利积分
	ActiveWin *int32 `protobuf:"varint,3,opt,name=active_win" json:"active_win,omitempty"`
	// 主动挑战，失败扣分
	ActiveLose *int32 `protobuf:"varint,4,opt,name=active_lose" json:"active_lose,omitempty"`
	// 被挑战，胜利得分
	PassiveWin *int32 `protobuf:"varint,5,opt,name=passive_win" json:"passive_win,omitempty"`
	// 被挑战，失败扣分
	PassiveLose *int32 `protobuf:"varint,6,opt,name=passive_lose" json:"passive_lose,omitempty"`
	// 下期初始分数
	NextPeriodInitScore *int32 `protobuf:"varint,7,opt,name=next_period_init_score" json:"next_period_init_score,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *PeerlessDanCfg) Reset()                    { *m = PeerlessDanCfg{} }
func (m *PeerlessDanCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessDanCfg) ProtoMessage()               {}
func (*PeerlessDanCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{109} }

func (m *PeerlessDanCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessDanCfg) GetCondition() []int32 {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *PeerlessDanCfg) GetActiveWin() int32 {
	if m != nil && m.ActiveWin != nil {
		return *m.ActiveWin
	}
	return 0
}

func (m *PeerlessDanCfg) GetActiveLose() int32 {
	if m != nil && m.ActiveLose != nil {
		return *m.ActiveLose
	}
	return 0
}

func (m *PeerlessDanCfg) GetPassiveWin() int32 {
	if m != nil && m.PassiveWin != nil {
		return *m.PassiveWin
	}
	return 0
}

func (m *PeerlessDanCfg) GetPassiveLose() int32 {
	if m != nil && m.PassiveLose != nil {
		return *m.PassiveLose
	}
	return 0
}

func (m *PeerlessDanCfg) GetNextPeriodInitScore() int32 {
	if m != nil && m.NextPeriodInitScore != nil {
		return *m.NextPeriodInitScore
	}
	return 0
}

// 无双段位奖励配置
type PeerlessDanRewardCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件
	ConditionId *int32 `protobuf:"varint,2,opt,name=condition_id" json:"condition_id,omitempty"`
	// 挑战奖励
	ChanllengeReward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=chanllenge_reward" json:"chanllenge_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PeerlessDanRewardCfg) Reset()                    { *m = PeerlessDanRewardCfg{} }
func (m *PeerlessDanRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessDanRewardCfg) ProtoMessage()               {}
func (*PeerlessDanRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{110} }

func (m *PeerlessDanRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessDanRewardCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *PeerlessDanRewardCfg) GetChanllengeReward() []*ItemVaryConfig {
	if m != nil {
		return m.ChanllengeReward
	}
	return nil
}

// 无双排行奖励配置
type PeerlessRankRewardCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排名区间下限
	RankingFloor *int32 `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	// 排名区间上限
	RankingToplimit *int32 `protobuf:"varint,3,opt,name=ranking_toplimit" json:"ranking_toplimit,omitempty"`
	// 排名奖励
	RankingReward    []*ItemVaryConfig `protobuf:"bytes,4,rep,name=ranking_reward" json:"ranking_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PeerlessRankRewardCfg) Reset()                    { *m = PeerlessRankRewardCfg{} }
func (m *PeerlessRankRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRankRewardCfg) ProtoMessage()               {}
func (*PeerlessRankRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{111} }

func (m *PeerlessRankRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessRankRewardCfg) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *PeerlessRankRewardCfg) GetRankingToplimit() int32 {
	if m != nil && m.RankingToplimit != nil {
		return *m.RankingToplimit
	}
	return 0
}

func (m *PeerlessRankRewardCfg) GetRankingReward() []*ItemVaryConfig {
	if m != nil {
		return m.RankingReward
	}
	return nil
}

// 无双挑战范围配置
type PeerlessChallengeRangeCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排名区间下限
	RankingFloor *int32 `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	// 排名区间上限
	RankingToplimit *int32 `protobuf:"varint,3,opt,name=ranking_toplimit" json:"ranking_toplimit,omitempty"`
	// 对手排名相距系数(万分比)
	OpponentsRankRatio []int32 `protobuf:"varint,4,rep,name=opponents_rank_ratio" json:"opponents_rank_ratio,omitempty"`
	// 对手波动范围(万分比)
	OpponentsRandom  []int32 `protobuf:"varint,5,rep,name=opponents_random" json:"opponents_random,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PeerlessChallengeRangeCfg) Reset()                    { *m = PeerlessChallengeRangeCfg{} }
func (m *PeerlessChallengeRangeCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessChallengeRangeCfg) ProtoMessage()               {}
func (*PeerlessChallengeRangeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{112} }

func (m *PeerlessChallengeRangeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessChallengeRangeCfg) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *PeerlessChallengeRangeCfg) GetRankingToplimit() int32 {
	if m != nil && m.RankingToplimit != nil {
		return *m.RankingToplimit
	}
	return 0
}

func (m *PeerlessChallengeRangeCfg) GetOpponentsRankRatio() []int32 {
	if m != nil {
		return m.OpponentsRankRatio
	}
	return nil
}

func (m *PeerlessChallengeRangeCfg) GetOpponentsRandom() []int32 {
	if m != nil {
		return m.OpponentsRandom
	}
	return nil
}

// 无双购买挑战次数价格配置
type PeerlessBuyChallengeCountPriceCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 付费挑战次数
	ArenaPaytime *int32 `protobuf:"varint,2,opt,name=arena_paytime" json:"arena_paytime,omitempty"`
	// 消耗
	Consume          *ItemVaryConfig `protobuf:"bytes,3,opt,name=consume" json:"consume,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PeerlessBuyChallengeCountPriceCfg) Reset()         { *m = PeerlessBuyChallengeCountPriceCfg{} }
func (m *PeerlessBuyChallengeCountPriceCfg) String() string { return proto.CompactTextString(m) }
func (*PeerlessBuyChallengeCountPriceCfg) ProtoMessage()    {}
func (*PeerlessBuyChallengeCountPriceCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{113}
}

func (m *PeerlessBuyChallengeCountPriceCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessBuyChallengeCountPriceCfg) GetArenaPaytime() int32 {
	if m != nil && m.ArenaPaytime != nil {
		return *m.ArenaPaytime
	}
	return 0
}

func (m *PeerlessBuyChallengeCountPriceCfg) GetConsume() *ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

// 无双机器人配置
type PeerlessRobotCfg struct {
	// 排名区间ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// NPC等级
	NpcLv *int32 `protobuf:"varint,5,opt,name=npc_lv" json:"npc_lv,omitempty"`
	// 球员等级
	BallerLv *int32 `protobuf:"varint,6,opt,name=baller_lv" json:"baller_lv,omitempty"`
	// 球员品质
	BallerQuality *int32 `protobuf:"varint,7,opt,name=baller_quality" json:"baller_quality,omitempty"`
	// 球员星级
	BallerStar *int32 `protobuf:"varint,8,opt,name=baller_star" json:"baller_star,omitempty"`
	// 主力配置库1
	MainBallers_01 []int32 `protobuf:"varint,9,rep,name=main_ballers_01" json:"main_ballers_01,omitempty"`
	// 主力配置库2
	MainBallers_02 []int32 `protobuf:"varint,10,rep,name=main_ballers_02" json:"main_ballers_02,omitempty"`
	// 主力配置库3
	MainBallers_03 []int32 `protobuf:"varint,11,rep,name=main_ballers_03" json:"main_ballers_03,omitempty"`
	// 替补配置库1
	BackupBallers_01 []int32 `protobuf:"varint,12,rep,name=backup_ballers_01" json:"backup_ballers_01,omitempty"`
	// 替补配置库3
	BackupBallers_02 []int32 `protobuf:"varint,13,rep,name=backup_ballers_02" json:"backup_ballers_02,omitempty"`
	// 替补配置库3
	BackupBallers_03 []int32 `protobuf:"varint,14,rep,name=backup_ballers_03" json:"backup_ballers_03,omitempty"`
	// 额外属性数值
	ExtraValue *int32 `protobuf:"varint,15,opt,name=extra_value" json:"extra_value,omitempty"`
	// 战力下限
	MinPower *int32 `protobuf:"varint,16,opt,name=min_power" json:"min_power,omitempty"`
	// 战力上限
	MaxPower *int32 `protobuf:"varint,17,opt,name=max_power" json:"max_power,omitempty"`
	// 额外战力值
	ExtraPower *int32 `protobuf:"varint,18,opt,name=extra_power" json:"extra_power,omitempty"`
	// 额外战力万分比
	ExtraPerPower    *int32 `protobuf:"varint,19,opt,name=extra_per_power" json:"extra_per_power,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessRobotCfg) Reset()                    { *m = PeerlessRobotCfg{} }
func (m *PeerlessRobotCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRobotCfg) ProtoMessage()               {}
func (*PeerlessRobotCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{114} }

func (m *PeerlessRobotCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessRobotCfg) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *PeerlessRobotCfg) GetBallerLv() int32 {
	if m != nil && m.BallerLv != nil {
		return *m.BallerLv
	}
	return 0
}

func (m *PeerlessRobotCfg) GetBallerQuality() int32 {
	if m != nil && m.BallerQuality != nil {
		return *m.BallerQuality
	}
	return 0
}

func (m *PeerlessRobotCfg) GetBallerStar() int32 {
	if m != nil && m.BallerStar != nil {
		return *m.BallerStar
	}
	return 0
}

func (m *PeerlessRobotCfg) GetMainBallers_01() []int32 {
	if m != nil {
		return m.MainBallers_01
	}
	return nil
}

func (m *PeerlessRobotCfg) GetMainBallers_02() []int32 {
	if m != nil {
		return m.MainBallers_02
	}
	return nil
}

func (m *PeerlessRobotCfg) GetMainBallers_03() []int32 {
	if m != nil {
		return m.MainBallers_03
	}
	return nil
}

func (m *PeerlessRobotCfg) GetBackupBallers_01() []int32 {
	if m != nil {
		return m.BackupBallers_01
	}
	return nil
}

func (m *PeerlessRobotCfg) GetBackupBallers_02() []int32 {
	if m != nil {
		return m.BackupBallers_02
	}
	return nil
}

func (m *PeerlessRobotCfg) GetBackupBallers_03() []int32 {
	if m != nil {
		return m.BackupBallers_03
	}
	return nil
}

func (m *PeerlessRobotCfg) GetExtraValue() int32 {
	if m != nil && m.ExtraValue != nil {
		return *m.ExtraValue
	}
	return 0
}

func (m *PeerlessRobotCfg) GetMinPower() int32 {
	if m != nil && m.MinPower != nil {
		return *m.MinPower
	}
	return 0
}

func (m *PeerlessRobotCfg) GetMaxPower() int32 {
	if m != nil && m.MaxPower != nil {
		return *m.MaxPower
	}
	return 0
}

func (m *PeerlessRobotCfg) GetExtraPower() int32 {
	if m != nil && m.ExtraPower != nil {
		return *m.ExtraPower
	}
	return 0
}

func (m *PeerlessRobotCfg) GetExtraPerPower() int32 {
	if m != nil && m.ExtraPerPower != nil {
		return *m.ExtraPerPower
	}
	return 0
}

// 无双竞技场机器人随机库
type PeerlessRobotRandCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RandNpcAggregate []*TypeValueConfig `protobuf:"bytes,2,rep,name=rand_npc_aggregate" json:"rand_npc_aggregate,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PeerlessRobotRandCfg) Reset()                    { *m = PeerlessRobotRandCfg{} }
func (m *PeerlessRobotRandCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRobotRandCfg) ProtoMessage()               {}
func (*PeerlessRobotRandCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{115} }

func (m *PeerlessRobotRandCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessRobotRandCfg) GetRandNpcAggregate() []*TypeValueConfig {
	if m != nil {
		return m.RandNpcAggregate
	}
	return nil
}

// 无双离散数据
type PeerlessDiscreteCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 每次刷新对手个数
	OppoNum *int32 `protobuf:"varint,2,opt,name=oppo_num" json:"oppo_num,omitempty"`
	// 服务器缓存机器人个数
	RobotNum *int32 `protobuf:"varint,3,opt,name=robot_num" json:"robot_num,omitempty"`
	// 无双开启时间
	StartTime []int32 `protobuf:"varint,4,rep,name=start_time" json:"start_time,omitempty"`
	// 无双结束时间
	OverTime []int32 `protobuf:"varint,5,rep,name=over_time" json:"over_time,omitempty"`
	// 每日挑战次数
	DailyChallengeCount *int32 `protobuf:"varint,6,opt,name=daily_challenge_count" json:"daily_challenge_count,omitempty"`
	// 每次购买获得挑战次数
	BuyChallengeCountPer *int32 `protobuf:"varint,7,opt,name=buy_challenge_count_per" json:"buy_challenge_count_per,omitempty"`
	// 机器人初始积分
	RobotInitScore *int32 `protobuf:"varint,8,opt,name=robot_init_score" json:"robot_init_score,omitempty"`
	// 最大历史记录条数
	HistoryMaxNum *int32 `protobuf:"varint,9,opt,name=history_max_num" json:"history_max_num,omitempty"`
	// 顶尖排行榜人数
	TopRankingNum *int32 `protobuf:"varint,10,opt,name=top_ranking_num" json:"top_ranking_num,omitempty"`
	// 每段位排行榜显示个数
	DanRankShowNum *int32 `protobuf:"varint,11,opt,name=dan_rank_show_num" json:"dan_rank_show_num,omitempty"`
	// 刷新排行榜cd
	RefreshRankCd *int32 `protobuf:"varint,12,opt,name=refresh_rank_cd" json:"refresh_rank_cd,omitempty"`
	// 刷新对手cd
	RefreshOppCd *int32 `protobuf:"varint,13,opt,name=refresh_opp_cd" json:"refresh_opp_cd,omitempty"`
	// 段位排行榜最大展示个数
	DanRankMaxShowNum *int32 `protobuf:"varint,14,opt,name=dan_rank_max_show_num" json:"dan_rank_max_show_num,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *PeerlessDiscreteCfg) Reset()                    { *m = PeerlessDiscreteCfg{} }
func (m *PeerlessDiscreteCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessDiscreteCfg) ProtoMessage()               {}
func (*PeerlessDiscreteCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{116} }

func (m *PeerlessDiscreteCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetOppoNum() int32 {
	if m != nil && m.OppoNum != nil {
		return *m.OppoNum
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetRobotNum() int32 {
	if m != nil && m.RobotNum != nil {
		return *m.RobotNum
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetStartTime() []int32 {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *PeerlessDiscreteCfg) GetOverTime() []int32 {
	if m != nil {
		return m.OverTime
	}
	return nil
}

func (m *PeerlessDiscreteCfg) GetDailyChallengeCount() int32 {
	if m != nil && m.DailyChallengeCount != nil {
		return *m.DailyChallengeCount
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetBuyChallengeCountPer() int32 {
	if m != nil && m.BuyChallengeCountPer != nil {
		return *m.BuyChallengeCountPer
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetRobotInitScore() int32 {
	if m != nil && m.RobotInitScore != nil {
		return *m.RobotInitScore
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetHistoryMaxNum() int32 {
	if m != nil && m.HistoryMaxNum != nil {
		return *m.HistoryMaxNum
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetTopRankingNum() int32 {
	if m != nil && m.TopRankingNum != nil {
		return *m.TopRankingNum
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetDanRankShowNum() int32 {
	if m != nil && m.DanRankShowNum != nil {
		return *m.DanRankShowNum
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetRefreshRankCd() int32 {
	if m != nil && m.RefreshRankCd != nil {
		return *m.RefreshRankCd
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetRefreshOppCd() int32 {
	if m != nil && m.RefreshOppCd != nil {
		return *m.RefreshOppCd
	}
	return 0
}

func (m *PeerlessDiscreteCfg) GetDanRankMaxShowNum() int32 {
	if m != nil && m.DanRankMaxShowNum != nil {
		return *m.DanRankMaxShowNum
	}
	return 0
}

// 无双跨服分组配置
type PeerlessGroupingCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 区服id列表
	ZoneIdList       []int32 `protobuf:"varint,2,rep,name=zone_id_list" json:"zone_id_list,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PeerlessGroupingCfg) Reset()                    { *m = PeerlessGroupingCfg{} }
func (m *PeerlessGroupingCfg) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGroupingCfg) ProtoMessage()               {}
func (*PeerlessGroupingCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{117} }

func (m *PeerlessGroupingCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PeerlessGroupingCfg) GetZoneIdList() []int32 {
	if m != nil {
		return m.ZoneIdList
	}
	return nil
}

// 常规赛赛季配置
type RegularSeasonCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ConditionList    []int32           `protobuf:"varint,3,rep,name=condition_list" json:"condition_list,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	NextSeasonId     *int32            `protobuf:"varint,5,opt,name=next_season_id" json:"next_season_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RegularSeasonCfg) Reset()                    { *m = RegularSeasonCfg{} }
func (m *RegularSeasonCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularSeasonCfg) ProtoMessage()               {}
func (*RegularSeasonCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{118} }

func (m *RegularSeasonCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularSeasonCfg) GetConditionList() []int32 {
	if m != nil {
		return m.ConditionList
	}
	return nil
}

func (m *RegularSeasonCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RegularSeasonCfg) GetNextSeasonId() int32 {
	if m != nil && m.NextSeasonId != nil {
		return *m.NextSeasonId
	}
	return 0
}

// 常规赛赛程
type RegularScheduleCfg struct {
	Id                 *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SeasonId           *int32            `protobuf:"varint,2,opt,name=season_id" json:"season_id,omitempty"`
	Month              *int32            `protobuf:"varint,3,opt,name=month" json:"month,omitempty"`
	EventType          *int32            `protobuf:"varint,4,opt,name=event_type" json:"event_type,omitempty"`
	EventId            *int32            `protobuf:"varint,5,opt,name=event_id" json:"event_id,omitempty"`
	NoviceGuildMatchId []int32           `protobuf:"varint,6,rep,name=novice_guild_match_id" json:"novice_guild_match_id,omitempty"`
	PreScheduleId      *int32            `protobuf:"varint,7,opt,name=pre_schedule_id" json:"pre_schedule_id,omitempty"`
	Cost               *ItemVaryConfig   `protobuf:"bytes,8,opt,name=cost" json:"cost,omitempty"`
	GamerExp           *ItemVaryConfig   `protobuf:"bytes,9,opt,name=gamer_exp" json:"gamer_exp,omitempty"`
	PlayerExp          *int32            `protobuf:"varint,10,opt,name=player_exp" json:"player_exp,omitempty"`
	FirstShow          []*ItemVaryConfig `protobuf:"bytes,11,rep,name=first_show" json:"first_show,omitempty"`
	NotFirstDrops      *int32            `protobuf:"varint,12,opt,name=not_first_drops" json:"not_first_drops,omitempty"`
	Division           *int32            `protobuf:"varint,13,opt,name=division" json:"division,omitempty"`
	HalfMonthDsc       *int32            `protobuf:"varint,14,opt,name=half_month_dsc" json:"half_month_dsc,omitempty"`
	Level              *int32            `protobuf:"varint,15,opt,name=level" json:"level,omitempty"`
	MonthCrux          *int32            `protobuf:"varint,16,opt,name=month_crux" json:"month_crux,omitempty"`
	XXX_unrecognized   []byte            `json:"-"`
}

func (m *RegularScheduleCfg) Reset()                    { *m = RegularScheduleCfg{} }
func (m *RegularScheduleCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularScheduleCfg) ProtoMessage()               {}
func (*RegularScheduleCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{119} }

func (m *RegularScheduleCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularScheduleCfg) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *RegularScheduleCfg) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *RegularScheduleCfg) GetEventType() int32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *RegularScheduleCfg) GetEventId() int32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *RegularScheduleCfg) GetNoviceGuildMatchId() []int32 {
	if m != nil {
		return m.NoviceGuildMatchId
	}
	return nil
}

func (m *RegularScheduleCfg) GetPreScheduleId() int32 {
	if m != nil && m.PreScheduleId != nil {
		return *m.PreScheduleId
	}
	return 0
}

func (m *RegularScheduleCfg) GetCost() *ItemVaryConfig {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *RegularScheduleCfg) GetGamerExp() *ItemVaryConfig {
	if m != nil {
		return m.GamerExp
	}
	return nil
}

func (m *RegularScheduleCfg) GetPlayerExp() int32 {
	if m != nil && m.PlayerExp != nil {
		return *m.PlayerExp
	}
	return 0
}

func (m *RegularScheduleCfg) GetFirstShow() []*ItemVaryConfig {
	if m != nil {
		return m.FirstShow
	}
	return nil
}

func (m *RegularScheduleCfg) GetNotFirstDrops() int32 {
	if m != nil && m.NotFirstDrops != nil {
		return *m.NotFirstDrops
	}
	return 0
}

func (m *RegularScheduleCfg) GetDivision() int32 {
	if m != nil && m.Division != nil {
		return *m.Division
	}
	return 0
}

func (m *RegularScheduleCfg) GetHalfMonthDsc() int32 {
	if m != nil && m.HalfMonthDsc != nil {
		return *m.HalfMonthDsc
	}
	return 0
}

func (m *RegularScheduleCfg) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *RegularScheduleCfg) GetMonthCrux() int32 {
	if m != nil && m.MonthCrux != nil {
		return *m.MonthCrux
	}
	return 0
}

// 季后赛赛程
type PlayoffScheduleCfg struct {
	Id                *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SeasonId          *int32            `protobuf:"varint,2,opt,name=season_id" json:"season_id,omitempty"`
	Round             *int32            `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Cost              []*ItemVaryConfig `protobuf:"bytes,4,rep,name=cost" json:"cost,omitempty"`
	GamerExp          *ItemVaryConfig   `protobuf:"bytes,5,opt,name=gamer_exp" json:"gamer_exp,omitempty"`
	PlayerExp         *int32            `protobuf:"varint,6,opt,name=player_exp" json:"player_exp,omitempty"`
	FirstShow         []*ItemVaryConfig `protobuf:"bytes,7,rep,name=first_show" json:"first_show,omitempty"`
	NotFirstShow      *int32            `protobuf:"varint,8,opt,name=not_first_show" json:"not_first_show,omitempty"`
	EastOppoTeamCfgId *int32            `protobuf:"varint,9,opt,name=east_oppo_team_cfg_id" json:"east_oppo_team_cfg_id,omitempty"`
	WestOppoTeamCfgId *int32            `protobuf:"varint,10,opt,name=west_oppo_team_cfg_id" json:"west_oppo_team_cfg_id,omitempty"`
	XXX_unrecognized  []byte            `json:"-"`
}

func (m *PlayoffScheduleCfg) Reset()                    { *m = PlayoffScheduleCfg{} }
func (m *PlayoffScheduleCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayoffScheduleCfg) ProtoMessage()               {}
func (*PlayoffScheduleCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{120} }

func (m *PlayoffScheduleCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayoffScheduleCfg) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *PlayoffScheduleCfg) GetRound() int32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *PlayoffScheduleCfg) GetCost() []*ItemVaryConfig {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *PlayoffScheduleCfg) GetGamerExp() *ItemVaryConfig {
	if m != nil {
		return m.GamerExp
	}
	return nil
}

func (m *PlayoffScheduleCfg) GetPlayerExp() int32 {
	if m != nil && m.PlayerExp != nil {
		return *m.PlayerExp
	}
	return 0
}

func (m *PlayoffScheduleCfg) GetFirstShow() []*ItemVaryConfig {
	if m != nil {
		return m.FirstShow
	}
	return nil
}

func (m *PlayoffScheduleCfg) GetNotFirstShow() int32 {
	if m != nil && m.NotFirstShow != nil {
		return *m.NotFirstShow
	}
	return 0
}

func (m *PlayoffScheduleCfg) GetEastOppoTeamCfgId() int32 {
	if m != nil && m.EastOppoTeamCfgId != nil {
		return *m.EastOppoTeamCfgId
	}
	return 0
}

func (m *PlayoffScheduleCfg) GetWestOppoTeamCfgId() int32 {
	if m != nil && m.WestOppoTeamCfgId != nil {
		return *m.WestOppoTeamCfgId
	}
	return 0
}

// 季后赛奖励任务配置
type PlayoffTaskCfg struct {
	// 配置id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 赛季id
	SeasonId *int32 `protobuf:"varint,2,opt,name=season_id" json:"season_id,omitempty"`
	// 条件
	Condition *int32 `protobuf:"varint,3,opt,name=condition" json:"condition,omitempty"`
	// 奖励
	TaskReward       []*ItemVaryConfig `protobuf:"bytes,4,rep,name=task_reward" json:"task_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PlayoffTaskCfg) Reset()                    { *m = PlayoffTaskCfg{} }
func (m *PlayoffTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayoffTaskCfg) ProtoMessage()               {}
func (*PlayoffTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{121} }

func (m *PlayoffTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayoffTaskCfg) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *PlayoffTaskCfg) GetCondition() int32 {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return 0
}

func (m *PlayoffTaskCfg) GetTaskReward() []*ItemVaryConfig {
	if m != nil {
		return m.TaskReward
	}
	return nil
}

// 季后赛离散数据
type PlayoffDiscreteDataCfg struct {
	Id                      *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FightCountPer           *int32 `protobuf:"varint,2,opt,name=fight_count_per" json:"fight_count_per,omitempty"`
	RegularSweepMaxPerCount *int32 `protobuf:"varint,3,opt,name=regular_sweep_max_per_count" json:"regular_sweep_max_per_count,omitempty"`
	XXX_unrecognized        []byte `json:"-"`
}

func (m *PlayoffDiscreteDataCfg) Reset()                    { *m = PlayoffDiscreteDataCfg{} }
func (m *PlayoffDiscreteDataCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayoffDiscreteDataCfg) ProtoMessage()               {}
func (*PlayoffDiscreteDataCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{122} }

func (m *PlayoffDiscreteDataCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayoffDiscreteDataCfg) GetFightCountPer() int32 {
	if m != nil && m.FightCountPer != nil {
		return *m.FightCountPer
	}
	return 0
}

func (m *PlayoffDiscreteDataCfg) GetRegularSweepMaxPerCount() int32 {
	if m != nil && m.RegularSweepMaxPerCount != nil {
		return *m.RegularSweepMaxPerCount
	}
	return 0
}

// 常规赛比赛
type RegularMatchCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SeasonId         *int32 `protobuf:"varint,2,opt,name=season_id" json:"season_id,omitempty"`
	Round            *int32 `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	OppoTeamCfgId    *int32 `protobuf:"varint,5,opt,name=oppo_team_cfg_id" json:"oppo_team_cfg_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegularMatchCfg) Reset()                    { *m = RegularMatchCfg{} }
func (m *RegularMatchCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularMatchCfg) ProtoMessage()               {}
func (*RegularMatchCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{123} }

func (m *RegularMatchCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularMatchCfg) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *RegularMatchCfg) GetRound() int32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *RegularMatchCfg) GetOppoTeamCfgId() int32 {
	if m != nil && m.OppoTeamCfgId != nil {
		return *m.OppoTeamCfgId
	}
	return 0
}

// 常规赛选择题
type RegularChoiceQuestionCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             *int32            `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Correct          *int32            `protobuf:"varint,3,opt,name=correct" json:"correct,omitempty"`
	Award1           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=award1" json:"award1,omitempty"`
	Award2           []*ItemVaryConfig `protobuf:"bytes,5,rep,name=award2" json:"award2,omitempty"`
	Award3           []*ItemVaryConfig `protobuf:"bytes,6,rep,name=award3" json:"award3,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RegularChoiceQuestionCfg) Reset()                    { *m = RegularChoiceQuestionCfg{} }
func (m *RegularChoiceQuestionCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularChoiceQuestionCfg) ProtoMessage()               {}
func (*RegularChoiceQuestionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{124} }

func (m *RegularChoiceQuestionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularChoiceQuestionCfg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *RegularChoiceQuestionCfg) GetCorrect() int32 {
	if m != nil && m.Correct != nil {
		return *m.Correct
	}
	return 0
}

func (m *RegularChoiceQuestionCfg) GetAward1() []*ItemVaryConfig {
	if m != nil {
		return m.Award1
	}
	return nil
}

func (m *RegularChoiceQuestionCfg) GetAward2() []*ItemVaryConfig {
	if m != nil {
		return m.Award2
	}
	return nil
}

func (m *RegularChoiceQuestionCfg) GetAward3() []*ItemVaryConfig {
	if m != nil {
		return m.Award3
	}
	return nil
}

// 常规赛打折商品
type RegularSaleCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Goods            []*ItemVaryConfig `protobuf:"bytes,3,rep,name=goods" json:"goods,omitempty"`
	TruePrice        []*ItemVaryConfig `protobuf:"bytes,4,rep,name=true_price" json:"true_price,omitempty"`
	BuyCount         []int32           `protobuf:"varint,5,rep,name=buy_count" json:"buy_count,omitempty"`
	LimitTime        *int64            `protobuf:"varint,6,opt,name=limit_time" json:"limit_time,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RegularSaleCfg) Reset()                    { *m = RegularSaleCfg{} }
func (m *RegularSaleCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularSaleCfg) ProtoMessage()               {}
func (*RegularSaleCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{125} }

func (m *RegularSaleCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularSaleCfg) GetGoods() []*ItemVaryConfig {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *RegularSaleCfg) GetTruePrice() []*ItemVaryConfig {
	if m != nil {
		return m.TruePrice
	}
	return nil
}

func (m *RegularSaleCfg) GetBuyCount() []int32 {
	if m != nil {
		return m.BuyCount
	}
	return nil
}

func (m *RegularSaleCfg) GetLimitTime() int64 {
	if m != nil && m.LimitTime != nil {
		return *m.LimitTime
	}
	return 0
}

// 常规赛挑战
type RegularChallengeCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OppoTeamId       *int32            `protobuf:"varint,3,opt,name=oppo_team_id" json:"oppo_team_id,omitempty"`
	PlayerExp        *int32            `protobuf:"varint,6,opt,name=player_exp" json:"player_exp,omitempty"`
	DropShow         []*ItemVaryConfig `protobuf:"bytes,9,rep,name=drop_show" json:"drop_show,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RegularChallengeCfg) Reset()                    { *m = RegularChallengeCfg{} }
func (m *RegularChallengeCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularChallengeCfg) ProtoMessage()               {}
func (*RegularChallengeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{126} }

func (m *RegularChallengeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularChallengeCfg) GetOppoTeamId() int32 {
	if m != nil && m.OppoTeamId != nil {
		return *m.OppoTeamId
	}
	return 0
}

func (m *RegularChallengeCfg) GetPlayerExp() int32 {
	if m != nil && m.PlayerExp != nil {
		return *m.PlayerExp
	}
	return 0
}

func (m *RegularChallengeCfg) GetDropShow() []*ItemVaryConfig {
	if m != nil {
		return m.DropShow
	}
	return nil
}

// 常规赛任务
type RegularTaskCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SeasonId         *int32            `protobuf:"varint,2,opt,name=season_id" json:"season_id,omitempty"`
	Condition        *int32            `protobuf:"varint,3,opt,name=condition" json:"condition,omitempty"`
	TaskReward       []*ItemVaryConfig `protobuf:"bytes,4,rep,name=task_reward" json:"task_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RegularTaskCfg) Reset()                    { *m = RegularTaskCfg{} }
func (m *RegularTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularTaskCfg) ProtoMessage()               {}
func (*RegularTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{127} }

func (m *RegularTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RegularTaskCfg) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *RegularTaskCfg) GetCondition() int32 {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return 0
}

func (m *RegularTaskCfg) GetTaskReward() []*ItemVaryConfig {
	if m != nil {
		return m.TaskReward
	}
	return nil
}

// 常规赛npc基础配置
type RegularNpcBaseCfg struct {
	NpcId            *int32 `protobuf:"varint,1,opt,name=npc_id" json:"npc_id,omitempty"`
	SeasonNpcValueId *int32 `protobuf:"varint,2,opt,name=season_npc_value_id" json:"season_npc_value_id,omitempty"`
	NpcRare          *int32 `protobuf:"varint,3,opt,name=npc_rare" json:"npc_rare,omitempty"`
	NpcQuality       *int32 `protobuf:"varint,4,opt,name=npc_quality" json:"npc_quality,omitempty"`
	NpcLv            *int32 `protobuf:"varint,5,opt,name=npc_lv" json:"npc_lv,omitempty"`
	NpcStar          *int32 `protobuf:"varint,6,opt,name=npc_star" json:"npc_star,omitempty"`
	NpcPrototypeId   *int32 `protobuf:"varint,7,opt,name=npc_prototype_id" json:"npc_prototype_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegularNpcBaseCfg) Reset()                    { *m = RegularNpcBaseCfg{} }
func (m *RegularNpcBaseCfg) String() string            { return proto.CompactTextString(m) }
func (*RegularNpcBaseCfg) ProtoMessage()               {}
func (*RegularNpcBaseCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{128} }

func (m *RegularNpcBaseCfg) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *RegularNpcBaseCfg) GetSeasonNpcValueId() int32 {
	if m != nil && m.SeasonNpcValueId != nil {
		return *m.SeasonNpcValueId
	}
	return 0
}

func (m *RegularNpcBaseCfg) GetNpcRare() int32 {
	if m != nil && m.NpcRare != nil {
		return *m.NpcRare
	}
	return 0
}

func (m *RegularNpcBaseCfg) GetNpcQuality() int32 {
	if m != nil && m.NpcQuality != nil {
		return *m.NpcQuality
	}
	return 0
}

func (m *RegularNpcBaseCfg) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *RegularNpcBaseCfg) GetNpcStar() int32 {
	if m != nil && m.NpcStar != nil {
		return *m.NpcStar
	}
	return 0
}

func (m *RegularNpcBaseCfg) GetNpcPrototypeId() int32 {
	if m != nil && m.NpcPrototypeId != nil {
		return *m.NpcPrototypeId
	}
	return 0
}

// 名人堂点赞奖励
type HallOfFameCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Drops            *int32  `protobuf:"varint,2,opt,name=drops" json:"drops,omitempty"`
	RankTypes        []int32 `protobuf:"varint,3,rep,name=rank_types" json:"rank_types,omitempty"`
	TagsCountPer     *int32  `protobuf:"varint,4,opt,name=tags_count_per" json:"tags_count_per,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HallOfFameCfg) Reset()                    { *m = HallOfFameCfg{} }
func (m *HallOfFameCfg) String() string            { return proto.CompactTextString(m) }
func (*HallOfFameCfg) ProtoMessage()               {}
func (*HallOfFameCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{129} }

func (m *HallOfFameCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HallOfFameCfg) GetDrops() int32 {
	if m != nil && m.Drops != nil {
		return *m.Drops
	}
	return 0
}

func (m *HallOfFameCfg) GetRankTypes() []int32 {
	if m != nil {
		return m.RankTypes
	}
	return nil
}

func (m *HallOfFameCfg) GetTagsCountPer() int32 {
	if m != nil && m.TagsCountPer != nil {
		return *m.TagsCountPer
	}
	return 0
}

// 小助手配置
type Assistant struct {
	ReminderId             *int32 `protobuf:"varint,1,opt,name=reminder_id" json:"reminder_id,omitempty"`
	LvRequired             *int32 `protobuf:"varint,2,opt,name=lv_required" json:"lv_required,omitempty"`
	LvClosed               *int32 `protobuf:"varint,3,opt,name=lv_closed" json:"lv_closed,omitempty"`
	ReminderType           *int32 `protobuf:"varint,4,opt,name=reminder_type" json:"reminder_type,omitempty"`
	ReminderConditionValue *int32 `protobuf:"varint,5,opt,name=reminder_condition_value" json:"reminder_condition_value,omitempty"`
	MaterialCheck          *int32 `protobuf:"varint,6,opt,name=material_check" json:"material_check,omitempty"`
	XXX_unrecognized       []byte `json:"-"`
}

func (m *Assistant) Reset()                    { *m = Assistant{} }
func (m *Assistant) String() string            { return proto.CompactTextString(m) }
func (*Assistant) ProtoMessage()               {}
func (*Assistant) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{130} }

func (m *Assistant) GetReminderId() int32 {
	if m != nil && m.ReminderId != nil {
		return *m.ReminderId
	}
	return 0
}

func (m *Assistant) GetLvRequired() int32 {
	if m != nil && m.LvRequired != nil {
		return *m.LvRequired
	}
	return 0
}

func (m *Assistant) GetLvClosed() int32 {
	if m != nil && m.LvClosed != nil {
		return *m.LvClosed
	}
	return 0
}

func (m *Assistant) GetReminderType() int32 {
	if m != nil && m.ReminderType != nil {
		return *m.ReminderType
	}
	return 0
}

func (m *Assistant) GetReminderConditionValue() int32 {
	if m != nil && m.ReminderConditionValue != nil {
		return *m.ReminderConditionValue
	}
	return 0
}

func (m *Assistant) GetMaterialCheck() int32 {
	if m != nil && m.MaterialCheck != nil {
		return *m.MaterialCheck
	}
	return 0
}

// 专属动作配置表
type ExclusiveAction struct {
	UniqueId            *int32             `protobuf:"varint,1,opt,name=unique_id" json:"unique_id,omitempty"`
	BallerId            *int32             `protobuf:"varint,2,opt,name=baller_id" json:"baller_id,omitempty"`
	BranchType          *int32             `protobuf:"varint,3,opt,name=branch_type" json:"branch_type,omitempty"`
	Level               *int32             `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	Sign                *int32             `protobuf:"varint,5,opt,name=sign" json:"sign,omitempty"`
	Condition           []*TypeValueConfig `protobuf:"bytes,6,rep,name=condition" json:"condition,omitempty"`
	ExclusiveActionName []string           `protobuf:"bytes,7,rep,name=exclusive_action_name" json:"exclusive_action_name,omitempty"`
	XXX_unrecognized    []byte             `json:"-"`
}

func (m *ExclusiveAction) Reset()                    { *m = ExclusiveAction{} }
func (m *ExclusiveAction) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveAction) ProtoMessage()               {}
func (*ExclusiveAction) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{131} }

func (m *ExclusiveAction) GetUniqueId() int32 {
	if m != nil && m.UniqueId != nil {
		return *m.UniqueId
	}
	return 0
}

func (m *ExclusiveAction) GetBallerId() int32 {
	if m != nil && m.BallerId != nil {
		return *m.BallerId
	}
	return 0
}

func (m *ExclusiveAction) GetBranchType() int32 {
	if m != nil && m.BranchType != nil {
		return *m.BranchType
	}
	return 0
}

func (m *ExclusiveAction) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ExclusiveAction) GetSign() int32 {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return 0
}

func (m *ExclusiveAction) GetCondition() []*TypeValueConfig {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ExclusiveAction) GetExclusiveActionName() []string {
	if m != nil {
		return m.ExclusiveActionName
	}
	return nil
}

// 问卷调查
type QuestionnaireSurvey struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OpenLv           *int32  `protobuf:"varint,2,opt,name=open_lv" json:"open_lv,omitempty"`
	Url              *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *QuestionnaireSurvey) Reset()                    { *m = QuestionnaireSurvey{} }
func (m *QuestionnaireSurvey) String() string            { return proto.CompactTextString(m) }
func (*QuestionnaireSurvey) ProtoMessage()               {}
func (*QuestionnaireSurvey) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{132} }

func (m *QuestionnaireSurvey) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *QuestionnaireSurvey) GetOpenLv() int32 {
	if m != nil && m.OpenLv != nil {
		return *m.OpenLv
	}
	return 0
}

func (m *QuestionnaireSurvey) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

// 防沉迷全局配置
type KidLimitGlobal struct {
	SeasonGlobal     *int32  `protobuf:"varint,1,opt,name=season_global" json:"season_global,omitempty"`
	Param            *string `protobuf:"bytes,2,opt,name=param" json:"param,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KidLimitGlobal) Reset()                    { *m = KidLimitGlobal{} }
func (m *KidLimitGlobal) String() string            { return proto.CompactTextString(m) }
func (*KidLimitGlobal) ProtoMessage()               {}
func (*KidLimitGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{133} }

func (m *KidLimitGlobal) GetSeasonGlobal() int32 {
	if m != nil && m.SeasonGlobal != nil {
		return *m.SeasonGlobal
	}
	return 0
}

func (m *KidLimitGlobal) GetParam() string {
	if m != nil && m.Param != nil {
		return *m.Param
	}
	return ""
}

// 防沉迷用的看今天是不是节假日
type IsWorkDayConf struct {
	DataId           *int32  `protobuf:"varint,1,opt,name=data_id" json:"data_id,omitempty"`
	Data             *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Type             *int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IsWorkDayConf) Reset()                    { *m = IsWorkDayConf{} }
func (m *IsWorkDayConf) String() string            { return proto.CompactTextString(m) }
func (*IsWorkDayConf) ProtoMessage()               {}
func (*IsWorkDayConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{134} }

func (m *IsWorkDayConf) GetDataId() int32 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *IsWorkDayConf) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *IsWorkDayConf) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

// 任务配置
type TaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 任务类型
	TaskType *int32 `protobuf:"varint,2,opt,name=taskType" json:"taskType,omitempty"`
	// 条件id
	ConditionId *int32 `protobuf:"varint,3,opt,name=condition_id" json:"condition_id,omitempty"`
	// 活跃度
	Activation *int32 `protobuf:"varint,5,opt,name=activation" json:"activation,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,6,rep,name=reward" json:"reward,omitempty"`
	// 任务名称
	TaskName *string `protobuf:"bytes,7,opt,name=task_name" json:"task_name,omitempty"`
	// 起始等级显示（作用1：用于判断日常任务经验找回的等级需要）
	Lv *int32 `protobuf:"varint,8,opt,name=lv" json:"lv,omitempty"`
	// 功能模块id
	FunctionOpen     *int32 `protobuf:"varint,9,opt,name=function_open" json:"function_open,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TaskCfg) Reset()                    { *m = TaskCfg{} }
func (m *TaskCfg) String() string            { return proto.CompactTextString(m) }
func (*TaskCfg) ProtoMessage()               {}
func (*TaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{135} }

func (m *TaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TaskCfg) GetTaskType() int32 {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return 0
}

func (m *TaskCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *TaskCfg) GetActivation() int32 {
	if m != nil && m.Activation != nil {
		return *m.Activation
	}
	return 0
}

func (m *TaskCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *TaskCfg) GetTaskName() string {
	if m != nil && m.TaskName != nil {
		return *m.TaskName
	}
	return ""
}

func (m *TaskCfg) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *TaskCfg) GetFunctionOpen() int32 {
	if m != nil && m.FunctionOpen != nil {
		return *m.FunctionOpen
	}
	return 0
}

// 篮球手册
type HandbookCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 配置id
	ConditionId []int32 `protobuf:"varint,3,rep,name=condition_id" json:"condition_id,omitempty"`
	// 模块id(用于限制开启等级)
	ModuleId *int32 `protobuf:"varint,4,opt,name=module_id" json:"module_id,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,6,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *HandbookCfg) Reset()                    { *m = HandbookCfg{} }
func (m *HandbookCfg) String() string            { return proto.CompactTextString(m) }
func (*HandbookCfg) ProtoMessage()               {}
func (*HandbookCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{136} }

func (m *HandbookCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HandbookCfg) GetConditionId() []int32 {
	if m != nil {
		return m.ConditionId
	}
	return nil
}

func (m *HandbookCfg) GetModuleId() int32 {
	if m != nil && m.ModuleId != nil {
		return *m.ModuleId
	}
	return 0
}

func (m *HandbookCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 任务离散数据
type TaskDiscreetDataCfg struct {
	Id                  *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Reward              []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	AchievementBoxPrice *ItemVaryConfig   `protobuf:"bytes,3,opt,name=achievement_box_price" json:"achievement_box_price,omitempty"`
	XXX_unrecognized    []byte            `json:"-"`
}

func (m *TaskDiscreetDataCfg) Reset()                    { *m = TaskDiscreetDataCfg{} }
func (m *TaskDiscreetDataCfg) String() string            { return proto.CompactTextString(m) }
func (*TaskDiscreetDataCfg) ProtoMessage()               {}
func (*TaskDiscreetDataCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{137} }

func (m *TaskDiscreetDataCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TaskDiscreetDataCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *TaskDiscreetDataCfg) GetAchievementBoxPrice() *ItemVaryConfig {
	if m != nil {
		return m.AchievementBoxPrice
	}
	return nil
}

// 剧情任务（主线支线）配置
type StoryTaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 任务类型
	TaskType *int32 `protobuf:"varint,2,opt,name=task_type" json:"task_type,omitempty"`
	// 前置任务
	PreTaskId *int32 `protobuf:"varint,3,opt,name=pre_task_id" json:"pre_task_id,omitempty"`
	// 后置任务
	NextTaskId *int32 `protobuf:"varint,4,opt,name=next_task_id" json:"next_task_id,omitempty"`
	// 接任务的条件
	AcceptConditionId *int32 `protobuf:"varint,5,opt,name=accept_condition_id" json:"accept_condition_id,omitempty"`
	// 领奖的条件
	RewardConditionId *int32 `protobuf:"varint,6,opt,name=reward_condition_id" json:"reward_condition_id,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,7,rep,name=reward" json:"reward,omitempty"`
	// 对话球员id
	PlayerNpcId      *int32 `protobuf:"varint,8,opt,name=player_npc_id" json:"player_npc_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StoryTaskCfg) Reset()                    { *m = StoryTaskCfg{} }
func (m *StoryTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*StoryTaskCfg) ProtoMessage()               {}
func (*StoryTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{138} }

func (m *StoryTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *StoryTaskCfg) GetTaskType() int32 {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return 0
}

func (m *StoryTaskCfg) GetPreTaskId() int32 {
	if m != nil && m.PreTaskId != nil {
		return *m.PreTaskId
	}
	return 0
}

func (m *StoryTaskCfg) GetNextTaskId() int32 {
	if m != nil && m.NextTaskId != nil {
		return *m.NextTaskId
	}
	return 0
}

func (m *StoryTaskCfg) GetAcceptConditionId() int32 {
	if m != nil && m.AcceptConditionId != nil {
		return *m.AcceptConditionId
	}
	return 0
}

func (m *StoryTaskCfg) GetRewardConditionId() int32 {
	if m != nil && m.RewardConditionId != nil {
		return *m.RewardConditionId
	}
	return 0
}

func (m *StoryTaskCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *StoryTaskCfg) GetPlayerNpcId() int32 {
	if m != nil && m.PlayerNpcId != nil {
		return *m.PlayerNpcId
	}
	return 0
}

// 竞技场挑战次数价格配置
type ArenaChallengeCountPriceCfg struct {
	Id               *int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuyCount         *int32          `protobuf:"varint,2,opt,name=buy_count" json:"buy_count,omitempty"`
	Consume          *ItemVaryConfig `protobuf:"bytes,3,opt,name=consume" json:"consume,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ArenaChallengeCountPriceCfg) Reset()                    { *m = ArenaChallengeCountPriceCfg{} }
func (m *ArenaChallengeCountPriceCfg) String() string            { return proto.CompactTextString(m) }
func (*ArenaChallengeCountPriceCfg) ProtoMessage()               {}
func (*ArenaChallengeCountPriceCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{139} }

func (m *ArenaChallengeCountPriceCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaChallengeCountPriceCfg) GetBuyCount() int32 {
	if m != nil && m.BuyCount != nil {
		return *m.BuyCount
	}
	return 0
}

func (m *ArenaChallengeCountPriceCfg) GetConsume() *ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

// 竞技场挑战奖励配置
type ArenaChallengeRewardCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RankingFloor     *int32            `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	RankingToplimit  *int32            `protobuf:"varint,3,opt,name=ranking_toplimit" json:"ranking_toplimit,omitempty"`
	WinReward        []*ItemVaryConfig `protobuf:"bytes,4,rep,name=win_reward" json:"win_reward,omitempty"`
	FailureReward    []*ItemVaryConfig `protobuf:"bytes,5,rep,name=failure_reward" json:"failure_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ArenaChallengeRewardCfg) Reset()                    { *m = ArenaChallengeRewardCfg{} }
func (m *ArenaChallengeRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*ArenaChallengeRewardCfg) ProtoMessage()               {}
func (*ArenaChallengeRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{140} }

func (m *ArenaChallengeRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaChallengeRewardCfg) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *ArenaChallengeRewardCfg) GetRankingToplimit() int32 {
	if m != nil && m.RankingToplimit != nil {
		return *m.RankingToplimit
	}
	return 0
}

func (m *ArenaChallengeRewardCfg) GetWinReward() []*ItemVaryConfig {
	if m != nil {
		return m.WinReward
	}
	return nil
}

func (m *ArenaChallengeRewardCfg) GetFailureReward() []*ItemVaryConfig {
	if m != nil {
		return m.FailureReward
	}
	return nil
}

// 竞技场历史最高排名奖励配置
type ArenaRankingHistoryHighRewardCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RankingCeiling   *int32 `protobuf:"varint,2,opt,name=ranking_ceiling" json:"ranking_ceiling,omitempty"`
	RankingFloor     *int32 `protobuf:"varint,3,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	RewardFactor     *int32 `protobuf:"varint,4,opt,name=reward_factor" json:"reward_factor,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArenaRankingHistoryHighRewardCfg) Reset()         { *m = ArenaRankingHistoryHighRewardCfg{} }
func (m *ArenaRankingHistoryHighRewardCfg) String() string { return proto.CompactTextString(m) }
func (*ArenaRankingHistoryHighRewardCfg) ProtoMessage()    {}
func (*ArenaRankingHistoryHighRewardCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{141}
}

func (m *ArenaRankingHistoryHighRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaRankingHistoryHighRewardCfg) GetRankingCeiling() int32 {
	if m != nil && m.RankingCeiling != nil {
		return *m.RankingCeiling
	}
	return 0
}

func (m *ArenaRankingHistoryHighRewardCfg) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *ArenaRankingHistoryHighRewardCfg) GetRewardFactor() int32 {
	if m != nil && m.RewardFactor != nil {
		return *m.RewardFactor
	}
	return 0
}

// 竞技场翻牌
type ArenaFlopCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LevelCeiling     *int32 `protobuf:"varint,2,opt,name=level_ceiling" json:"level_ceiling,omitempty"`
	LevelFloor       *int32 `protobuf:"varint,3,opt,name=level_floor" json:"level_floor,omitempty"`
	WinReward        *int32 `protobuf:"varint,4,opt,name=win_reward" json:"win_reward,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArenaFlopCfg) Reset()                    { *m = ArenaFlopCfg{} }
func (m *ArenaFlopCfg) String() string            { return proto.CompactTextString(m) }
func (*ArenaFlopCfg) ProtoMessage()               {}
func (*ArenaFlopCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{142} }

func (m *ArenaFlopCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaFlopCfg) GetLevelCeiling() int32 {
	if m != nil && m.LevelCeiling != nil {
		return *m.LevelCeiling
	}
	return 0
}

func (m *ArenaFlopCfg) GetLevelFloor() int32 {
	if m != nil && m.LevelFloor != nil {
		return *m.LevelFloor
	}
	return 0
}

func (m *ArenaFlopCfg) GetWinReward() int32 {
	if m != nil && m.WinReward != nil {
		return *m.WinReward
	}
	return 0
}

// 竞技场任务
type ArenaTaskCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ConditionIds     []int32           `protobuf:"varint,2,rep,name=condition_ids" json:"condition_ids,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ArenaTaskCfg) Reset()                    { *m = ArenaTaskCfg{} }
func (m *ArenaTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*ArenaTaskCfg) ProtoMessage()               {}
func (*ArenaTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{143} }

func (m *ArenaTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaTaskCfg) GetConditionIds() []int32 {
	if m != nil {
		return m.ConditionIds
	}
	return nil
}

func (m *ArenaTaskCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 竞技场每日排名奖励
type ArenaDailyRankingRewardCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RankingFloor     *int32            `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	RankingCeiling   *int32            `protobuf:"varint,3,opt,name=ranking_ceiling" json:"ranking_ceiling,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ArenaDailyRankingRewardCfg) Reset()                    { *m = ArenaDailyRankingRewardCfg{} }
func (m *ArenaDailyRankingRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*ArenaDailyRankingRewardCfg) ProtoMessage()               {}
func (*ArenaDailyRankingRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{144} }

func (m *ArenaDailyRankingRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaDailyRankingRewardCfg) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *ArenaDailyRankingRewardCfg) GetRankingCeiling() int32 {
	if m != nil && m.RankingCeiling != nil {
		return *m.RankingCeiling
	}
	return 0
}

func (m *ArenaDailyRankingRewardCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 竞技场离散数据
type ArenaDiscreteCfg struct {
	Id                        *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DailyChallengeCount       *int32 `protobuf:"varint,2,opt,name=daily_challenge_count" json:"daily_challenge_count,omitempty"`
	RefreshCd                 *int32 `protobuf:"varint,3,opt,name=refresh_cd" json:"refresh_cd,omitempty"`
	CanChallengeTopRanking    *int32 `protobuf:"varint,4,opt,name=can_challenge_top_ranking" json:"can_challenge_top_ranking,omitempty"`
	TopGamerNum               *int32 `protobuf:"varint,5,opt,name=top_gamer_num" json:"top_gamer_num,omitempty"`
	TicketId                  *int32 `protobuf:"varint,6,opt,name=ticket_id" json:"ticket_id,omitempty"`
	OppNum                    *int32 `protobuf:"varint,7,opt,name=opp_num" json:"opp_num,omitempty"`
	RankingFloor              *int32 `protobuf:"varint,8,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	ChallengeCount            *int32 `protobuf:"varint,9,opt,name=challenge_count" json:"challenge_count,omitempty"`
	GetRankingItemNumEachTime *int32 `protobuf:"varint,10,opt,name=get_ranking_item_num_each_time" json:"get_ranking_item_num_each_time,omitempty"`
	XXX_unrecognized          []byte `json:"-"`
}

func (m *ArenaDiscreteCfg) Reset()                    { *m = ArenaDiscreteCfg{} }
func (m *ArenaDiscreteCfg) String() string            { return proto.CompactTextString(m) }
func (*ArenaDiscreteCfg) ProtoMessage()               {}
func (*ArenaDiscreteCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{145} }

func (m *ArenaDiscreteCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetDailyChallengeCount() int32 {
	if m != nil && m.DailyChallengeCount != nil {
		return *m.DailyChallengeCount
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetRefreshCd() int32 {
	if m != nil && m.RefreshCd != nil {
		return *m.RefreshCd
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetCanChallengeTopRanking() int32 {
	if m != nil && m.CanChallengeTopRanking != nil {
		return *m.CanChallengeTopRanking
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetTopGamerNum() int32 {
	if m != nil && m.TopGamerNum != nil {
		return *m.TopGamerNum
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetTicketId() int32 {
	if m != nil && m.TicketId != nil {
		return *m.TicketId
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetOppNum() int32 {
	if m != nil && m.OppNum != nil {
		return *m.OppNum
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetChallengeCount() int32 {
	if m != nil && m.ChallengeCount != nil {
		return *m.ChallengeCount
	}
	return 0
}

func (m *ArenaDiscreteCfg) GetGetRankingItemNumEachTime() int32 {
	if m != nil && m.GetRankingItemNumEachTime != nil {
		return *m.GetRankingItemNumEachTime
	}
	return 0
}

// 羁绊组合配置fetters_config.csv
type BallerRelationConf struct {
	FettersId        *int32  `protobuf:"varint,1,opt,name=fetters_id" json:"fetters_id,omitempty"`
	FettersBaller    []int32 `protobuf:"varint,3,rep,name=fetters_baller" json:"fetters_baller,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BallerRelationConf) Reset()                    { *m = BallerRelationConf{} }
func (m *BallerRelationConf) String() string            { return proto.CompactTextString(m) }
func (*BallerRelationConf) ProtoMessage()               {}
func (*BallerRelationConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{146} }

func (m *BallerRelationConf) GetFettersId() int32 {
	if m != nil && m.FettersId != nil {
		return *m.FettersId
	}
	return 0
}

func (m *BallerRelationConf) GetFettersBaller() []int32 {
	if m != nil {
		return m.FettersBaller
	}
	return nil
}

// 羁绊强化fetters_strengthen.csv
type BallerRelationStrengthenConf struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FettersId        *int32             `protobuf:"varint,2,opt,name=fetters_id" json:"fetters_id,omitempty"`
	FettersLv        *int32             `protobuf:"varint,3,opt,name=fetters_lv" json:"fetters_lv,omitempty"`
	IsMax            *bool              `protobuf:"varint,4,opt,name=is_max" json:"is_max,omitempty"`
	FightAttr        []*PlayerAttrValue `protobuf:"bytes,5,rep,name=fight_attr" json:"fight_attr,omitempty"`
	NeedStar         *int32             `protobuf:"varint,6,opt,name=need_star" json:"need_star,omitempty"`
	UpLvType         *int32             `protobuf:"varint,7,opt,name=up_lv_type" json:"up_lv_type,omitempty"`
	PlayerIds        []int32            `protobuf:"varint,8,rep,name=player_ids" json:"player_ids,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BallerRelationStrengthenConf) Reset()         { *m = BallerRelationStrengthenConf{} }
func (m *BallerRelationStrengthenConf) String() string { return proto.CompactTextString(m) }
func (*BallerRelationStrengthenConf) ProtoMessage()    {}
func (*BallerRelationStrengthenConf) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{147}
}

func (m *BallerRelationStrengthenConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BallerRelationStrengthenConf) GetFettersId() int32 {
	if m != nil && m.FettersId != nil {
		return *m.FettersId
	}
	return 0
}

func (m *BallerRelationStrengthenConf) GetFettersLv() int32 {
	if m != nil && m.FettersLv != nil {
		return *m.FettersLv
	}
	return 0
}

func (m *BallerRelationStrengthenConf) GetIsMax() bool {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return false
}

func (m *BallerRelationStrengthenConf) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

func (m *BallerRelationStrengthenConf) GetNeedStar() int32 {
	if m != nil && m.NeedStar != nil {
		return *m.NeedStar
	}
	return 0
}

func (m *BallerRelationStrengthenConf) GetUpLvType() int32 {
	if m != nil && m.UpLvType != nil {
		return *m.UpLvType
	}
	return 0
}

func (m *BallerRelationStrengthenConf) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

// 羁绊副本(高光时刻)fetters_chapter.csv
type BallerRelationDungeonConf struct {
	Id                *int32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BallerId          *int32           `protobuf:"varint,2,opt,name=baller_id" json:"baller_id,omitempty"`
	FettersChapterId  *int32           `protobuf:"varint,3,opt,name=fetters_chapter_id" json:"fetters_chapter_id,omitempty"`
	Drop              *int32           `protobuf:"varint,4,opt,name=drop" json:"drop,omitempty"`
	BattleArrayBaller []int32          `protobuf:"varint,5,rep,name=battle_array_baller" json:"battle_array_baller,omitempty"`
	OpenCondition     *TypeValueConfig `protobuf:"bytes,6,opt,name=open_condition" json:"open_condition,omitempty"`
	ScriptId          *int32           `protobuf:"varint,7,opt,name=script_id" json:"script_id,omitempty"`
	SpendEnergy       *int32           `protobuf:"varint,8,opt,name=spend_energy" json:"spend_energy,omitempty"`
	PlayerExp         *int32           `protobuf:"varint,9,opt,name=player_exp" json:"player_exp,omitempty"`
	NpcTeamId         *int32           `protobuf:"varint,10,opt,name=npc_team_id" json:"npc_team_id,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *BallerRelationDungeonConf) Reset()                    { *m = BallerRelationDungeonConf{} }
func (m *BallerRelationDungeonConf) String() string            { return proto.CompactTextString(m) }
func (*BallerRelationDungeonConf) ProtoMessage()               {}
func (*BallerRelationDungeonConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{148} }

func (m *BallerRelationDungeonConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetBallerId() int32 {
	if m != nil && m.BallerId != nil {
		return *m.BallerId
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetFettersChapterId() int32 {
	if m != nil && m.FettersChapterId != nil {
		return *m.FettersChapterId
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetDrop() int32 {
	if m != nil && m.Drop != nil {
		return *m.Drop
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetBattleArrayBaller() []int32 {
	if m != nil {
		return m.BattleArrayBaller
	}
	return nil
}

func (m *BallerRelationDungeonConf) GetOpenCondition() *TypeValueConfig {
	if m != nil {
		return m.OpenCondition
	}
	return nil
}

func (m *BallerRelationDungeonConf) GetScriptId() int32 {
	if m != nil && m.ScriptId != nil {
		return *m.ScriptId
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetSpendEnergy() int32 {
	if m != nil && m.SpendEnergy != nil {
		return *m.SpendEnergy
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetPlayerExp() int32 {
	if m != nil && m.PlayerExp != nil {
		return *m.PlayerExp
	}
	return 0
}

func (m *BallerRelationDungeonConf) GetNpcTeamId() int32 {
	if m != nil && m.NpcTeamId != nil {
		return *m.NpcTeamId
	}
	return 0
}

// 羁绊全局表fetters_global.csv
type BallerRelationGlobalConf struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Param            *string `protobuf:"bytes,2,opt,name=param" json:"param,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BallerRelationGlobalConf) Reset()                    { *m = BallerRelationGlobalConf{} }
func (m *BallerRelationGlobalConf) String() string            { return proto.CompactTextString(m) }
func (*BallerRelationGlobalConf) ProtoMessage()               {}
func (*BallerRelationGlobalConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{149} }

func (m *BallerRelationGlobalConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BallerRelationGlobalConf) GetParam() string {
	if m != nil && m.Param != nil {
		return *m.Param
	}
	return ""
}

// 条件
type ConditionCfg struct {
	ConditionId *int32 `protobuf:"varint,1,opt,name=condition_id" json:"condition_id,omitempty"`
	// 模块类型
	ModuleType *int32 `protobuf:"varint,2,opt,name=module_type" json:"module_type,omitempty"`
	// 条件类型
	ConditionType *int32 `protobuf:"varint,3,opt,name=condition_type" json:"condition_type,omitempty"`
	// 前置参数(非进度参数)
	PreParam []int32 `protobuf:"varint,4,rep,name=pre_param" json:"pre_param,omitempty"`
	// 进度参数
	ProgressParam *int32 `protobuf:"varint,5,opt,name=progress_param" json:"progress_param,omitempty"`
	// 自动执行配置id(暂时没用)
	AutoExecCfgId *int32 `protobuf:"varint,6,opt,name=auto_exec_cfg_id" json:"auto_exec_cfg_id,omitempty"`
	// 任务间可共享的进度（完成后不删除）
	Shared           *bool  `protobuf:"varint,7,opt,name=shared" json:"shared,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ConditionCfg) Reset()                    { *m = ConditionCfg{} }
func (m *ConditionCfg) String() string            { return proto.CompactTextString(m) }
func (*ConditionCfg) ProtoMessage()               {}
func (*ConditionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{150} }

func (m *ConditionCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *ConditionCfg) GetModuleType() int32 {
	if m != nil && m.ModuleType != nil {
		return *m.ModuleType
	}
	return 0
}

func (m *ConditionCfg) GetConditionType() int32 {
	if m != nil && m.ConditionType != nil {
		return *m.ConditionType
	}
	return 0
}

func (m *ConditionCfg) GetPreParam() []int32 {
	if m != nil {
		return m.PreParam
	}
	return nil
}

func (m *ConditionCfg) GetProgressParam() int32 {
	if m != nil && m.ProgressParam != nil {
		return *m.ProgressParam
	}
	return 0
}

func (m *ConditionCfg) GetAutoExecCfgId() int32 {
	if m != nil && m.AutoExecCfgId != nil {
		return *m.AutoExecCfgId
	}
	return 0
}

func (m *ConditionCfg) GetShared() bool {
	if m != nil && m.Shared != nil {
		return *m.Shared
	}
	return false
}

// 战术执行效果
type PerformanceWeightCfg struct {
	TacticId         *int32  `protobuf:"varint,1,opt,name=tactic_id" json:"tactic_id,omitempty"`
	Result           []int32 `protobuf:"varint,2,rep,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PerformanceWeightCfg) Reset()                    { *m = PerformanceWeightCfg{} }
func (m *PerformanceWeightCfg) String() string            { return proto.CompactTextString(m) }
func (*PerformanceWeightCfg) ProtoMessage()               {}
func (*PerformanceWeightCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{151} }

func (m *PerformanceWeightCfg) GetTacticId() int32 {
	if m != nil && m.TacticId != nil {
		return *m.TacticId
	}
	return 0
}

func (m *PerformanceWeightCfg) GetResult() []int32 {
	if m != nil {
		return m.Result
	}
	return nil
}

// 测试球员
type TestPlayerCfg struct {
	NpcId             *int32 `protobuf:"varint,1,opt,name=npc_id" json:"npc_id,omitempty"`
	TeamType          *int32 `protobuf:"varint,2,opt,name=team_type" json:"team_type,omitempty"`
	StarterSubstitute *int32 `protobuf:"varint,3,opt,name=starter_substitute" json:"starter_substitute,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *TestPlayerCfg) Reset()                    { *m = TestPlayerCfg{} }
func (m *TestPlayerCfg) String() string            { return proto.CompactTextString(m) }
func (*TestPlayerCfg) ProtoMessage()               {}
func (*TestPlayerCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{152} }

func (m *TestPlayerCfg) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *TestPlayerCfg) GetTeamType() int32 {
	if m != nil && m.TeamType != nil {
		return *m.TeamType
	}
	return 0
}

func (m *TestPlayerCfg) GetStarterSubstitute() int32 {
	if m != nil && m.StarterSubstitute != nil {
		return *m.StarterSubstitute
	}
	return 0
}

// 后台滚动公告(跑马灯)
type LoopNoticeConf struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Index            *int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Channel          *string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	LoopTime         *int32  `protobuf:"varint,4,opt,name=loop_time" json:"loop_time,omitempty"`
	LoopInterval     *int32  `protobuf:"varint,5,opt,name=loop_interval" json:"loop_interval,omitempty"`
	BeginTime        *int64  `protobuf:"varint,6,opt,name=begin_time" json:"begin_time,omitempty"`
	EndTime          *int64  `protobuf:"varint,7,opt,name=end_time" json:"end_time,omitempty"`
	Content          *string `protobuf:"bytes,8,opt,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoopNoticeConf) Reset()                    { *m = LoopNoticeConf{} }
func (m *LoopNoticeConf) String() string            { return proto.CompactTextString(m) }
func (*LoopNoticeConf) ProtoMessage()               {}
func (*LoopNoticeConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{153} }

func (m *LoopNoticeConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LoopNoticeConf) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *LoopNoticeConf) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *LoopNoticeConf) GetLoopTime() int32 {
	if m != nil && m.LoopTime != nil {
		return *m.LoopTime
	}
	return 0
}

func (m *LoopNoticeConf) GetLoopInterval() int32 {
	if m != nil && m.LoopInterval != nil {
		return *m.LoopInterval
	}
	return 0
}

func (m *LoopNoticeConf) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

func (m *LoopNoticeConf) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *LoopNoticeConf) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

// 跑马灯
type InformationConf struct {
	Id                   *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FunctionId           *int32 `protobuf:"varint,2,opt,name=function_id" json:"function_id,omitempty"`
	SubId                *int32 `protobuf:"varint,3,opt,name=sub_id" json:"sub_id,omitempty"`
	Describe             *int32 `protobuf:"varint,4,opt,name=describe" json:"describe,omitempty"`
	InformationParameter *int32 `protobuf:"varint,5,opt,name=information_parameter" json:"information_parameter,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *InformationConf) Reset()                    { *m = InformationConf{} }
func (m *InformationConf) String() string            { return proto.CompactTextString(m) }
func (*InformationConf) ProtoMessage()               {}
func (*InformationConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{154} }

func (m *InformationConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *InformationConf) GetFunctionId() int32 {
	if m != nil && m.FunctionId != nil {
		return *m.FunctionId
	}
	return 0
}

func (m *InformationConf) GetSubId() int32 {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return 0
}

func (m *InformationConf) GetDescribe() int32 {
	if m != nil && m.Describe != nil {
		return *m.Describe
	}
	return 0
}

func (m *InformationConf) GetInformationParameter() int32 {
	if m != nil && m.InformationParameter != nil {
		return *m.InformationParameter
	}
	return 0
}

// 排行榜
type RankListConf struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TypeId           *int32 `protobuf:"varint,2,opt,name=type_id" json:"type_id,omitempty"`
	RecordAll        *int32 `protobuf:"varint,3,opt,name=recordAll" json:"recordAll,omitempty"`
	PeopleLimit      *int32 `protobuf:"varint,4,opt,name=people_limit" json:"people_limit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RankListConf) Reset()                    { *m = RankListConf{} }
func (m *RankListConf) String() string            { return proto.CompactTextString(m) }
func (*RankListConf) ProtoMessage()               {}
func (*RankListConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{155} }

func (m *RankListConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RankListConf) GetTypeId() int32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *RankListConf) GetRecordAll() int32 {
	if m != nil && m.RecordAll != nil {
		return *m.RecordAll
	}
	return 0
}

func (m *RankListConf) GetPeopleLimit() int32 {
	if m != nil && m.PeopleLimit != nil {
		return *m.PeopleLimit
	}
	return 0
}

// 排行奖励全局配置
type RankRewardGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 战力排行榜发奖时间
	PowerRankRewardTime *int64 `protobuf:"varint,2,opt,name=power_rank_reward_time" json:"power_rank_reward_time,omitempty"`
	// 战力排行榜展示时间
	PowerRankShowTime *int64 `protobuf:"varint,3,opt,name=power_rank_show_time" json:"power_rank_show_time,omitempty"`
	// 星级排行榜开始时间
	StarRankStartTime *int64 `protobuf:"varint,4,opt,name=star_rank_start_time" json:"star_rank_start_time,omitempty"`
	// 星级排行榜发奖时间
	StarRankRewardTime *int64 `protobuf:"varint,5,opt,name=star_rank_reward_time" json:"star_rank_reward_time,omitempty"`
	// 星级排行榜展示时间
	StarRankShowTime *int64 `protobuf:"varint,6,opt,name=star_rank_show_time" json:"star_rank_show_time,omitempty"`
	// 战力排行奖励上榜最低战力
	PowerRankRewardMinPower *int32 `protobuf:"varint,7,opt,name=power_rank_reward_min_power" json:"power_rank_reward_min_power,omitempty"`
	// 星级排行奖励上榜最低星级
	PowerRankRewardMinStar *int32 `protobuf:"varint,8,opt,name=power_rank_reward_min_star" json:"power_rank_reward_min_star,omitempty"`
	// 排行榜任务结束时间
	RankRewardTaskFinishTime *int64 `protobuf:"varint,10,opt,name=rank_reward_task_finish_time" json:"rank_reward_task_finish_time,omitempty"`
	// 排行榜任务展示时间
	RankRewardTaskShowTime *int64 `protobuf:"varint,11,opt,name=rank_reward_task_show_time" json:"rank_reward_task_show_time,omitempty"`
	XXX_unrecognized       []byte `json:"-"`
}

func (m *RankRewardGlobalCfg) Reset()                    { *m = RankRewardGlobalCfg{} }
func (m *RankRewardGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*RankRewardGlobalCfg) ProtoMessage()               {}
func (*RankRewardGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{156} }

func (m *RankRewardGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetPowerRankRewardTime() int64 {
	if m != nil && m.PowerRankRewardTime != nil {
		return *m.PowerRankRewardTime
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetPowerRankShowTime() int64 {
	if m != nil && m.PowerRankShowTime != nil {
		return *m.PowerRankShowTime
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetStarRankStartTime() int64 {
	if m != nil && m.StarRankStartTime != nil {
		return *m.StarRankStartTime
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetStarRankRewardTime() int64 {
	if m != nil && m.StarRankRewardTime != nil {
		return *m.StarRankRewardTime
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetStarRankShowTime() int64 {
	if m != nil && m.StarRankShowTime != nil {
		return *m.StarRankShowTime
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetPowerRankRewardMinPower() int32 {
	if m != nil && m.PowerRankRewardMinPower != nil {
		return *m.PowerRankRewardMinPower
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetPowerRankRewardMinStar() int32 {
	if m != nil && m.PowerRankRewardMinStar != nil {
		return *m.PowerRankRewardMinStar
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetRankRewardTaskFinishTime() int64 {
	if m != nil && m.RankRewardTaskFinishTime != nil {
		return *m.RankRewardTaskFinishTime
	}
	return 0
}

func (m *RankRewardGlobalCfg) GetRankRewardTaskShowTime() int64 {
	if m != nil && m.RankRewardTaskShowTime != nil {
		return *m.RankRewardTaskShowTime
	}
	return 0
}

// 战力排行任务奖励
type RankRewardTaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件id
	ConditionId *int32 `protobuf:"varint,3,opt,name=condition_id" json:"condition_id,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	// 任务类型
	TaskType         *int32 `protobuf:"varint,5,opt,name=task_type" json:"task_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RankRewardTaskCfg) Reset()                    { *m = RankRewardTaskCfg{} }
func (m *RankRewardTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*RankRewardTaskCfg) ProtoMessage()               {}
func (*RankRewardTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{157} }

func (m *RankRewardTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RankRewardTaskCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *RankRewardTaskCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RankRewardTaskCfg) GetTaskType() int32 {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return 0
}

// 排行奖励
type RankRewardCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排行范围
	RankingRange []int32 `protobuf:"varint,3,rep,name=ranking_range" json:"ranking_range,omitempty"`
	// 战力排行奖励
	PowerRankReward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=power_rank_reward" json:"power_rank_reward,omitempty"`
	// 星级排行奖励
	StarRankReward   []*ItemVaryConfig `protobuf:"bytes,5,rep,name=star_rank_reward" json:"star_rank_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RankRewardCfg) Reset()                    { *m = RankRewardCfg{} }
func (m *RankRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*RankRewardCfg) ProtoMessage()               {}
func (*RankRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{158} }

func (m *RankRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RankRewardCfg) GetRankingRange() []int32 {
	if m != nil {
		return m.RankingRange
	}
	return nil
}

func (m *RankRewardCfg) GetPowerRankReward() []*ItemVaryConfig {
	if m != nil {
		return m.PowerRankReward
	}
	return nil
}

func (m *RankRewardCfg) GetStarRankReward() []*ItemVaryConfig {
	if m != nil {
		return m.StarRankReward
	}
	return nil
}

// 购买体力配置
type DollarsBuyConf struct {
	BuyTimes          *int32          `protobuf:"varint,1,opt,name=buy_times" json:"buy_times,omitempty"`
	BuyPrice          *ItemVaryConfig `protobuf:"bytes,2,opt,name=buy_price" json:"buy_price,omitempty"`
	DollarCoefficient *int32          `protobuf:"varint,3,opt,name=dollar_coefficient" json:"dollar_coefficient,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *DollarsBuyConf) Reset()                    { *m = DollarsBuyConf{} }
func (m *DollarsBuyConf) String() string            { return proto.CompactTextString(m) }
func (*DollarsBuyConf) ProtoMessage()               {}
func (*DollarsBuyConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{159} }

func (m *DollarsBuyConf) GetBuyTimes() int32 {
	if m != nil && m.BuyTimes != nil {
		return *m.BuyTimes
	}
	return 0
}

func (m *DollarsBuyConf) GetBuyPrice() *ItemVaryConfig {
	if m != nil {
		return m.BuyPrice
	}
	return nil
}

func (m *DollarsBuyConf) GetDollarCoefficient() int32 {
	if m != nil && m.DollarCoefficient != nil {
		return *m.DollarCoefficient
	}
	return 0
}

// 联盟服务器分组
type AllianceServerGroup struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AllianceServerId *int32  `protobuf:"varint,2,opt,name=allianceServerId" json:"allianceServerId,omitempty"`
	LogicServerIds   []int32 `protobuf:"varint,3,rep,name=logicServerIds" json:"logicServerIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AllianceServerGroup) Reset()                    { *m = AllianceServerGroup{} }
func (m *AllianceServerGroup) String() string            { return proto.CompactTextString(m) }
func (*AllianceServerGroup) ProtoMessage()               {}
func (*AllianceServerGroup) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{160} }

func (m *AllianceServerGroup) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AllianceServerGroup) GetAllianceServerId() int32 {
	if m != nil && m.AllianceServerId != nil {
		return *m.AllianceServerId
	}
	return 0
}

func (m *AllianceServerGroup) GetLogicServerIds() []int32 {
	if m != nil {
		return m.LogicServerIds
	}
	return nil
}

// 服务器组
type ServerGroup struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ServerType       *int32  `protobuf:"varint,2,opt,name=serverType" json:"serverType,omitempty"`
	ServerId         *int32  `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`
	LogicServerIds   []int32 `protobuf:"varint,4,rep,name=logicServerIds" json:"logicServerIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServerGroup) Reset()                    { *m = ServerGroup{} }
func (m *ServerGroup) String() string            { return proto.CompactTextString(m) }
func (*ServerGroup) ProtoMessage()               {}
func (*ServerGroup) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{161} }

func (m *ServerGroup) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ServerGroup) GetServerType() int32 {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return 0
}

func (m *ServerGroup) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *ServerGroup) GetLogicServerIds() []int32 {
	if m != nil {
		return m.LogicServerIds
	}
	return nil
}

// 终结节点类型
type TreenodeType struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MarkMode         *int32 `protobuf:"varint,2,opt,name=mark_mode" json:"mark_mode,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TreenodeType) Reset()                    { *m = TreenodeType{} }
func (m *TreenodeType) String() string            { return proto.CompactTextString(m) }
func (*TreenodeType) ProtoMessage()               {}
func (*TreenodeType) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{162} }

func (m *TreenodeType) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TreenodeType) GetMarkMode() int32 {
	if m != nil && m.MarkMode != nil {
		return *m.MarkMode
	}
	return 0
}

// 可选宝箱
type OptionalBox struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ItemDetails      []*ItemVaryConfig `protobuf:"bytes,2,rep,name=item_details" json:"item_details,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *OptionalBox) Reset()                    { *m = OptionalBox{} }
func (m *OptionalBox) String() string            { return proto.CompactTextString(m) }
func (*OptionalBox) ProtoMessage()               {}
func (*OptionalBox) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{163} }

func (m *OptionalBox) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OptionalBox) GetItemDetails() []*ItemVaryConfig {
	if m != nil {
		return m.ItemDetails
	}
	return nil
}

// 商店商品表
type ShopCollectionCfg struct {
	// 索引
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 商店ID
	ShopId *int32 `protobuf:"varint,2,opt,name=shop_id" json:"shop_id,omitempty"`
	// 格子id
	Box *int32 `protobuf:"varint,3,opt,name=box" json:"box,omitempty"`
	// 开始等级
	StartLv *int32 `protobuf:"varint,4,opt,name=start_lv" json:"start_lv,omitempty"`
	// 结束等级
	EndLv *int32 `protobuf:"varint,5,opt,name=end_lv" json:"end_lv,omitempty"`
	// 商品
	Commodity *ItemVaryConfig `protobuf:"bytes,6,opt,name=commodity" json:"commodity,omitempty"`
	// 价格
	Prices []*ItemVaryConfig `protobuf:"bytes,7,rep,name=prices" json:"prices,omitempty"`
	// 限购类型（1：不刷新；2每日刷新；3每周刷新）
	BuyLimitType *int32 `protobuf:"varint,8,opt,name=buyLimitType" json:"buyLimitType,omitempty"`
	// 限购次数（0：无限制 >0:限购次数
	BuyLimitCount *int32 `protobuf:"varint,9,opt,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	// 权重
	Weight *int32 `protobuf:"varint,10,opt,name=weight" json:"weight,omitempty"`
	// 开放条件(各个)
	OpenCondition []int32 `protobuf:"varint,12,rep,name=open_condition" json:"open_condition,omitempty"`
	// 折扣概率（100_80;80_20）
	Probability      *string `protobuf:"bytes,13,opt,name=probability" json:"probability,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ShopCollectionCfg) Reset()                    { *m = ShopCollectionCfg{} }
func (m *ShopCollectionCfg) String() string            { return proto.CompactTextString(m) }
func (*ShopCollectionCfg) ProtoMessage()               {}
func (*ShopCollectionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{164} }

func (m *ShopCollectionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ShopCollectionCfg) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *ShopCollectionCfg) GetBox() int32 {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return 0
}

func (m *ShopCollectionCfg) GetStartLv() int32 {
	if m != nil && m.StartLv != nil {
		return *m.StartLv
	}
	return 0
}

func (m *ShopCollectionCfg) GetEndLv() int32 {
	if m != nil && m.EndLv != nil {
		return *m.EndLv
	}
	return 0
}

func (m *ShopCollectionCfg) GetCommodity() *ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *ShopCollectionCfg) GetPrices() []*ItemVaryConfig {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *ShopCollectionCfg) GetBuyLimitType() int32 {
	if m != nil && m.BuyLimitType != nil {
		return *m.BuyLimitType
	}
	return 0
}

func (m *ShopCollectionCfg) GetBuyLimitCount() int32 {
	if m != nil && m.BuyLimitCount != nil {
		return *m.BuyLimitCount
	}
	return 0
}

func (m *ShopCollectionCfg) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *ShopCollectionCfg) GetOpenCondition() []int32 {
	if m != nil {
		return m.OpenCondition
	}
	return nil
}

func (m *ShopCollectionCfg) GetProbability() string {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return ""
}

// 商店全局表
type ShopGlobalCfg struct {
	// 商店ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 格子数
	BoxMax *int32 `protobuf:"varint,2,opt,name=boxMax" json:"boxMax,omitempty"`
	// 自动刷新时间（-1不刷新）
	AutoRefTimes []int32 `protobuf:"varint,3,rep,name=autoRefTimes" json:"autoRefTimes,omitempty"`
	// 刷新次数（-1：不刷新 >0 次数+vip次数）
	RefCount *int32 `protobuf:"varint,4,opt,name=refCount" json:"refCount,omitempty"`
	// 免费次数（次数+vip次数）
	FreeCount *int32 `protobuf:"varint,5,opt,name=freeCount" json:"freeCount,omitempty"`
	// 道具刷新消耗
	ItemRefConsume *ItemVaryConfig `protobuf:"bytes,6,opt,name=itemRefConsume" json:"itemRefConsume,omitempty"`
	// 货币刷新消耗
	CurrencyRefConsume []*ItemVaryConfig `protobuf:"bytes,7,rep,name=currencyRefConsume" json:"currencyRefConsume,omitempty"`
	// 关联模块id
	SubModuleId      *int32 `protobuf:"varint,8,opt,name=subModuleId" json:"subModuleId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShopGlobalCfg) Reset()                    { *m = ShopGlobalCfg{} }
func (m *ShopGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*ShopGlobalCfg) ProtoMessage()               {}
func (*ShopGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{165} }

func (m *ShopGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ShopGlobalCfg) GetBoxMax() int32 {
	if m != nil && m.BoxMax != nil {
		return *m.BoxMax
	}
	return 0
}

func (m *ShopGlobalCfg) GetAutoRefTimes() []int32 {
	if m != nil {
		return m.AutoRefTimes
	}
	return nil
}

func (m *ShopGlobalCfg) GetRefCount() int32 {
	if m != nil && m.RefCount != nil {
		return *m.RefCount
	}
	return 0
}

func (m *ShopGlobalCfg) GetFreeCount() int32 {
	if m != nil && m.FreeCount != nil {
		return *m.FreeCount
	}
	return 0
}

func (m *ShopGlobalCfg) GetItemRefConsume() *ItemVaryConfig {
	if m != nil {
		return m.ItemRefConsume
	}
	return nil
}

func (m *ShopGlobalCfg) GetCurrencyRefConsume() []*ItemVaryConfig {
	if m != nil {
		return m.CurrencyRefConsume
	}
	return nil
}

func (m *ShopGlobalCfg) GetSubModuleId() int32 {
	if m != nil && m.SubModuleId != nil {
		return *m.SubModuleId
	}
	return 0
}

// 转会商店商品表
type PlayerTransferCfg struct {
	// 索引
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 商店ID
	ShopId *int32 `protobuf:"varint,2,opt,name=shop_id" json:"shop_id,omitempty"`
	// 格子id
	Box *int32 `protobuf:"varint,3,opt,name=box" json:"box,omitempty"`
	// 开始等级
	StartLv *int32 `protobuf:"varint,4,opt,name=start_lv" json:"start_lv,omitempty"`
	// 结束等级
	EndLv *int32 `protobuf:"varint,5,opt,name=end_lv" json:"end_lv,omitempty"`
	// 商品
	Commodity *ItemVaryConfig `protobuf:"bytes,6,opt,name=commodity" json:"commodity,omitempty"`
	// 价格
	Prices []*ItemVaryConfig `protobuf:"bytes,7,rep,name=prices" json:"prices,omitempty"`
	// 限购类型（1：不刷新；2每日刷新；3每周刷新）
	BuyLimitType *int32 `protobuf:"varint,8,opt,name=buyLimitType" json:"buyLimitType,omitempty"`
	// 限购次数（0：无限制 >0:限购次数
	BuyLimitCount *int32 `protobuf:"varint,9,opt,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	// 权重
	Weight *int32 `protobuf:"varint,10,opt,name=weight" json:"weight,omitempty"`
	// 开放条件(各个)
	OpenCondition []int32 `protobuf:"varint,12,rep,name=open_condition" json:"open_condition,omitempty"`
	// 折扣概率（100_80;80_20）
	Probability      *string `protobuf:"bytes,13,opt,name=probability" json:"probability,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerTransferCfg) Reset()                    { *m = PlayerTransferCfg{} }
func (m *PlayerTransferCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerTransferCfg) ProtoMessage()               {}
func (*PlayerTransferCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{166} }

func (m *PlayerTransferCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerTransferCfg) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *PlayerTransferCfg) GetBox() int32 {
	if m != nil && m.Box != nil {
		return *m.Box
	}
	return 0
}

func (m *PlayerTransferCfg) GetStartLv() int32 {
	if m != nil && m.StartLv != nil {
		return *m.StartLv
	}
	return 0
}

func (m *PlayerTransferCfg) GetEndLv() int32 {
	if m != nil && m.EndLv != nil {
		return *m.EndLv
	}
	return 0
}

func (m *PlayerTransferCfg) GetCommodity() *ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *PlayerTransferCfg) GetPrices() []*ItemVaryConfig {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *PlayerTransferCfg) GetBuyLimitType() int32 {
	if m != nil && m.BuyLimitType != nil {
		return *m.BuyLimitType
	}
	return 0
}

func (m *PlayerTransferCfg) GetBuyLimitCount() int32 {
	if m != nil && m.BuyLimitCount != nil {
		return *m.BuyLimitCount
	}
	return 0
}

func (m *PlayerTransferCfg) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *PlayerTransferCfg) GetOpenCondition() []int32 {
	if m != nil {
		return m.OpenCondition
	}
	return nil
}

func (m *PlayerTransferCfg) GetProbability() string {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return ""
}

// 转会商店全局表
type GlobalTransferCfg struct {
	// 商店ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 格子数
	BoxMax *int32 `protobuf:"varint,2,opt,name=boxMax" json:"boxMax,omitempty"`
	// 自动刷新时间（-1不刷新）
	AutoRefTimes []int32 `protobuf:"varint,3,rep,name=autoRefTimes" json:"autoRefTimes,omitempty"`
	// 关联模块id
	SubModuleId      *int32 `protobuf:"varint,4,opt,name=subModuleId" json:"subModuleId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GlobalTransferCfg) Reset()                    { *m = GlobalTransferCfg{} }
func (m *GlobalTransferCfg) String() string            { return proto.CompactTextString(m) }
func (*GlobalTransferCfg) ProtoMessage()               {}
func (*GlobalTransferCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{167} }

func (m *GlobalTransferCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GlobalTransferCfg) GetBoxMax() int32 {
	if m != nil && m.BoxMax != nil {
		return *m.BoxMax
	}
	return 0
}

func (m *GlobalTransferCfg) GetAutoRefTimes() []int32 {
	if m != nil {
		return m.AutoRefTimes
	}
	return nil
}

func (m *GlobalTransferCfg) GetSubModuleId() int32 {
	if m != nil && m.SubModuleId != nil {
		return *m.SubModuleId
	}
	return 0
}

// 图鉴等级配置
type RosterLvCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Score            *int32             `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Attrs            []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attrs" json:"attrs,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RosterLvCfg) Reset()                    { *m = RosterLvCfg{} }
func (m *RosterLvCfg) String() string            { return proto.CompactTextString(m) }
func (*RosterLvCfg) ProtoMessage()               {}
func (*RosterLvCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{168} }

func (m *RosterLvCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RosterLvCfg) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *RosterLvCfg) GetAttrs() []*PlayerAttrValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// 总图鉴值配置
type RosterValueCfg struct {
	Lv               *int32             `protobuf:"varint,1,opt,name=lv" json:"lv,omitempty"`
	Score            *int32             `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Attrs            []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attrs" json:"attrs,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RosterValueCfg) Reset()                    { *m = RosterValueCfg{} }
func (m *RosterValueCfg) String() string            { return proto.CompactTextString(m) }
func (*RosterValueCfg) ProtoMessage()               {}
func (*RosterValueCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{169} }

func (m *RosterValueCfg) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *RosterValueCfg) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *RosterValueCfg) GetAttrs() []*PlayerAttrValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// 联盟交易配置
type AllianceDeal struct {
	BallerValue      *int32          `protobuf:"varint,1,opt,name=baller_value" json:"baller_value,omitempty"`
	NumberOfFragment *int32          `protobuf:"varint,2,opt,name=number_of_fragment" json:"number_of_fragment,omitempty"`
	Reward           *ItemVaryConfig `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	AllianceLv       *int32          `protobuf:"varint,4,opt,name=alliance_lv" json:"alliance_lv,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AllianceDeal) Reset()                    { *m = AllianceDeal{} }
func (m *AllianceDeal) String() string            { return proto.CompactTextString(m) }
func (*AllianceDeal) ProtoMessage()               {}
func (*AllianceDeal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{170} }

func (m *AllianceDeal) GetBallerValue() int32 {
	if m != nil && m.BallerValue != nil {
		return *m.BallerValue
	}
	return 0
}

func (m *AllianceDeal) GetNumberOfFragment() int32 {
	if m != nil && m.NumberOfFragment != nil {
		return *m.NumberOfFragment
	}
	return 0
}

func (m *AllianceDeal) GetReward() *ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *AllianceDeal) GetAllianceLv() int32 {
	if m != nil && m.AllianceLv != nil {
		return *m.AllianceLv
	}
	return 0
}

// 联盟全局表
type AllianceGlobal struct {
	Id                       *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NumberOfRequests         *int32  `protobuf:"varint,2,opt,name=number_of_requests" json:"number_of_requests,omitempty"`
	NumberOfPresenter        *int32  `protobuf:"varint,3,opt,name=number_of_presenter" json:"number_of_presenter,omitempty"`
	RefreshTime              *int32  `protobuf:"varint,4,opt,name=refresh_time" json:"refresh_time,omitempty"`
	NumberOfReserve          *int32  `protobuf:"varint,5,opt,name=number_of_reserve" json:"number_of_reserve,omitempty"`
	ClearingActivityTime     *int32  `protobuf:"varint,6,opt,name=clearing_activity_time" json:"clearing_activity_time,omitempty"`
	ImpeachActivityCondition *int32  `protobuf:"varint,7,opt,name=impeach_activity_condition" json:"impeach_activity_condition,omitempty"`
	UnionDissolvedTime       *int32  `protobuf:"varint,8,opt,name=union_dissolved_time" json:"union_dissolved_time,omitempty"`
	BattleNum                *int32  `protobuf:"varint,9,opt,name=battle_num" json:"battle_num,omitempty"`
	BattleNumRefreshtime     *int32  `protobuf:"varint,10,opt,name=battle_num_refreshtime" json:"battle_num_refreshtime,omitempty"`
	Resettime                *string `protobuf:"bytes,11,opt,name=resettime" json:"resettime,omitempty"`
	LoseNum                  *int32  `protobuf:"varint,12,opt,name=lose_num" json:"lose_num,omitempty"`
	LoseNumRefreshtime       *int32  `protobuf:"varint,13,opt,name=lose_num_refreshtime" json:"lose_num_refreshtime,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *AllianceGlobal) Reset()                    { *m = AllianceGlobal{} }
func (m *AllianceGlobal) String() string            { return proto.CompactTextString(m) }
func (*AllianceGlobal) ProtoMessage()               {}
func (*AllianceGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{171} }

func (m *AllianceGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AllianceGlobal) GetNumberOfRequests() int32 {
	if m != nil && m.NumberOfRequests != nil {
		return *m.NumberOfRequests
	}
	return 0
}

func (m *AllianceGlobal) GetNumberOfPresenter() int32 {
	if m != nil && m.NumberOfPresenter != nil {
		return *m.NumberOfPresenter
	}
	return 0
}

func (m *AllianceGlobal) GetRefreshTime() int32 {
	if m != nil && m.RefreshTime != nil {
		return *m.RefreshTime
	}
	return 0
}

func (m *AllianceGlobal) GetNumberOfReserve() int32 {
	if m != nil && m.NumberOfReserve != nil {
		return *m.NumberOfReserve
	}
	return 0
}

func (m *AllianceGlobal) GetClearingActivityTime() int32 {
	if m != nil && m.ClearingActivityTime != nil {
		return *m.ClearingActivityTime
	}
	return 0
}

func (m *AllianceGlobal) GetImpeachActivityCondition() int32 {
	if m != nil && m.ImpeachActivityCondition != nil {
		return *m.ImpeachActivityCondition
	}
	return 0
}

func (m *AllianceGlobal) GetUnionDissolvedTime() int32 {
	if m != nil && m.UnionDissolvedTime != nil {
		return *m.UnionDissolvedTime
	}
	return 0
}

func (m *AllianceGlobal) GetBattleNum() int32 {
	if m != nil && m.BattleNum != nil {
		return *m.BattleNum
	}
	return 0
}

func (m *AllianceGlobal) GetBattleNumRefreshtime() int32 {
	if m != nil && m.BattleNumRefreshtime != nil {
		return *m.BattleNumRefreshtime
	}
	return 0
}

func (m *AllianceGlobal) GetResettime() string {
	if m != nil && m.Resettime != nil {
		return *m.Resettime
	}
	return ""
}

func (m *AllianceGlobal) GetLoseNum() int32 {
	if m != nil && m.LoseNum != nil {
		return *m.LoseNum
	}
	return 0
}

func (m *AllianceGlobal) GetLoseNumRefreshtime() int32 {
	if m != nil && m.LoseNumRefreshtime != nil {
		return *m.LoseNumRefreshtime
	}
	return 0
}

// 设置表配置
type SettingGlobal struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CareerOrder      []int32 `protobuf:"varint,2,rep,name=career_order" json:"career_order,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SettingGlobal) Reset()                    { *m = SettingGlobal{} }
func (m *SettingGlobal) String() string            { return proto.CompactTextString(m) }
func (*SettingGlobal) ProtoMessage()               {}
func (*SettingGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{172} }

func (m *SettingGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SettingGlobal) GetCareerOrder() []int32 {
	if m != nil {
		return m.CareerOrder
	}
	return nil
}

// 平台渠道配置
type PlatformChannel struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NameType         *int32  `protobuf:"varint,2,opt,name=name_type" json:"name_type,omitempty"`
	NameKey          *string `protobuf:"bytes,3,opt,name=name_key" json:"name_key,omitempty"`
	NameValue        *string `protobuf:"bytes,4,opt,name=name_value" json:"name_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlatformChannel) Reset()                    { *m = PlatformChannel{} }
func (m *PlatformChannel) String() string            { return proto.CompactTextString(m) }
func (*PlatformChannel) ProtoMessage()               {}
func (*PlatformChannel) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{173} }

func (m *PlatformChannel) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlatformChannel) GetNameType() int32 {
	if m != nil && m.NameType != nil {
		return *m.NameType
	}
	return 0
}

func (m *PlatformChannel) GetNameKey() string {
	if m != nil && m.NameKey != nil {
		return *m.NameKey
	}
	return ""
}

func (m *PlatformChannel) GetNameValue() string {
	if m != nil && m.NameValue != nil {
		return *m.NameValue
	}
	return ""
}

// 排行榜服务器分组
type RankServerGroup struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RankServerId     *int32  `protobuf:"varint,2,opt,name=rankServerId" json:"rankServerId,omitempty"`
	LogicServerId    []int32 `protobuf:"varint,3,rep,name=logicServerId" json:"logicServerId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RankServerGroup) Reset()                    { *m = RankServerGroup{} }
func (m *RankServerGroup) String() string            { return proto.CompactTextString(m) }
func (*RankServerGroup) ProtoMessage()               {}
func (*RankServerGroup) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{174} }

func (m *RankServerGroup) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RankServerGroup) GetRankServerId() int32 {
	if m != nil && m.RankServerId != nil {
		return *m.RankServerId
	}
	return 0
}

func (m *RankServerGroup) GetLogicServerId() []int32 {
	if m != nil {
		return m.LogicServerId
	}
	return nil
}

// 竞技场服务器分组
type MatchServerGroup struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MatchServerId    *int32  `protobuf:"varint,2,opt,name=matchServerId" json:"matchServerId,omitempty"`
	LogicServerId    []int32 `protobuf:"varint,3,rep,name=logicServerId" json:"logicServerId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MatchServerGroup) Reset()                    { *m = MatchServerGroup{} }
func (m *MatchServerGroup) String() string            { return proto.CompactTextString(m) }
func (*MatchServerGroup) ProtoMessage()               {}
func (*MatchServerGroup) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{175} }

func (m *MatchServerGroup) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MatchServerGroup) GetMatchServerId() int32 {
	if m != nil && m.MatchServerId != nil {
		return *m.MatchServerId
	}
	return 0
}

func (m *MatchServerGroup) GetLogicServerId() []int32 {
	if m != nil {
		return m.LogicServerId
	}
	return nil
}

// 战斗节点公式
type FightFormula struct {
	KeyId            *int32  `protobuf:"varint,1,opt,name=key_id" json:"key_id,omitempty"`
	AttackXAttr      *int32  `protobuf:"varint,2,opt,name=attackX_attr" json:"attackX_attr,omitempty"`
	DefenseXAttr     *int32  `protobuf:"varint,3,opt,name=defenseX_attr" json:"defenseX_attr,omitempty"`
	AttckXFactor     *int32  `protobuf:"varint,4,opt,name=attckX_factor" json:"attckX_factor,omitempty"`
	BaseSuccess      []int32 `protobuf:"varint,5,rep,name=base_success" json:"base_success,omitempty"`
	BaseCounter      []int32 `protobuf:"varint,6,rep,name=base_counter" json:"base_counter,omitempty"`
	BaseMiss         []int32 `protobuf:"varint,7,rep,name=base_miss" json:"base_miss,omitempty"`
	ShootSuccessNum  []int32 `protobuf:"varint,8,rep,name=shoot_success_num" json:"shoot_success_num,omitempty"`
	ShootFailNum     []int32 `protobuf:"varint,9,rep,name=shoot_fail_num" json:"shoot_fail_num,omitempty"`
	ShootSuccessRate *string `protobuf:"bytes,10,opt,name=shoot_success_rate" json:"shoot_success_rate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FightFormula) Reset()                    { *m = FightFormula{} }
func (m *FightFormula) String() string            { return proto.CompactTextString(m) }
func (*FightFormula) ProtoMessage()               {}
func (*FightFormula) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{176} }

func (m *FightFormula) GetKeyId() int32 {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return 0
}

func (m *FightFormula) GetAttackXAttr() int32 {
	if m != nil && m.AttackXAttr != nil {
		return *m.AttackXAttr
	}
	return 0
}

func (m *FightFormula) GetDefenseXAttr() int32 {
	if m != nil && m.DefenseXAttr != nil {
		return *m.DefenseXAttr
	}
	return 0
}

func (m *FightFormula) GetAttckXFactor() int32 {
	if m != nil && m.AttckXFactor != nil {
		return *m.AttckXFactor
	}
	return 0
}

func (m *FightFormula) GetBaseSuccess() []int32 {
	if m != nil {
		return m.BaseSuccess
	}
	return nil
}

func (m *FightFormula) GetBaseCounter() []int32 {
	if m != nil {
		return m.BaseCounter
	}
	return nil
}

func (m *FightFormula) GetBaseMiss() []int32 {
	if m != nil {
		return m.BaseMiss
	}
	return nil
}

func (m *FightFormula) GetShootSuccessNum() []int32 {
	if m != nil {
		return m.ShootSuccessNum
	}
	return nil
}

func (m *FightFormula) GetShootFailNum() []int32 {
	if m != nil {
		return m.ShootFailNum
	}
	return nil
}

func (m *FightFormula) GetShootSuccessRate() string {
	if m != nil && m.ShootSuccessRate != nil {
		return *m.ShootSuccessRate
	}
	return ""
}

// 战斗节点
type FightKey struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FormulaType      *int32             `protobuf:"varint,2,opt,name=formula_type" json:"formula_type,omitempty"`
	FormulaId        *int32             `protobuf:"varint,3,opt,name=formula_id" json:"formula_id,omitempty"`
	BranchKeyId      *int32             `protobuf:"varint,4,opt,name=branch_key_id" json:"branch_key_id,omitempty"`
	IsSpendVit       *int32             `protobuf:"varint,5,opt,name=is_spend_vit" json:"is_spend_vit,omitempty"`
	VitCost          []int32            `protobuf:"varint,6,rep,name=vit_cost" json:"vit_cost,omitempty"`
	ChangePower      *int32             `protobuf:"varint,7,opt,name=change_power" json:"change_power,omitempty"`
	KeyTest          []*TypeValueConfig `protobuf:"bytes,8,rep,name=key_test" json:"key_test,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *FightKey) Reset()                    { *m = FightKey{} }
func (m *FightKey) String() string            { return proto.CompactTextString(m) }
func (*FightKey) ProtoMessage()               {}
func (*FightKey) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{177} }

func (m *FightKey) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FightKey) GetFormulaType() int32 {
	if m != nil && m.FormulaType != nil {
		return *m.FormulaType
	}
	return 0
}

func (m *FightKey) GetFormulaId() int32 {
	if m != nil && m.FormulaId != nil {
		return *m.FormulaId
	}
	return 0
}

func (m *FightKey) GetBranchKeyId() int32 {
	if m != nil && m.BranchKeyId != nil {
		return *m.BranchKeyId
	}
	return 0
}

func (m *FightKey) GetIsSpendVit() int32 {
	if m != nil && m.IsSpendVit != nil {
		return *m.IsSpendVit
	}
	return 0
}

func (m *FightKey) GetVitCost() []int32 {
	if m != nil {
		return m.VitCost
	}
	return nil
}

func (m *FightKey) GetChangePower() int32 {
	if m != nil && m.ChangePower != nil {
		return *m.ChangePower
	}
	return 0
}

func (m *FightKey) GetKeyTest() []*TypeValueConfig {
	if m != nil {
		return m.KeyTest
	}
	return nil
}

// 属性权重系数
type FightAttrQuality struct {
	FactorId         *int32             `protobuf:"varint,1,opt,name=factor_id" json:"factor_id,omitempty"`
	Mult             []*TypeValueConfig `protobuf:"bytes,2,rep,name=mult" json:"mult,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *FightAttrQuality) Reset()                    { *m = FightAttrQuality{} }
func (m *FightAttrQuality) String() string            { return proto.CompactTextString(m) }
func (*FightAttrQuality) ProtoMessage()               {}
func (*FightAttrQuality) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{178} }

func (m *FightAttrQuality) GetFactorId() int32 {
	if m != nil && m.FactorId != nil {
		return *m.FactorId
	}
	return 0
}

func (m *FightAttrQuality) GetMult() []*TypeValueConfig {
	if m != nil {
		return m.Mult
	}
	return nil
}

// 自动执行配置
type AutoExecCfg struct {
	Id                *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ExecType          *int32  `protobuf:"varint,2,opt,name=exec_type" json:"exec_type,omitempty"`
	Param             *string `protobuf:"bytes,3,opt,name=param" json:"param,omitempty"`
	CheckConditionIds []int32 `protobuf:"varint,4,rep,name=check_condition_ids" json:"check_condition_ids,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *AutoExecCfg) Reset()                    { *m = AutoExecCfg{} }
func (m *AutoExecCfg) String() string            { return proto.CompactTextString(m) }
func (*AutoExecCfg) ProtoMessage()               {}
func (*AutoExecCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{179} }

func (m *AutoExecCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AutoExecCfg) GetExecType() int32 {
	if m != nil && m.ExecType != nil {
		return *m.ExecType
	}
	return 0
}

func (m *AutoExecCfg) GetParam() string {
	if m != nil && m.Param != nil {
		return *m.Param
	}
	return ""
}

func (m *AutoExecCfg) GetCheckConditionIds() []int32 {
	if m != nil {
		return m.CheckConditionIds
	}
	return nil
}

// 分支节点
type FightBranchKey struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SwapType         *int32             `protobuf:"varint,2,opt,name=swap_type" json:"swap_type,omitempty"`
	BranchKeyId      *int32             `protobuf:"varint,3,opt,name=branch_key_id" json:"branch_key_id,omitempty"`
	RightCamp        *int32             `protobuf:"varint,4,opt,name=right_camp" json:"right_camp,omitempty"`
	RightMult        []*TypeValueConfig `protobuf:"bytes,5,rep,name=right_mult" json:"right_mult,omitempty"`
	OpposeMult       []*TypeValueConfig `protobuf:"bytes,6,rep,name=oppose_mult" json:"oppose_mult,omitempty"`
	TacticTend       []*TypeValueConfig `protobuf:"bytes,7,rep,name=tactic_tend" json:"tactic_tend,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *FightBranchKey) Reset()                    { *m = FightBranchKey{} }
func (m *FightBranchKey) String() string            { return proto.CompactTextString(m) }
func (*FightBranchKey) ProtoMessage()               {}
func (*FightBranchKey) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{180} }

func (m *FightBranchKey) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FightBranchKey) GetSwapType() int32 {
	if m != nil && m.SwapType != nil {
		return *m.SwapType
	}
	return 0
}

func (m *FightBranchKey) GetBranchKeyId() int32 {
	if m != nil && m.BranchKeyId != nil {
		return *m.BranchKeyId
	}
	return 0
}

func (m *FightBranchKey) GetRightCamp() int32 {
	if m != nil && m.RightCamp != nil {
		return *m.RightCamp
	}
	return 0
}

func (m *FightBranchKey) GetRightMult() []*TypeValueConfig {
	if m != nil {
		return m.RightMult
	}
	return nil
}

func (m *FightBranchKey) GetOpposeMult() []*TypeValueConfig {
	if m != nil {
		return m.OpposeMult
	}
	return nil
}

func (m *FightBranchKey) GetTacticTend() []*TypeValueConfig {
	if m != nil {
		return m.TacticTend
	}
	return nil
}

// 战术执行状况
type FightExecute struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Excellent        *int32 `protobuf:"varint,2,opt,name=excellent" json:"excellent,omitempty"`
	Normal           *int32 `protobuf:"varint,3,opt,name=normal" json:"normal,omitempty"`
	Bad              *int32 `protobuf:"varint,4,opt,name=bad" json:"bad,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightExecute) Reset()                    { *m = FightExecute{} }
func (m *FightExecute) String() string            { return proto.CompactTextString(m) }
func (*FightExecute) ProtoMessage()               {}
func (*FightExecute) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{181} }

func (m *FightExecute) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FightExecute) GetExcellent() int32 {
	if m != nil && m.Excellent != nil {
		return *m.Excellent
	}
	return 0
}

func (m *FightExecute) GetNormal() int32 {
	if m != nil && m.Normal != nil {
		return *m.Normal
	}
	return 0
}

func (m *FightExecute) GetBad() int32 {
	if m != nil && m.Bad != nil {
		return *m.Bad
	}
	return 0
}

// 战斗公式全局配置
type FightGlobal struct {
	FightGlobalId    *int32  `protobuf:"varint,1,opt,name=fight_global_id" json:"fight_global_id,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FightGlobal) Reset()                    { *m = FightGlobal{} }
func (m *FightGlobal) String() string            { return proto.CompactTextString(m) }
func (*FightGlobal) ProtoMessage()               {}
func (*FightGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{182} }

func (m *FightGlobal) GetFightGlobalId() int32 {
	if m != nil && m.FightGlobalId != nil {
		return *m.FightGlobalId
	}
	return 0
}

func (m *FightGlobal) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// 战斗快进倍数表
type FightFastMultiple struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 快进实际倍数
	FastMultiple *int32 `protobuf:"varint,2,opt,name=fast_multiple" json:"fast_multiple,omitempty"`
	// 开启等级
	OpenLv           *int32 `protobuf:"varint,3,opt,name=open_lv" json:"open_lv,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightFastMultiple) Reset()                    { *m = FightFastMultiple{} }
func (m *FightFastMultiple) String() string            { return proto.CompactTextString(m) }
func (*FightFastMultiple) ProtoMessage()               {}
func (*FightFastMultiple) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{183} }

func (m *FightFastMultiple) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FightFastMultiple) GetFastMultiple() int32 {
	if m != nil && m.FastMultiple != nil {
		return *m.FastMultiple
	}
	return 0
}

func (m *FightFastMultiple) GetOpenLv() int32 {
	if m != nil && m.OpenLv != nil {
		return *m.OpenLv
	}
	return 0
}

// baller_features
type BallerFeatures struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value            *int32             `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	AttackMark       []int32            `protobuf:"varint,3,rep,name=attack_mark" json:"attack_mark,omitempty"`
	DefenseMark      []int32            `protobuf:"varint,4,rep,name=defense_mark" json:"defense_mark,omitempty"`
	ExclusiveShow    *int32             `protobuf:"varint,5,opt,name=exclusive_show" json:"exclusive_show,omitempty"`
	AttackTaticAdd   []*TypeValueConfig `protobuf:"bytes,6,rep,name=attack_tatic_add" json:"attack_tatic_add,omitempty"`
	DefenseTaticAdd  []*TypeValueConfig `protobuf:"bytes,7,rep,name=defense_tatic_add" json:"defense_tatic_add,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BallerFeatures) Reset()                    { *m = BallerFeatures{} }
func (m *BallerFeatures) String() string            { return proto.CompactTextString(m) }
func (*BallerFeatures) ProtoMessage()               {}
func (*BallerFeatures) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{184} }

func (m *BallerFeatures) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BallerFeatures) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *BallerFeatures) GetAttackMark() []int32 {
	if m != nil {
		return m.AttackMark
	}
	return nil
}

func (m *BallerFeatures) GetDefenseMark() []int32 {
	if m != nil {
		return m.DefenseMark
	}
	return nil
}

func (m *BallerFeatures) GetExclusiveShow() int32 {
	if m != nil && m.ExclusiveShow != nil {
		return *m.ExclusiveShow
	}
	return 0
}

func (m *BallerFeatures) GetAttackTaticAdd() []*TypeValueConfig {
	if m != nil {
		return m.AttackTaticAdd
	}
	return nil
}

func (m *BallerFeatures) GetDefenseTaticAdd() []*TypeValueConfig {
	if m != nil {
		return m.DefenseTaticAdd
	}
	return nil
}

// 战术克制关系
type TacticRestraint struct {
	TacticsId        *int32             `protobuf:"varint,1,opt,name=tactics_id" json:"tactics_id,omitempty"`
	Restraint        []*TypeValueConfig `protobuf:"bytes,2,rep,name=restraint" json:"restraint,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TacticRestraint) Reset()                    { *m = TacticRestraint{} }
func (m *TacticRestraint) String() string            { return proto.CompactTextString(m) }
func (*TacticRestraint) ProtoMessage()               {}
func (*TacticRestraint) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{185} }

func (m *TacticRestraint) GetTacticsId() int32 {
	if m != nil && m.TacticsId != nil {
		return *m.TacticsId
	}
	return 0
}

func (m *TacticRestraint) GetRestraint() []*TypeValueConfig {
	if m != nil {
		return m.Restraint
	}
	return nil
}

// 标记序号
type AnimationClassification struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MarkMode         *int32 `protobuf:"varint,2,opt,name=mark_mode" json:"mark_mode,omitempty"`
	NodeDealType     *int32 `protobuf:"varint,3,opt,name=nodeDealType" json:"nodeDealType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AnimationClassification) Reset()                    { *m = AnimationClassification{} }
func (m *AnimationClassification) String() string            { return proto.CompactTextString(m) }
func (*AnimationClassification) ProtoMessage()               {}
func (*AnimationClassification) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{186} }

func (m *AnimationClassification) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AnimationClassification) GetMarkMode() int32 {
	if m != nil && m.MarkMode != nil {
		return *m.MarkMode
	}
	return 0
}

func (m *AnimationClassification) GetNodeDealType() int32 {
	if m != nil && m.NodeDealType != nil {
		return *m.NodeDealType
	}
	return 0
}

// 战术名称
type TacticName struct {
	TacticId         *int32  `protobuf:"varint,1,opt,name=tactic_id" json:"tactic_id,omitempty"`
	TacticType       *int32  `protobuf:"varint,2,opt,name=tactic_type" json:"tactic_type,omitempty"`
	TreeName         *string `protobuf:"bytes,3,opt,name=tree_name" json:"tree_name,omitempty"`
	TacticIdentity   []int32 `protobuf:"varint,4,rep,name=tactic_identity" json:"tactic_identity,omitempty"`
	Select           *int32  `protobuf:"varint,5,opt,name=select" json:"select,omitempty"`
	OpposeTactic     *int32  `protobuf:"varint,6,opt,name=oppose_tactic" json:"oppose_tactic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TacticName) Reset()                    { *m = TacticName{} }
func (m *TacticName) String() string            { return proto.CompactTextString(m) }
func (*TacticName) ProtoMessage()               {}
func (*TacticName) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{187} }

func (m *TacticName) GetTacticId() int32 {
	if m != nil && m.TacticId != nil {
		return *m.TacticId
	}
	return 0
}

func (m *TacticName) GetTacticType() int32 {
	if m != nil && m.TacticType != nil {
		return *m.TacticType
	}
	return 0
}

func (m *TacticName) GetTreeName() string {
	if m != nil && m.TreeName != nil {
		return *m.TreeName
	}
	return ""
}

func (m *TacticName) GetTacticIdentity() []int32 {
	if m != nil {
		return m.TacticIdentity
	}
	return nil
}

func (m *TacticName) GetSelect() int32 {
	if m != nil && m.Select != nil {
		return *m.Select
	}
	return 0
}

func (m *TacticName) GetOpposeTactic() int32 {
	if m != nil && m.OpposeTactic != nil {
		return *m.OpposeTactic
	}
	return 0
}

// 战术克制表
type TacticsWeight struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TacticsType      *int32             `protobuf:"varint,2,opt,name=tactics_type" json:"tactics_type,omitempty"`
	Effect           *int32             `protobuf:"varint,3,opt,name=effect" json:"effect,omitempty"`
	TacticsWeight    []*TypeValueConfig `protobuf:"bytes,4,rep,name=tactics_weight" json:"tactics_weight,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TacticsWeight) Reset()                    { *m = TacticsWeight{} }
func (m *TacticsWeight) String() string            { return proto.CompactTextString(m) }
func (*TacticsWeight) ProtoMessage()               {}
func (*TacticsWeight) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{188} }

func (m *TacticsWeight) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TacticsWeight) GetTacticsType() int32 {
	if m != nil && m.TacticsType != nil {
		return *m.TacticsType
	}
	return 0
}

func (m *TacticsWeight) GetEffect() int32 {
	if m != nil && m.Effect != nil {
		return *m.Effect
	}
	return 0
}

func (m *TacticsWeight) GetTacticsWeight() []*TypeValueConfig {
	if m != nil {
		return m.TacticsWeight
	}
	return nil
}

// 战术挑战赛执行效果额外加成
type TacticAttr struct {
	DifficultyId     *int32             `protobuf:"varint,1,opt,name=difficulty_id" json:"difficulty_id,omitempty"`
	TypeId           *int32             `protobuf:"varint,2,opt,name=type_id" json:"type_id,omitempty"`
	AttackExcellent  []*TypeValueConfig `protobuf:"bytes,3,rep,name=attack_excellent" json:"attack_excellent,omitempty"`
	DefendExcellent  []*TypeValueConfig `protobuf:"bytes,4,rep,name=defend_excellent" json:"defend_excellent,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TacticAttr) Reset()                    { *m = TacticAttr{} }
func (m *TacticAttr) String() string            { return proto.CompactTextString(m) }
func (*TacticAttr) ProtoMessage()               {}
func (*TacticAttr) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{189} }

func (m *TacticAttr) GetDifficultyId() int32 {
	if m != nil && m.DifficultyId != nil {
		return *m.DifficultyId
	}
	return 0
}

func (m *TacticAttr) GetTypeId() int32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *TacticAttr) GetAttackExcellent() []*TypeValueConfig {
	if m != nil {
		return m.AttackExcellent
	}
	return nil
}

func (m *TacticAttr) GetDefendExcellent() []*TypeValueConfig {
	if m != nil {
		return m.DefendExcellent
	}
	return nil
}

// 表演赛关卡配置（加载内存后清除）
type PerformanceCustomsPass struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShowType         *int32             `protobuf:"varint,2,opt,name=show_type" json:"show_type,omitempty"`
	ChapterId        *int32             `protobuf:"varint,3,opt,name=chapter_id" json:"chapter_id,omitempty"`
	IsMax            *int32             `protobuf:"varint,4,opt,name=is_max" json:"is_max,omitempty"`
	UnlockCondition  []*TypeValueConfig `protobuf:"bytes,5,rep,name=unlock_condition" json:"unlock_condition,omitempty"`
	PlaceAttrs       []int32            `protobuf:"varint,6,rep,name=place_attrs" json:"place_attrs,omitempty"`
	Bastketballs     *string            `protobuf:"bytes,7,opt,name=bastketballs" json:"bastketballs,omitempty"`
	PassConditions   []*TypeValueConfig `protobuf:"bytes,8,rep,name=pass_conditions" json:"pass_conditions,omitempty"`
	Rewards_1        []*ItemVaryConfig  `protobuf:"bytes,9,rep,name=rewards_1" json:"rewards_1,omitempty"`
	Rewards_2        []*ItemVaryConfig  `protobuf:"bytes,10,rep,name=rewards_2" json:"rewards_2,omitempty"`
	Rewards_3        []*ItemVaryConfig  `protobuf:"bytes,11,rep,name=rewards_3" json:"rewards_3,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PerformanceCustomsPass) Reset()                    { *m = PerformanceCustomsPass{} }
func (m *PerformanceCustomsPass) String() string            { return proto.CompactTextString(m) }
func (*PerformanceCustomsPass) ProtoMessage()               {}
func (*PerformanceCustomsPass) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{190} }

func (m *PerformanceCustomsPass) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PerformanceCustomsPass) GetShowType() int32 {
	if m != nil && m.ShowType != nil {
		return *m.ShowType
	}
	return 0
}

func (m *PerformanceCustomsPass) GetChapterId() int32 {
	if m != nil && m.ChapterId != nil {
		return *m.ChapterId
	}
	return 0
}

func (m *PerformanceCustomsPass) GetIsMax() int32 {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return 0
}

func (m *PerformanceCustomsPass) GetUnlockCondition() []*TypeValueConfig {
	if m != nil {
		return m.UnlockCondition
	}
	return nil
}

func (m *PerformanceCustomsPass) GetPlaceAttrs() []int32 {
	if m != nil {
		return m.PlaceAttrs
	}
	return nil
}

func (m *PerformanceCustomsPass) GetBastketballs() string {
	if m != nil && m.Bastketballs != nil {
		return *m.Bastketballs
	}
	return ""
}

func (m *PerformanceCustomsPass) GetPassConditions() []*TypeValueConfig {
	if m != nil {
		return m.PassConditions
	}
	return nil
}

func (m *PerformanceCustomsPass) GetRewards_1() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards_1
	}
	return nil
}

func (m *PerformanceCustomsPass) GetRewards_2() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards_2
	}
	return nil
}

func (m *PerformanceCustomsPass) GetRewards_3() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards_3
	}
	return nil
}

type ThreeDunkPlaceBall struct {
	Balls            []int32 `protobuf:"varint,1,rep,name=balls" json:"balls,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ThreeDunkPlaceBall) Reset()                    { *m = ThreeDunkPlaceBall{} }
func (m *ThreeDunkPlaceBall) String() string            { return proto.CompactTextString(m) }
func (*ThreeDunkPlaceBall) ProtoMessage()               {}
func (*ThreeDunkPlaceBall) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{191} }

func (m *ThreeDunkPlaceBall) GetBalls() []int32 {
	if m != nil {
		return m.Balls
	}
	return nil
}

type PerformanceReward struct {
	Rewards          []*ItemVaryConfig `protobuf:"bytes,1,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PerformanceReward) Reset()                    { *m = PerformanceReward{} }
func (m *PerformanceReward) String() string            { return proto.CompactTextString(m) }
func (*PerformanceReward) ProtoMessage()               {}
func (*PerformanceReward) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{192} }

func (m *PerformanceReward) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 稀有度光环
type RarityHaloCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SquadValue       []int32            `protobuf:"varint,2,rep,name=squadValue" json:"squadValue,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RarityHaloCfg) Reset()                    { *m = RarityHaloCfg{} }
func (m *RarityHaloCfg) String() string            { return proto.CompactTextString(m) }
func (*RarityHaloCfg) ProtoMessage()               {}
func (*RarityHaloCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{193} }

func (m *RarityHaloCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RarityHaloCfg) GetSquadValue() []int32 {
	if m != nil {
		return m.SquadValue
	}
	return nil
}

func (m *RarityHaloCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 球队光环
type TeamHaloCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Num              *int32             `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TeamHaloCfg) Reset()                    { *m = TeamHaloCfg{} }
func (m *TeamHaloCfg) String() string            { return proto.CompactTextString(m) }
func (*TeamHaloCfg) ProtoMessage()               {}
func (*TeamHaloCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{194} }

func (m *TeamHaloCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TeamHaloCfg) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *TeamHaloCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 最佳阵容格子
type BestSquadGridCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Consume          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=consume" json:"consume,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BestSquadGridCfg) Reset()                    { *m = BestSquadGridCfg{} }
func (m *BestSquadGridCfg) String() string            { return proto.CompactTextString(m) }
func (*BestSquadGridCfg) ProtoMessage()               {}
func (*BestSquadGridCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{195} }

func (m *BestSquadGridCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BestSquadGridCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

// 最佳阵容属性
type BestSquadAttrCfg struct {
	Star             *int32             `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BestSquadAttrCfg) Reset()                    { *m = BestSquadAttrCfg{} }
func (m *BestSquadAttrCfg) String() string            { return proto.CompactTextString(m) }
func (*BestSquadAttrCfg) ProtoMessage()               {}
func (*BestSquadAttrCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{196} }

func (m *BestSquadAttrCfg) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *BestSquadAttrCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 最佳阵容光环属性
type BestSquadHaloAttrCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Star             *int32             `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	Salary           *int32             `protobuf:"varint,3,opt,name=salary" json:"salary,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,4,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BestSquadHaloAttrCfg) Reset()                    { *m = BestSquadHaloAttrCfg{} }
func (m *BestSquadHaloAttrCfg) String() string            { return proto.CompactTextString(m) }
func (*BestSquadHaloAttrCfg) ProtoMessage()               {}
func (*BestSquadHaloAttrCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{197} }

func (m *BestSquadHaloAttrCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BestSquadHaloAttrCfg) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *BestSquadHaloAttrCfg) GetSalary() int32 {
	if m != nil && m.Salary != nil {
		return *m.Salary
	}
	return 0
}

func (m *BestSquadHaloAttrCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 最佳阵容离散数据
type BestSquadDiscreteDataCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	InitOpenGrid     *int32 `protobuf:"varint,2,opt,name=init_open_grid" json:"init_open_grid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BestSquadDiscreteDataCfg) Reset()                    { *m = BestSquadDiscreteDataCfg{} }
func (m *BestSquadDiscreteDataCfg) String() string            { return proto.CompactTextString(m) }
func (*BestSquadDiscreteDataCfg) ProtoMessage()               {}
func (*BestSquadDiscreteDataCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{198} }

func (m *BestSquadDiscreteDataCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BestSquadDiscreteDataCfg) GetInitOpenGrid() int32 {
	if m != nil && m.InitOpenGrid != nil {
		return *m.InitOpenGrid
	}
	return 0
}

// 最佳阵容星级配置
type BestSquadStarCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员稀有度
	Rarity *int32 `protobuf:"varint,2,opt,name=rarity" json:"rarity,omitempty"`
	// 额外星级
	ExtraStar        *int32 `protobuf:"varint,3,opt,name=extra_star" json:"extra_star,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BestSquadStarCfg) Reset()                    { *m = BestSquadStarCfg{} }
func (m *BestSquadStarCfg) String() string            { return proto.CompactTextString(m) }
func (*BestSquadStarCfg) ProtoMessage()               {}
func (*BestSquadStarCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{199} }

func (m *BestSquadStarCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BestSquadStarCfg) GetRarity() int32 {
	if m != nil && m.Rarity != nil {
		return *m.Rarity
	}
	return 0
}

func (m *BestSquadStarCfg) GetExtraStar() int32 {
	if m != nil && m.ExtraStar != nil {
		return *m.ExtraStar
	}
	return 0
}

// 表演赛关卡配置(服务器使用)
type PerformanceChapterCfg struct {
	Id               *int32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShowType         *int32                `protobuf:"varint,2,opt,name=show_type" json:"show_type,omitempty"`
	ChapterId        *int32                `protobuf:"varint,3,opt,name=chapter_id" json:"chapter_id,omitempty"`
	IsMax            *int32                `protobuf:"varint,4,opt,name=is_max" json:"is_max,omitempty"`
	UnlockCondition  []*TypeValueConfig    `protobuf:"bytes,5,rep,name=unlock_condition" json:"unlock_condition,omitempty"`
	PlaceAttrs       []int32               `protobuf:"varint,6,rep,name=place_attrs" json:"place_attrs,omitempty"`
	TotalBall        *int32                `protobuf:"varint,7,opt,name=totalBall" json:"totalBall,omitempty"`
	Places           []*ThreeDunkPlaceBall `protobuf:"bytes,8,rep,name=places" json:"places,omitempty"`
	PassConditions   []*TypeValueConfig    `protobuf:"bytes,9,rep,name=pass_conditions" json:"pass_conditions,omitempty"`
	Rewards          []*PerformanceReward  `protobuf:"bytes,10,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PerformanceChapterCfg) Reset()                    { *m = PerformanceChapterCfg{} }
func (m *PerformanceChapterCfg) String() string            { return proto.CompactTextString(m) }
func (*PerformanceChapterCfg) ProtoMessage()               {}
func (*PerformanceChapterCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{200} }

func (m *PerformanceChapterCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PerformanceChapterCfg) GetShowType() int32 {
	if m != nil && m.ShowType != nil {
		return *m.ShowType
	}
	return 0
}

func (m *PerformanceChapterCfg) GetChapterId() int32 {
	if m != nil && m.ChapterId != nil {
		return *m.ChapterId
	}
	return 0
}

func (m *PerformanceChapterCfg) GetIsMax() int32 {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return 0
}

func (m *PerformanceChapterCfg) GetUnlockCondition() []*TypeValueConfig {
	if m != nil {
		return m.UnlockCondition
	}
	return nil
}

func (m *PerformanceChapterCfg) GetPlaceAttrs() []int32 {
	if m != nil {
		return m.PlaceAttrs
	}
	return nil
}

func (m *PerformanceChapterCfg) GetTotalBall() int32 {
	if m != nil && m.TotalBall != nil {
		return *m.TotalBall
	}
	return 0
}

func (m *PerformanceChapterCfg) GetPlaces() []*ThreeDunkPlaceBall {
	if m != nil {
		return m.Places
	}
	return nil
}

func (m *PerformanceChapterCfg) GetPassConditions() []*TypeValueConfig {
	if m != nil {
		return m.PassConditions
	}
	return nil
}

func (m *PerformanceChapterCfg) GetRewards() []*PerformanceReward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 表演赛扣篮大赛得分权重配置
type PerformanceWeighing struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DunkAfter        *int32             `protobuf:"varint,2,opt,name=dunk_after" json:"dunk_after,omitempty"`
	DunkTop          *int32             `protobuf:"varint,3,opt,name=dunk_top" json:"dunk_top,omitempty"`
	ScoreWeights     []*TypeValueConfig `protobuf:"bytes,4,rep,name=score_weights" json:"score_weights,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PerformanceWeighing) Reset()                    { *m = PerformanceWeighing{} }
func (m *PerformanceWeighing) String() string            { return proto.CompactTextString(m) }
func (*PerformanceWeighing) ProtoMessage()               {}
func (*PerformanceWeighing) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{201} }

func (m *PerformanceWeighing) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PerformanceWeighing) GetDunkAfter() int32 {
	if m != nil && m.DunkAfter != nil {
		return *m.DunkAfter
	}
	return 0
}

func (m *PerformanceWeighing) GetDunkTop() int32 {
	if m != nil && m.DunkTop != nil {
		return *m.DunkTop
	}
	return 0
}

func (m *PerformanceWeighing) GetScoreWeights() []*TypeValueConfig {
	if m != nil {
		return m.ScoreWeights
	}
	return nil
}

// 表演赛全局配置
type PerformanceGlobal struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ThreeDunkCount   *int32  `protobuf:"varint,2,opt,name=three_dunk_count" json:"three_dunk_count,omitempty"`
	DunkCount        *int32  `protobuf:"varint,3,opt,name=dunk_count" json:"dunk_count,omitempty"`
	RefereesNumber   *int32  `protobuf:"varint,4,opt,name=referees_number" json:"referees_number,omitempty"`
	ExtraCredit      []int32 `protobuf:"varint,5,rep,name=extra_credit" json:"extra_credit,omitempty"`
	TreeChoice       *int32  `protobuf:"varint,6,opt,name=tree_choice" json:"tree_choice,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PerformanceGlobal) Reset()                    { *m = PerformanceGlobal{} }
func (m *PerformanceGlobal) String() string            { return proto.CompactTextString(m) }
func (*PerformanceGlobal) ProtoMessage()               {}
func (*PerformanceGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{202} }

func (m *PerformanceGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PerformanceGlobal) GetThreeDunkCount() int32 {
	if m != nil && m.ThreeDunkCount != nil {
		return *m.ThreeDunkCount
	}
	return 0
}

func (m *PerformanceGlobal) GetDunkCount() int32 {
	if m != nil && m.DunkCount != nil {
		return *m.DunkCount
	}
	return 0
}

func (m *PerformanceGlobal) GetRefereesNumber() int32 {
	if m != nil && m.RefereesNumber != nil {
		return *m.RefereesNumber
	}
	return 0
}

func (m *PerformanceGlobal) GetExtraCredit() []int32 {
	if m != nil {
		return m.ExtraCredit
	}
	return nil
}

func (m *PerformanceGlobal) GetTreeChoice() int32 {
	if m != nil && m.TreeChoice != nil {
		return *m.TreeChoice
	}
	return 0
}

// 三分球色块命中率加成配置
type ColorBlockAdditionCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Addition         *int32 `protobuf:"varint,2,opt,name=addition" json:"addition,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ColorBlockAdditionCfg) Reset()                    { *m = ColorBlockAdditionCfg{} }
func (m *ColorBlockAdditionCfg) String() string            { return proto.CompactTextString(m) }
func (*ColorBlockAdditionCfg) ProtoMessage()               {}
func (*ColorBlockAdditionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{203} }

func (m *ColorBlockAdditionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ColorBlockAdditionCfg) GetAddition() int32 {
	if m != nil && m.Addition != nil {
		return *m.Addition
	}
	return 0
}

// 树分类配置
type TreeChoiceCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TreeType         *int32  `protobuf:"varint,2,opt,name=tree_type" json:"tree_type,omitempty"`
	TreeName         *string `protobuf:"bytes,3,opt,name=tree_name" json:"tree_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TreeChoiceCfg) Reset()                    { *m = TreeChoiceCfg{} }
func (m *TreeChoiceCfg) String() string            { return proto.CompactTextString(m) }
func (*TreeChoiceCfg) ProtoMessage()               {}
func (*TreeChoiceCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{204} }

func (m *TreeChoiceCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TreeChoiceCfg) GetTreeType() int32 {
	if m != nil && m.TreeType != nil {
		return *m.TreeType
	}
	return 0
}

func (m *TreeChoiceCfg) GetTreeName() string {
	if m != nil && m.TreeName != nil {
		return *m.TreeName
	}
	return ""
}

// 球员阶级配置
type PlayerClassCfg struct {
	Class            *int32  `protobuf:"varint,1,opt,name=class" json:"class,omitempty"`
	SlotIds          []int32 `protobuf:"varint,2,rep,name=slot_ids" json:"slot_ids,omitempty"`
	MaxClass         *int32  `protobuf:"varint,3,opt,name=max_class" json:"max_class,omitempty"`
	PlayerLv         *int32  `protobuf:"varint,4,opt,name=player_lv" json:"player_lv,omitempty"`
	SkillUnlock      *int32  `protobuf:"varint,5,opt,name=skill_unlock" json:"skill_unlock,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerClassCfg) Reset()                    { *m = PlayerClassCfg{} }
func (m *PlayerClassCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerClassCfg) ProtoMessage()               {}
func (*PlayerClassCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{205} }

func (m *PlayerClassCfg) GetClass() int32 {
	if m != nil && m.Class != nil {
		return *m.Class
	}
	return 0
}

func (m *PlayerClassCfg) GetSlotIds() []int32 {
	if m != nil {
		return m.SlotIds
	}
	return nil
}

func (m *PlayerClassCfg) GetMaxClass() int32 {
	if m != nil && m.MaxClass != nil {
		return *m.MaxClass
	}
	return 0
}

func (m *PlayerClassCfg) GetPlayerLv() int32 {
	if m != nil && m.PlayerLv != nil {
		return *m.PlayerLv
	}
	return 0
}

func (m *PlayerClassCfg) GetSkillUnlock() int32 {
	if m != nil && m.SkillUnlock != nil {
		return *m.SkillUnlock
	}
	return 0
}

// 槽位激活配置
type ClassSlotActivateCfg struct {
	Id               *int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SlotType         *int32          `protobuf:"varint,2,opt,name=slot_type" json:"slot_type,omitempty"`
	SubSlot          []int32         `protobuf:"varint,3,rep,name=sub_slot" json:"sub_slot,omitempty"`
	ConsumeItem      *ItemVaryConfig `protobuf:"bytes,4,opt,name=consume_item" json:"consume_item,omitempty"`
	ConsumeMoney     *ItemVaryConfig `protobuf:"bytes,5,opt,name=consume_money" json:"consume_money,omitempty"`
	NeedLv           *int32          `protobuf:"varint,6,opt,name=need_lv" json:"need_lv,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ClassSlotActivateCfg) Reset()                    { *m = ClassSlotActivateCfg{} }
func (m *ClassSlotActivateCfg) String() string            { return proto.CompactTextString(m) }
func (*ClassSlotActivateCfg) ProtoMessage()               {}
func (*ClassSlotActivateCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{206} }

func (m *ClassSlotActivateCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ClassSlotActivateCfg) GetSlotType() int32 {
	if m != nil && m.SlotType != nil {
		return *m.SlotType
	}
	return 0
}

func (m *ClassSlotActivateCfg) GetSubSlot() []int32 {
	if m != nil {
		return m.SubSlot
	}
	return nil
}

func (m *ClassSlotActivateCfg) GetConsumeItem() *ItemVaryConfig {
	if m != nil {
		return m.ConsumeItem
	}
	return nil
}

func (m *ClassSlotActivateCfg) GetConsumeMoney() *ItemVaryConfig {
	if m != nil {
		return m.ConsumeMoney
	}
	return nil
}

func (m *ClassSlotActivateCfg) GetNeedLv() int32 {
	if m != nil && m.NeedLv != nil {
		return *m.NeedLv
	}
	return 0
}

// 球员阶级槽位属性
type PlayerClassSlotAttrCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SlotAttr         []*PlayerAttrValue `protobuf:"bytes,2,rep,name=slot_attr" json:"slot_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerClassSlotAttrCfg) Reset()                    { *m = PlayerClassSlotAttrCfg{} }
func (m *PlayerClassSlotAttrCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerClassSlotAttrCfg) ProtoMessage()               {}
func (*PlayerClassSlotAttrCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{207} }

func (m *PlayerClassSlotAttrCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerClassSlotAttrCfg) GetSlotAttr() []*PlayerAttrValue {
	if m != nil {
		return m.SlotAttr
	}
	return nil
}

// 球员天赋
type PlayerTalentCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TalentAttr       []*PlayerAttrValue `protobuf:"bytes,2,rep,name=talent_attr" json:"talent_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerTalentCfg) Reset()                    { *m = PlayerTalentCfg{} }
func (m *PlayerTalentCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerTalentCfg) ProtoMessage()               {}
func (*PlayerTalentCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{208} }

func (m *PlayerTalentCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerTalentCfg) GetTalentAttr() []*PlayerAttrValue {
	if m != nil {
		return m.TalentAttr
	}
	return nil
}

// 阶级总属性
type ClassTotalAttrCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ClassTotalAttrCfg) Reset()                    { *m = ClassTotalAttrCfg{} }
func (m *ClassTotalAttrCfg) String() string            { return proto.CompactTextString(m) }
func (*ClassTotalAttrCfg) ProtoMessage()               {}
func (*ClassTotalAttrCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{209} }

func (m *ClassTotalAttrCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ClassTotalAttrCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 招募基础配置
type RecruitBasic struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 抽卡类型
	RecruitClass *int32 `protobuf:"varint,2,opt,name=recruit_class" json:"recruit_class,omitempty"`
	// 初始化标识
	RecruitMark *int32 `protobuf:"varint,3,opt,name=recruit_mark" json:"recruit_mark,omitempty"`
	// 抽卡子类型
	RecruitType *int32 `protobuf:"varint,4,opt,name=recruit_type" json:"recruit_type,omitempty"`
	// 抽卡区间类型
	IntervalType *int32 `protobuf:"varint,5,opt,name=interval_type" json:"interval_type,omitempty"`
	// 抽卡区间
	RecruitInterval *TypeValueConfig `protobuf:"bytes,6,opt,name=recruit_interval" json:"recruit_interval,omitempty"`
	// 单抽道具消耗
	SingleConsume *ItemVaryConfig `protobuf:"bytes,7,opt,name=single_consume" json:"single_consume,omitempty"`
	// 道具消耗10连
	TenConsume *ItemVaryConfig `protobuf:"bytes,8,opt,name=ten_consume" json:"ten_consume,omitempty"`
	// 碎片或者紫卡池|橙卡池|红卡池|红+池
	RecruitPools []int32 `protobuf:"varint,9,rep,name=recruit_pools" json:"recruit_pools,omitempty"`
	// 普通权重
	LowWeights []int32 `protobuf:"varint,10,rep,name=low_weights" json:"low_weights,omitempty"`
	// 中级权重
	MiddleWeights []int32 `protobuf:"varint,11,rep,name=middle_weights" json:"middle_weights,omitempty"`
	// 高级权重
	HighWeights []int32 `protobuf:"varint,12,rep,name=high_weights" json:"high_weights,omitempty"`
	// 中级抽卡保底阈值
	MiddleThreshold *int32 `protobuf:"varint,13,opt,name=middle_threshold" json:"middle_threshold,omitempty"`
	// 高级抽卡保底阈值
	HighThreshold *int32 `protobuf:"varint,14,opt,name=high_threshold" json:"high_threshold,omitempty"`
	// 额外奖励道具
	PurchaseReward   []*ItemVaryConfig `protobuf:"bytes,15,rep,name=purchase_reward" json:"purchase_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RecruitBasic) Reset()                    { *m = RecruitBasic{} }
func (m *RecruitBasic) String() string            { return proto.CompactTextString(m) }
func (*RecruitBasic) ProtoMessage()               {}
func (*RecruitBasic) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{210} }

func (m *RecruitBasic) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitBasic) GetRecruitClass() int32 {
	if m != nil && m.RecruitClass != nil {
		return *m.RecruitClass
	}
	return 0
}

func (m *RecruitBasic) GetRecruitMark() int32 {
	if m != nil && m.RecruitMark != nil {
		return *m.RecruitMark
	}
	return 0
}

func (m *RecruitBasic) GetRecruitType() int32 {
	if m != nil && m.RecruitType != nil {
		return *m.RecruitType
	}
	return 0
}

func (m *RecruitBasic) GetIntervalType() int32 {
	if m != nil && m.IntervalType != nil {
		return *m.IntervalType
	}
	return 0
}

func (m *RecruitBasic) GetRecruitInterval() *TypeValueConfig {
	if m != nil {
		return m.RecruitInterval
	}
	return nil
}

func (m *RecruitBasic) GetSingleConsume() *ItemVaryConfig {
	if m != nil {
		return m.SingleConsume
	}
	return nil
}

func (m *RecruitBasic) GetTenConsume() *ItemVaryConfig {
	if m != nil {
		return m.TenConsume
	}
	return nil
}

func (m *RecruitBasic) GetRecruitPools() []int32 {
	if m != nil {
		return m.RecruitPools
	}
	return nil
}

func (m *RecruitBasic) GetLowWeights() []int32 {
	if m != nil {
		return m.LowWeights
	}
	return nil
}

func (m *RecruitBasic) GetMiddleWeights() []int32 {
	if m != nil {
		return m.MiddleWeights
	}
	return nil
}

func (m *RecruitBasic) GetHighWeights() []int32 {
	if m != nil {
		return m.HighWeights
	}
	return nil
}

func (m *RecruitBasic) GetMiddleThreshold() int32 {
	if m != nil && m.MiddleThreshold != nil {
		return *m.MiddleThreshold
	}
	return 0
}

func (m *RecruitBasic) GetHighThreshold() int32 {
	if m != nil && m.HighThreshold != nil {
		return *m.HighThreshold
	}
	return 0
}

func (m *RecruitBasic) GetPurchaseReward() []*ItemVaryConfig {
	if m != nil {
		return m.PurchaseReward
	}
	return nil
}

// 专属装备全局配置
type ExclusiveEquipLvItemCfg struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 进阶消耗物品id
	UpLvItemIds *int32 `protobuf:"varint,2,opt,name=up_lv_item_ids" json:"up_lv_item_ids,omitempty"`
	// 单个物品属性
	Item_1Attr       []*PlayerAttrValue `protobuf:"bytes,3,rep,name=item_1_attr" json:"item_1_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ExclusiveEquipLvItemCfg) Reset()                    { *m = ExclusiveEquipLvItemCfg{} }
func (m *ExclusiveEquipLvItemCfg) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveEquipLvItemCfg) ProtoMessage()               {}
func (*ExclusiveEquipLvItemCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{211} }

func (m *ExclusiveEquipLvItemCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveEquipLvItemCfg) GetUpLvItemIds() int32 {
	if m != nil && m.UpLvItemIds != nil {
		return *m.UpLvItemIds
	}
	return 0
}

func (m *ExclusiveEquipLvItemCfg) GetItem_1Attr() []*PlayerAttrValue {
	if m != nil {
		return m.Item_1Attr
	}
	return nil
}

// 专属装备升星配置
type ExclusiveEquipStarCfg struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 技能id
	NewSkillId *int32 `protobuf:"varint,2,opt,name=new_skill_id" json:"new_skill_id,omitempty"`
	// 属性
	Attr []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	// 消耗
	Consume *ItemVaryConfig `protobuf:"bytes,4,opt,name=consume" json:"consume,omitempty"`
	// 被替换的技能id
	OldSkillId       *int32 `protobuf:"varint,5,opt,name=old_skill_id" json:"old_skill_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExclusiveEquipStarCfg) Reset()                    { *m = ExclusiveEquipStarCfg{} }
func (m *ExclusiveEquipStarCfg) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveEquipStarCfg) ProtoMessage()               {}
func (*ExclusiveEquipStarCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{212} }

func (m *ExclusiveEquipStarCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveEquipStarCfg) GetNewSkillId() int32 {
	if m != nil && m.NewSkillId != nil {
		return *m.NewSkillId
	}
	return 0
}

func (m *ExclusiveEquipStarCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *ExclusiveEquipStarCfg) GetConsume() *ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExclusiveEquipStarCfg) GetOldSkillId() int32 {
	if m != nil && m.OldSkillId != nil {
		return *m.OldSkillId
	}
	return 0
}

// 专属装备升级配置
type ExclusiveEquipLvCfg struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 升阶消耗个数
	ItemNum *int32 `protobuf:"varint,2,opt,name=item_num" json:"item_num,omitempty"`
	// 属性
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ExclusiveEquipLvCfg) Reset()                    { *m = ExclusiveEquipLvCfg{} }
func (m *ExclusiveEquipLvCfg) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveEquipLvCfg) ProtoMessage()               {}
func (*ExclusiveEquipLvCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{213} }

func (m *ExclusiveEquipLvCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveEquipLvCfg) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *ExclusiveEquipLvCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 专属装备天赋配置
type ExclusiveEquipTalentCfg struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 解锁等级
	UnlockLv *int32 `protobuf:"varint,2,opt,name=unlock_lv" json:"unlock_lv,omitempty"`
	// 属性
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ExclusiveEquipTalentCfg) Reset()                    { *m = ExclusiveEquipTalentCfg{} }
func (m *ExclusiveEquipTalentCfg) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveEquipTalentCfg) ProtoMessage()               {}
func (*ExclusiveEquipTalentCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{214} }

func (m *ExclusiveEquipTalentCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveEquipTalentCfg) GetUnlockLv() int32 {
	if m != nil && m.UnlockLv != nil {
		return *m.UnlockLv
	}
	return 0
}

func (m *ExclusiveEquipTalentCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RecruitUrAchieveCfg struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 招募次数
	RecruitNum *int32 `protobuf:"varint,2,opt,name=recruit_num" json:"recruit_num,omitempty"`
	// 招募次数是否变化（1：10/1000进度条, 2:进度条满了后.重置）
	RecruitType *int32 `protobuf:"varint,3,opt,name=recruit_type" json:"recruit_type,omitempty"`
	// 招募成就奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	// 招募池
	LoopPool         *int32 `protobuf:"varint,5,opt,name=loop_pool" json:"loop_pool,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RecruitUrAchieveCfg) Reset()                    { *m = RecruitUrAchieveCfg{} }
func (m *RecruitUrAchieveCfg) String() string            { return proto.CompactTextString(m) }
func (*RecruitUrAchieveCfg) ProtoMessage()               {}
func (*RecruitUrAchieveCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{215} }

func (m *RecruitUrAchieveCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitUrAchieveCfg) GetRecruitNum() int32 {
	if m != nil && m.RecruitNum != nil {
		return *m.RecruitNum
	}
	return 0
}

func (m *RecruitUrAchieveCfg) GetRecruitType() int32 {
	if m != nil && m.RecruitType != nil {
		return *m.RecruitType
	}
	return 0
}

func (m *RecruitUrAchieveCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RecruitUrAchieveCfg) GetLoopPool() int32 {
	if m != nil && m.LoopPool != nil {
		return *m.LoopPool
	}
	return 0
}

type RecruitUrControlCfg struct {
	// 唯一id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 类型
	Type *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 功能开启等级
	OpenLv *int32 `protobuf:"varint,3,opt,name=open_lv" json:"open_lv,omitempty"`
	// 功能是否开启
	Open *int32 `protobuf:"varint,4,opt,name=open" json:"open,omitempty"`
	// 开服n天后满足条件开启
	LimitAfterN *int32 `protobuf:"varint,5,opt,name=limitAfterN" json:"limitAfterN,omitempty"`
	// 功能开启绝对时间
	OpenDate *string `protobuf:"bytes,6,opt,name=openDate" json:"openDate,omitempty"`
	// 开启n天
	OpenDay *int32 `protobuf:"varint,7,opt,name=openDay" json:"openDay,omitempty"`
	// 是否循环开放（0：不循环依次开启卡池，1：循环开启卡池，2：长期开启（已第一卡池为准）
	IsLoop *int32 `protobuf:"varint,8,opt,name=isLoop" json:"isLoop,omitempty"`
	// 招募id池
	LoopPool         []int32 `protobuf:"varint,9,rep,name=loop_pool" json:"loop_pool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RecruitUrControlCfg) Reset()                    { *m = RecruitUrControlCfg{} }
func (m *RecruitUrControlCfg) String() string            { return proto.CompactTextString(m) }
func (*RecruitUrControlCfg) ProtoMessage()               {}
func (*RecruitUrControlCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{216} }

func (m *RecruitUrControlCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitUrControlCfg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *RecruitUrControlCfg) GetOpenLv() int32 {
	if m != nil && m.OpenLv != nil {
		return *m.OpenLv
	}
	return 0
}

func (m *RecruitUrControlCfg) GetOpen() int32 {
	if m != nil && m.Open != nil {
		return *m.Open
	}
	return 0
}

func (m *RecruitUrControlCfg) GetLimitAfterN() int32 {
	if m != nil && m.LimitAfterN != nil {
		return *m.LimitAfterN
	}
	return 0
}

func (m *RecruitUrControlCfg) GetOpenDate() string {
	if m != nil && m.OpenDate != nil {
		return *m.OpenDate
	}
	return ""
}

func (m *RecruitUrControlCfg) GetOpenDay() int32 {
	if m != nil && m.OpenDay != nil {
		return *m.OpenDay
	}
	return 0
}

func (m *RecruitUrControlCfg) GetIsLoop() int32 {
	if m != nil && m.IsLoop != nil {
		return *m.IsLoop
	}
	return 0
}

func (m *RecruitUrControlCfg) GetLoopPool() []int32 {
	if m != nil {
		return m.LoopPool
	}
	return nil
}

// 装备配置
type EquipmentCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 名称
	ItemName *string `protobuf:"bytes,2,opt,name=item_name" json:"item_name,omitempty"`
	// 品级
	EquipQuality *int32 `protobuf:"varint,3,opt,name=equip_quality" json:"equip_quality,omitempty"`
	// 部位
	Part *int32 `protobuf:"varint,4,opt,name=part" json:"part,omitempty"`
	// 套装id
	SuitId *int32 `protobuf:"varint,5,opt,name=suit_id" json:"suit_id,omitempty"`
	// 球员等级限制
	PlayerLvLimit *int32 `protobuf:"varint,6,opt,name=playerLvLimit" json:"playerLvLimit,omitempty"`
	// 品质
	Quality          *int32 `protobuf:"varint,7,opt,name=quality" json:"quality,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EquipmentCfg) Reset()                    { *m = EquipmentCfg{} }
func (m *EquipmentCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentCfg) ProtoMessage()               {}
func (*EquipmentCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{217} }

func (m *EquipmentCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentCfg) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

func (m *EquipmentCfg) GetEquipQuality() int32 {
	if m != nil && m.EquipQuality != nil {
		return *m.EquipQuality
	}
	return 0
}

func (m *EquipmentCfg) GetPart() int32 {
	if m != nil && m.Part != nil {
		return *m.Part
	}
	return 0
}

func (m *EquipmentCfg) GetSuitId() int32 {
	if m != nil && m.SuitId != nil {
		return *m.SuitId
	}
	return 0
}

func (m *EquipmentCfg) GetPlayerLvLimit() int32 {
	if m != nil && m.PlayerLvLimit != nil {
		return *m.PlayerLvLimit
	}
	return 0
}

func (m *EquipmentCfg) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

// 球员槽全局配置
type PlayerSlotGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员槽最大等级
	SlotMaxLv        *int32 `protobuf:"varint,2,opt,name=slot_max_lv" json:"slot_max_lv,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerSlotGlobalCfg) Reset()                    { *m = PlayerSlotGlobalCfg{} }
func (m *PlayerSlotGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerSlotGlobalCfg) ProtoMessage()               {}
func (*PlayerSlotGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{218} }

func (m *PlayerSlotGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerSlotGlobalCfg) GetSlotMaxLv() int32 {
	if m != nil && m.SlotMaxLv != nil {
		return *m.SlotMaxLv
	}
	return 0
}

// 球员槽等级配置
type PlayerSlotLvCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 升级所需经验
	Exp              *int32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerSlotLvCfg) Reset()                    { *m = PlayerSlotLvCfg{} }
func (m *PlayerSlotLvCfg) String() string            { return proto.CompactTextString(m) }
func (*PlayerSlotLvCfg) ProtoMessage()               {}
func (*PlayerSlotLvCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{219} }

func (m *PlayerSlotLvCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerSlotLvCfg) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// 装备等级配置
type EquipmentLvCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	Consume          *ItemVaryConfig    `protobuf:"bytes,3,opt,name=consume" json:"consume,omitempty"`
	EquipScore       *int32             `protobuf:"varint,10,opt,name=equip_score" json:"equip_score,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentLvCfg) Reset()                    { *m = EquipmentLvCfg{} }
func (m *EquipmentLvCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentLvCfg) ProtoMessage()               {}
func (*EquipmentLvCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{220} }

func (m *EquipmentLvCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentLvCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *EquipmentLvCfg) GetConsume() *ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *EquipmentLvCfg) GetEquipScore() int32 {
	if m != nil && m.EquipScore != nil {
		return *m.EquipScore
	}
	return 0
}

// 装备等级天赋配置
type EquipmentLvTalentCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EquipmentId      *int32             `protobuf:"varint,2,opt,name=equipment_id" json:"equipment_id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	UnlockLv         *int32             `protobuf:"varint,4,opt,name=unlock_lv" json:"unlock_lv,omitempty"`
	UnlockLvs        *int32             `protobuf:"varint,5,opt,name=unlockLvs" json:"unlockLvs,omitempty"`
	EquipScore       *int32             `protobuf:"varint,10,opt,name=equip_score" json:"equip_score,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentLvTalentCfg) Reset()                    { *m = EquipmentLvTalentCfg{} }
func (m *EquipmentLvTalentCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentLvTalentCfg) ProtoMessage()               {}
func (*EquipmentLvTalentCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{221} }

func (m *EquipmentLvTalentCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentLvTalentCfg) GetEquipmentId() int32 {
	if m != nil && m.EquipmentId != nil {
		return *m.EquipmentId
	}
	return 0
}

func (m *EquipmentLvTalentCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *EquipmentLvTalentCfg) GetUnlockLv() int32 {
	if m != nil && m.UnlockLv != nil {
		return *m.UnlockLv
	}
	return 0
}

func (m *EquipmentLvTalentCfg) GetUnlockLvs() int32 {
	if m != nil && m.UnlockLvs != nil {
		return *m.UnlockLvs
	}
	return 0
}

func (m *EquipmentLvTalentCfg) GetEquipScore() int32 {
	if m != nil && m.EquipScore != nil {
		return *m.EquipScore
	}
	return 0
}

// 装备精炼配置
type EquipmentRefineCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	Consume          []*ItemVaryConfig  `protobuf:"bytes,3,rep,name=consume" json:"consume,omitempty"`
	LvLimit          *int32             `protobuf:"varint,4,opt,name=lv_limit" json:"lv_limit,omitempty"`
	LvBig            *int32             `protobuf:"varint,5,opt,name=lv_big" json:"lv_big,omitempty"`
	EquipScore       *int32             `protobuf:"varint,10,opt,name=equip_score" json:"equip_score,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentRefineCfg) Reset()                    { *m = EquipmentRefineCfg{} }
func (m *EquipmentRefineCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentRefineCfg) ProtoMessage()               {}
func (*EquipmentRefineCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{222} }

func (m *EquipmentRefineCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentRefineCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *EquipmentRefineCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *EquipmentRefineCfg) GetLvLimit() int32 {
	if m != nil && m.LvLimit != nil {
		return *m.LvLimit
	}
	return 0
}

func (m *EquipmentRefineCfg) GetLvBig() int32 {
	if m != nil && m.LvBig != nil {
		return *m.LvBig
	}
	return 0
}

func (m *EquipmentRefineCfg) GetEquipScore() int32 {
	if m != nil && m.EquipScore != nil {
		return *m.EquipScore
	}
	return 0
}

// 装备精炼天赋配置
type EquipmentRefineTalentCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EquipmentId      *int32             `protobuf:"varint,2,opt,name=equipment_id" json:"equipment_id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	UnlockLv         *int32             `protobuf:"varint,4,opt,name=unlock_lv" json:"unlock_lv,omitempty"`
	Unlocklvs        *int32             `protobuf:"varint,5,opt,name=unlocklvs" json:"unlocklvs,omitempty"`
	EquipScore       *int32             `protobuf:"varint,10,opt,name=equip_score" json:"equip_score,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentRefineTalentCfg) Reset()                    { *m = EquipmentRefineTalentCfg{} }
func (m *EquipmentRefineTalentCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentRefineTalentCfg) ProtoMessage()               {}
func (*EquipmentRefineTalentCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{223} }

func (m *EquipmentRefineTalentCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentRefineTalentCfg) GetEquipmentId() int32 {
	if m != nil && m.EquipmentId != nil {
		return *m.EquipmentId
	}
	return 0
}

func (m *EquipmentRefineTalentCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *EquipmentRefineTalentCfg) GetUnlockLv() int32 {
	if m != nil && m.UnlockLv != nil {
		return *m.UnlockLv
	}
	return 0
}

func (m *EquipmentRefineTalentCfg) GetUnlocklvs() int32 {
	if m != nil && m.Unlocklvs != nil {
		return *m.Unlocklvs
	}
	return 0
}

func (m *EquipmentRefineTalentCfg) GetEquipScore() int32 {
	if m != nil && m.EquipScore != nil {
		return *m.EquipScore
	}
	return 0
}

// 装备套装配置
type EquipmentSuitCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentSuitCfg) Reset()                    { *m = EquipmentSuitCfg{} }
func (m *EquipmentSuitCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentSuitCfg) ProtoMessage()               {}
func (*EquipmentSuitCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{224} }

func (m *EquipmentSuitCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentSuitCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 装备强化大师配置
type EquipmentLvMasterCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentLvMasterCfg) Reset()                    { *m = EquipmentLvMasterCfg{} }
func (m *EquipmentLvMasterCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentLvMasterCfg) ProtoMessage()               {}
func (*EquipmentLvMasterCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{225} }

func (m *EquipmentLvMasterCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentLvMasterCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 装备精炼大师配置
type EquipmentRefineMasterCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EquipmentRefineMasterCfg) Reset()                    { *m = EquipmentRefineMasterCfg{} }
func (m *EquipmentRefineMasterCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentRefineMasterCfg) ProtoMessage()               {}
func (*EquipmentRefineMasterCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{226} }

func (m *EquipmentRefineMasterCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentRefineMasterCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 配饰强化配置
type JewelryLvCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Consume          []*ItemVaryConfig  `protobuf:"bytes,2,rep,name=consume" json:"consume,omitempty"`
	OnceUpExp        *int32             `protobuf:"varint,3,opt,name=once_up_exp" json:"once_up_exp,omitempty"`
	LvExp            *int32             `protobuf:"varint,4,opt,name=lv_exp" json:"lv_exp,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,6,rep,name=attr" json:"attr,omitempty"`
	EquipmentLvSmall *int32             `protobuf:"varint,7,opt,name=equipment_lv_small" json:"equipment_lv_small,omitempty"`
	EquipmentLvBig   *int32             `protobuf:"varint,8,opt,name=equipment_lv_big" json:"equipment_lv_big,omitempty"`
	EquipScore       *int32             `protobuf:"varint,10,opt,name=equip_score" json:"equip_score,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *JewelryLvCfg) Reset()                    { *m = JewelryLvCfg{} }
func (m *JewelryLvCfg) String() string            { return proto.CompactTextString(m) }
func (*JewelryLvCfg) ProtoMessage()               {}
func (*JewelryLvCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{227} }

func (m *JewelryLvCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *JewelryLvCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *JewelryLvCfg) GetOnceUpExp() int32 {
	if m != nil && m.OnceUpExp != nil {
		return *m.OnceUpExp
	}
	return 0
}

func (m *JewelryLvCfg) GetLvExp() int32 {
	if m != nil && m.LvExp != nil {
		return *m.LvExp
	}
	return 0
}

func (m *JewelryLvCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *JewelryLvCfg) GetEquipmentLvSmall() int32 {
	if m != nil && m.EquipmentLvSmall != nil {
		return *m.EquipmentLvSmall
	}
	return 0
}

func (m *JewelryLvCfg) GetEquipmentLvBig() int32 {
	if m != nil && m.EquipmentLvBig != nil {
		return *m.EquipmentLvBig
	}
	return 0
}

func (m *JewelryLvCfg) GetEquipScore() int32 {
	if m != nil && m.EquipScore != nil {
		return *m.EquipScore
	}
	return 0
}

// 装备离散数据配置
type EquipmentDiscreteDataCfg struct {
	Id                         *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EquipmentLvMasterDivisor   *int32             `protobuf:"varint,2,opt,name=equipment_lv_master_divisor" json:"equipment_lv_master_divisor,omitempty"`
	JewelryLvMasterDivisor     *int32             `protobuf:"varint,3,opt,name=jewelry_lv_master_divisor" json:"jewelry_lv_master_divisor,omitempty"`
	RefineMasterDivisor        *int32             `protobuf:"varint,4,opt,name=refine_master_divisor" json:"refine_master_divisor,omitempty"`
	JewelryLvCritProb          []*TypeValueConfig `protobuf:"bytes,8,rep,name=jewelry_lv_crit_prob" json:"jewelry_lv_crit_prob,omitempty"`
	EquipmentUpLvMultipleLimit *int32             `protobuf:"varint,10,opt,name=equipment_up_lv_multiple_limit" json:"equipment_up_lv_multiple_limit,omitempty"`
	JewelryUpLvMultipleLimit   *int32             `protobuf:"varint,11,opt,name=jewelry_up_lv_multiple_limit" json:"jewelry_up_lv_multiple_limit,omitempty"`
	XXX_unrecognized           []byte             `json:"-"`
}

func (m *EquipmentDiscreteDataCfg) Reset()                    { *m = EquipmentDiscreteDataCfg{} }
func (m *EquipmentDiscreteDataCfg) String() string            { return proto.CompactTextString(m) }
func (*EquipmentDiscreteDataCfg) ProtoMessage()               {}
func (*EquipmentDiscreteDataCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{228} }

func (m *EquipmentDiscreteDataCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentDiscreteDataCfg) GetEquipmentLvMasterDivisor() int32 {
	if m != nil && m.EquipmentLvMasterDivisor != nil {
		return *m.EquipmentLvMasterDivisor
	}
	return 0
}

func (m *EquipmentDiscreteDataCfg) GetJewelryLvMasterDivisor() int32 {
	if m != nil && m.JewelryLvMasterDivisor != nil {
		return *m.JewelryLvMasterDivisor
	}
	return 0
}

func (m *EquipmentDiscreteDataCfg) GetRefineMasterDivisor() int32 {
	if m != nil && m.RefineMasterDivisor != nil {
		return *m.RefineMasterDivisor
	}
	return 0
}

func (m *EquipmentDiscreteDataCfg) GetJewelryLvCritProb() []*TypeValueConfig {
	if m != nil {
		return m.JewelryLvCritProb
	}
	return nil
}

func (m *EquipmentDiscreteDataCfg) GetEquipmentUpLvMultipleLimit() int32 {
	if m != nil && m.EquipmentUpLvMultipleLimit != nil {
		return *m.EquipmentUpLvMultipleLimit
	}
	return 0
}

func (m *EquipmentDiscreteDataCfg) GetJewelryUpLvMultipleLimit() int32 {
	if m != nil && m.JewelryUpLvMultipleLimit != nil {
		return *m.JewelryUpLvMultipleLimit
	}
	return 0
}

// 招募劵价格表配置
type RecruitPrice struct {
	ItemId           *int32          `protobuf:"varint,1,opt,name=itemId" json:"itemId,omitempty"`
	OnePrice         *ItemVaryConfig `protobuf:"bytes,2,opt,name=one_price" json:"one_price,omitempty"`
	TenPrice         *ItemVaryConfig `protobuf:"bytes,3,opt,name=ten_price" json:"ten_price,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RecruitPrice) Reset()                    { *m = RecruitPrice{} }
func (m *RecruitPrice) String() string            { return proto.CompactTextString(m) }
func (*RecruitPrice) ProtoMessage()               {}
func (*RecruitPrice) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{229} }

func (m *RecruitPrice) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *RecruitPrice) GetOnePrice() *ItemVaryConfig {
	if m != nil {
		return m.OnePrice
	}
	return nil
}

func (m *RecruitPrice) GetTenPrice() *ItemVaryConfig {
	if m != nil {
		return m.TenPrice
	}
	return nil
}

// 招募全局配置
type RecruitGlobal struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 交换球员显示条件
	SweepPlayerShowCondition *int32 `protobuf:"varint,2,opt,name=sweepPlayerShowCondition" json:"sweepPlayerShowCondition,omitempty"`
	// 交换球员开启条件
	SweepPlayerOpenCondition *int32 `protobuf:"varint,3,opt,name=sweepPlayerOpenCondition" json:"sweepPlayerOpenCondition,omitempty"`
	// 交换球员3+2模式资质
	SweepPlayerQualify []int32 `protobuf:"varint,4,rep,name=sweepPlayerQualify" json:"sweepPlayerQualify,omitempty"`
	// 位置招募开启条件
	PlaceRecruitOpenCondition *int32 `protobuf:"varint,5,opt,name=placeRecruitOpenCondition" json:"placeRecruitOpenCondition,omitempty"`
	// 球员招募每日免费次数
	PlayerDayFreeNum *int32 `protobuf:"varint,6,opt,name=playerDayFreeNum" json:"playerDayFreeNum,omitempty"`
	// 巨星招募每日免费次数
	SuperStarDayFreeNum *int32 `protobuf:"varint,7,opt,name=superStarDayFreeNum" json:"superStarDayFreeNum,omitempty"`
	// 巨星招募新手最大次数
	RecruitNewMaxNum *int32 `protobuf:"varint,8,opt,name=recruitNewMaxNum" json:"recruitNewMaxNum,omitempty"`
	// 心愿球员列表
	SweepPlayerList []int32 `protobuf:"varint,9,rep,name=sweepPlayerList" json:"sweepPlayerList,omitempty"`
	// 交换球员使用权重
	SweepPlayerHight []int32 `protobuf:"varint,10,rep,name=sweepPlayerHight" json:"sweepPlayerHight,omitempty"`
	// 非酋次数常量
	FeiQiuTime *int32 `protobuf:"varint,11,opt,name=feiQiuTime" json:"feiQiuTime,omitempty"`
	// 欧皇整卡常量
	OuHuangNum *int32 `protobuf:"varint,12,opt,name=ouHuangNum" json:"ouHuangNum,omitempty"`
	// 特殊心愿保底
	WishPlayerSpecialThreshold *int32 `protobuf:"varint,13,opt,name=wishPlayerSpecialThreshold" json:"wishPlayerSpecialThreshold,omitempty"`
	// 首次随机参数
	WishPlayerFirstRandom *int32 `protobuf:"varint,14,opt,name=wishPlayerFirstRandom" json:"wishPlayerFirstRandom,omitempty"`
	// 其他随机参数
	WishPlayerOthersRandom *int32 `protobuf:"varint,15,opt,name=wishPlayerOthersRandom" json:"wishPlayerOthersRandom,omitempty"`
	// 心愿栏位数量
	WishPlayerNum *int32 `protobuf:"varint,16,opt,name=wishPlayerNum" json:"wishPlayerNum,omitempty"`
	// 心愿空栏位权重
	WishPlayerFreeWeight *int32 `protobuf:"varint,17,opt,name=wishPlayerFreeWeight" json:"wishPlayerFreeWeight,omitempty"`
	// 心愿球员心愿球员列表New[Player]
	WishPlayerList   []*TypeValueConfig `protobuf:"bytes,18,rep,name=wishPlayerList" json:"wishPlayerList,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RecruitGlobal) Reset()                    { *m = RecruitGlobal{} }
func (m *RecruitGlobal) String() string            { return proto.CompactTextString(m) }
func (*RecruitGlobal) ProtoMessage()               {}
func (*RecruitGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{230} }

func (m *RecruitGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitGlobal) GetSweepPlayerShowCondition() int32 {
	if m != nil && m.SweepPlayerShowCondition != nil {
		return *m.SweepPlayerShowCondition
	}
	return 0
}

func (m *RecruitGlobal) GetSweepPlayerOpenCondition() int32 {
	if m != nil && m.SweepPlayerOpenCondition != nil {
		return *m.SweepPlayerOpenCondition
	}
	return 0
}

func (m *RecruitGlobal) GetSweepPlayerQualify() []int32 {
	if m != nil {
		return m.SweepPlayerQualify
	}
	return nil
}

func (m *RecruitGlobal) GetPlaceRecruitOpenCondition() int32 {
	if m != nil && m.PlaceRecruitOpenCondition != nil {
		return *m.PlaceRecruitOpenCondition
	}
	return 0
}

func (m *RecruitGlobal) GetPlayerDayFreeNum() int32 {
	if m != nil && m.PlayerDayFreeNum != nil {
		return *m.PlayerDayFreeNum
	}
	return 0
}

func (m *RecruitGlobal) GetSuperStarDayFreeNum() int32 {
	if m != nil && m.SuperStarDayFreeNum != nil {
		return *m.SuperStarDayFreeNum
	}
	return 0
}

func (m *RecruitGlobal) GetRecruitNewMaxNum() int32 {
	if m != nil && m.RecruitNewMaxNum != nil {
		return *m.RecruitNewMaxNum
	}
	return 0
}

func (m *RecruitGlobal) GetSweepPlayerList() []int32 {
	if m != nil {
		return m.SweepPlayerList
	}
	return nil
}

func (m *RecruitGlobal) GetSweepPlayerHight() []int32 {
	if m != nil {
		return m.SweepPlayerHight
	}
	return nil
}

func (m *RecruitGlobal) GetFeiQiuTime() int32 {
	if m != nil && m.FeiQiuTime != nil {
		return *m.FeiQiuTime
	}
	return 0
}

func (m *RecruitGlobal) GetOuHuangNum() int32 {
	if m != nil && m.OuHuangNum != nil {
		return *m.OuHuangNum
	}
	return 0
}

func (m *RecruitGlobal) GetWishPlayerSpecialThreshold() int32 {
	if m != nil && m.WishPlayerSpecialThreshold != nil {
		return *m.WishPlayerSpecialThreshold
	}
	return 0
}

func (m *RecruitGlobal) GetWishPlayerFirstRandom() int32 {
	if m != nil && m.WishPlayerFirstRandom != nil {
		return *m.WishPlayerFirstRandom
	}
	return 0
}

func (m *RecruitGlobal) GetWishPlayerOthersRandom() int32 {
	if m != nil && m.WishPlayerOthersRandom != nil {
		return *m.WishPlayerOthersRandom
	}
	return 0
}

func (m *RecruitGlobal) GetWishPlayerNum() int32 {
	if m != nil && m.WishPlayerNum != nil {
		return *m.WishPlayerNum
	}
	return 0
}

func (m *RecruitGlobal) GetWishPlayerFreeWeight() int32 {
	if m != nil && m.WishPlayerFreeWeight != nil {
		return *m.WishPlayerFreeWeight
	}
	return 0
}

func (m *RecruitGlobal) GetWishPlayerList() []*TypeValueConfig {
	if m != nil {
		return m.WishPlayerList
	}
	return nil
}

// 弹窗兑换配置
type PopExchangeCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 产出方式(1直接获得 2.掉落集合掉落 3.掉落id掉落)
	ProductType *int32 `protobuf:"varint,2,opt,name=product_type" json:"product_type,omitempty"`
	// 商品类型(1道具 2.资源 3.球员 4.录像, 5次数)
	CommodityType *int32 `protobuf:"varint,3,opt,name=commodity_type" json:"commodity_type,omitempty"`
	// 商品id
	CommodityId *int32 `protobuf:"varint,4,opt,name=commodity_id" json:"commodity_id,omitempty"`
	// 购买价格(len=1为唯一价格，len>1为阶梯价格)
	BuyPrice []*ItemVaryConfig `protobuf:"bytes,5,rep,name=buy_price" json:"buy_price,omitempty"`
	// 每次购买的基数类型（1默认基数为1 2等级决定基数）
	BaseType *int32 `protobuf:"varint,6,opt,name=base_type" json:"base_type,omitempty"`
	// 每次购买数量
	BuyNumber []int32 `protobuf:"varint,7,rep,name=buy_number" json:"buy_number,omitempty"`
	// 产出系数（万分比） // 总共获得数量=基数*每次购买数量*产出系数/10000
	ProductCoef []int32 `protobuf:"varint,8,rep,name=product_coef" json:"product_coef,omitempty"`
	// 刷新天数（0）不刷新，1每天刷新 2每两天刷新一次
	RefreshType *int32 `protobuf:"varint,9,opt,name=refresh_type" json:"refresh_type,omitempty"`
	// 每日购买上限(0没有上限，>0每日可购买上限)
	DayBuyTop *int32 `protobuf:"varint,10,opt,name=dayBuyTop" json:"dayBuyTop,omitempty"`
	// 出售方式（1：递进（价格随购买次数变化的） 2：并列出售（单抽、10连抽等）
	CommodityBuyType *int32 `protobuf:"varint,11,opt,name=commodity_buy_type" json:"commodity_buy_type,omitempty"`
	// 商品购买数量公式类型
	BuyFormulaType *int32 `protobuf:"varint,12,opt,name=buy_formula_type" json:"buy_formula_type,omitempty"`
	// 商品购买数量限制
	BuyFormulaParam  []int32 `protobuf:"varint,13,rep,name=buy_formula_param" json:"buy_formula_param,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PopExchangeCfg) Reset()                    { *m = PopExchangeCfg{} }
func (m *PopExchangeCfg) String() string            { return proto.CompactTextString(m) }
func (*PopExchangeCfg) ProtoMessage()               {}
func (*PopExchangeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{231} }

func (m *PopExchangeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PopExchangeCfg) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *PopExchangeCfg) GetCommodityType() int32 {
	if m != nil && m.CommodityType != nil {
		return *m.CommodityType
	}
	return 0
}

func (m *PopExchangeCfg) GetCommodityId() int32 {
	if m != nil && m.CommodityId != nil {
		return *m.CommodityId
	}
	return 0
}

func (m *PopExchangeCfg) GetBuyPrice() []*ItemVaryConfig {
	if m != nil {
		return m.BuyPrice
	}
	return nil
}

func (m *PopExchangeCfg) GetBaseType() int32 {
	if m != nil && m.BaseType != nil {
		return *m.BaseType
	}
	return 0
}

func (m *PopExchangeCfg) GetBuyNumber() []int32 {
	if m != nil {
		return m.BuyNumber
	}
	return nil
}

func (m *PopExchangeCfg) GetProductCoef() []int32 {
	if m != nil {
		return m.ProductCoef
	}
	return nil
}

func (m *PopExchangeCfg) GetRefreshType() int32 {
	if m != nil && m.RefreshType != nil {
		return *m.RefreshType
	}
	return 0
}

func (m *PopExchangeCfg) GetDayBuyTop() int32 {
	if m != nil && m.DayBuyTop != nil {
		return *m.DayBuyTop
	}
	return 0
}

func (m *PopExchangeCfg) GetCommodityBuyType() int32 {
	if m != nil && m.CommodityBuyType != nil {
		return *m.CommodityBuyType
	}
	return 0
}

func (m *PopExchangeCfg) GetBuyFormulaType() int32 {
	if m != nil && m.BuyFormulaType != nil {
		return *m.BuyFormulaType
	}
	return 0
}

func (m *PopExchangeCfg) GetBuyFormulaParam() []int32 {
	if m != nil {
		return m.BuyFormulaParam
	}
	return nil
}

// 传奇挑战赛段位表
type LegendaryDan struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IntervalFloor    *int32 `protobuf:"varint,2,opt,name=intervalFloor" json:"intervalFloor,omitempty"`
	IntervalUpper    *int32 `protobuf:"varint,3,opt,name=intervalUpper" json:"intervalUpper,omitempty"`
	IsMax            *int32 `protobuf:"varint,4,opt,name=isMax" json:"isMax,omitempty"`
	BuffID           *int32 `protobuf:"varint,5,opt,name=buffID" json:"buffID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LegendaryDan) Reset()                    { *m = LegendaryDan{} }
func (m *LegendaryDan) String() string            { return proto.CompactTextString(m) }
func (*LegendaryDan) ProtoMessage()               {}
func (*LegendaryDan) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{232} }

func (m *LegendaryDan) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryDan) GetIntervalFloor() int32 {
	if m != nil && m.IntervalFloor != nil {
		return *m.IntervalFloor
	}
	return 0
}

func (m *LegendaryDan) GetIntervalUpper() int32 {
	if m != nil && m.IntervalUpper != nil {
		return *m.IntervalUpper
	}
	return 0
}

func (m *LegendaryDan) GetIsMax() int32 {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return 0
}

func (m *LegendaryDan) GetBuffID() int32 {
	if m != nil && m.BuffID != nil {
		return *m.BuffID
	}
	return 0
}

// 传奇挑战赛全局表
type LegendaryGlobal struct {
	Id                *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChallengeNum      *int32  `protobuf:"varint,4,opt,name=challengeNum" json:"challengeNum,omitempty"`
	PopId             *int32  `protobuf:"varint,5,opt,name=popId" json:"popId,omitempty"`
	BossList          []int32 `protobuf:"varint,6,rep,name=bossList" json:"bossList,omitempty"`
	OpenCycle         *int32  `protobuf:"varint,7,opt,name=openCycle" json:"openCycle,omitempty"`
	DefaultViewership *int32  `protobuf:"varint,8,opt,name=defaultViewership" json:"defaultViewership,omitempty"`
	DefaultScore      *int32  `protobuf:"varint,9,opt,name=defaultScore" json:"defaultScore,omitempty"`
	RandomRange       *int32  `protobuf:"varint,10,opt,name=randomRange" json:"randomRange,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *LegendaryGlobal) Reset()                    { *m = LegendaryGlobal{} }
func (m *LegendaryGlobal) String() string            { return proto.CompactTextString(m) }
func (*LegendaryGlobal) ProtoMessage()               {}
func (*LegendaryGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{233} }

func (m *LegendaryGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryGlobal) GetChallengeNum() int32 {
	if m != nil && m.ChallengeNum != nil {
		return *m.ChallengeNum
	}
	return 0
}

func (m *LegendaryGlobal) GetPopId() int32 {
	if m != nil && m.PopId != nil {
		return *m.PopId
	}
	return 0
}

func (m *LegendaryGlobal) GetBossList() []int32 {
	if m != nil {
		return m.BossList
	}
	return nil
}

func (m *LegendaryGlobal) GetOpenCycle() int32 {
	if m != nil && m.OpenCycle != nil {
		return *m.OpenCycle
	}
	return 0
}

func (m *LegendaryGlobal) GetDefaultViewership() int32 {
	if m != nil && m.DefaultViewership != nil {
		return *m.DefaultViewership
	}
	return 0
}

func (m *LegendaryGlobal) GetDefaultScore() int32 {
	if m != nil && m.DefaultScore != nil {
		return *m.DefaultScore
	}
	return 0
}

func (m *LegendaryGlobal) GetRandomRange() int32 {
	if m != nil && m.RandomRange != nil {
		return *m.RandomRange
	}
	return 0
}

// 传奇挑战赛公式表
type LegendaryFormula struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MyCoef           *int32 `protobuf:"varint,2,opt,name=my_coef" json:"my_coef,omitempty"`
	BossCoef         *int32 `protobuf:"varint,3,opt,name=boss_coef" json:"boss_coef,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LegendaryFormula) Reset()                    { *m = LegendaryFormula{} }
func (m *LegendaryFormula) String() string            { return proto.CompactTextString(m) }
func (*LegendaryFormula) ProtoMessage()               {}
func (*LegendaryFormula) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{234} }

func (m *LegendaryFormula) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryFormula) GetMyCoef() int32 {
	if m != nil && m.MyCoef != nil {
		return *m.MyCoef
	}
	return 0
}

func (m *LegendaryFormula) GetBossCoef() int32 {
	if m != nil && m.BossCoef != nil {
		return *m.BossCoef
	}
	return 0
}

// 传奇挑战赛增量系数
type LegendaryCoefficient struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PowerFloor       *int32 `protobuf:"varint,2,opt,name=PowerFloor" json:"PowerFloor,omitempty"`
	PowerUpper       *int32 `protobuf:"varint,3,opt,name=PowerUpper" json:"PowerUpper,omitempty"`
	IsMax            *int32 `protobuf:"varint,4,opt,name=isMax" json:"isMax,omitempty"`
	PlayerNum        *int32 `protobuf:"varint,5,opt,name=playerNum" json:"playerNum,omitempty"`
	ExValues         *int32 `protobuf:"varint,6,opt,name=ExValues" json:"ExValues,omitempty"`
	FightBuff        *int32 `protobuf:"varint,7,opt,name=FightBuff" json:"FightBuff,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LegendaryCoefficient) Reset()                    { *m = LegendaryCoefficient{} }
func (m *LegendaryCoefficient) String() string            { return proto.CompactTextString(m) }
func (*LegendaryCoefficient) ProtoMessage()               {}
func (*LegendaryCoefficient) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{235} }

func (m *LegendaryCoefficient) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryCoefficient) GetPowerFloor() int32 {
	if m != nil && m.PowerFloor != nil {
		return *m.PowerFloor
	}
	return 0
}

func (m *LegendaryCoefficient) GetPowerUpper() int32 {
	if m != nil && m.PowerUpper != nil {
		return *m.PowerUpper
	}
	return 0
}

func (m *LegendaryCoefficient) GetIsMax() int32 {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return 0
}

func (m *LegendaryCoefficient) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *LegendaryCoefficient) GetExValues() int32 {
	if m != nil && m.ExValues != nil {
		return *m.ExValues
	}
	return 0
}

func (m *LegendaryCoefficient) GetFightBuff() int32 {
	if m != nil && m.FightBuff != nil {
		return *m.FightBuff
	}
	return 0
}

// 传奇挑战赛boss配置
type LegendaryBossCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BossTeamId       *int32 `protobuf:"varint,2,opt,name=boss_team_id" json:"boss_team_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LegendaryBossCfg) Reset()                    { *m = LegendaryBossCfg{} }
func (m *LegendaryBossCfg) String() string            { return proto.CompactTextString(m) }
func (*LegendaryBossCfg) ProtoMessage()               {}
func (*LegendaryBossCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{236} }

func (m *LegendaryBossCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryBossCfg) GetBossTeamId() int32 {
	if m != nil && m.BossTeamId != nil {
		return *m.BossTeamId
	}
	return 0
}

// 传奇挑战赛挑战奖励
type LegendaryChallengeReward struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Viewership       *int32            `protobuf:"varint,2,opt,name=viewership" json:"viewership,omitempty"`
	Rewards          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LegendaryChallengeReward) Reset()                    { *m = LegendaryChallengeReward{} }
func (m *LegendaryChallengeReward) String() string            { return proto.CompactTextString(m) }
func (*LegendaryChallengeReward) ProtoMessage()               {}
func (*LegendaryChallengeReward) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{237} }

func (m *LegendaryChallengeReward) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryChallengeReward) GetViewership() int32 {
	if m != nil && m.Viewership != nil {
		return *m.Viewership
	}
	return 0
}

func (m *LegendaryChallengeReward) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 传奇挑战赛排名奖励
type LegendaryRankReward struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IntervalFloor    *int32            `protobuf:"varint,2,opt,name=interval_floor" json:"interval_floor,omitempty"`
	IntervalUpper    *int32            `protobuf:"varint,3,opt,name=interval_upper" json:"interval_upper,omitempty"`
	RankingReward    []*ItemVaryConfig `protobuf:"bytes,4,rep,name=ranking_reward" json:"ranking_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LegendaryRankReward) Reset()                    { *m = LegendaryRankReward{} }
func (m *LegendaryRankReward) String() string            { return proto.CompactTextString(m) }
func (*LegendaryRankReward) ProtoMessage()               {}
func (*LegendaryRankReward) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{238} }

func (m *LegendaryRankReward) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendaryRankReward) GetIntervalFloor() int32 {
	if m != nil && m.IntervalFloor != nil {
		return *m.IntervalFloor
	}
	return 0
}

func (m *LegendaryRankReward) GetIntervalUpper() int32 {
	if m != nil && m.IntervalUpper != nil {
		return *m.IntervalUpper
	}
	return 0
}

func (m *LegendaryRankReward) GetRankingReward() []*ItemVaryConfig {
	if m != nil {
		return m.RankingReward
	}
	return nil
}

// 商业邀请赛
// 商业邀请赛章节配置
type BusinessInviteChapter struct {
	// 章节ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 等级要求
	Level *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	// 难度ID
	DifficultyQuality *int32 `protobuf:"varint,3,opt,name=difficulty_quality" json:"difficulty_quality,omitempty"`
	// 地图ID
	MapId *int32 `protobuf:"varint,4,opt,name=map_id" json:"map_id,omitempty"`
	// 通关奖励掉落id
	Reward *int32 `protobuf:"varint,5,opt,name=reward" json:"reward,omitempty"`
	// NPCIDs
	NpcId            []int32 `protobuf:"varint,6,rep,name=npc_id" json:"npc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BusinessInviteChapter) Reset()                    { *m = BusinessInviteChapter{} }
func (m *BusinessInviteChapter) String() string            { return proto.CompactTextString(m) }
func (*BusinessInviteChapter) ProtoMessage()               {}
func (*BusinessInviteChapter) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{239} }

func (m *BusinessInviteChapter) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessInviteChapter) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *BusinessInviteChapter) GetDifficultyQuality() int32 {
	if m != nil && m.DifficultyQuality != nil {
		return *m.DifficultyQuality
	}
	return 0
}

func (m *BusinessInviteChapter) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *BusinessInviteChapter) GetReward() int32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *BusinessInviteChapter) GetNpcId() []int32 {
	if m != nil {
		return m.NpcId
	}
	return nil
}

// 商业邀请赛全局
type BusinessInviteGlobal struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 普通/精英难度权重
	DefaultDifficult []int32 `protobuf:"varint,2,rep,name=default_difficult" json:"default_difficult,omitempty"`
	// 商业邀请赛筛选等级
	RegionalLevel *int32 `protobuf:"varint,3,opt,name=regional_level" json:"regional_level,omitempty"`
	// 每日挑战次数
	DailyNum *int32 `protobuf:"varint,4,opt,name=daily_num" json:"daily_num,omitempty"`
	// 补给消耗道具
	ReviveItem *ItemVaryConfig `protobuf:"bytes,5,opt,name=revive_item" json:"revive_item,omitempty"`
	// 加成的buffID
	BuffId           *int32 `protobuf:"varint,6,opt,name=buff_id" json:"buff_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BusinessInviteGlobal) Reset()                    { *m = BusinessInviteGlobal{} }
func (m *BusinessInviteGlobal) String() string            { return proto.CompactTextString(m) }
func (*BusinessInviteGlobal) ProtoMessage()               {}
func (*BusinessInviteGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{240} }

func (m *BusinessInviteGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessInviteGlobal) GetDefaultDifficult() []int32 {
	if m != nil {
		return m.DefaultDifficult
	}
	return nil
}

func (m *BusinessInviteGlobal) GetRegionalLevel() int32 {
	if m != nil && m.RegionalLevel != nil {
		return *m.RegionalLevel
	}
	return 0
}

func (m *BusinessInviteGlobal) GetDailyNum() int32 {
	if m != nil && m.DailyNum != nil {
		return *m.DailyNum
	}
	return 0
}

func (m *BusinessInviteGlobal) GetReviveItem() *ItemVaryConfig {
	if m != nil {
		return m.ReviveItem
	}
	return nil
}

func (m *BusinessInviteGlobal) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

// 商业挑战赛
// 区域挑战赛章节
type BusinessRegionalChapter struct {
	// 章节ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 等级要求
	Level *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	// 难度ID
	DifficultyQuality *int32 `protobuf:"varint,3,opt,name=difficulty_quality" json:"difficulty_quality,omitempty"`
	// 地图ID
	MapId *int32 `protobuf:"varint,4,opt,name=map_id" json:"map_id,omitempty"`
	// 达成粉丝值奖励
	RewardFans []*ItemVaryConfig `protobuf:"bytes,5,rep,name=reward_fans" json:"reward_fans,omitempty"`
	// 粉丝达成值
	ConditionFans *int32 `protobuf:"varint,6,opt,name=condition_fans" json:"condition_fans,omitempty"`
	// 推荐战力
	Power *int32 `protobuf:"varint,7,opt,name=power" json:"power,omitempty"`
	// 关卡数量
	MonsterNum *int32 `protobuf:"varint,8,opt,name=monster_num" json:"monster_num,omitempty"`
	// 达成粉丝值组队奖励
	RewardFansTeam   []*ItemVaryConfig `protobuf:"bytes,9,rep,name=reward_fans_team" json:"reward_fans_team,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BusinessRegionalChapter) Reset()                    { *m = BusinessRegionalChapter{} }
func (m *BusinessRegionalChapter) String() string            { return proto.CompactTextString(m) }
func (*BusinessRegionalChapter) ProtoMessage()               {}
func (*BusinessRegionalChapter) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{241} }

func (m *BusinessRegionalChapter) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessRegionalChapter) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *BusinessRegionalChapter) GetDifficultyQuality() int32 {
	if m != nil && m.DifficultyQuality != nil {
		return *m.DifficultyQuality
	}
	return 0
}

func (m *BusinessRegionalChapter) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *BusinessRegionalChapter) GetRewardFans() []*ItemVaryConfig {
	if m != nil {
		return m.RewardFans
	}
	return nil
}

func (m *BusinessRegionalChapter) GetConditionFans() int32 {
	if m != nil && m.ConditionFans != nil {
		return *m.ConditionFans
	}
	return 0
}

func (m *BusinessRegionalChapter) GetPower() int32 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *BusinessRegionalChapter) GetMonsterNum() int32 {
	if m != nil && m.MonsterNum != nil {
		return *m.MonsterNum
	}
	return 0
}

func (m *BusinessRegionalChapter) GetRewardFansTeam() []*ItemVaryConfig {
	if m != nil {
		return m.RewardFansTeam
	}
	return nil
}

// 区域挑战赛关卡
type BusinessRegionalLevel struct {
	// 关卡ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 章节ID
	SectionId *int32 `protobuf:"varint,2,opt,name=section_id" json:"section_id,omitempty"`
	// 怪物序号
	MonsterId *int32 `protobuf:"varint,3,opt,name=monster_id" json:"monster_id,omitempty"`
	// 是否关联出生点
	ConnectBornId *int32 `protobuf:"varint,4,opt,name=connect_born_id" json:"connect_born_id,omitempty"`
	// 关联关卡节点
	NextMonsterId []int32 `protobuf:"varint,5,rep,name=next_monster_id" json:"next_monster_id,omitempty"`
	// NPCID(多人组队模式 组队2人及以上)
	NpcId *int32 `protobuf:"varint,6,opt,name=npc_id" json:"npc_id,omitempty"`
	// 关卡掉落物品列表
	Reward *int32 `protobuf:"varint,7,opt,name=reward" json:"reward,omitempty"`
	// 粉丝值
	Fansnum *int32 `protobuf:"varint,8,opt,name=fansnum" json:"fansnum,omitempty"`
	// 关卡难度系数
	Difficulty *int32 `protobuf:"varint,9,opt,name=difficulty" json:"difficulty,omitempty"`
	// NPC_ID_01（单人或单人组队模式）
	NpcId_01         *int32 `protobuf:"varint,10,opt,name=npc_id_01" json:"npc_id_01,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BusinessRegionalLevel) Reset()                    { *m = BusinessRegionalLevel{} }
func (m *BusinessRegionalLevel) String() string            { return proto.CompactTextString(m) }
func (*BusinessRegionalLevel) ProtoMessage()               {}
func (*BusinessRegionalLevel) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{242} }

func (m *BusinessRegionalLevel) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessRegionalLevel) GetSectionId() int32 {
	if m != nil && m.SectionId != nil {
		return *m.SectionId
	}
	return 0
}

func (m *BusinessRegionalLevel) GetMonsterId() int32 {
	if m != nil && m.MonsterId != nil {
		return *m.MonsterId
	}
	return 0
}

func (m *BusinessRegionalLevel) GetConnectBornId() int32 {
	if m != nil && m.ConnectBornId != nil {
		return *m.ConnectBornId
	}
	return 0
}

func (m *BusinessRegionalLevel) GetNextMonsterId() []int32 {
	if m != nil {
		return m.NextMonsterId
	}
	return nil
}

func (m *BusinessRegionalLevel) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *BusinessRegionalLevel) GetReward() int32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *BusinessRegionalLevel) GetFansnum() int32 {
	if m != nil && m.Fansnum != nil {
		return *m.Fansnum
	}
	return 0
}

func (m *BusinessRegionalLevel) GetDifficulty() int32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *BusinessRegionalLevel) GetNpcId_01() int32 {
	if m != nil && m.NpcId_01 != nil {
		return *m.NpcId_01
	}
	return 0
}

// 区域挑战赛NPC
type BusinessRegionalNpc struct {
	// NPCID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 玩法类型
	PlayType *int32 `protobuf:"varint,2,opt,name=play_type" json:"play_type,omitempty"`
	// 玩法子类型
	SubType *int32 `protobuf:"varint,3,opt,name=sub_type" json:"sub_type,omitempty"`
	// 关卡怪物集合ID
	MonsterId []int32 `protobuf:"varint,4,rep,name=monster_id" json:"monster_id,omitempty"`
	// 拾取次数
	GetTimeNum *int32 `protobuf:"varint,5,opt,name=get_time_num" json:"get_time_num,omitempty"`
	// 门票卷消耗
	ItemExpends      *ItemVaryConfig `protobuf:"bytes,6,opt,name=item_expends" json:"item_expends,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *BusinessRegionalNpc) Reset()                    { *m = BusinessRegionalNpc{} }
func (m *BusinessRegionalNpc) String() string            { return proto.CompactTextString(m) }
func (*BusinessRegionalNpc) ProtoMessage()               {}
func (*BusinessRegionalNpc) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{243} }

func (m *BusinessRegionalNpc) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessRegionalNpc) GetPlayType() int32 {
	if m != nil && m.PlayType != nil {
		return *m.PlayType
	}
	return 0
}

func (m *BusinessRegionalNpc) GetSubType() int32 {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return 0
}

func (m *BusinessRegionalNpc) GetMonsterId() []int32 {
	if m != nil {
		return m.MonsterId
	}
	return nil
}

func (m *BusinessRegionalNpc) GetGetTimeNum() int32 {
	if m != nil && m.GetTimeNum != nil {
		return *m.GetTimeNum
	}
	return 0
}

func (m *BusinessRegionalNpc) GetItemExpends() *ItemVaryConfig {
	if m != nil {
		return m.ItemExpends
	}
	return nil
}

// 预约活动全局表
type AppointmentGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 预约奖励
	AppointmentReward []*ItemVaryConfig `protobuf:"bytes,2,rep,name=appointment_reward" json:"appointment_reward,omitempty"`
	// 双端预注册奖励
	DoubleSizeRegReward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=double_size_reg_reward" json:"double_size_reg_reward,omitempty"`
	// 累积预约奖励
	GrandTotalAppointmentReward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=grand_total_appointment_reward" json:"grand_total_appointment_reward,omitempty"`
	// 累积预约奖励发放等级
	GrandTotalAppointmentRewardLv *int32 `protobuf:"varint,5,opt,name=grand_total_appointment_reward_lv" json:"grand_total_appointment_reward_lv,omitempty"`
	// 领取奖励时间限制（单位：天）
	GetRewardTimeLimit *int32 `protobuf:"varint,6,opt,name=get_reward_time_limit" json:"get_reward_time_limit,omitempty"`
	// 是否开启预约活动
	OpenActivity     *bool  `protobuf:"varint,7,opt,name=open_activity" json:"open_activity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AppointmentGlobalCfg) Reset()                    { *m = AppointmentGlobalCfg{} }
func (m *AppointmentGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*AppointmentGlobalCfg) ProtoMessage()               {}
func (*AppointmentGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{244} }

func (m *AppointmentGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AppointmentGlobalCfg) GetAppointmentReward() []*ItemVaryConfig {
	if m != nil {
		return m.AppointmentReward
	}
	return nil
}

func (m *AppointmentGlobalCfg) GetDoubleSizeRegReward() []*ItemVaryConfig {
	if m != nil {
		return m.DoubleSizeRegReward
	}
	return nil
}

func (m *AppointmentGlobalCfg) GetGrandTotalAppointmentReward() []*ItemVaryConfig {
	if m != nil {
		return m.GrandTotalAppointmentReward
	}
	return nil
}

func (m *AppointmentGlobalCfg) GetGrandTotalAppointmentRewardLv() int32 {
	if m != nil && m.GrandTotalAppointmentRewardLv != nil {
		return *m.GrandTotalAppointmentRewardLv
	}
	return 0
}

func (m *AppointmentGlobalCfg) GetGetRewardTimeLimit() int32 {
	if m != nil && m.GetRewardTimeLimit != nil {
		return *m.GetRewardTimeLimit
	}
	return 0
}

func (m *AppointmentGlobalCfg) GetOpenActivity() bool {
	if m != nil && m.OpenActivity != nil {
		return *m.OpenActivity
	}
	return false
}

// 预约活动邀请奖励表
type AppointmentInviteCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 邀请人数
	InviteNum *int32 `protobuf:"varint,2,opt,name=invite_num" json:"invite_num,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AppointmentInviteCfg) Reset()                    { *m = AppointmentInviteCfg{} }
func (m *AppointmentInviteCfg) String() string            { return proto.CompactTextString(m) }
func (*AppointmentInviteCfg) ProtoMessage()               {}
func (*AppointmentInviteCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{245} }

func (m *AppointmentInviteCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AppointmentInviteCfg) GetInviteNum() int32 {
	if m != nil && m.InviteNum != nil {
		return *m.InviteNum
	}
	return 0
}

func (m *AppointmentInviteCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 预约活动邀请奖励表
type AppointmentLotteryCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AppointmentLotteryCfg) Reset()                    { *m = AppointmentLotteryCfg{} }
func (m *AppointmentLotteryCfg) String() string            { return proto.CompactTextString(m) }
func (*AppointmentLotteryCfg) ProtoMessage()               {}
func (*AppointmentLotteryCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{246} }

func (m *AppointmentLotteryCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AppointmentLotteryCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 充值返利全局表
type RebateGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 领返利时限
	RebateLimitTime *int32 `protobuf:"varint,2,opt,name=rebate_limit_time" json:"rebate_limit_time,omitempty"`
	// 大礼包奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	// 重返比（百分比）
	RebatePer *int32 `protobuf:"varint,4,opt,name=rebate_per" json:"rebate_per,omitempty"`
	// 返利区服id
	AreaId *int32 `protobuf:"varint,5,opt,name=area_id" json:"area_id,omitempty"`
	// 领奖励时限
	GetRewardLimitTime *int32 `protobuf:"varint,6,opt,name=get_reward_limit_time" json:"get_reward_limit_time,omitempty"`
	// 是否封测服务器
	IsCloseTestServer *bool  `protobuf:"varint,7,opt,name=is_close_test_server" json:"is_close_test_server,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *RebateGlobalCfg) Reset()                    { *m = RebateGlobalCfg{} }
func (m *RebateGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*RebateGlobalCfg) ProtoMessage()               {}
func (*RebateGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{247} }

func (m *RebateGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RebateGlobalCfg) GetRebateLimitTime() int32 {
	if m != nil && m.RebateLimitTime != nil {
		return *m.RebateLimitTime
	}
	return 0
}

func (m *RebateGlobalCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RebateGlobalCfg) GetRebatePer() int32 {
	if m != nil && m.RebatePer != nil {
		return *m.RebatePer
	}
	return 0
}

func (m *RebateGlobalCfg) GetAreaId() int32 {
	if m != nil && m.AreaId != nil {
		return *m.AreaId
	}
	return 0
}

func (m *RebateGlobalCfg) GetGetRewardLimitTime() int32 {
	if m != nil && m.GetRewardLimitTime != nil {
		return *m.GetRewardLimitTime
	}
	return 0
}

func (m *RebateGlobalCfg) GetIsCloseTestServer() bool {
	if m != nil && m.IsCloseTestServer != nil {
		return *m.IsCloseTestServer
	}
	return false
}

// 区域挑战赛全局表
type BusinessRegionalGlobal struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 初始化等级
	Level *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	// 默认难度
	DefaultDifficult []int32 `protobuf:"varint,3,rep,name=default_difficult" json:"default_difficult,omitempty"`
	// 初始化精力值
	DefaultEnergy *ItemVaryConfig `protobuf:"bytes,4,opt,name=default_energy" json:"default_energy,omitempty"`
	// 难度刷新每日免费次数
	FreeNumber *int32 `protobuf:"varint,5,opt,name=free_number" json:"free_number,omitempty"`
	// 道具刷新消耗
	ItemConsume *ItemVaryConfig `protobuf:"bytes,6,opt,name=item_consume" json:"item_consume,omitempty"`
	// 货币刷新消耗
	CurrencyConsume []*ItemVaryConfig `protobuf:"bytes,7,rep,name=currency_consume" json:"currency_consume,omitempty"`
	// 区域挑战赛副本时间
	RegionalTime *int32 `protobuf:"varint,8,opt,name=regional_time" json:"regional_time,omitempty"`
	// 每日挑战次数
	DailyNum *int32 `protobuf:"varint,9,opt,name=daily_num" json:"daily_num,omitempty"`
	// 跳过功能战力要求（A/B-1）*10000
	JumpFightRatio *int32 `protobuf:"varint,10,opt,name=JumpFightRatio" json:"JumpFightRatio,omitempty"`
	// 行动力宝箱的兑换弹窗ID
	PopId *int32 `protobuf:"varint,11,opt,name=popId" json:"popId,omitempty"`
	// 补充行动关联的道具ID
	ItemId *int32 `protobuf:"varint,12,opt,name=itemId" json:"itemId,omitempty"`
	// npc战力虚拟系数
	PowerCoefficient *int32 `protobuf:"varint,13,opt,name=power_coefficient" json:"power_coefficient,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BusinessRegionalGlobal) Reset()                    { *m = BusinessRegionalGlobal{} }
func (m *BusinessRegionalGlobal) String() string            { return proto.CompactTextString(m) }
func (*BusinessRegionalGlobal) ProtoMessage()               {}
func (*BusinessRegionalGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{248} }

func (m *BusinessRegionalGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetDefaultDifficult() []int32 {
	if m != nil {
		return m.DefaultDifficult
	}
	return nil
}

func (m *BusinessRegionalGlobal) GetDefaultEnergy() *ItemVaryConfig {
	if m != nil {
		return m.DefaultEnergy
	}
	return nil
}

func (m *BusinessRegionalGlobal) GetFreeNumber() int32 {
	if m != nil && m.FreeNumber != nil {
		return *m.FreeNumber
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetItemConsume() *ItemVaryConfig {
	if m != nil {
		return m.ItemConsume
	}
	return nil
}

func (m *BusinessRegionalGlobal) GetCurrencyConsume() []*ItemVaryConfig {
	if m != nil {
		return m.CurrencyConsume
	}
	return nil
}

func (m *BusinessRegionalGlobal) GetRegionalTime() int32 {
	if m != nil && m.RegionalTime != nil {
		return *m.RegionalTime
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetDailyNum() int32 {
	if m != nil && m.DailyNum != nil {
		return *m.DailyNum
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetJumpFightRatio() int32 {
	if m != nil && m.JumpFightRatio != nil {
		return *m.JumpFightRatio
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetPopId() int32 {
	if m != nil && m.PopId != nil {
		return *m.PopId
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *BusinessRegionalGlobal) GetPowerCoefficient() int32 {
	if m != nil && m.PowerCoefficient != nil {
		return *m.PowerCoefficient
	}
	return 0
}

// 商业比赛修改据点计算规则
type BusinessRegionalLoseProgress struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 分差下限
	ScoreDown *int32 `protobuf:"varint,2,opt,name=score_down" json:"score_down,omitempty"`
	// 分差上限
	ScoreUp *int32 `protobuf:"varint,3,opt,name=score_up" json:"score_up,omitempty"`
	// 获得粉丝比例
	Fans             *int32 `protobuf:"varint,4,opt,name=fans" json:"fans,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BusinessRegionalLoseProgress) Reset()         { *m = BusinessRegionalLoseProgress{} }
func (m *BusinessRegionalLoseProgress) String() string { return proto.CompactTextString(m) }
func (*BusinessRegionalLoseProgress) ProtoMessage()    {}
func (*BusinessRegionalLoseProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{249}
}

func (m *BusinessRegionalLoseProgress) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BusinessRegionalLoseProgress) GetScoreDown() int32 {
	if m != nil && m.ScoreDown != nil {
		return *m.ScoreDown
	}
	return 0
}

func (m *BusinessRegionalLoseProgress) GetScoreUp() int32 {
	if m != nil && m.ScoreUp != nil {
		return *m.ScoreUp
	}
	return 0
}

func (m *BusinessRegionalLoseProgress) GetFans() int32 {
	if m != nil && m.Fans != nil {
		return *m.Fans
	}
	return 0
}

// 巨星挑战章节
type MascotSectionCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 当前章节所有的关卡id
	ChapterList []int32 `protobuf:"varint,2,rep,name=chapter_list" json:"chapter_list,omitempty"`
	// 通关奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MascotSectionCfg) Reset()                    { *m = MascotSectionCfg{} }
func (m *MascotSectionCfg) String() string            { return proto.CompactTextString(m) }
func (*MascotSectionCfg) ProtoMessage()               {}
func (*MascotSectionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{250} }

func (m *MascotSectionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MascotSectionCfg) GetChapterList() []int32 {
	if m != nil {
		return m.ChapterList
	}
	return nil
}

func (m *MascotSectionCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 巨星挑战关卡
type MascotChapterCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 后置关卡id
	NextChapterId *int32 `protobuf:"varint,2,opt,name=next_chapter_id" json:"next_chapter_id,omitempty"`
	// 是否是最大关卡标记
	IsMax *int32 `protobuf:"varint,3,opt,name=isMax" json:"isMax,omitempty"`
	// npcId
	NpcId *int32 `protobuf:"varint,4,opt,name=npc_id" json:"npc_id,omitempty"`
	// 胜利奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,5,rep,name=reward" json:"reward,omitempty"`
	// 掉落id
	Reward1 *int32 `protobuf:"varint,6,opt,name=reward1" json:"reward1,omitempty"`
	// 限制球队
	PlayerTeam []int32 `protobuf:"varint,7,rep,name=player_team" json:"player_team,omitempty"`
	// 限制数量
	PlayerNumber     *int32 `protobuf:"varint,8,opt,name=player_number" json:"player_number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MascotChapterCfg) Reset()                    { *m = MascotChapterCfg{} }
func (m *MascotChapterCfg) String() string            { return proto.CompactTextString(m) }
func (*MascotChapterCfg) ProtoMessage()               {}
func (*MascotChapterCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{251} }

func (m *MascotChapterCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MascotChapterCfg) GetNextChapterId() int32 {
	if m != nil && m.NextChapterId != nil {
		return *m.NextChapterId
	}
	return 0
}

func (m *MascotChapterCfg) GetIsMax() int32 {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return 0
}

func (m *MascotChapterCfg) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *MascotChapterCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *MascotChapterCfg) GetReward1() int32 {
	if m != nil && m.Reward1 != nil {
		return *m.Reward1
	}
	return 0
}

func (m *MascotChapterCfg) GetPlayerTeam() []int32 {
	if m != nil {
		return m.PlayerTeam
	}
	return nil
}

func (m *MascotChapterCfg) GetPlayerNumber() int32 {
	if m != nil && m.PlayerNumber != nil {
		return *m.PlayerNumber
	}
	return 0
}

// 巨星挑战全局配置
type MascotGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 每日挑战次数
	ChanCnt *int32 `protobuf:"varint,2,opt,name=chan_cnt" json:"chan_cnt,omitempty"`
	// 挑战次数购买消耗
	CurrencyConsume []*ItemVaryConfig `protobuf:"bytes,3,rep,name=currency_consume" json:"currency_consume,omitempty"`
	// 最大购买次数
	MaxBuyCnt *int32 `protobuf:"varint,4,opt,name=maxBuyCnt" json:"maxBuyCnt,omitempty"`
	// 替补数量
	AlternateNum     *int32 `protobuf:"varint,5,opt,name=alternate_num" json:"alternate_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MascotGlobalCfg) Reset()                    { *m = MascotGlobalCfg{} }
func (m *MascotGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*MascotGlobalCfg) ProtoMessage()               {}
func (*MascotGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{252} }

func (m *MascotGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MascotGlobalCfg) GetChanCnt() int32 {
	if m != nil && m.ChanCnt != nil {
		return *m.ChanCnt
	}
	return 0
}

func (m *MascotGlobalCfg) GetCurrencyConsume() []*ItemVaryConfig {
	if m != nil {
		return m.CurrencyConsume
	}
	return nil
}

func (m *MascotGlobalCfg) GetMaxBuyCnt() int32 {
	if m != nil && m.MaxBuyCnt != nil {
		return *m.MaxBuyCnt
	}
	return 0
}

func (m *MascotGlobalCfg) GetAlternateNum() int32 {
	if m != nil && m.AlternateNum != nil {
		return *m.AlternateNum
	}
	return 0
}

// 巨星挑战成就
type MascotTaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 成就条件id
	ConditionIds []int32 `protobuf:"varint,2,rep,name=condition_ids" json:"condition_ids,omitempty"`
	// 成就奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MascotTaskCfg) Reset()                    { *m = MascotTaskCfg{} }
func (m *MascotTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*MascotTaskCfg) ProtoMessage()               {}
func (*MascotTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{253} }

func (m *MascotTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MascotTaskCfg) GetConditionIds() []int32 {
	if m != nil {
		return m.ConditionIds
	}
	return nil
}

func (m *MascotTaskCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 名宿基础表
type LegendBasicCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 初始等级
	InitLevel *int32 `protobuf:"varint,2,opt,name=init_level" json:"init_level,omitempty"`
	// 初始星级
	InitStar *int32 `protobuf:"varint,3,opt,name=init_star" json:"init_star,omitempty"`
	// 解锁名宿道具ID
	UnlockConsume *ItemVaryConfig `protobuf:"bytes,4,opt,name=unlock_consume" json:"unlock_consume,omitempty"`
	// 图鉴属性
	BookProperty []*PlayerAttrValue `protobuf:"bytes,5,rep,name=book_property" json:"book_property,omitempty"`
	// 名宿初始属性
	InitAttr []*PlayerAttrValue `protobuf:"bytes,6,rep,name=init_attr" json:"init_attr,omitempty"`
	// 名字
	LegendName       *string `protobuf:"bytes,7,opt,name=legend_name" json:"legend_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LegendBasicCfg) Reset()                    { *m = LegendBasicCfg{} }
func (m *LegendBasicCfg) String() string            { return proto.CompactTextString(m) }
func (*LegendBasicCfg) ProtoMessage()               {}
func (*LegendBasicCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{254} }

func (m *LegendBasicCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendBasicCfg) GetInitLevel() int32 {
	if m != nil && m.InitLevel != nil {
		return *m.InitLevel
	}
	return 0
}

func (m *LegendBasicCfg) GetInitStar() int32 {
	if m != nil && m.InitStar != nil {
		return *m.InitStar
	}
	return 0
}

func (m *LegendBasicCfg) GetUnlockConsume() *ItemVaryConfig {
	if m != nil {
		return m.UnlockConsume
	}
	return nil
}

func (m *LegendBasicCfg) GetBookProperty() []*PlayerAttrValue {
	if m != nil {
		return m.BookProperty
	}
	return nil
}

func (m *LegendBasicCfg) GetInitAttr() []*PlayerAttrValue {
	if m != nil {
		return m.InitAttr
	}
	return nil
}

func (m *LegendBasicCfg) GetLegendName() string {
	if m != nil && m.LegendName != nil {
		return *m.LegendName
	}
	return ""
}

// 名宿等级表
type LegendLevelCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 是否满级
	MaxLevel *int32 `protobuf:"varint,2,opt,name=max_level" json:"max_level,omitempty"`
	// 升一级所需培养的满属性值
	LevelFullProperty []*PlayerAttrValue `protobuf:"bytes,3,rep,name=level_full_property" json:"level_full_property,omitempty"`
	// 每次培养增加的属性值
	IncrProperty *int32 `protobuf:"varint,4,opt,name=incr_property" json:"incr_property,omitempty"`
	// 培养消耗
	ConsumeNum *int32 `protobuf:"varint,5,opt,name=consume_num" json:"consume_num,omitempty"`
	// 天赋属性
	Attr             []*PlayerAttrValue `protobuf:"bytes,6,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *LegendLevelCfg) Reset()                    { *m = LegendLevelCfg{} }
func (m *LegendLevelCfg) String() string            { return proto.CompactTextString(m) }
func (*LegendLevelCfg) ProtoMessage()               {}
func (*LegendLevelCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{255} }

func (m *LegendLevelCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendLevelCfg) GetMaxLevel() int32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

func (m *LegendLevelCfg) GetLevelFullProperty() []*PlayerAttrValue {
	if m != nil {
		return m.LevelFullProperty
	}
	return nil
}

func (m *LegendLevelCfg) GetIncrProperty() int32 {
	if m != nil && m.IncrProperty != nil {
		return *m.IncrProperty
	}
	return 0
}

func (m *LegendLevelCfg) GetConsumeNum() int32 {
	if m != nil && m.ConsumeNum != nil {
		return *m.ConsumeNum
	}
	return 0
}

func (m *LegendLevelCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 名宿星级表
type LegendStarCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 名宿id
	LegendId *int32 `protobuf:"varint,2,opt,name=legend_id" json:"legend_id,omitempty"`
	// 星级
	Star *int32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
	// 是否满级
	MaxStar *int32 `protobuf:"varint,4,opt,name=max_star" json:"max_star,omitempty"`
	// 名宿升星消耗
	UpStarConsume []*ItemVaryConfig `protobuf:"bytes,5,rep,name=up_star_consume" json:"up_star_consume,omitempty"`
	// 战斗属性
	FightAttr []*PlayerAttrValue `protobuf:"bytes,6,rep,name=fight_attr" json:"fight_attr,omitempty"`
	// 技能id
	BuffId           *int32 `protobuf:"varint,7,opt,name=buff_id" json:"buff_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LegendStarCfg) Reset()                    { *m = LegendStarCfg{} }
func (m *LegendStarCfg) String() string            { return proto.CompactTextString(m) }
func (*LegendStarCfg) ProtoMessage()               {}
func (*LegendStarCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{256} }

func (m *LegendStarCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendStarCfg) GetLegendId() int32 {
	if m != nil && m.LegendId != nil {
		return *m.LegendId
	}
	return 0
}

func (m *LegendStarCfg) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *LegendStarCfg) GetMaxStar() int32 {
	if m != nil && m.MaxStar != nil {
		return *m.MaxStar
	}
	return 0
}

func (m *LegendStarCfg) GetUpStarConsume() []*ItemVaryConfig {
	if m != nil {
		return m.UpStarConsume
	}
	return nil
}

func (m *LegendStarCfg) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

func (m *LegendStarCfg) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

// 名宿全局表
type LegendGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 培养次数
	CultivateNum []*ItemVaryConfig `protobuf:"bytes,2,rep,name=cultivate_num" json:"cultivate_num,omitempty"`
	// 升级消耗道具
	Cultivate *ItemVaryConfig `protobuf:"bytes,3,opt,name=cultivate" json:"cultivate,omitempty"`
	// 栏位解锁等级
	UnlockField      []int32 `protobuf:"varint,4,rep,name=unlock_field" json:"unlock_field,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LegendGlobalCfg) Reset()                    { *m = LegendGlobalCfg{} }
func (m *LegendGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*LegendGlobalCfg) ProtoMessage()               {}
func (*LegendGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{257} }

func (m *LegendGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendGlobalCfg) GetCultivateNum() []*ItemVaryConfig {
	if m != nil {
		return m.CultivateNum
	}
	return nil
}

func (m *LegendGlobalCfg) GetCultivate() *ItemVaryConfig {
	if m != nil {
		return m.Cultivate
	}
	return nil
}

func (m *LegendGlobalCfg) GetUnlockField() []int32 {
	if m != nil {
		return m.UnlockField
	}
	return nil
}

// 名宿装备表
type LegendEquipCfg struct {
	Id                 *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LegendEquipId      *int32             `protobuf:"varint,2,opt,name=legend_equip_id" json:"legend_equip_id,omitempty"`
	LegendStrengthenLv *int32             `protobuf:"varint,3,opt,name=legend_strengthen_lv" json:"legend_strengthen_lv,omitempty"`
	LevelUpItems       *ItemVaryConfig    `protobuf:"bytes,4,opt,name=level_up_items" json:"level_up_items,omitempty"`
	Property           []*PlayerAttrValue `protobuf:"bytes,5,rep,name=property" json:"property,omitempty"`
	UnlockProperty     []*PlayerAttrValue `protobuf:"bytes,6,rep,name=unlock_property" json:"unlock_property,omitempty"`
	IsMaxLv            *int32             `protobuf:"varint,7,opt,name=is_max_lv" json:"is_max_lv,omitempty"`
	XXX_unrecognized   []byte             `json:"-"`
}

func (m *LegendEquipCfg) Reset()                    { *m = LegendEquipCfg{} }
func (m *LegendEquipCfg) String() string            { return proto.CompactTextString(m) }
func (*LegendEquipCfg) ProtoMessage()               {}
func (*LegendEquipCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{258} }

func (m *LegendEquipCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LegendEquipCfg) GetLegendEquipId() int32 {
	if m != nil && m.LegendEquipId != nil {
		return *m.LegendEquipId
	}
	return 0
}

func (m *LegendEquipCfg) GetLegendStrengthenLv() int32 {
	if m != nil && m.LegendStrengthenLv != nil {
		return *m.LegendStrengthenLv
	}
	return 0
}

func (m *LegendEquipCfg) GetLevelUpItems() *ItemVaryConfig {
	if m != nil {
		return m.LevelUpItems
	}
	return nil
}

func (m *LegendEquipCfg) GetProperty() []*PlayerAttrValue {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *LegendEquipCfg) GetUnlockProperty() []*PlayerAttrValue {
	if m != nil {
		return m.UnlockProperty
	}
	return nil
}

func (m *LegendEquipCfg) GetIsMaxLv() int32 {
	if m != nil && m.IsMaxLv != nil {
		return *m.IsMaxLv
	}
	return 0
}

// 组队配置全局表
type TeamGlobal struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PeopleTop        *int32  `protobuf:"varint,2,opt,name=people_top" json:"people_top,omitempty"`
	AnswerTime       *int32  `protobuf:"varint,3,opt,name=answer_time" json:"answer_time,omitempty"`
	FunctionId       []int32 `protobuf:"varint,4,rep,name=functionId" json:"functionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TeamGlobal) Reset()                    { *m = TeamGlobal{} }
func (m *TeamGlobal) String() string            { return proto.CompactTextString(m) }
func (*TeamGlobal) ProtoMessage()               {}
func (*TeamGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{259} }

func (m *TeamGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TeamGlobal) GetPeopleTop() int32 {
	if m != nil && m.PeopleTop != nil {
		return *m.PeopleTop
	}
	return 0
}

func (m *TeamGlobal) GetAnswerTime() int32 {
	if m != nil && m.AnswerTime != nil {
		return *m.AnswerTime
	}
	return 0
}

func (m *TeamGlobal) GetFunctionId() []int32 {
	if m != nil {
		return m.FunctionId
	}
	return nil
}

// 合成表
type CompositionCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NeedCount        *int32            `protobuf:"varint,2,opt,name=needCount" json:"needCount,omitempty"`
	CompositionGet   []*ItemVaryConfig `protobuf:"bytes,3,rep,name=composition_get" json:"composition_get,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CompositionCfg) Reset()                    { *m = CompositionCfg{} }
func (m *CompositionCfg) String() string            { return proto.CompactTextString(m) }
func (*CompositionCfg) ProtoMessage()               {}
func (*CompositionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{260} }

func (m *CompositionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CompositionCfg) GetNeedCount() int32 {
	if m != nil && m.NeedCount != nil {
		return *m.NeedCount
	}
	return 0
}

func (m *CompositionCfg) GetCompositionGet() []*ItemVaryConfig {
	if m != nil {
		return m.CompositionGet
	}
	return nil
}

// 分解表
type DecompositionCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DecompositionGet []*ItemVaryConfig `protobuf:"bytes,2,rep,name=decomposition_get" json:"decomposition_get,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *DecompositionCfg) Reset()                    { *m = DecompositionCfg{} }
func (m *DecompositionCfg) String() string            { return proto.CompactTextString(m) }
func (*DecompositionCfg) ProtoMessage()               {}
func (*DecompositionCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{261} }

func (m *DecompositionCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DecompositionCfg) GetDecompositionGet() []*ItemVaryConfig {
	if m != nil {
		return m.DecompositionGet
	}
	return nil
}

// 重置表
type ReplacementCfg struct {
	Id                   *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PlayerUpLvReturnList []*ItemVaryConfig `protobuf:"bytes,2,rep,name=playerUpLvReturnList" json:"playerUpLvReturnList,omitempty"`
	Playerexpend         *ItemVaryConfig   `protobuf:"bytes,3,opt,name=playerexpend" json:"playerexpend,omitempty"`
	Gearexpend           *ItemVaryConfig   `protobuf:"bytes,4,opt,name=gearexpend" json:"gearexpend,omitempty"`
	Dressexpend          *ItemVaryConfig   `protobuf:"bytes,5,opt,name=dressexpend" json:"dressexpend,omitempty"`
	Legendexpend         *ItemVaryConfig   `protobuf:"bytes,6,opt,name=legendexpend" json:"legendexpend,omitempty"`
	XXX_unrecognized     []byte            `json:"-"`
}

func (m *ReplacementCfg) Reset()                    { *m = ReplacementCfg{} }
func (m *ReplacementCfg) String() string            { return proto.CompactTextString(m) }
func (*ReplacementCfg) ProtoMessage()               {}
func (*ReplacementCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{262} }

func (m *ReplacementCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ReplacementCfg) GetPlayerUpLvReturnList() []*ItemVaryConfig {
	if m != nil {
		return m.PlayerUpLvReturnList
	}
	return nil
}

func (m *ReplacementCfg) GetPlayerexpend() *ItemVaryConfig {
	if m != nil {
		return m.Playerexpend
	}
	return nil
}

func (m *ReplacementCfg) GetGearexpend() *ItemVaryConfig {
	if m != nil {
		return m.Gearexpend
	}
	return nil
}

func (m *ReplacementCfg) GetDressexpend() *ItemVaryConfig {
	if m != nil {
		return m.Dressexpend
	}
	return nil
}

func (m *ReplacementCfg) GetLegendexpend() *ItemVaryConfig {
	if m != nil {
		return m.Legendexpend
	}
	return nil
}

// 王朝掠影
type TeamPhotoCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PrePhotoId       *int32             `protobuf:"varint,2,opt,name=pre_photo_id" json:"pre_photo_id,omitempty"`
	AreaPro1         []*PlayerAttrValue `protobuf:"bytes,3,rep,name=area_pro1" json:"area_pro1,omitempty"`
	AreaPro2         []*PlayerAttrValue `protobuf:"bytes,4,rep,name=area_pro2" json:"area_pro2,omitempty"`
	AreaPro3         []*PlayerAttrValue `protobuf:"bytes,5,rep,name=area_pro3" json:"area_pro3,omitempty"`
	PublicPro        []*PlayerAttrValue `protobuf:"bytes,6,rep,name=public_pro" json:"public_pro,omitempty"`
	Item1            []*ItemVaryConfig  `protobuf:"bytes,7,rep,name=item1" json:"item1,omitempty"`
	Item2            []*ItemVaryConfig  `protobuf:"bytes,8,rep,name=item2" json:"item2,omitempty"`
	Item3            []*ItemVaryConfig  `protobuf:"bytes,9,rep,name=item3" json:"item3,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TeamPhotoCfg) Reset()                    { *m = TeamPhotoCfg{} }
func (m *TeamPhotoCfg) String() string            { return proto.CompactTextString(m) }
func (*TeamPhotoCfg) ProtoMessage()               {}
func (*TeamPhotoCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{263} }

func (m *TeamPhotoCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TeamPhotoCfg) GetPrePhotoId() int32 {
	if m != nil && m.PrePhotoId != nil {
		return *m.PrePhotoId
	}
	return 0
}

func (m *TeamPhotoCfg) GetAreaPro1() []*PlayerAttrValue {
	if m != nil {
		return m.AreaPro1
	}
	return nil
}

func (m *TeamPhotoCfg) GetAreaPro2() []*PlayerAttrValue {
	if m != nil {
		return m.AreaPro2
	}
	return nil
}

func (m *TeamPhotoCfg) GetAreaPro3() []*PlayerAttrValue {
	if m != nil {
		return m.AreaPro3
	}
	return nil
}

func (m *TeamPhotoCfg) GetPublicPro() []*PlayerAttrValue {
	if m != nil {
		return m.PublicPro
	}
	return nil
}

func (m *TeamPhotoCfg) GetItem1() []*ItemVaryConfig {
	if m != nil {
		return m.Item1
	}
	return nil
}

func (m *TeamPhotoCfg) GetItem2() []*ItemVaryConfig {
	if m != nil {
		return m.Item2
	}
	return nil
}

func (m *TeamPhotoCfg) GetItem3() []*ItemVaryConfig {
	if m != nil {
		return m.Item3
	}
	return nil
}

// 助理教练 基础信息
type CoachBaseCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CoachQuality     *int32             `protobuf:"varint,2,opt,name=coach_quality" json:"coach_quality,omitempty"`
	UnlockItem       *ItemVaryConfig    `protobuf:"bytes,3,opt,name=unlock_item" json:"unlock_item,omitempty"`
	GroupId          *int32             `protobuf:"varint,4,opt,name=group_id" json:"group_id,omitempty"`
	InitAttr         []*PlayerAttrValue `protobuf:"bytes,5,rep,name=init_attr" json:"init_attr,omitempty"`
	BookProperty     []*PlayerAttrValue `protobuf:"bytes,6,rep,name=book_property" json:"book_property,omitempty"`
	CoachName        *string            `protobuf:"bytes,7,opt,name=coach_name" json:"coach_name,omitempty"`
	CoachUnlock      *int32             `protobuf:"varint,8,opt,name=coach_unlock" json:"coach_unlock,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CoachBaseCfg) Reset()                    { *m = CoachBaseCfg{} }
func (m *CoachBaseCfg) String() string            { return proto.CompactTextString(m) }
func (*CoachBaseCfg) ProtoMessage()               {}
func (*CoachBaseCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{264} }

func (m *CoachBaseCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoachBaseCfg) GetCoachQuality() int32 {
	if m != nil && m.CoachQuality != nil {
		return *m.CoachQuality
	}
	return 0
}

func (m *CoachBaseCfg) GetUnlockItem() *ItemVaryConfig {
	if m != nil {
		return m.UnlockItem
	}
	return nil
}

func (m *CoachBaseCfg) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CoachBaseCfg) GetInitAttr() []*PlayerAttrValue {
	if m != nil {
		return m.InitAttr
	}
	return nil
}

func (m *CoachBaseCfg) GetBookProperty() []*PlayerAttrValue {
	if m != nil {
		return m.BookProperty
	}
	return nil
}

func (m *CoachBaseCfg) GetCoachName() string {
	if m != nil && m.CoachName != nil {
		return *m.CoachName
	}
	return ""
}

func (m *CoachBaseCfg) GetCoachUnlock() int32 {
	if m != nil && m.CoachUnlock != nil {
		return *m.CoachUnlock
	}
	return 0
}

// 助理教练 装备强化
type CoachEquipCfg struct {
	Id                *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CoachEquipId      *int32             `protobuf:"varint,2,opt,name=coach_equip_id" json:"coach_equip_id,omitempty"`
	CoachStrengthenLv *int32             `protobuf:"varint,3,opt,name=coach_strengthen_lv" json:"coach_strengthen_lv,omitempty"`
	LevelUpItems      *ItemVaryConfig    `protobuf:"bytes,4,opt,name=level_up_items" json:"level_up_items,omitempty"`
	Property          []*PlayerAttrValue `protobuf:"bytes,5,rep,name=property" json:"property,omitempty"`
	UnlockProperty    []*PlayerAttrValue `protobuf:"bytes,6,rep,name=unlock_property" json:"unlock_property,omitempty"`
	IsMaxLv           *int32             `protobuf:"varint,7,opt,name=is_max_lv" json:"is_max_lv,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *CoachEquipCfg) Reset()                    { *m = CoachEquipCfg{} }
func (m *CoachEquipCfg) String() string            { return proto.CompactTextString(m) }
func (*CoachEquipCfg) ProtoMessage()               {}
func (*CoachEquipCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{265} }

func (m *CoachEquipCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoachEquipCfg) GetCoachEquipId() int32 {
	if m != nil && m.CoachEquipId != nil {
		return *m.CoachEquipId
	}
	return 0
}

func (m *CoachEquipCfg) GetCoachStrengthenLv() int32 {
	if m != nil && m.CoachStrengthenLv != nil {
		return *m.CoachStrengthenLv
	}
	return 0
}

func (m *CoachEquipCfg) GetLevelUpItems() *ItemVaryConfig {
	if m != nil {
		return m.LevelUpItems
	}
	return nil
}

func (m *CoachEquipCfg) GetProperty() []*PlayerAttrValue {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *CoachEquipCfg) GetUnlockProperty() []*PlayerAttrValue {
	if m != nil {
		return m.UnlockProperty
	}
	return nil
}

func (m *CoachEquipCfg) GetIsMaxLv() int32 {
	if m != nil && m.IsMaxLv != nil {
		return *m.IsMaxLv
	}
	return 0
}

// 助理教练 升级
type CoachLevelCfg struct {
	Id         *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GroupId    *int32 `protobuf:"varint,2,opt,name=group_id" json:"group_id,omitempty"`
	CoachLevel *int32 `protobuf:"varint,3,opt,name=coach_level" json:"coach_level,omitempty"`
	// 升级所需道具
	LevelUpItems     *ItemVaryConfig    `protobuf:"bytes,4,opt,name=level_up_items" json:"level_up_items,omitempty"`
	Property         []*PlayerAttrValue `protobuf:"bytes,5,rep,name=property" json:"property,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,6,rep,name=attr" json:"attr,omitempty"`
	IsMaxLv          *int32             `protobuf:"varint,7,opt,name=is_max_lv" json:"is_max_lv,omitempty"`
	TalentLv         *int32             `protobuf:"varint,8,opt,name=talent_lv" json:"talent_lv,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CoachLevelCfg) Reset()                    { *m = CoachLevelCfg{} }
func (m *CoachLevelCfg) String() string            { return proto.CompactTextString(m) }
func (*CoachLevelCfg) ProtoMessage()               {}
func (*CoachLevelCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{266} }

func (m *CoachLevelCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoachLevelCfg) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CoachLevelCfg) GetCoachLevel() int32 {
	if m != nil && m.CoachLevel != nil {
		return *m.CoachLevel
	}
	return 0
}

func (m *CoachLevelCfg) GetLevelUpItems() *ItemVaryConfig {
	if m != nil {
		return m.LevelUpItems
	}
	return nil
}

func (m *CoachLevelCfg) GetProperty() []*PlayerAttrValue {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *CoachLevelCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CoachLevelCfg) GetIsMaxLv() int32 {
	if m != nil && m.IsMaxLv != nil {
		return *m.IsMaxLv
	}
	return 0
}

func (m *CoachLevelCfg) GetTalentLv() int32 {
	if m != nil && m.TalentLv != nil {
		return *m.TalentLv
	}
	return 0
}

// 助理教练 天赋表
type CoachTalentCfg struct {
	Id               *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GroupId          *int32             `protobuf:"varint,2,opt,name=group_id" json:"group_id,omitempty"`
	UnlockLv         *int32             `protobuf:"varint,3,opt,name=unlock_lv" json:"unlock_lv,omitempty"`
	Attr             []*PlayerAttrValue `protobuf:"bytes,4,rep,name=attr" json:"attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CoachTalentCfg) Reset()                    { *m = CoachTalentCfg{} }
func (m *CoachTalentCfg) String() string            { return proto.CompactTextString(m) }
func (*CoachTalentCfg) ProtoMessage()               {}
func (*CoachTalentCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{267} }

func (m *CoachTalentCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoachTalentCfg) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CoachTalentCfg) GetUnlockLv() int32 {
	if m != nil && m.UnlockLv != nil {
		return *m.UnlockLv
	}
	return 0
}

func (m *CoachTalentCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

// 荣誉
// id,condition_id,time_type,time_value,fight_attr
type HonorCfg struct {
	// 荣誉配置id测试注释
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 激活条件配置id
	ConditionId *int32 `protobuf:"varint,2,opt,name=condition_id" json:"condition_id,omitempty"`
	// 限时时间类型
	TimeType *int32 `protobuf:"varint,3,opt,name=time_type" json:"time_type,omitempty"`
	// 限时时间(普通限时:分钟,截止时间:截止日期时间戳)
	TimeValue *int32 `protobuf:"varint,4,opt,name=time_value" json:"time_value,omitempty"`
	// 全局球员属性
	FightAttr []*PlayerAttrValue `protobuf:"bytes,5,rep,name=fight_attr" json:"fight_attr,omitempty"`
	// 使用道具ID
	PropId *int32 `protobuf:"varint,6,opt,name=prop_id" json:"prop_id,omitempty"`
	// 奖杯名
	HonorName        *string `protobuf:"bytes,7,opt,name=honor_name" json:"honor_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HonorCfg) Reset()                    { *m = HonorCfg{} }
func (m *HonorCfg) String() string            { return proto.CompactTextString(m) }
func (*HonorCfg) ProtoMessage()               {}
func (*HonorCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{268} }

func (m *HonorCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HonorCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *HonorCfg) GetTimeType() int32 {
	if m != nil && m.TimeType != nil {
		return *m.TimeType
	}
	return 0
}

func (m *HonorCfg) GetTimeValue() int32 {
	if m != nil && m.TimeValue != nil {
		return *m.TimeValue
	}
	return 0
}

func (m *HonorCfg) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

func (m *HonorCfg) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *HonorCfg) GetHonorName() string {
	if m != nil && m.HonorName != nil {
		return *m.HonorName
	}
	return ""
}

// 爬塔关卡表
type TowerGradeCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NpcId_01         *int32            `protobuf:"varint,2,opt,name=npc_id_01" json:"npc_id_01,omitempty"`
	NpcId_02         *int32            `protobuf:"varint,3,opt,name=npc_id_02" json:"npc_id_02,omitempty"`
	NpcId_03         *int32            `protobuf:"varint,4,opt,name=npc_id_03" json:"npc_id_03,omitempty"`
	NpcId_04         *int32            `protobuf:"varint,5,opt,name=npc_id_04" json:"npc_id_04,omitempty"`
	Reward_01        []*ItemVaryConfig `protobuf:"bytes,6,rep,name=reward_01" json:"reward_01,omitempty"`
	Reward_02        []*ItemVaryConfig `protobuf:"bytes,7,rep,name=reward_02" json:"reward_02,omitempty"`
	Reward_03        []*ItemVaryConfig `protobuf:"bytes,8,rep,name=reward_03" json:"reward_03,omitempty"`
	Reward_04        []*ItemVaryConfig `protobuf:"bytes,9,rep,name=reward_04" json:"reward_04,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TowerGradeCfg) Reset()                    { *m = TowerGradeCfg{} }
func (m *TowerGradeCfg) String() string            { return proto.CompactTextString(m) }
func (*TowerGradeCfg) ProtoMessage()               {}
func (*TowerGradeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{269} }

func (m *TowerGradeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TowerGradeCfg) GetNpcId_01() int32 {
	if m != nil && m.NpcId_01 != nil {
		return *m.NpcId_01
	}
	return 0
}

func (m *TowerGradeCfg) GetNpcId_02() int32 {
	if m != nil && m.NpcId_02 != nil {
		return *m.NpcId_02
	}
	return 0
}

func (m *TowerGradeCfg) GetNpcId_03() int32 {
	if m != nil && m.NpcId_03 != nil {
		return *m.NpcId_03
	}
	return 0
}

func (m *TowerGradeCfg) GetNpcId_04() int32 {
	if m != nil && m.NpcId_04 != nil {
		return *m.NpcId_04
	}
	return 0
}

func (m *TowerGradeCfg) GetReward_01() []*ItemVaryConfig {
	if m != nil {
		return m.Reward_01
	}
	return nil
}

func (m *TowerGradeCfg) GetReward_02() []*ItemVaryConfig {
	if m != nil {
		return m.Reward_02
	}
	return nil
}

func (m *TowerGradeCfg) GetReward_03() []*ItemVaryConfig {
	if m != nil {
		return m.Reward_03
	}
	return nil
}

func (m *TowerGradeCfg) GetReward_04() []*ItemVaryConfig {
	if m != nil {
		return m.Reward_04
	}
	return nil
}

// 爬塔成就表
type TowerAchieveCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ProgressParam    *int32            `protobuf:"varint,2,opt,name=progress_param" json:"progress_param,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TowerAchieveCfg) Reset()                    { *m = TowerAchieveCfg{} }
func (m *TowerAchieveCfg) String() string            { return proto.CompactTextString(m) }
func (*TowerAchieveCfg) ProtoMessage()               {}
func (*TowerAchieveCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{270} }

func (m *TowerAchieveCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TowerAchieveCfg) GetProgressParam() int32 {
	if m != nil && m.ProgressParam != nil {
		return *m.ProgressParam
	}
	return 0
}

func (m *TowerAchieveCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 爬塔全局表
type TowerGlobalCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuffId           *int32  `protobuf:"varint,2,opt,name=buff_id" json:"buff_id,omitempty"`
	Date_01          []int32 `protobuf:"varint,3,rep,name=date_01" json:"date_01,omitempty"`
	Date_02          []int32 `protobuf:"varint,4,rep,name=date_02" json:"date_02,omitempty"`
	Date_03          []int32 `protobuf:"varint,5,rep,name=date_03" json:"date_03,omitempty"`
	Date_04          []int32 `protobuf:"varint,6,rep,name=date_04" json:"date_04,omitempty"`
	Maxnum           *int32  `protobuf:"varint,7,opt,name=maxnum" json:"maxnum,omitempty"`
	RandomPlayer     *int32  `protobuf:"varint,8,opt,name=random_player" json:"random_player,omitempty"`
	CdTime           *int32  `protobuf:"varint,9,opt,name=cd_time" json:"cd_time,omitempty"`
	MaxOfflineTime   *int32  `protobuf:"varint,10,opt,name=max_offline_time" json:"max_offline_time,omitempty"`
	MaxLevel01       *int32  `protobuf:"varint,11,opt,name=max_level01" json:"max_level01,omitempty"`
	MaxLevel02       *int32  `protobuf:"varint,12,opt,name=max_level02" json:"max_level02,omitempty"`
	EastTeamList     []int32 `protobuf:"varint,13,rep,name=east_team_list" json:"east_team_list,omitempty"`
	WestTeamList     []int32 `protobuf:"varint,14,rep,name=west_team_list" json:"west_team_list,omitempty"`
	TopRaritys       []int32 `protobuf:"varint,15,rep,name=top_raritys" json:"top_raritys,omitempty"`
	RegularRaritys   []int32 `protobuf:"varint,16,rep,name=regular_raritys" json:"regular_raritys,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TowerGlobalCfg) Reset()                    { *m = TowerGlobalCfg{} }
func (m *TowerGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*TowerGlobalCfg) ProtoMessage()               {}
func (*TowerGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{271} }

func (m *TowerGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TowerGlobalCfg) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *TowerGlobalCfg) GetDate_01() []int32 {
	if m != nil {
		return m.Date_01
	}
	return nil
}

func (m *TowerGlobalCfg) GetDate_02() []int32 {
	if m != nil {
		return m.Date_02
	}
	return nil
}

func (m *TowerGlobalCfg) GetDate_03() []int32 {
	if m != nil {
		return m.Date_03
	}
	return nil
}

func (m *TowerGlobalCfg) GetDate_04() []int32 {
	if m != nil {
		return m.Date_04
	}
	return nil
}

func (m *TowerGlobalCfg) GetMaxnum() int32 {
	if m != nil && m.Maxnum != nil {
		return *m.Maxnum
	}
	return 0
}

func (m *TowerGlobalCfg) GetRandomPlayer() int32 {
	if m != nil && m.RandomPlayer != nil {
		return *m.RandomPlayer
	}
	return 0
}

func (m *TowerGlobalCfg) GetCdTime() int32 {
	if m != nil && m.CdTime != nil {
		return *m.CdTime
	}
	return 0
}

func (m *TowerGlobalCfg) GetMaxOfflineTime() int32 {
	if m != nil && m.MaxOfflineTime != nil {
		return *m.MaxOfflineTime
	}
	return 0
}

func (m *TowerGlobalCfg) GetMaxLevel01() int32 {
	if m != nil && m.MaxLevel01 != nil {
		return *m.MaxLevel01
	}
	return 0
}

func (m *TowerGlobalCfg) GetMaxLevel02() int32 {
	if m != nil && m.MaxLevel02 != nil {
		return *m.MaxLevel02
	}
	return 0
}

func (m *TowerGlobalCfg) GetEastTeamList() []int32 {
	if m != nil {
		return m.EastTeamList
	}
	return nil
}

func (m *TowerGlobalCfg) GetWestTeamList() []int32 {
	if m != nil {
		return m.WestTeamList
	}
	return nil
}

func (m *TowerGlobalCfg) GetTopRaritys() []int32 {
	if m != nil {
		return m.TopRaritys
	}
	return nil
}

func (m *TowerGlobalCfg) GetRegularRaritys() []int32 {
	if m != nil {
		return m.RegularRaritys
	}
	return nil
}

// 爬塔蓝球之巅配置
type TowerPeakCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NpcId_05         *int32            `protobuf:"varint,2,opt,name=npc_id_05" json:"npc_id_05,omitempty"`
	Reward_05        []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward_05" json:"reward_05,omitempty"`
	Score            *ItemVaryConfig   `protobuf:"bytes,4,opt,name=score" json:"score,omitempty"`
	DropId           *int32            `protobuf:"varint,5,opt,name=drop_id" json:"drop_id,omitempty"`
	LV               *int32            `protobuf:"varint,10,opt,name=LV" json:"LV,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TowerPeakCfg) Reset()                    { *m = TowerPeakCfg{} }
func (m *TowerPeakCfg) String() string            { return proto.CompactTextString(m) }
func (*TowerPeakCfg) ProtoMessage()               {}
func (*TowerPeakCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{272} }

func (m *TowerPeakCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TowerPeakCfg) GetNpcId_05() int32 {
	if m != nil && m.NpcId_05 != nil {
		return *m.NpcId_05
	}
	return 0
}

func (m *TowerPeakCfg) GetReward_05() []*ItemVaryConfig {
	if m != nil {
		return m.Reward_05
	}
	return nil
}

func (m *TowerPeakCfg) GetScore() *ItemVaryConfig {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *TowerPeakCfg) GetDropId() int32 {
	if m != nil && m.DropId != nil {
		return *m.DropId
	}
	return 0
}

func (m *TowerPeakCfg) GetLV() int32 {
	if m != nil && m.LV != nil {
		return *m.LV
	}
	return 0
}

// 运营活动-活动开启配置
type ActivityOpenList struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 活动开关[0关闭;1开启]
	IsOpen *int32 `protobuf:"varint,2,opt,name=is_open" json:"is_open,omitempty"`
	// 等级开关
	OpenLevel *int32 `protobuf:"varint,3,opt,name=open_level" json:"open_level,omitempty"`
	// 活动时间类型(enum ActivityTimeType)
	OpenType *int32 `protobuf:"varint,4,opt,name=open_type" json:"open_type,omitempty"`
	// 不同的open_type 该字段代表不同意思;(1服务器开启天数,持续天数)(2参数无效)(3X天)
	PersistTime []int32 `protobuf:"varint,5,rep,name=persist_time" json:"persist_time,omitempty"`
	// open_type为2时 开启时间2021050112
	OpenTime *string `protobuf:"bytes,6,opt,name=open_time" json:"open_time,omitempty"`
	// open_type为2时 结束时间
	EndTime *string `protobuf:"bytes,7,opt,name=end_time" json:"end_time,omitempty"`
	// 为1时，数据存储在运营活动格式 0:其他存储格式
	ActivityFlag *int32 `protobuf:"varint,8,opt,name=activity_flag" json:"activity_flag,omitempty"`
	// 活动名称
	ActivityName *string `protobuf:"bytes,9,opt,name=activity_name" json:"activity_name,omitempty"`
	// 是否gm后台需要
	IsBackstage *int32 `protobuf:"varint,10,opt,name=is_backstage" json:"is_backstage,omitempty"`
	// 分组类型
	GroupType        *int32 `protobuf:"varint,11,opt,name=group_type" json:"group_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityOpenList) Reset()                    { *m = ActivityOpenList{} }
func (m *ActivityOpenList) String() string            { return proto.CompactTextString(m) }
func (*ActivityOpenList) ProtoMessage()               {}
func (*ActivityOpenList) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{273} }

func (m *ActivityOpenList) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityOpenList) GetIsOpen() int32 {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return 0
}

func (m *ActivityOpenList) GetOpenLevel() int32 {
	if m != nil && m.OpenLevel != nil {
		return *m.OpenLevel
	}
	return 0
}

func (m *ActivityOpenList) GetOpenType() int32 {
	if m != nil && m.OpenType != nil {
		return *m.OpenType
	}
	return 0
}

func (m *ActivityOpenList) GetPersistTime() []int32 {
	if m != nil {
		return m.PersistTime
	}
	return nil
}

func (m *ActivityOpenList) GetOpenTime() string {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return ""
}

func (m *ActivityOpenList) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func (m *ActivityOpenList) GetActivityFlag() int32 {
	if m != nil && m.ActivityFlag != nil {
		return *m.ActivityFlag
	}
	return 0
}

func (m *ActivityOpenList) GetActivityName() string {
	if m != nil && m.ActivityName != nil {
		return *m.ActivityName
	}
	return ""
}

func (m *ActivityOpenList) GetIsBackstage() int32 {
	if m != nil && m.IsBackstage != nil {
		return *m.IsBackstage
	}
	return 0
}

func (m *ActivityOpenList) GetGroupType() int32 {
	if m != nil && m.GroupType != nil {
		return *m.GroupType
	}
	return 0
}

// 运营活动-每日体力领取 energy_receive.csv
type ActivityEveryDayEnergy struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	StartTime        *int32            `protobuf:"varint,3,opt,name=start_time" json:"start_time,omitempty"`
	EndTime          *int32            `protobuf:"varint,4,opt,name=end_time" json:"end_time,omitempty"`
	Cost             *ItemVaryConfig   `protobuf:"bytes,5,opt,name=cost" json:"cost,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityEveryDayEnergy) Reset()                    { *m = ActivityEveryDayEnergy{} }
func (m *ActivityEveryDayEnergy) String() string            { return proto.CompactTextString(m) }
func (*ActivityEveryDayEnergy) ProtoMessage()               {}
func (*ActivityEveryDayEnergy) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{274} }

func (m *ActivityEveryDayEnergy) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityEveryDayEnergy) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ActivityEveryDayEnergy) GetStartTime() int32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ActivityEveryDayEnergy) GetEndTime() int32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *ActivityEveryDayEnergy) GetCost() *ItemVaryConfig {
	if m != nil {
		return m.Cost
	}
	return nil
}

// 运营活动-升级有礼 gift_lv.csv
type ActivityLevelUp struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level            *int32            `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityLevelUp) Reset()                    { *m = ActivityLevelUp{} }
func (m *ActivityLevelUp) String() string            { return proto.CompactTextString(m) }
func (*ActivityLevelUp) ProtoMessage()               {}
func (*ActivityLevelUp) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{275} }

func (m *ActivityLevelUp) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityLevelUp) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ActivityLevelUp) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-七日签到 sign_loop_reward.csv
type ActivitySign struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 初始签到配置ID
	InitId *int32 `protobuf:"varint,2,opt,name=init_id" json:"init_id,omitempty"`
	// 循环配置ID
	ContinueId *int32 `protobuf:"varint,3,opt,name=continue_id" json:"continue_id,omitempty"`
	// 分组ID
	GroupId *int32 `protobuf:"varint,4,opt,name=group_id" json:"group_id,omitempty"`
	// 天数
	Day *int32 `protobuf:"varint,5,opt,name=day" json:"day,omitempty"`
	// 奖励组
	Reward           []*ItemVaryConfig `protobuf:"bytes,6,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivitySign) Reset()                    { *m = ActivitySign{} }
func (m *ActivitySign) String() string            { return proto.CompactTextString(m) }
func (*ActivitySign) ProtoMessage()               {}
func (*ActivitySign) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{276} }

func (m *ActivitySign) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivitySign) GetInitId() int32 {
	if m != nil && m.InitId != nil {
		return *m.InitId
	}
	return 0
}

func (m *ActivitySign) GetContinueId() int32 {
	if m != nil && m.ContinueId != nil {
		return *m.ContinueId
	}
	return 0
}

func (m *ActivitySign) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *ActivitySign) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *ActivitySign) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-七日目标 week_activity.csv
type ActivityWeek struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 第几周
	Week *int32 `protobuf:"varint,2,opt,name=week" json:"week,omitempty"`
	// 第几天
	Day *int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	// 任务ID列表
	TaskIDs []int32 `protobuf:"varint,4,rep,name=taskIDs" json:"taskIDs,omitempty"`
	// 每日奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,5,rep,name=reward" json:"reward,omitempty"`
	// 特惠商店商品
	Commodity []*ItemVaryConfig `protobuf:"bytes,6,rep,name=commodity" json:"commodity,omitempty"`
	// 限购次数
	BuyLimitCount []int32 `protobuf:"varint,7,rep,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	// 价格
	Prices []*ItemVaryConfig `protobuf:"bytes,8,rep,name=prices" json:"prices,omitempty"`
	// 直购商店商品
	Commodity1 []*ItemVaryConfig `protobuf:"bytes,9,rep,name=commodity1" json:"commodity1,omitempty"`
	// 直购商店限购次数
	BuyLimitCount1 []int32 `protobuf:"varint,10,rep,name=buyLimitCount1" json:"buyLimitCount1,omitempty"`
	// 直购商店价格（充值档位）
	Pay              []int32 `protobuf:"varint,11,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActivityWeek) Reset()                    { *m = ActivityWeek{} }
func (m *ActivityWeek) String() string            { return proto.CompactTextString(m) }
func (*ActivityWeek) ProtoMessage()               {}
func (*ActivityWeek) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{277} }

func (m *ActivityWeek) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityWeek) GetWeek() int32 {
	if m != nil && m.Week != nil {
		return *m.Week
	}
	return 0
}

func (m *ActivityWeek) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *ActivityWeek) GetTaskIDs() []int32 {
	if m != nil {
		return m.TaskIDs
	}
	return nil
}

func (m *ActivityWeek) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ActivityWeek) GetCommodity() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *ActivityWeek) GetBuyLimitCount() []int32 {
	if m != nil {
		return m.BuyLimitCount
	}
	return nil
}

func (m *ActivityWeek) GetPrices() []*ItemVaryConfig {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *ActivityWeek) GetCommodity1() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity1
	}
	return nil
}

func (m *ActivityWeek) GetBuyLimitCount1() []int32 {
	if m != nil {
		return m.BuyLimitCount1
	}
	return nil
}

func (m *ActivityWeek) GetPay() []int32 {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 运营活动-七日目标详情 week_activity_details.csv
type ActivityWeekDetails struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件ID
	ConditionID *int32 `protobuf:"varint,2,opt,name=conditionID" json:"conditionID,omitempty"`
	// 积分奖励
	Score *ItemVaryConfig `protobuf:"bytes,3,opt,name=score" json:"score,omitempty"`
	// 道具奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityWeekDetails) Reset()                    { *m = ActivityWeekDetails{} }
func (m *ActivityWeekDetails) String() string            { return proto.CompactTextString(m) }
func (*ActivityWeekDetails) ProtoMessage()               {}
func (*ActivityWeekDetails) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{278} }

func (m *ActivityWeekDetails) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityWeekDetails) GetConditionID() int32 {
	if m != nil && m.ConditionID != nil {
		return *m.ConditionID
	}
	return 0
}

func (m *ActivityWeekDetails) GetScore() *ItemVaryConfig {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *ActivityWeekDetails) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-七日目标全局 week_activity_global.csv
type ActivityWeekGlobal struct {
	// 第N周ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 积分道具
	Reward []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	// 道具兑换价格
	Price            []int32 `protobuf:"varint,3,rep,name=price" json:"price,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActivityWeekGlobal) Reset()                    { *m = ActivityWeekGlobal{} }
func (m *ActivityWeekGlobal) String() string            { return proto.CompactTextString(m) }
func (*ActivityWeekGlobal) ProtoMessage()               {}
func (*ActivityWeekGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{279} }

func (m *ActivityWeekGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityWeekGlobal) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ActivityWeekGlobal) GetPrice() []int32 {
	if m != nil {
		return m.Price
	}
	return nil
}

// 运营活动-首充礼包 TopUpFirst.csv
type ActivityTopUpFirst struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 领取天数
	Days *int32 `protobuf:"varint,2,opt,name=days" json:"days,omitempty"`
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	// 首充金额（分）
	Cost             *int32 `protobuf:"varint,4,opt,name=cost" json:"cost,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityTopUpFirst) Reset()                    { *m = ActivityTopUpFirst{} }
func (m *ActivityTopUpFirst) String() string            { return proto.CompactTextString(m) }
func (*ActivityTopUpFirst) ProtoMessage()               {}
func (*ActivityTopUpFirst) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{280} }

func (m *ActivityTopUpFirst) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityTopUpFirst) GetDays() int32 {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return 0
}

func (m *ActivityTopUpFirst) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ActivityTopUpFirst) GetCost() int32 {
	if m != nil && m.Cost != nil {
		return *m.Cost
	}
	return 0
}

// 运营活动-累充礼包(多档礼包) cumulative_deposit.csv
type ActivityCumulativeDeposit struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 累积充值金额 单位:分
	Rmb *int32 `protobuf:"varint,2,opt,name=rmb" json:"rmb,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityCumulativeDeposit) Reset()                    { *m = ActivityCumulativeDeposit{} }
func (m *ActivityCumulativeDeposit) String() string            { return proto.CompactTextString(m) }
func (*ActivityCumulativeDeposit) ProtoMessage()               {}
func (*ActivityCumulativeDeposit) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{281} }

func (m *ActivityCumulativeDeposit) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityCumulativeDeposit) GetRmb() int32 {
	if m != nil && m.Rmb != nil {
		return *m.Rmb
	}
	return 0
}

func (m *ActivityCumulativeDeposit) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-累充礼包(单礼包) accumulate_gift.csv
type ActivityAccumulateGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 累积充值金额 单位:分
	Rmb *int32 `protobuf:"varint,2,opt,name=rmb" json:"rmb,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityAccumulateGift) Reset()                    { *m = ActivityAccumulateGift{} }
func (m *ActivityAccumulateGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityAccumulateGift) ProtoMessage()               {}
func (*ActivityAccumulateGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{282} }

func (m *ActivityAccumulateGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityAccumulateGift) GetRmb() int32 {
	if m != nil && m.Rmb != nil {
		return *m.Rmb
	}
	return 0
}

func (m *ActivityAccumulateGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-在线礼包  onlinegift_list.csv
type ActivityOnlinegiftList struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityOnlinegiftList) Reset()                    { *m = ActivityOnlinegiftList{} }
func (m *ActivityOnlinegiftList) String() string            { return proto.CompactTextString(m) }
func (*ActivityOnlinegiftList) ProtoMessage()               {}
func (*ActivityOnlinegiftList) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{283} }

func (m *ActivityOnlinegiftList) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityOnlinegiftList) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-月卡 month_card.csv
type ActivityMonthCard struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 每日奖励
	DayReward []*ItemVaryConfig `protobuf:"bytes,2,rep,name=day_reward" json:"day_reward,omitempty"`
	// 购买奖励
	PayReward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=pay_reward" json:"pay_reward,omitempty"`
	// 有效天数
	Time             *int32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityMonthCard) Reset()                    { *m = ActivityMonthCard{} }
func (m *ActivityMonthCard) String() string            { return proto.CompactTextString(m) }
func (*ActivityMonthCard) ProtoMessage()               {}
func (*ActivityMonthCard) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{284} }

func (m *ActivityMonthCard) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityMonthCard) GetDayReward() []*ItemVaryConfig {
	if m != nil {
		return m.DayReward
	}
	return nil
}

func (m *ActivityMonthCard) GetPayReward() []*ItemVaryConfig {
	if m != nil {
		return m.PayReward
	}
	return nil
}

func (m *ActivityMonthCard) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 运营活动-基金1 fund_pay_reward.csv
type ActivityFundPay struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 基金类型id
	TypeId *int32 `protobuf:"varint,2,opt,name=type_id" json:"type_id,omitempty"`
	// 档位奖励领取条件
	Condition *TypeValueConfig `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
	// 档位奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	// 分组id
	GroupId          *int32 `protobuf:"varint,5,opt,name=group_id" json:"group_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityFundPay) Reset()                    { *m = ActivityFundPay{} }
func (m *ActivityFundPay) String() string            { return proto.CompactTextString(m) }
func (*ActivityFundPay) ProtoMessage()               {}
func (*ActivityFundPay) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{285} }

func (m *ActivityFundPay) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityFundPay) GetTypeId() int32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *ActivityFundPay) GetCondition() *TypeValueConfig {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ActivityFundPay) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ActivityFundPay) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

// 运营活动-基金2 fund_free_reward.csv
type ActivityFundFree struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 分组id
	GroupId *int32 `protobuf:"varint,2,opt,name=group_id" json:"group_id,omitempty"`
	// 档位奖励领取条件：购买该组基金人数
	Num *int32 `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	// 档位奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityFundFree) Reset()                    { *m = ActivityFundFree{} }
func (m *ActivityFundFree) String() string            { return proto.CompactTextString(m) }
func (*ActivityFundFree) ProtoMessage()               {}
func (*ActivityFundFree) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{286} }

func (m *ActivityFundFree) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityFundFree) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *ActivityFundFree) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *ActivityFundFree) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-招募有礼 recruit_gift
type ActivityRecruitGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 招募次数
	Level *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityRecruitGift) Reset()                    { *m = ActivityRecruitGift{} }
func (m *ActivityRecruitGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityRecruitGift) ProtoMessage()               {}
func (*ActivityRecruitGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{287} }

func (m *ActivityRecruitGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityRecruitGift) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ActivityRecruitGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-升星送礼 star_gift
type ActivityStarGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员id
	PlayerId *int32 `protobuf:"varint,2,opt,name=player_id" json:"player_id,omitempty"`
	// 球员星级
	Star *int32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityStarGift) Reset()                    { *m = ActivityStarGift{} }
func (m *ActivityStarGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityStarGift) ProtoMessage()               {}
func (*ActivityStarGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{288} }

func (m *ActivityStarGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityStarGift) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ActivityStarGift) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *ActivityStarGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-UR升星送礼 URstar_gift
type ActivityURStarGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员id
	PlayerId *int32 `protobuf:"varint,2,opt,name=player_id" json:"player_id,omitempty"`
	// 球员星级
	Star *int32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,4,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityURStarGift) Reset()                    { *m = ActivityURStarGift{} }
func (m *ActivityURStarGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityURStarGift) ProtoMessage()               {}
func (*ActivityURStarGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{289} }

func (m *ActivityURStarGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityURStarGift) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ActivityURStarGift) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *ActivityURStarGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-累消送礼 consume_gift
type ActivityConsumeGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 消费钻石
	DiamondNum *int32 `protobuf:"varint,2,opt,name=diamond_num" json:"diamond_num,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityConsumeGift) Reset()                    { *m = ActivityConsumeGift{} }
func (m *ActivityConsumeGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityConsumeGift) ProtoMessage()               {}
func (*ActivityConsumeGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{290} }

func (m *ActivityConsumeGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityConsumeGift) GetDiamondNum() int32 {
	if m != nil && m.DiamondNum != nil {
		return *m.DiamondNum
	}
	return 0
}

func (m *ActivityConsumeGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-连续充值礼包 Continuous_Gift
type ActivityContinuousGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 天数
	Day *int32 `protobuf:"varint,2,opt,name=day" json:"day,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityContinuousGift) Reset()                    { *m = ActivityContinuousGift{} }
func (m *ActivityContinuousGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityContinuousGift) ProtoMessage()               {}
func (*ActivityContinuousGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{291} }

func (m *ActivityContinuousGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityContinuousGift) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *ActivityContinuousGift) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 运营活动-新手礼包 newComer_Gift
type ActivityNewComerGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 限购次数
	BuyLimitCount *int32 `protobuf:"varint,2,opt,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	// 奖励
	Commodity []*ItemVaryConfig `protobuf:"bytes,3,rep,name=commodity" json:"commodity,omitempty"`
	// 商品价格（服务器用来作为判断是否免费的标记）
	Prices           *int32 `protobuf:"varint,4,opt,name=prices" json:"prices,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityNewComerGift) Reset()                    { *m = ActivityNewComerGift{} }
func (m *ActivityNewComerGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityNewComerGift) ProtoMessage()               {}
func (*ActivityNewComerGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{292} }

func (m *ActivityNewComerGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityNewComerGift) GetBuyLimitCount() int32 {
	if m != nil && m.BuyLimitCount != nil {
		return *m.BuyLimitCount
	}
	return 0
}

func (m *ActivityNewComerGift) GetCommodity() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *ActivityNewComerGift) GetPrices() int32 {
	if m != nil && m.Prices != nil {
		return *m.Prices
	}
	return 0
}

// 运营活动-限时特惠
type ActivityLimitDiscount struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 限购次数
	BuyLimitCount *int32 `protobuf:"varint,2,opt,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	// 奖励
	Commodity []*ItemVaryConfig `protobuf:"bytes,3,rep,name=commodity" json:"commodity,omitempty"`
	// 商品价格（服务器用来作为判断是否免费的标记）
	Prices           *int32 `protobuf:"varint,4,opt,name=prices" json:"prices,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityLimitDiscount) Reset()                    { *m = ActivityLimitDiscount{} }
func (m *ActivityLimitDiscount) String() string            { return proto.CompactTextString(m) }
func (*ActivityLimitDiscount) ProtoMessage()               {}
func (*ActivityLimitDiscount) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{293} }

func (m *ActivityLimitDiscount) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityLimitDiscount) GetBuyLimitCount() int32 {
	if m != nil && m.BuyLimitCount != nil {
		return *m.BuyLimitCount
	}
	return 0
}

func (m *ActivityLimitDiscount) GetCommodity() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *ActivityLimitDiscount) GetPrices() int32 {
	if m != nil && m.Prices != nil {
		return *m.Prices
	}
	return 0
}

// 运营活动-超值礼包 Preferential_gift
type ActivityPreferentialGift struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 类型（1：日类型 2：周类型 3：月类型）
	Type *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 限购次数
	BuyLimitCount *int32 `protobuf:"varint,3,opt,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	// 奖励
	Commodity []*ItemVaryConfig `protobuf:"bytes,4,rep,name=commodity" json:"commodity,omitempty"`
	// 商品价格（服务器用来作为判断是否免费的标记）
	Prices           *int32 `protobuf:"varint,5,opt,name=prices" json:"prices,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityPreferentialGift) Reset()                    { *m = ActivityPreferentialGift{} }
func (m *ActivityPreferentialGift) String() string            { return proto.CompactTextString(m) }
func (*ActivityPreferentialGift) ProtoMessage()               {}
func (*ActivityPreferentialGift) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{294} }

func (m *ActivityPreferentialGift) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityPreferentialGift) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ActivityPreferentialGift) GetBuyLimitCount() int32 {
	if m != nil && m.BuyLimitCount != nil {
		return *m.BuyLimitCount
	}
	return 0
}

func (m *ActivityPreferentialGift) GetCommodity() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *ActivityPreferentialGift) GetPrices() int32 {
	if m != nil && m.Prices != nil {
		return *m.Prices
	}
	return 0
}

// 运营活动-通行证日常礼包 passport_daily.csv
type PassportDailyConf struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件
	ConditionID *ItemVaryConfig `protobuf:"bytes,2,opt,name=conditionID" json:"conditionID,omitempty"`
	// 普通奖励内容
	Normalreward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=normalreward" json:"normalreward,omitempty"`
	// 高级奖励内容
	Advancedreward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=advancedreward" json:"advancedreward,omitempty"`
	// 替换索引
	ChangeIndex      *int32 `protobuf:"varint,5,opt,name=change_index" json:"change_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassportDailyConf) Reset()                    { *m = PassportDailyConf{} }
func (m *PassportDailyConf) String() string            { return proto.CompactTextString(m) }
func (*PassportDailyConf) ProtoMessage()               {}
func (*PassportDailyConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{295} }

func (m *PassportDailyConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PassportDailyConf) GetConditionID() *ItemVaryConfig {
	if m != nil {
		return m.ConditionID
	}
	return nil
}

func (m *PassportDailyConf) GetNormalreward() []*ItemVaryConfig {
	if m != nil {
		return m.Normalreward
	}
	return nil
}

func (m *PassportDailyConf) GetAdvancedreward() []*ItemVaryConfig {
	if m != nil {
		return m.Advancedreward
	}
	return nil
}

func (m *PassportDailyConf) GetChangeIndex() int32 {
	if m != nil && m.ChangeIndex != nil {
		return *m.ChangeIndex
	}
	return 0
}

// 运营活动-通行证巡演赛礼包 passport_battle.csv
type PassportBattleConf struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件
	ConditionID *ItemVaryConfig `protobuf:"bytes,2,opt,name=conditionID" json:"conditionID,omitempty"`
	// 普通奖励内容
	Normalreward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=normalreward" json:"normalreward,omitempty"`
	// 高级奖励内容
	Advancedreward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=advancedreward" json:"advancedreward,omitempty"`
	// 替换索引
	ChangeIndex      *int32 `protobuf:"varint,5,opt,name=change_index" json:"change_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassportBattleConf) Reset()                    { *m = PassportBattleConf{} }
func (m *PassportBattleConf) String() string            { return proto.CompactTextString(m) }
func (*PassportBattleConf) ProtoMessage()               {}
func (*PassportBattleConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{296} }

func (m *PassportBattleConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PassportBattleConf) GetConditionID() *ItemVaryConfig {
	if m != nil {
		return m.ConditionID
	}
	return nil
}

func (m *PassportBattleConf) GetNormalreward() []*ItemVaryConfig {
	if m != nil {
		return m.Normalreward
	}
	return nil
}

func (m *PassportBattleConf) GetAdvancedreward() []*ItemVaryConfig {
	if m != nil {
		return m.Advancedreward
	}
	return nil
}

func (m *PassportBattleConf) GetChangeIndex() int32 {
	if m != nil && m.ChangeIndex != nil {
		return *m.ChangeIndex
	}
	return 0
}

// 运营活动-通行证礼包 购买积分 passport_purchase.csv
type PassportPurchaseConf struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 通行证类型
	Passportid *int32 `protobuf:"varint,2,opt,name=passportid" json:"passportid,omitempty"`
	// 购买积分(A;B A参数积分; B:参数单价)可以叠加
	Cost []*ItemVaryConfig `protobuf:"bytes,3,rep,name=cost" json:"cost,omitempty"`
	// 可选球员池
	OptionPackage    []int32 `protobuf:"varint,4,rep,name=option_package" json:"option_package,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PassportPurchaseConf) Reset()                    { *m = PassportPurchaseConf{} }
func (m *PassportPurchaseConf) String() string            { return proto.CompactTextString(m) }
func (*PassportPurchaseConf) ProtoMessage()               {}
func (*PassportPurchaseConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{297} }

func (m *PassportPurchaseConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PassportPurchaseConf) GetPassportid() int32 {
	if m != nil && m.Passportid != nil {
		return *m.Passportid
	}
	return 0
}

func (m *PassportPurchaseConf) GetCost() []*ItemVaryConfig {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *PassportPurchaseConf) GetOptionPackage() []int32 {
	if m != nil {
		return m.OptionPackage
	}
	return nil
}

// 运营活动-通行证礼包 掉落礼包 passport_droplist.csv
type PassportDropListConf struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员id
	PlayerId *int32 `protobuf:"varint,2,opt,name=player_id" json:"player_id,omitempty"`
	// 索引
	Index *int32 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	// 可选球员池
	Reward           *ItemVaryConfig `protobuf:"bytes,4,opt,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PassportDropListConf) Reset()                    { *m = PassportDropListConf{} }
func (m *PassportDropListConf) String() string            { return proto.CompactTextString(m) }
func (*PassportDropListConf) ProtoMessage()               {}
func (*PassportDropListConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{298} }

func (m *PassportDropListConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PassportDropListConf) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PassportDropListConf) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *PassportDropListConf) GetReward() *ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 充值配置 purchase_list.csv
type Rechargeconf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 重置档位标识
	Level *string `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	// 价格,单位:分
	Cost *int32 `protobuf:"varint,3,opt,name=cost" json:"cost,omitempty"`
	// 类型id(1:购买钻石、2月卡、3基金)
	TypeId *int32 `protobuf:"varint,4,opt,name=type_id" json:"type_id,omitempty"`
	// 外键其他配置id
	ForeignKey *int32 `protobuf:"varint,5,opt,name=foreign_key" json:"foreign_key,omitempty"`
	// 渠道标识
	Channelconfig *string `protobuf:"bytes,6,opt,name=channelconfig" json:"channelconfig,omitempty"`
	// 畅游步骤号
	CyStepNum *string `protobuf:"bytes,7,opt,name=cy_step_num" json:"cy_step_num,omitempty"`
	// 是否游戏外部充值
	IsWithoutPayment *bool `protobuf:"varint,8,opt,name=Is_without_payment" json:"Is_without_payment,omitempty"`
	// 货币
	Currency *string `protobuf:"bytes,9,opt,name=currency" json:"currency,omitempty"`
	// 商品名
	Name *string `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	// 补偿金额
	Compensate *ItemVaryConfig `protobuf:"bytes,11,opt,name=compensate" json:"compensate,omitempty"`
	// 渠道id
	ChannelId *int32 `protobuf:"varint,12,opt,name=channel_id" json:"channel_id,omitempty"`
	// 美元价格
	UsPrice *float32 `protobuf:"fixed32,13,opt,name=us_price" json:"us_price,omitempty"`
	// 人民币
	Cost1 *int32 `protobuf:"varint,14,opt,name=cost1" json:"cost1,omitempty"`
	// 港币
	Cost2 *int32 `protobuf:"varint,15,opt,name=cost2" json:"cost2,omitempty"`
	// 美元
	Cost3            *int32 `protobuf:"varint,16,opt,name=cost3" json:"cost3,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Rechargeconf) Reset()                    { *m = Rechargeconf{} }
func (m *Rechargeconf) String() string            { return proto.CompactTextString(m) }
func (*Rechargeconf) ProtoMessage()               {}
func (*Rechargeconf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{299} }

func (m *Rechargeconf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Rechargeconf) GetLevel() string {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return ""
}

func (m *Rechargeconf) GetCost() int32 {
	if m != nil && m.Cost != nil {
		return *m.Cost
	}
	return 0
}

func (m *Rechargeconf) GetTypeId() int32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *Rechargeconf) GetForeignKey() int32 {
	if m != nil && m.ForeignKey != nil {
		return *m.ForeignKey
	}
	return 0
}

func (m *Rechargeconf) GetChannelconfig() string {
	if m != nil && m.Channelconfig != nil {
		return *m.Channelconfig
	}
	return ""
}

func (m *Rechargeconf) GetCyStepNum() string {
	if m != nil && m.CyStepNum != nil {
		return *m.CyStepNum
	}
	return ""
}

func (m *Rechargeconf) GetIsWithoutPayment() bool {
	if m != nil && m.IsWithoutPayment != nil {
		return *m.IsWithoutPayment
	}
	return false
}

func (m *Rechargeconf) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *Rechargeconf) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Rechargeconf) GetCompensate() *ItemVaryConfig {
	if m != nil {
		return m.Compensate
	}
	return nil
}

func (m *Rechargeconf) GetChannelId() int32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *Rechargeconf) GetUsPrice() float32 {
	if m != nil && m.UsPrice != nil {
		return *m.UsPrice
	}
	return 0
}

func (m *Rechargeconf) GetCost1() int32 {
	if m != nil && m.Cost1 != nil {
		return *m.Cost1
	}
	return 0
}

func (m *Rechargeconf) GetCost2() int32 {
	if m != nil && m.Cost2 != nil {
		return *m.Cost2
	}
	return 0
}

func (m *Rechargeconf) GetCost3() int32 {
	if m != nil && m.Cost3 != nil {
		return *m.Cost3
	}
	return 0
}

// 钻石充值配置 diamond_purchase.csv
type DiamondPurchaseConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 购买钻石数量
	Reward *int32 `protobuf:"varint,2,opt,name=reward" json:"reward,omitempty"`
	// 首充赠送
	Firstdiscount *int32 `protobuf:"varint,3,opt,name=firstdiscount" json:"firstdiscount,omitempty"`
	// 常驻赠送
	Normaldiscount   *int32 `protobuf:"varint,4,opt,name=normaldiscount" json:"normaldiscount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DiamondPurchaseConf) Reset()                    { *m = DiamondPurchaseConf{} }
func (m *DiamondPurchaseConf) String() string            { return proto.CompactTextString(m) }
func (*DiamondPurchaseConf) ProtoMessage()               {}
func (*DiamondPurchaseConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{300} }

func (m *DiamondPurchaseConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DiamondPurchaseConf) GetReward() int32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *DiamondPurchaseConf) GetFirstdiscount() int32 {
	if m != nil && m.Firstdiscount != nil {
		return *m.Firstdiscount
	}
	return 0
}

func (m *DiamondPurchaseConf) GetNormaldiscount() int32 {
	if m != nil && m.Normaldiscount != nil {
		return *m.Normaldiscount
	}
	return 0
}

// 购买工资帽 salary_list.csv
type BuySalaryConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 提升工资帽
	SalaryCap *int32 `protobuf:"varint,2,opt,name=SalaryCap" json:"SalaryCap,omitempty"`
	// 消耗钻石 道具不足扣钻石
	Consume2         *ItemVaryConfig `protobuf:"bytes,3,opt,name=consume2" json:"consume2,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *BuySalaryConf) Reset()                    { *m = BuySalaryConf{} }
func (m *BuySalaryConf) String() string            { return proto.CompactTextString(m) }
func (*BuySalaryConf) ProtoMessage()               {}
func (*BuySalaryConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{301} }

func (m *BuySalaryConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BuySalaryConf) GetSalaryCap() int32 {
	if m != nil && m.SalaryCap != nil {
		return *m.SalaryCap
	}
	return 0
}

func (m *BuySalaryConf) GetConsume2() *ItemVaryConfig {
	if m != nil {
		return m.Consume2
	}
	return nil
}

// 工资帽 超帽减属性配置 salary_cap_punish.csv
type SalaryAttributeDownConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 起始超帽 万分比
	Min *int64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
	// 最大超帽 万分比
	Max *int64 `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
	// 属性惩罚幅度 万分比
	Punishment *int32 `protobuf:"varint,4,opt,name=punishment" json:"punishment,omitempty"`
	// 战力衰减幅度 万分比
	Powerdown        *int32 `protobuf:"varint,5,opt,name=powerdown" json:"powerdown,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SalaryAttributeDownConf) Reset()                    { *m = SalaryAttributeDownConf{} }
func (m *SalaryAttributeDownConf) String() string            { return proto.CompactTextString(m) }
func (*SalaryAttributeDownConf) ProtoMessage()               {}
func (*SalaryAttributeDownConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{302} }

func (m *SalaryAttributeDownConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SalaryAttributeDownConf) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *SalaryAttributeDownConf) GetMax() int64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *SalaryAttributeDownConf) GetPunishment() int32 {
	if m != nil && m.Punishment != nil {
		return *m.Punishment
	}
	return 0
}

func (m *SalaryAttributeDownConf) GetPowerdown() int32 {
	if m != nil && m.Powerdown != nil {
		return *m.Powerdown
	}
	return 0
}

// 工资帽 超帽减属性类型配置 salary_overall_situation.csv
type SalaryOverallConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 超帽降低属性列表
	Attribute []int32 `protobuf:"varint,2,rep,name=attribute" json:"attribute,omitempty"`
	// 工资帽上限 1基础工资帽 2等级工资帽 3最佳阵容工资帽 4订阅工资帽
	SalaryUpperLimit []string `protobuf:"bytes,3,rep,name=Salary_upper_limit" json:"Salary_upper_limit,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SalaryOverallConf) Reset()                    { *m = SalaryOverallConf{} }
func (m *SalaryOverallConf) String() string            { return proto.CompactTextString(m) }
func (*SalaryOverallConf) ProtoMessage()               {}
func (*SalaryOverallConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{303} }

func (m *SalaryOverallConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SalaryOverallConf) GetAttribute() []int32 {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *SalaryOverallConf) GetSalaryUpperLimit() []string {
	if m != nil {
		return m.SalaryUpperLimit
	}
	return nil
}

// 天梯 段位配置 ladder_class.csv
type SkyLadderLevelConf struct {
	// 段位id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 升级段位所需积分
	Score *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	// 胜利增加积分
	WinAddScore *int32 `protobuf:"varint,3,opt,name=win_add_score" json:"win_add_score,omitempty"`
	// 失败扣除积分
	LoseReduceScore *int32 `protobuf:"varint,4,opt,name=lose_reduce_score" json:"lose_reduce_score,omitempty"`
	// 段位名称
	Name *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	// 段位达成奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,6,rep,name=reward" json:"reward,omitempty"`
	// 段位每日奖励
	EverydayReward   []*ItemVaryConfig `protobuf:"bytes,7,rep,name=everyday_reward" json:"everyday_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SkyLadderLevelConf) Reset()                    { *m = SkyLadderLevelConf{} }
func (m *SkyLadderLevelConf) String() string            { return proto.CompactTextString(m) }
func (*SkyLadderLevelConf) ProtoMessage()               {}
func (*SkyLadderLevelConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{304} }

func (m *SkyLadderLevelConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SkyLadderLevelConf) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *SkyLadderLevelConf) GetWinAddScore() int32 {
	if m != nil && m.WinAddScore != nil {
		return *m.WinAddScore
	}
	return 0
}

func (m *SkyLadderLevelConf) GetLoseReduceScore() int32 {
	if m != nil && m.LoseReduceScore != nil {
		return *m.LoseReduceScore
	}
	return 0
}

func (m *SkyLadderLevelConf) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SkyLadderLevelConf) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *SkyLadderLevelConf) GetEverydayReward() []*ItemVaryConfig {
	if m != nil {
		return m.EverydayReward
	}
	return nil
}

// 天梯 赛季奖励 ladder_ranking.csv
type SkyLadderMatchAwardConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 排名范围下限
	RankingFloor *int32 `protobuf:"varint,2,opt,name=ranking_floor" json:"ranking_floor,omitempty"`
	// 排名范围上限
	RankingToplimit *int32 `protobuf:"varint,3,opt,name=ranking_toplimit" json:"ranking_toplimit,omitempty"`
	// 挑战奖励
	ChanllengeReward []*ItemVaryConfig `protobuf:"bytes,4,rep,name=chanllenge_reward" json:"chanllenge_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SkyLadderMatchAwardConf) Reset()                    { *m = SkyLadderMatchAwardConf{} }
func (m *SkyLadderMatchAwardConf) String() string            { return proto.CompactTextString(m) }
func (*SkyLadderMatchAwardConf) ProtoMessage()               {}
func (*SkyLadderMatchAwardConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{305} }

func (m *SkyLadderMatchAwardConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SkyLadderMatchAwardConf) GetRankingFloor() int32 {
	if m != nil && m.RankingFloor != nil {
		return *m.RankingFloor
	}
	return 0
}

func (m *SkyLadderMatchAwardConf) GetRankingToplimit() int32 {
	if m != nil && m.RankingToplimit != nil {
		return *m.RankingToplimit
	}
	return 0
}

func (m *SkyLadderMatchAwardConf) GetChanllengeReward() []*ItemVaryConfig {
	if m != nil {
		return m.ChanllengeReward
	}
	return nil
}

// 天梯 参与奖励 ladder_participate.csv
type SkyLadderJoinAwardConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 挑战次数
	BattleTime *int32 `protobuf:"varint,2,opt,name=battle_time" json:"battle_time,omitempty"`
	// 挑战奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SkyLadderJoinAwardConf) Reset()                    { *m = SkyLadderJoinAwardConf{} }
func (m *SkyLadderJoinAwardConf) String() string            { return proto.CompactTextString(m) }
func (*SkyLadderJoinAwardConf) ProtoMessage()               {}
func (*SkyLadderJoinAwardConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{306} }

func (m *SkyLadderJoinAwardConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SkyLadderJoinAwardConf) GetBattleTime() int32 {
	if m != nil && m.BattleTime != nil {
		return *m.BattleTime
	}
	return 0
}

func (m *SkyLadderJoinAwardConf) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 天梯 全局配置 ladder_gloabl.csv
type SkyLadderGlobalConf struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 赛季时间(天)
	MaxDays *int32 `protobuf:"varint,2,opt,name=max_days" json:"max_days,omitempty"`
	// 双倍胜利点时间段
	DoubleTime *string `protobuf:"bytes,3,opt,name=double_time" json:"double_time,omitempty"`
	// 初始免费次数
	InitTime *int32 `protobuf:"varint,4,opt,name=init_time" json:"init_time,omitempty"`
	// 购买挑战次数消耗
	BuyTimeUse []*ItemVaryConfig `protobuf:"bytes,5,rep,name=buy_time_use" json:"buy_time_use,omitempty"`
	// 段位保底
	BeginId *int32 `protobuf:"varint,6,opt,name=begin_id" json:"begin_id,omitempty"`
	// 每日段位奖励邮件最大离线数量
	Mail *int32 `protobuf:"varint,7,opt,name=mail" json:"mail,omitempty"`
	// 匹配时间 单位秒
	MatchTime        *int32 `protobuf:"varint,8,opt,name=match_time" json:"match_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SkyLadderGlobalConf) Reset()                    { *m = SkyLadderGlobalConf{} }
func (m *SkyLadderGlobalConf) String() string            { return proto.CompactTextString(m) }
func (*SkyLadderGlobalConf) ProtoMessage()               {}
func (*SkyLadderGlobalConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{307} }

func (m *SkyLadderGlobalConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SkyLadderGlobalConf) GetMaxDays() int32 {
	if m != nil && m.MaxDays != nil {
		return *m.MaxDays
	}
	return 0
}

func (m *SkyLadderGlobalConf) GetDoubleTime() string {
	if m != nil && m.DoubleTime != nil {
		return *m.DoubleTime
	}
	return ""
}

func (m *SkyLadderGlobalConf) GetInitTime() int32 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

func (m *SkyLadderGlobalConf) GetBuyTimeUse() []*ItemVaryConfig {
	if m != nil {
		return m.BuyTimeUse
	}
	return nil
}

func (m *SkyLadderGlobalConf) GetBeginId() int32 {
	if m != nil && m.BeginId != nil {
		return *m.BeginId
	}
	return 0
}

func (m *SkyLadderGlobalConf) GetMail() int32 {
	if m != nil && m.Mail != nil {
		return *m.Mail
	}
	return 0
}

func (m *SkyLadderGlobalConf) GetMatchTime() int32 {
	if m != nil && m.MatchTime != nil {
		return *m.MatchTime
	}
	return 0
}

// 订阅特权 subscription.csv
type PrivilegeConf struct {
	// 订阅特权ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 参数
	Param1           *int32 `protobuf:"varint,2,opt,name=param1" json:"param1,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PrivilegeConf) Reset()                    { *m = PrivilegeConf{} }
func (m *PrivilegeConf) String() string            { return proto.CompactTextString(m) }
func (*PrivilegeConf) ProtoMessage()               {}
func (*PrivilegeConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{308} }

func (m *PrivilegeConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PrivilegeConf) GetParam1() int32 {
	if m != nil && m.Param1 != nil {
		return *m.Param1
	}
	return 0
}

// 订阅特权 月卡配置 membership_dues.csv
type PrivilegeMonthCardConf struct {
	// 订阅特权ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 会费购买方式(1手动 2自动)
	Type *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	// 价格
	Price *int32 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	// 工资帽
	Salary *int32 `protobuf:"varint,4,opt,name=salary" json:"salary,omitempty"`
	// 生效持续时间(天)
	Days *int32 `protobuf:"varint,5,opt,name=days" json:"days,omitempty"`
	// 每日奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,6,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PrivilegeMonthCardConf) Reset()                    { *m = PrivilegeMonthCardConf{} }
func (m *PrivilegeMonthCardConf) String() string            { return proto.CompactTextString(m) }
func (*PrivilegeMonthCardConf) ProtoMessage()               {}
func (*PrivilegeMonthCardConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{309} }

func (m *PrivilegeMonthCardConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PrivilegeMonthCardConf) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PrivilegeMonthCardConf) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *PrivilegeMonthCardConf) GetSalary() int32 {
	if m != nil && m.Salary != nil {
		return *m.Salary
	}
	return 0
}

func (m *PrivilegeMonthCardConf) GetDays() int32 {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return 0
}

func (m *PrivilegeMonthCardConf) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 资源找回配置
type RansomConfig struct {
	// 功能枚举id = ransomType
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 单次消耗钻石的数量
	Consume *int32 `protobuf:"varint,2,opt,name=consume" json:"consume,omitempty"`
	// 转换率
	Rate             *int32 `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RansomConfig) Reset()                    { *m = RansomConfig{} }
func (m *RansomConfig) String() string            { return proto.CompactTextString(m) }
func (*RansomConfig) ProtoMessage()               {}
func (*RansomConfig) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{310} }

func (m *RansomConfig) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RansomConfig) GetConsume() int32 {
	if m != nil && m.Consume != nil {
		return *m.Consume
	}
	return 0
}

func (m *RansomConfig) GetRate() int32 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

// 资源找回全局配置
type RansomGlobal struct {
	// 全局id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 最大找回天数
	MaxDay *int32 `protobuf:"varint,2,opt,name=max_day" json:"max_day,omitempty"`
	// 免费找回奖励系数
	FreeCoef *int32 `protobuf:"varint,3,opt,name=free_coef" json:"free_coef,omitempty"`
	// 付费找回奖励系数
	PayCoef          *int32 `protobuf:"varint,4,opt,name=pay_coef" json:"pay_coef,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RansomGlobal) Reset()                    { *m = RansomGlobal{} }
func (m *RansomGlobal) String() string            { return proto.CompactTextString(m) }
func (*RansomGlobal) ProtoMessage()               {}
func (*RansomGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{311} }

func (m *RansomGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RansomGlobal) GetMaxDay() int32 {
	if m != nil && m.MaxDay != nil {
		return *m.MaxDay
	}
	return 0
}

func (m *RansomGlobal) GetFreeCoef() int32 {
	if m != nil && m.FreeCoef != nil {
		return *m.FreeCoef
	}
	return 0
}

func (m *RansomGlobal) GetPayCoef() int32 {
	if m != nil && m.PayCoef != nil {
		return *m.PayCoef
	}
	return 0
}

// 限时礼包配置
type LimitBugGiftConf struct {
	// 礼包id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件ID
	ConditionID *int32 `protobuf:"varint,2,opt,name=conditionID" json:"conditionID,omitempty"`
	// 奖励内容
	Reward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	// 充值订单ID
	RechargeOrderId *int32 `protobuf:"varint,4,opt,name=recharge_order_id" json:"recharge_order_id,omitempty"`
	// 持续时间
	Time             *int32 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LimitBugGiftConf) Reset()                    { *m = LimitBugGiftConf{} }
func (m *LimitBugGiftConf) String() string            { return proto.CompactTextString(m) }
func (*LimitBugGiftConf) ProtoMessage()               {}
func (*LimitBugGiftConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{312} }

func (m *LimitBugGiftConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LimitBugGiftConf) GetConditionID() int32 {
	if m != nil && m.ConditionID != nil {
		return *m.ConditionID
	}
	return 0
}

func (m *LimitBugGiftConf) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *LimitBugGiftConf) GetRechargeOrderId() int32 {
	if m != nil && m.RechargeOrderId != nil {
		return *m.RechargeOrderId
	}
	return 0
}

func (m *LimitBugGiftConf) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 自定义球员-属性成长配置
type CustomizeAttrConf struct {
	// 序号
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员位置
	Position *int32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	// 评级
	Rarity *int32 `protobuf:"varint,3,opt,name=rarity" json:"rarity,omitempty"`
	// 球员成长ID
	GrowUp *int32 `protobuf:"varint,4,opt,name=grow_up" json:"grow_up,omitempty"`
	// 球员工资
	Salary *int32 `protobuf:"varint,5,opt,name=salary" json:"salary,omitempty"`
	// 升级配置
	LvGroup *int32 `protobuf:"varint,6,opt,name=lv_group" json:"lv_group,omitempty"`
	// 升阶配置
	SlotGroup *int32 `protobuf:"varint,7,opt,name=slot_group" json:"slot_group,omitempty"`
	// 升阶天赋配置
	TalentGroup      *int32 `protobuf:"varint,8,opt,name=talent_group" json:"talent_group,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CustomizeAttrConf) Reset()                    { *m = CustomizeAttrConf{} }
func (m *CustomizeAttrConf) String() string            { return proto.CompactTextString(m) }
func (*CustomizeAttrConf) ProtoMessage()               {}
func (*CustomizeAttrConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{313} }

func (m *CustomizeAttrConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomizeAttrConf) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *CustomizeAttrConf) GetRarity() int32 {
	if m != nil && m.Rarity != nil {
		return *m.Rarity
	}
	return 0
}

func (m *CustomizeAttrConf) GetGrowUp() int32 {
	if m != nil && m.GrowUp != nil {
		return *m.GrowUp
	}
	return 0
}

func (m *CustomizeAttrConf) GetSalary() int32 {
	if m != nil && m.Salary != nil {
		return *m.Salary
	}
	return 0
}

func (m *CustomizeAttrConf) GetLvGroup() int32 {
	if m != nil && m.LvGroup != nil {
		return *m.LvGroup
	}
	return 0
}

func (m *CustomizeAttrConf) GetSlotGroup() int32 {
	if m != nil && m.SlotGroup != nil {
		return *m.SlotGroup
	}
	return 0
}

func (m *CustomizeAttrConf) GetTalentGroup() int32 {
	if m != nil && m.TalentGroup != nil {
		return *m.TalentGroup
	}
	return 0
}

// 自定义球员-基础配置
type CustomizeBaseConf struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 可选皮肤
	// repeated int32 skin = 2;
	// 可选头像
	Portrait []int32 `protobuf:"varint,3,rep,name=portrait" json:"portrait,omitempty"`
	// 可选体型
	Body []int32 `protobuf:"varint,4,rep,name=body" json:"body,omitempty"`
	// 升星碎片
	PlayerPieceItem *int32 `protobuf:"varint,5,opt,name=player_piece_item" json:"player_piece_item,omitempty"`
	// 球员升星配置编号
	StarGroup        *int32 `protobuf:"varint,6,opt,name=star_group" json:"star_group,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CustomizeBaseConf) Reset()                    { *m = CustomizeBaseConf{} }
func (m *CustomizeBaseConf) String() string            { return proto.CompactTextString(m) }
func (*CustomizeBaseConf) ProtoMessage()               {}
func (*CustomizeBaseConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{314} }

func (m *CustomizeBaseConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomizeBaseConf) GetPortrait() []int32 {
	if m != nil {
		return m.Portrait
	}
	return nil
}

func (m *CustomizeBaseConf) GetBody() []int32 {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *CustomizeBaseConf) GetPlayerPieceItem() int32 {
	if m != nil && m.PlayerPieceItem != nil {
		return *m.PlayerPieceItem
	}
	return 0
}

func (m *CustomizeBaseConf) GetStarGroup() int32 {
	if m != nil && m.StarGroup != nil {
		return *m.StarGroup
	}
	return 0
}

// 自定义球员-位置配置
type CustomizePosConf struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 可选球员位置
	Position *int32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	// 可选体型
	Body []int32 `protobuf:"varint,3,rep,name=body" json:"body,omitempty"`
	// 可选1号技能ID
	Skill1 []int32 `protobuf:"varint,4,rep,name=skill1" json:"skill1,omitempty"`
	// 可选2号技能ID
	Skill2 []int32 `protobuf:"varint,5,rep,name=skill2" json:"skill2,omitempty"`
	// 可选3号技能ID
	Skill3 []int32 `protobuf:"varint,6,rep,name=skill3" json:"skill3,omitempty"`
	// 可选专属技能1
	Skill4 []int32 `protobuf:"varint,7,rep,name=skill4" json:"skill4,omitempty"`
	// 达到指定评级可选专属技能1
	Quality *int32 `protobuf:"varint,8,opt,name=quality" json:"quality,omitempty"`
	// 专属时刻触发配置
	ExclusiveTrig *int32 `protobuf:"varint,9,opt,name=exclusive_trig" json:"exclusive_trig,omitempty"`
	// 羁绊配置 羁绊组合ID
	Fetters []int32 `protobuf:"varint,10,rep,name=fetters" json:"fetters,omitempty"`
	// 可选专属技能2
	Skill5 []int32 `protobuf:"varint,11,rep,name=skill5" json:"skill5,omitempty"`
	// 达到指定评级可选专属技能2
	Quality2 *int32 `protobuf:"varint,12,opt,name=quality2" json:"quality2,omitempty"`
	// 可选专属技能3
	Skill6 []int32 `protobuf:"varint,13,rep,name=skill6" json:"skill6,omitempty"`
	// 达到指定评级可选专属技能3
	Quality3         *int32 `protobuf:"varint,14,opt,name=quality3" json:"quality3,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CustomizePosConf) Reset()                    { *m = CustomizePosConf{} }
func (m *CustomizePosConf) String() string            { return proto.CompactTextString(m) }
func (*CustomizePosConf) ProtoMessage()               {}
func (*CustomizePosConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{315} }

func (m *CustomizePosConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomizePosConf) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *CustomizePosConf) GetBody() []int32 {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *CustomizePosConf) GetSkill1() []int32 {
	if m != nil {
		return m.Skill1
	}
	return nil
}

func (m *CustomizePosConf) GetSkill2() []int32 {
	if m != nil {
		return m.Skill2
	}
	return nil
}

func (m *CustomizePosConf) GetSkill3() []int32 {
	if m != nil {
		return m.Skill3
	}
	return nil
}

func (m *CustomizePosConf) GetSkill4() []int32 {
	if m != nil {
		return m.Skill4
	}
	return nil
}

func (m *CustomizePosConf) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *CustomizePosConf) GetExclusiveTrig() int32 {
	if m != nil && m.ExclusiveTrig != nil {
		return *m.ExclusiveTrig
	}
	return 0
}

func (m *CustomizePosConf) GetFetters() []int32 {
	if m != nil {
		return m.Fetters
	}
	return nil
}

func (m *CustomizePosConf) GetSkill5() []int32 {
	if m != nil {
		return m.Skill5
	}
	return nil
}

func (m *CustomizePosConf) GetQuality2() int32 {
	if m != nil && m.Quality2 != nil {
		return *m.Quality2
	}
	return 0
}

func (m *CustomizePosConf) GetSkill6() []int32 {
	if m != nil {
		return m.Skill6
	}
	return nil
}

func (m *CustomizePosConf) GetQuality3() int32 {
	if m != nil && m.Quality3 != nil {
		return *m.Quality3
	}
	return 0
}

// 自定义球员-星级配置
type CustomizeStarConf struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员星级
	Star *int32 `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	// 球员评级
	Rarity           *int32 `protobuf:"varint,3,opt,name=rarity" json:"rarity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CustomizeStarConf) Reset()                    { *m = CustomizeStarConf{} }
func (m *CustomizeStarConf) String() string            { return proto.CompactTextString(m) }
func (*CustomizeStarConf) ProtoMessage()               {}
func (*CustomizeStarConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{316} }

func (m *CustomizeStarConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomizeStarConf) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *CustomizeStarConf) GetRarity() int32 {
	if m != nil && m.Rarity != nil {
		return *m.Rarity
	}
	return 0
}

// 功能版本开关
type VersionFunctionSwitchConf struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 工资帽
	SalaryCap        *bool  `protobuf:"varint,2,opt,name=salary_cap" json:"salary_cap,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *VersionFunctionSwitchConf) Reset()                    { *m = VersionFunctionSwitchConf{} }
func (m *VersionFunctionSwitchConf) String() string            { return proto.CompactTextString(m) }
func (*VersionFunctionSwitchConf) ProtoMessage()               {}
func (*VersionFunctionSwitchConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{317} }

func (m *VersionFunctionSwitchConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VersionFunctionSwitchConf) GetSalaryCap() bool {
	if m != nil && m.SalaryCap != nil {
		return *m.SalaryCap
	}
	return false
}

// 自定义球员-羁绊配置
type CustomizeFettersConf struct {
	// 配置ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 羁绊组合ID
	FettersId *int32 `protobuf:"varint,2,opt,name=fetters_id" json:"fetters_id,omitempty"`
	// 羁绊等级
	FettersLv *int32 `protobuf:"varint,3,opt,name=fetters_lv" json:"fetters_lv,omitempty"`
	// 是否达到最大等级
	DoLvMax *int32 `protobuf:"varint,4,opt,name=do_lv_max" json:"do_lv_max,omitempty"`
	// 羁绊激活或升级条件
	Conditions *int32 `protobuf:"varint,5,opt,name=conditions" json:"conditions,omitempty"`
	// 属性加成
	FightAttr        []*PlayerAttrValue `protobuf:"bytes,6,rep,name=fight_attr" json:"fight_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CustomizeFettersConf) Reset()                    { *m = CustomizeFettersConf{} }
func (m *CustomizeFettersConf) String() string            { return proto.CompactTextString(m) }
func (*CustomizeFettersConf) ProtoMessage()               {}
func (*CustomizeFettersConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{318} }

func (m *CustomizeFettersConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomizeFettersConf) GetFettersId() int32 {
	if m != nil && m.FettersId != nil {
		return *m.FettersId
	}
	return 0
}

func (m *CustomizeFettersConf) GetFettersLv() int32 {
	if m != nil && m.FettersLv != nil {
		return *m.FettersLv
	}
	return 0
}

func (m *CustomizeFettersConf) GetDoLvMax() int32 {
	if m != nil && m.DoLvMax != nil {
		return *m.DoLvMax
	}
	return 0
}

func (m *CustomizeFettersConf) GetConditions() int32 {
	if m != nil && m.Conditions != nil {
		return *m.Conditions
	}
	return 0
}

func (m *CustomizeFettersConf) GetFightAttr() []*PlayerAttrValue {
	if m != nil {
		return m.FightAttr
	}
	return nil
}

// 活动全局配置
type ActivityGlobalConf struct {
	// 配置ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 月卡剩余天数（大于此配置则不可续购）
	MonthCardSurplusDay *int32 `protobuf:"varint,2,opt,name=month_card_surplus_day" json:"month_card_surplus_day,omitempty"`
	// 月卡发邮件天数
	MonthCardSendMailDays []int32 `protobuf:"varint,3,rep,name=month_card_send_mail_days" json:"month_card_send_mail_days,omitempty"`
	// 订阅特权(教练协会)剩余天数（大于此配置则不可续购）
	PrivilegeSurplusDay *int32 `protobuf:"varint,4,opt,name=privilege_surplus_day" json:"privilege_surplus_day,omitempty"`
	// 教练协会发邮件天数
	PrivilegeSendMailDays []int32 `protobuf:"varint,5,rep,name=privilege_send_mail_days" json:"privilege_send_mail_days,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *ActivityGlobalConf) Reset()                    { *m = ActivityGlobalConf{} }
func (m *ActivityGlobalConf) String() string            { return proto.CompactTextString(m) }
func (*ActivityGlobalConf) ProtoMessage()               {}
func (*ActivityGlobalConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{319} }

func (m *ActivityGlobalConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityGlobalConf) GetMonthCardSurplusDay() int32 {
	if m != nil && m.MonthCardSurplusDay != nil {
		return *m.MonthCardSurplusDay
	}
	return 0
}

func (m *ActivityGlobalConf) GetMonthCardSendMailDays() []int32 {
	if m != nil {
		return m.MonthCardSendMailDays
	}
	return nil
}

func (m *ActivityGlobalConf) GetPrivilegeSurplusDay() int32 {
	if m != nil && m.PrivilegeSurplusDay != nil {
		return *m.PrivilegeSurplusDay
	}
	return 0
}

func (m *ActivityGlobalConf) GetPrivilegeSendMailDays() []int32 {
	if m != nil {
		return m.PrivilegeSendMailDays
	}
	return nil
}

// 自定义球员-任务配置
type CustomizeTaskConf struct {
	// 序号
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 玩法条件id
	ConditionId *int32 `protobuf:"varint,2,opt,name=condition_id" json:"condition_id,omitempty"`
	// 任务奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	// 任务开启条件（大星级）
	Open             *int32 `protobuf:"varint,4,opt,name=open" json:"open,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CustomizeTaskConf) Reset()                    { *m = CustomizeTaskConf{} }
func (m *CustomizeTaskConf) String() string            { return proto.CompactTextString(m) }
func (*CustomizeTaskConf) ProtoMessage()               {}
func (*CustomizeTaskConf) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{320} }

func (m *CustomizeTaskConf) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomizeTaskConf) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *CustomizeTaskConf) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *CustomizeTaskConf) GetOpen() int32 {
	if m != nil && m.Open != nil {
		return *m.Open
	}
	return 0
}

// 小游戏 看图识人
type LittleGameSeePictureCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 答题时间(秒)
	Time *int32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// 题目ID列表
	Questions []int32 `protobuf:"varint,3,rep,name=questions" json:"questions,omitempty"`
	// 挑战奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,4,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LittleGameSeePictureCfg) Reset()                    { *m = LittleGameSeePictureCfg{} }
func (m *LittleGameSeePictureCfg) String() string            { return proto.CompactTextString(m) }
func (*LittleGameSeePictureCfg) ProtoMessage()               {}
func (*LittleGameSeePictureCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{321} }

func (m *LittleGameSeePictureCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LittleGameSeePictureCfg) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *LittleGameSeePictureCfg) GetQuestions() []int32 {
	if m != nil {
		return m.Questions
	}
	return nil
}

func (m *LittleGameSeePictureCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 小游戏-翻牌
type LittleGameCardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 答题时间(秒)
	Time *int32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// 最大翻牌步数
	Step *int32 `protobuf:"varint,3,opt,name=step" json:"step,omitempty"`
	// 挑战奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,4,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LittleGameCardCfg) Reset()                    { *m = LittleGameCardCfg{} }
func (m *LittleGameCardCfg) String() string            { return proto.CompactTextString(m) }
func (*LittleGameCardCfg) ProtoMessage()               {}
func (*LittleGameCardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{322} }

func (m *LittleGameCardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LittleGameCardCfg) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *LittleGameCardCfg) GetStep() int32 {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return 0
}

func (m *LittleGameCardCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 小型杯赛
type LittleCupCfg struct {
	// 挑战名次
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 基础奖励
	Rewards []*ItemVaryConfig `protobuf:"bytes,2,rep,name=rewards" json:"rewards,omitempty"`
	// 胜利积分
	Score *ItemVaryConfig `protobuf:"bytes,3,opt,name=score" json:"score,omitempty"`
	// 名字描述
	Desc             *string `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LittleCupCfg) Reset()                    { *m = LittleCupCfg{} }
func (m *LittleCupCfg) String() string            { return proto.CompactTextString(m) }
func (*LittleCupCfg) ProtoMessage()               {}
func (*LittleCupCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{323} }

func (m *LittleCupCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LittleCupCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LittleCupCfg) GetScore() *ItemVaryConfig {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *LittleCupCfg) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

// 小型杯赛全局配置
type LittleCupGlobal struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 报名开始时间(小时;分钟)
	SignTimeBegin []int32 `protobuf:"varint,2,rep,name=sign_time_begin" json:"sign_time_begin,omitempty"`
	// 报名结束时间(小时;分钟;秒)
	SignTimeEnd []int32 `protobuf:"varint,3,rep,name=sign_time_end" json:"sign_time_end,omitempty"`
	// 报名列表最大人数
	PlayerNum *int32 `protobuf:"varint,4,opt,name=player_num" json:"player_num,omitempty"`
	// 排行榜最大人数
	RankNum *int32 `protobuf:"varint,5,opt,name=rank_num" json:"rank_num,omitempty"`
	// 下一场比赛间隔时间（秒）
	NextMatchTime *int32 `protobuf:"varint,6,opt,name=next_match_time" json:"next_match_time,omitempty"`
	// 每日最大参与次数
	Num *int32 `protobuf:"varint,7,opt,name=num" json:"num,omitempty"`
	// 报名后首次机器人添加间隔（秒）
	FirstNpcTime *int32 `protobuf:"varint,8,opt,name=first_npc_time" json:"first_npc_time,omitempty"`
	// 后续机器人添加间隔（秒）
	FollowNpcTime    *int32 `protobuf:"varint,9,opt,name=follow_npc_time" json:"follow_npc_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LittleCupGlobal) Reset()                    { *m = LittleCupGlobal{} }
func (m *LittleCupGlobal) String() string            { return proto.CompactTextString(m) }
func (*LittleCupGlobal) ProtoMessage()               {}
func (*LittleCupGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{324} }

func (m *LittleCupGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LittleCupGlobal) GetSignTimeBegin() []int32 {
	if m != nil {
		return m.SignTimeBegin
	}
	return nil
}

func (m *LittleCupGlobal) GetSignTimeEnd() []int32 {
	if m != nil {
		return m.SignTimeEnd
	}
	return nil
}

func (m *LittleCupGlobal) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *LittleCupGlobal) GetRankNum() int32 {
	if m != nil && m.RankNum != nil {
		return *m.RankNum
	}
	return 0
}

func (m *LittleCupGlobal) GetNextMatchTime() int32 {
	if m != nil && m.NextMatchTime != nil {
		return *m.NextMatchTime
	}
	return 0
}

func (m *LittleCupGlobal) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *LittleCupGlobal) GetFirstNpcTime() int32 {
	if m != nil && m.FirstNpcTime != nil {
		return *m.FirstNpcTime
	}
	return 0
}

func (m *LittleCupGlobal) GetFollowNpcTime() int32 {
	if m != nil && m.FollowNpcTime != nil {
		return *m.FollowNpcTime
	}
	return 0
}

type LittleCupNpc struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 等级下限
	MinLevel *int32 `protobuf:"varint,2,opt,name=MinLevel" json:"MinLevel,omitempty"`
	// 等级上限
	MaxLevel *int32 `protobuf:"varint,3,opt,name=MaxLevel" json:"MaxLevel,omitempty"`
	// 机器人库
	Robots           []int32 `protobuf:"varint,4,rep,name=robots" json:"robots,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LittleCupNpc) Reset()                    { *m = LittleCupNpc{} }
func (m *LittleCupNpc) String() string            { return proto.CompactTextString(m) }
func (*LittleCupNpc) ProtoMessage()               {}
func (*LittleCupNpc) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{325} }

func (m *LittleCupNpc) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LittleCupNpc) GetMinLevel() int32 {
	if m != nil && m.MinLevel != nil {
		return *m.MinLevel
	}
	return 0
}

func (m *LittleCupNpc) GetMaxLevel() int32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

func (m *LittleCupNpc) GetRobots() []int32 {
	if m != nil {
		return m.Robots
	}
	return nil
}

// 球鞋活动
type ActivityShoesGlobal struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 抽奖需要的5张卡片
	NeedItem []*ItemVaryConfig `protobuf:"bytes,2,rep,name=need_item" json:"need_item,omitempty"`
	// 大奖概率（万分比）
	TopPrizeA *int32 `protobuf:"varint,3,opt,name=top_prize_a" json:"top_prize_a,omitempty"`
	// 小奖保底次数
	SmallPrizeB *int32 `protobuf:"varint,4,opt,name=small_prize_b" json:"small_prize_b,omitempty"`
	// 单位限制时间
	LimitT *int32 `protobuf:"varint,5,opt,name=limit_t" json:"limit_t,omitempty"`
	// 小奖掉落集合A
	DropA *int32 `protobuf:"varint,6,opt,name=drop_a" json:"drop_a,omitempty"`
	// 小奖掉落保底集合B
	DropB *int32 `protobuf:"varint,7,opt,name=drop_b" json:"drop_b,omitempty"`
	// 每日限购次数
	ChargeTimes      *int32 `protobuf:"varint,8,opt,name=charge_times" json:"charge_times,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityShoesGlobal) Reset()                    { *m = ActivityShoesGlobal{} }
func (m *ActivityShoesGlobal) String() string            { return proto.CompactTextString(m) }
func (*ActivityShoesGlobal) ProtoMessage()               {}
func (*ActivityShoesGlobal) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{326} }

func (m *ActivityShoesGlobal) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityShoesGlobal) GetNeedItem() []*ItemVaryConfig {
	if m != nil {
		return m.NeedItem
	}
	return nil
}

func (m *ActivityShoesGlobal) GetTopPrizeA() int32 {
	if m != nil && m.TopPrizeA != nil {
		return *m.TopPrizeA
	}
	return 0
}

func (m *ActivityShoesGlobal) GetSmallPrizeB() int32 {
	if m != nil && m.SmallPrizeB != nil {
		return *m.SmallPrizeB
	}
	return 0
}

func (m *ActivityShoesGlobal) GetLimitT() int32 {
	if m != nil && m.LimitT != nil {
		return *m.LimitT
	}
	return 0
}

func (m *ActivityShoesGlobal) GetDropA() int32 {
	if m != nil && m.DropA != nil {
		return *m.DropA
	}
	return 0
}

func (m *ActivityShoesGlobal) GetDropB() int32 {
	if m != nil && m.DropB != nil {
		return *m.DropB
	}
	return 0
}

func (m *ActivityShoesGlobal) GetChargeTimes() int32 {
	if m != nil && m.ChargeTimes != nil {
		return *m.ChargeTimes
	}
	return 0
}

// 预约奖励配置
type AppointmentRewardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AppointmentRewardCfg) Reset()                    { *m = AppointmentRewardCfg{} }
func (m *AppointmentRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*AppointmentRewardCfg) ProtoMessage()               {}
func (*AppointmentRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{327} }

func (m *AppointmentRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AppointmentRewardCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 球鞋活动任务
type ActivityShoesTaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件id
	ConditionId *int32 `protobuf:"varint,2,opt,name=condition_id" json:"condition_id,omitempty"`
	// 任务奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActivityShoesTaskCfg) Reset()                    { *m = ActivityShoesTaskCfg{} }
func (m *ActivityShoesTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*ActivityShoesTaskCfg) ProtoMessage()               {}
func (*ActivityShoesTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{328} }

func (m *ActivityShoesTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActivityShoesTaskCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *ActivityShoesTaskCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 节日签到
type FestivalSignCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 签到奖励
	Rewards          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=rewards" json:"rewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FestivalSignCfg) Reset()                    { *m = FestivalSignCfg{} }
func (m *FestivalSignCfg) String() string            { return proto.CompactTextString(m) }
func (*FestivalSignCfg) ProtoMessage()               {}
func (*FestivalSignCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{329} }

func (m *FestivalSignCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FestivalSignCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 节日任务
type FestivalTaskCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             *int32            `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Condition        *int32            `protobuf:"varint,3,opt,name=condition" json:"condition,omitempty"`
	Day              *int32            `protobuf:"varint,4,opt,name=day" json:"day,omitempty"`
	Rewards          []*ItemVaryConfig `protobuf:"bytes,5,rep,name=rewards" json:"rewards,omitempty"`
	Score            *int32            `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
	Owner            *int32            `protobuf:"varint,7,opt,name=owner" json:"owner,omitempty"`
	Text             *string           `protobuf:"bytes,8,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FestivalTaskCfg) Reset()                    { *m = FestivalTaskCfg{} }
func (m *FestivalTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*FestivalTaskCfg) ProtoMessage()               {}
func (*FestivalTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{330} }

func (m *FestivalTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FestivalTaskCfg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *FestivalTaskCfg) GetCondition() int32 {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return 0
}

func (m *FestivalTaskCfg) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *FestivalTaskCfg) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *FestivalTaskCfg) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *FestivalTaskCfg) GetOwner() int32 {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return 0
}

func (m *FestivalTaskCfg) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// 节日兑换
type FestivalExchangeCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Commodity        []*ItemVaryConfig `protobuf:"bytes,2,rep,name=commodity" json:"commodity,omitempty"`
	Cost             []*ItemVaryConfig `protobuf:"bytes,3,rep,name=cost" json:"cost,omitempty"`
	Days             *string           `protobuf:"bytes,4,opt,name=days" json:"days,omitempty"`
	PurchaseLimit    *int32            `protobuf:"varint,5,opt,name=purchase_limit" json:"purchase_limit,omitempty"`
	Refresh          *int32            `protobuf:"varint,6,opt,name=refresh" json:"refresh,omitempty"`
	Level            *int32            `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	Diamond          *int32            `protobuf:"varint,8,opt,name=diamond" json:"diamond,omitempty"`
	Draw             *int32            `protobuf:"varint,9,opt,name=draw" json:"draw,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FestivalExchangeCfg) Reset()                    { *m = FestivalExchangeCfg{} }
func (m *FestivalExchangeCfg) String() string            { return proto.CompactTextString(m) }
func (*FestivalExchangeCfg) ProtoMessage()               {}
func (*FestivalExchangeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{331} }

func (m *FestivalExchangeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FestivalExchangeCfg) GetCommodity() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *FestivalExchangeCfg) GetCost() []*ItemVaryConfig {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *FestivalExchangeCfg) GetDays() string {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return ""
}

func (m *FestivalExchangeCfg) GetPurchaseLimit() int32 {
	if m != nil && m.PurchaseLimit != nil {
		return *m.PurchaseLimit
	}
	return 0
}

func (m *FestivalExchangeCfg) GetRefresh() int32 {
	if m != nil && m.Refresh != nil {
		return *m.Refresh
	}
	return 0
}

func (m *FestivalExchangeCfg) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *FestivalExchangeCfg) GetDiamond() int32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *FestivalExchangeCfg) GetDraw() int32 {
	if m != nil && m.Draw != nil {
		return *m.Draw
	}
	return 0
}

// 节日礼包
type FestivalGiftCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Reward           *int32  `protobuf:"varint,2,opt,name=reward" json:"reward,omitempty"`
	Days             *string `protobuf:"bytes,3,opt,name=days" json:"days,omitempty"`
	Tab              *int32  `protobuf:"varint,4,opt,name=tab" json:"tab,omitempty"`
	Currency         *int32  `protobuf:"varint,5,opt,name=currency" json:"currency,omitempty"`
	Price            *int32  `protobuf:"varint,6,opt,name=price" json:"price,omitempty"`
	PurchaseLimit    *int32  `protobuf:"varint,7,opt,name=purchase_limit" json:"purchase_limit,omitempty"`
	Refresh          *int32  `protobuf:"varint,8,opt,name=refresh" json:"refresh,omitempty"`
	Discount         *int32  `protobuf:"varint,9,opt,name=discount" json:"discount,omitempty"`
	Topup            *int32  `protobuf:"varint,10,opt,name=topup" json:"topup,omitempty"`
	ItemIcon         *int32  `protobuf:"varint,11,opt,name=item_icon" json:"item_icon,omitempty"`
	IconName         *string `protobuf:"bytes,12,opt,name=icon_name" json:"icon_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FestivalGiftCfg) Reset()                    { *m = FestivalGiftCfg{} }
func (m *FestivalGiftCfg) String() string            { return proto.CompactTextString(m) }
func (*FestivalGiftCfg) ProtoMessage()               {}
func (*FestivalGiftCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{332} }

func (m *FestivalGiftCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FestivalGiftCfg) GetReward() int32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *FestivalGiftCfg) GetDays() string {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return ""
}

func (m *FestivalGiftCfg) GetTab() int32 {
	if m != nil && m.Tab != nil {
		return *m.Tab
	}
	return 0
}

func (m *FestivalGiftCfg) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

func (m *FestivalGiftCfg) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *FestivalGiftCfg) GetPurchaseLimit() int32 {
	if m != nil && m.PurchaseLimit != nil {
		return *m.PurchaseLimit
	}
	return 0
}

func (m *FestivalGiftCfg) GetRefresh() int32 {
	if m != nil && m.Refresh != nil {
		return *m.Refresh
	}
	return 0
}

func (m *FestivalGiftCfg) GetDiscount() int32 {
	if m != nil && m.Discount != nil {
		return *m.Discount
	}
	return 0
}

func (m *FestivalGiftCfg) GetTopup() int32 {
	if m != nil && m.Topup != nil {
		return *m.Topup
	}
	return 0
}

func (m *FestivalGiftCfg) GetItemIcon() int32 {
	if m != nil && m.ItemIcon != nil {
		return *m.ItemIcon
	}
	return 0
}

func (m *FestivalGiftCfg) GetIconName() string {
	if m != nil && m.IconName != nil {
		return *m.IconName
	}
	return ""
}

// 节日转盘
type FestivalDrawCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	Odds             *int32            `protobuf:"varint,4,opt,name=odds" json:"odds,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FestivalDrawCfg) Reset()                    { *m = FestivalDrawCfg{} }
func (m *FestivalDrawCfg) String() string            { return proto.CompactTextString(m) }
func (*FestivalDrawCfg) ProtoMessage()               {}
func (*FestivalDrawCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{333} }

func (m *FestivalDrawCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FestivalDrawCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *FestivalDrawCfg) GetOdds() int32 {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return 0
}

// 节日UI资源
type FestivalUICfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MainUi           *string `protobuf:"bytes,2,opt,name=main_ui" json:"main_ui,omitempty"`
	SignUi           *string `protobuf:"bytes,3,opt,name=sign_ui" json:"sign_ui,omitempty"`
	SignSwitch       *bool   `protobuf:"varint,4,opt,name=sign_switch" json:"sign_switch,omitempty"`
	TaskUi           *string `protobuf:"bytes,5,opt,name=task_ui" json:"task_ui,omitempty"`
	TaskSwitch       *bool   `protobuf:"varint,6,opt,name=task_switch" json:"task_switch,omitempty"`
	ExchangeUi       *string `protobuf:"bytes,7,opt,name=exchange_ui" json:"exchange_ui,omitempty"`
	ExchangeSwitch   *bool   `protobuf:"varint,8,opt,name=exchange_switch" json:"exchange_switch,omitempty"`
	GiftUi           *string `protobuf:"bytes,9,opt,name=gift_ui" json:"gift_ui,omitempty"`
	GiftSwitch       *bool   `protobuf:"varint,10,opt,name=gift_switch" json:"gift_switch,omitempty"`
	DrawUi           *string `protobuf:"bytes,11,opt,name=draw_ui" json:"draw_ui,omitempty"`
	DrawSwitch       *bool   `protobuf:"varint,12,opt,name=draw_switch" json:"draw_switch,omitempty"`
	Text             *string `protobuf:"bytes,13,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FestivalUICfg) Reset()                    { *m = FestivalUICfg{} }
func (m *FestivalUICfg) String() string            { return proto.CompactTextString(m) }
func (*FestivalUICfg) ProtoMessage()               {}
func (*FestivalUICfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{334} }

func (m *FestivalUICfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FestivalUICfg) GetMainUi() string {
	if m != nil && m.MainUi != nil {
		return *m.MainUi
	}
	return ""
}

func (m *FestivalUICfg) GetSignUi() string {
	if m != nil && m.SignUi != nil {
		return *m.SignUi
	}
	return ""
}

func (m *FestivalUICfg) GetSignSwitch() bool {
	if m != nil && m.SignSwitch != nil {
		return *m.SignSwitch
	}
	return false
}

func (m *FestivalUICfg) GetTaskUi() string {
	if m != nil && m.TaskUi != nil {
		return *m.TaskUi
	}
	return ""
}

func (m *FestivalUICfg) GetTaskSwitch() bool {
	if m != nil && m.TaskSwitch != nil {
		return *m.TaskSwitch
	}
	return false
}

func (m *FestivalUICfg) GetExchangeUi() string {
	if m != nil && m.ExchangeUi != nil {
		return *m.ExchangeUi
	}
	return ""
}

func (m *FestivalUICfg) GetExchangeSwitch() bool {
	if m != nil && m.ExchangeSwitch != nil {
		return *m.ExchangeSwitch
	}
	return false
}

func (m *FestivalUICfg) GetGiftUi() string {
	if m != nil && m.GiftUi != nil {
		return *m.GiftUi
	}
	return ""
}

func (m *FestivalUICfg) GetGiftSwitch() bool {
	if m != nil && m.GiftSwitch != nil {
		return *m.GiftSwitch
	}
	return false
}

func (m *FestivalUICfg) GetDrawUi() string {
	if m != nil && m.DrawUi != nil {
		return *m.DrawUi
	}
	return ""
}

func (m *FestivalUICfg) GetDrawSwitch() bool {
	if m != nil && m.DrawSwitch != nil {
		return *m.DrawSwitch
	}
	return false
}

func (m *FestivalUICfg) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// 礼包奖励配置
type GiftRewardCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	IconName         *string           `protobuf:"bytes,3,opt,name=icon_name" json:"icon_name,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GiftRewardCfg) Reset()                    { *m = GiftRewardCfg{} }
func (m *GiftRewardCfg) String() string            { return proto.CompactTextString(m) }
func (*GiftRewardCfg) ProtoMessage()               {}
func (*GiftRewardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{335} }

func (m *GiftRewardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GiftRewardCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *GiftRewardCfg) GetIconName() string {
	if m != nil && m.IconName != nil {
		return *m.IconName
	}
	return ""
}

// 时装基础表
type FashionableDressInformationCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 图鉴属性（服务器）
	Attr []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	// 解锁道具
	ItemId           *ItemVaryConfig `protobuf:"bytes,3,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *FashionableDressInformationCfg) Reset()         { *m = FashionableDressInformationCfg{} }
func (m *FashionableDressInformationCfg) String() string { return proto.CompactTextString(m) }
func (*FashionableDressInformationCfg) ProtoMessage()    {}
func (*FashionableDressInformationCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{336}
}

func (m *FashionableDressInformationCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FashionableDressInformationCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *FashionableDressInformationCfg) GetItemId() *ItemVaryConfig {
	if m != nil {
		return m.ItemId
	}
	return nil
}

// 时装强化表
type FashionableDressIntensifyCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 最大等级
	IsMax *int32 `protobuf:"varint,2,opt,name=is_max" json:"is_max,omitempty"`
	// 时装属性（服务器）
	Attr []*PlayerAttrValue `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	// 升级道具
	LvItem *ItemVaryConfig `protobuf:"bytes,4,opt,name=lv_item" json:"lv_item,omitempty"`
	// 返还道具
	ReturnItem *ItemVaryConfig `protobuf:"bytes,5,opt,name=return_item" json:"return_item,omitempty"`
	// 天赋等级
	TalentLv *int32 `protobuf:"varint,6,opt,name=talent_lv" json:"talent_lv,omitempty"`
	// 天赋属性（服务器）
	TalentAttr       []*PlayerAttrValue `protobuf:"bytes,7,rep,name=talent_attr" json:"talent_attr,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *FashionableDressIntensifyCfg) Reset()         { *m = FashionableDressIntensifyCfg{} }
func (m *FashionableDressIntensifyCfg) String() string { return proto.CompactTextString(m) }
func (*FashionableDressIntensifyCfg) ProtoMessage()    {}
func (*FashionableDressIntensifyCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{337}
}

func (m *FashionableDressIntensifyCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FashionableDressIntensifyCfg) GetIsMax() int32 {
	if m != nil && m.IsMax != nil {
		return *m.IsMax
	}
	return 0
}

func (m *FashionableDressIntensifyCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *FashionableDressIntensifyCfg) GetLvItem() *ItemVaryConfig {
	if m != nil {
		return m.LvItem
	}
	return nil
}

func (m *FashionableDressIntensifyCfg) GetReturnItem() *ItemVaryConfig {
	if m != nil {
		return m.ReturnItem
	}
	return nil
}

func (m *FashionableDressIntensifyCfg) GetTalentLv() int32 {
	if m != nil && m.TalentLv != nil {
		return *m.TalentLv
	}
	return 0
}

func (m *FashionableDressIntensifyCfg) GetTalentAttr() []*PlayerAttrValue {
	if m != nil {
		return m.TalentAttr
	}
	return nil
}

// 球鞋基础表
type SneakerInformationCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 图鉴属性（服务器）
	Attr []*PlayerAttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty"`
	// 解锁道具
	ItemId           *ItemVaryConfig `protobuf:"bytes,3,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SneakerInformationCfg) Reset()                    { *m = SneakerInformationCfg{} }
func (m *SneakerInformationCfg) String() string            { return proto.CompactTextString(m) }
func (*SneakerInformationCfg) ProtoMessage()               {}
func (*SneakerInformationCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{338} }

func (m *SneakerInformationCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SneakerInformationCfg) GetAttr() []*PlayerAttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SneakerInformationCfg) GetItemId() *ItemVaryConfig {
	if m != nil {
		return m.ItemId
	}
	return nil
}

// 角色取名表
type RoleNameCfg struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AccName          *string `protobuf:"bytes,2,opt,name=acc_name" json:"acc_name,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoleNameCfg) Reset()                    { *m = RoleNameCfg{} }
func (m *RoleNameCfg) String() string            { return proto.CompactTextString(m) }
func (*RoleNameCfg) ProtoMessage()               {}
func (*RoleNameCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{339} }

func (m *RoleNameCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RoleNameCfg) GetAccName() string {
	if m != nil && m.AccName != nil {
		return *m.AccName
	}
	return ""
}

func (m *RoleNameCfg) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

// 乐曼多sdk全局配置
type GamerLmdSdkGlobalCfg struct {
	Id                *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BindAccountReward []*ItemVaryConfig `protobuf:"bytes,2,rep,name=bind_account_reward" json:"bind_account_reward,omitempty"`
	BindLmdReward     []*ItemVaryConfig `protobuf:"bytes,3,rep,name=bind_lmd_reward" json:"bind_lmd_reward,omitempty"`
	// 分享奖励
	ShareReward      []*ItemVaryConfig `protobuf:"bytes,4,rep,name=share_reward" json:"share_reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GamerLmdSdkGlobalCfg) Reset()                    { *m = GamerLmdSdkGlobalCfg{} }
func (m *GamerLmdSdkGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*GamerLmdSdkGlobalCfg) ProtoMessage()               {}
func (*GamerLmdSdkGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{340} }

func (m *GamerLmdSdkGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GamerLmdSdkGlobalCfg) GetBindAccountReward() []*ItemVaryConfig {
	if m != nil {
		return m.BindAccountReward
	}
	return nil
}

func (m *GamerLmdSdkGlobalCfg) GetBindLmdReward() []*ItemVaryConfig {
	if m != nil {
		return m.BindLmdReward
	}
	return nil
}

func (m *GamerLmdSdkGlobalCfg) GetShareReward() []*ItemVaryConfig {
	if m != nil {
		return m.ShareReward
	}
	return nil
}

// 50连抽配置
type FiftyDrawCfg struct {
	// 配置id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件id
	ConditionId *int32 `protobuf:"varint,2,opt,name=condition_id" json:"condition_id,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FiftyDrawCfg) Reset()                    { *m = FiftyDrawCfg{} }
func (m *FiftyDrawCfg) String() string            { return proto.CompactTextString(m) }
func (*FiftyDrawCfg) ProtoMessage()               {}
func (*FiftyDrawCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{341} }

func (m *FiftyDrawCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FiftyDrawCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *FiftyDrawCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 选秀赛全局表
type DraftMatchCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 比赛可报名开始时间(0点偏移时间戳)
	SignTimeBegin *int32 `protobuf:"varint,2,opt,name=sign_time_begin" json:"sign_time_begin,omitempty"`
	// 比赛可报名结束时间(0点偏移时间戳)
	SignTimeEnd *int32 `protobuf:"varint,3,opt,name=sign_time_end" json:"sign_time_end,omitempty"`
	// 比赛消耗
	Consume []*ItemVaryConfig `protobuf:"bytes,4,rep,name=consume" json:"consume,omitempty"`
	// 获胜方获得碎片数量
	WinNum *int32 `protobuf:"varint,5,opt,name=win_num" json:"win_num,omitempty"`
	// 失败方获得碎片数量
	LostNum *int32 `protobuf:"varint,6,opt,name=lost_num" json:"lost_num,omitempty"`
	// 每天可比赛次数
	MatchNum         *int32 `protobuf:"varint,7,opt,name=match_num" json:"match_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DraftMatchCfg) Reset()                    { *m = DraftMatchCfg{} }
func (m *DraftMatchCfg) String() string            { return proto.CompactTextString(m) }
func (*DraftMatchCfg) ProtoMessage()               {}
func (*DraftMatchCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{342} }

func (m *DraftMatchCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DraftMatchCfg) GetSignTimeBegin() int32 {
	if m != nil && m.SignTimeBegin != nil {
		return *m.SignTimeBegin
	}
	return 0
}

func (m *DraftMatchCfg) GetSignTimeEnd() int32 {
	if m != nil && m.SignTimeEnd != nil {
		return *m.SignTimeEnd
	}
	return 0
}

func (m *DraftMatchCfg) GetConsume() []*ItemVaryConfig {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *DraftMatchCfg) GetWinNum() int32 {
	if m != nil && m.WinNum != nil {
		return *m.WinNum
	}
	return 0
}

func (m *DraftMatchCfg) GetLostNum() int32 {
	if m != nil && m.LostNum != nil {
		return *m.LostNum
	}
	return 0
}

func (m *DraftMatchCfg) GetMatchNum() int32 {
	if m != nil && m.MatchNum != nil {
		return *m.MatchNum
	}
	return 0
}

// 选秀赛可选球员需求配置
type DraftMatchCardCfg struct {
	// 位置
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 球员品质数量（品质_数量;品质_数量）
	PlayerNum        []*TypeValueConfig `protobuf:"bytes,2,rep,name=player_num" json:"player_num,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *DraftMatchCardCfg) Reset()                    { *m = DraftMatchCardCfg{} }
func (m *DraftMatchCardCfg) String() string            { return proto.CompactTextString(m) }
func (*DraftMatchCardCfg) ProtoMessage()               {}
func (*DraftMatchCardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{343} }

func (m *DraftMatchCardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DraftMatchCardCfg) GetPlayerNum() []*TypeValueConfig {
	if m != nil {
		return m.PlayerNum
	}
	return nil
}

// 主教练技能配置
type HeadCoachSkillCfg struct {
	// 技能ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 技能主ID
	MainId *int32 `protobuf:"varint,2,opt,name=main_id" json:"main_id,omitempty"`
	// 技能等级
	SkillLv *int32 `protobuf:"varint,3,opt,name=skill_lv" json:"skill_lv,omitempty"`
	// 关联buff_id
	BuffId *int32 `protobuf:"varint,5,opt,name=buff_id" json:"buff_id,omitempty"`
	// 操作类型子类型(1.查看进攻战术，2.查看防守战术 3.禁止查看进攻战术 4.禁止查看防守战术 5.反弹技能)
	SubType *int32 `protobuf:"varint,6,opt,name=sub_type" json:"sub_type,omitempty"`
	// 持续时间(操作技能-技能效果持续回合)
	LastTime *int32 `protobuf:"varint,7,opt,name=last_time" json:"last_time,omitempty"`
	// 被克制的技能id
	RestraintSkillId *int32 `protobuf:"varint,8,opt,name=restraint_skill_id" json:"restraint_skill_id,omitempty"`
	// 是否默认解锁：1默认解锁
	DefaultUnlock *int32 `protobuf:"varint,9,opt,name=default_unlock" json:"default_unlock,omitempty"`
	// 是否开放
	IsOpen           *int32 `protobuf:"varint,10,opt,name=is_open" json:"is_open,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HeadCoachSkillCfg) Reset()                    { *m = HeadCoachSkillCfg{} }
func (m *HeadCoachSkillCfg) String() string            { return proto.CompactTextString(m) }
func (*HeadCoachSkillCfg) ProtoMessage()               {}
func (*HeadCoachSkillCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{344} }

func (m *HeadCoachSkillCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetMainId() int32 {
	if m != nil && m.MainId != nil {
		return *m.MainId
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetSkillLv() int32 {
	if m != nil && m.SkillLv != nil {
		return *m.SkillLv
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetSubType() int32 {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetLastTime() int32 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetRestraintSkillId() int32 {
	if m != nil && m.RestraintSkillId != nil {
		return *m.RestraintSkillId
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetDefaultUnlock() int32 {
	if m != nil && m.DefaultUnlock != nil {
		return *m.DefaultUnlock
	}
	return 0
}

func (m *HeadCoachSkillCfg) GetIsOpen() int32 {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return 0
}

// 主教练技能全局表
type HeadCoachGlobalCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 进入冷却
	EnterCd *int32 `protobuf:"varint,2,opt,name=enter_cd" json:"enter_cd,omitempty"`
	// 公共冷却
	PublicCd *int32 `protobuf:"varint,3,opt,name=public_cd" json:"public_cd,omitempty"`
	// 可装备技能数量
	EquipSkillNum    *int32 `protobuf:"varint,4,opt,name=equip_skill_num" json:"equip_skill_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HeadCoachGlobalCfg) Reset()                    { *m = HeadCoachGlobalCfg{} }
func (m *HeadCoachGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*HeadCoachGlobalCfg) ProtoMessage()               {}
func (*HeadCoachGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{345} }

func (m *HeadCoachGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HeadCoachGlobalCfg) GetEnterCd() int32 {
	if m != nil && m.EnterCd != nil {
		return *m.EnterCd
	}
	return 0
}

func (m *HeadCoachGlobalCfg) GetPublicCd() int32 {
	if m != nil && m.PublicCd != nil {
		return *m.PublicCd
	}
	return 0
}

func (m *HeadCoachGlobalCfg) GetEquipSkillNum() int32 {
	if m != nil && m.EquipSkillNum != nil {
		return *m.EquipSkillNum
	}
	return 0
}

type BehaviourCreateMatchDateCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 我方得分
	OurScore *int32 `protobuf:"varint,2,opt,name=our_score" json:"our_score,omitempty"`
	// 篮板
	OurRebound *int32 `protobuf:"varint,3,opt,name=our_rebound" json:"our_rebound,omitempty"`
	// 助攻
	OurAssist *int32 `protobuf:"varint,4,opt,name=our_assist" json:"our_assist,omitempty"`
	// 2分命中次数
	OurTwoShot *int32 `protobuf:"varint,5,opt,name=our_two_shot" json:"our_two_shot,omitempty"`
	// 2分出手次数
	OurTwoTimes *int32 `protobuf:"varint,6,opt,name=our_two_times" json:"our_two_times,omitempty"`
	// 3分命中次数
	OurThreeShot *int32 `protobuf:"varint,7,opt,name=our_three_shot" json:"our_three_shot,omitempty"`
	// 3分出手次数
	OurThreeTimes *int32 `protobuf:"varint,8,opt,name=our_three_times" json:"our_three_times,omitempty"`
	// 抢断
	OurSteal *int32 `protobuf:"varint,9,opt,name=our_steal" json:"our_steal,omitempty"`
	// 盖帽
	OurBlockshot *int32 `protobuf:"varint,10,opt,name=our_blockshot" json:"our_blockshot,omitempty"`
	// 失误
	OurTurnover *int32 `protobuf:"varint,11,opt,name=our_turnover" json:"our_turnover,omitempty"`
	// 犯规
	OurFoul *int32 `protobuf:"varint,12,opt,name=our_foul" json:"our_foul,omitempty"`
	// 罚球命中次数
	OurFqShot *int32 `protobuf:"varint,13,opt,name=our_fq_shot" json:"our_fq_shot,omitempty"`
	// 罚球出手次数
	OurFqTimes *int32 `protobuf:"varint,14,opt,name=our_fq_times" json:"our_fq_times,omitempty"`
	// 对方得分
	EnemyScore *int32 `protobuf:"varint,15,opt,name=enemy_score" json:"enemy_score,omitempty"`
	// 篮板
	EnemyRebound *int32 `protobuf:"varint,16,opt,name=enemy_rebound" json:"enemy_rebound,omitempty"`
	// 助攻
	EnemyAssist *int32 `protobuf:"varint,17,opt,name=enemy_assist" json:"enemy_assist,omitempty"`
	// 2分命中次数
	EnemyTwoShot *int32 `protobuf:"varint,18,opt,name=enemy_two_shot" json:"enemy_two_shot,omitempty"`
	// 2分出手次数
	EnemyTwoTimes *int32 `protobuf:"varint,19,opt,name=enemy_two_times" json:"enemy_two_times,omitempty"`
	// 3分命中次数
	EnemyThreeShot *int32 `protobuf:"varint,20,opt,name=enemy_three_shot" json:"enemy_three_shot,omitempty"`
	// 3分出手次数
	EnemyThreeTimes *int32 `protobuf:"varint,21,opt,name=enemy_three_times" json:"enemy_three_times,omitempty"`
	// 抢断
	EnemySteal *int32 `protobuf:"varint,22,opt,name=enemy_steal" json:"enemy_steal,omitempty"`
	// 盖帽
	EnemyBlockshot *int32 `protobuf:"varint,23,opt,name=enemy_blockshot" json:"enemy_blockshot,omitempty"`
	// 失误
	EnemyTurnover *int32 `protobuf:"varint,24,opt,name=enemy_turnover" json:"enemy_turnover,omitempty"`
	// 犯规
	EnemyFoul *int32 `protobuf:"varint,25,opt,name=enemy_foul" json:"enemy_foul,omitempty"`
	// 罚球命中次数
	EnemyFqShot *int32 `protobuf:"varint,26,opt,name=enemy_fq_shot" json:"enemy_fq_shot,omitempty"`
	// 罚球出手次数
	EnemyFqTimes     *int32 `protobuf:"varint,27,opt,name=enemy_fq_times" json:"enemy_fq_times,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BehaviourCreateMatchDateCfg) Reset()                    { *m = BehaviourCreateMatchDateCfg{} }
func (m *BehaviourCreateMatchDateCfg) String() string            { return proto.CompactTextString(m) }
func (*BehaviourCreateMatchDateCfg) ProtoMessage()               {}
func (*BehaviourCreateMatchDateCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{346} }

func (m *BehaviourCreateMatchDateCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurScore() int32 {
	if m != nil && m.OurScore != nil {
		return *m.OurScore
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurRebound() int32 {
	if m != nil && m.OurRebound != nil {
		return *m.OurRebound
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurAssist() int32 {
	if m != nil && m.OurAssist != nil {
		return *m.OurAssist
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurTwoShot() int32 {
	if m != nil && m.OurTwoShot != nil {
		return *m.OurTwoShot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurTwoTimes() int32 {
	if m != nil && m.OurTwoTimes != nil {
		return *m.OurTwoTimes
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurThreeShot() int32 {
	if m != nil && m.OurThreeShot != nil {
		return *m.OurThreeShot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurThreeTimes() int32 {
	if m != nil && m.OurThreeTimes != nil {
		return *m.OurThreeTimes
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurSteal() int32 {
	if m != nil && m.OurSteal != nil {
		return *m.OurSteal
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurBlockshot() int32 {
	if m != nil && m.OurBlockshot != nil {
		return *m.OurBlockshot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurTurnover() int32 {
	if m != nil && m.OurTurnover != nil {
		return *m.OurTurnover
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurFoul() int32 {
	if m != nil && m.OurFoul != nil {
		return *m.OurFoul
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurFqShot() int32 {
	if m != nil && m.OurFqShot != nil {
		return *m.OurFqShot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetOurFqTimes() int32 {
	if m != nil && m.OurFqTimes != nil {
		return *m.OurFqTimes
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyScore() int32 {
	if m != nil && m.EnemyScore != nil {
		return *m.EnemyScore
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyRebound() int32 {
	if m != nil && m.EnemyRebound != nil {
		return *m.EnemyRebound
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyAssist() int32 {
	if m != nil && m.EnemyAssist != nil {
		return *m.EnemyAssist
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyTwoShot() int32 {
	if m != nil && m.EnemyTwoShot != nil {
		return *m.EnemyTwoShot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyTwoTimes() int32 {
	if m != nil && m.EnemyTwoTimes != nil {
		return *m.EnemyTwoTimes
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyThreeShot() int32 {
	if m != nil && m.EnemyThreeShot != nil {
		return *m.EnemyThreeShot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyThreeTimes() int32 {
	if m != nil && m.EnemyThreeTimes != nil {
		return *m.EnemyThreeTimes
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemySteal() int32 {
	if m != nil && m.EnemySteal != nil {
		return *m.EnemySteal
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyBlockshot() int32 {
	if m != nil && m.EnemyBlockshot != nil {
		return *m.EnemyBlockshot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyTurnover() int32 {
	if m != nil && m.EnemyTurnover != nil {
		return *m.EnemyTurnover
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyFoul() int32 {
	if m != nil && m.EnemyFoul != nil {
		return *m.EnemyFoul
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyFqShot() int32 {
	if m != nil && m.EnemyFqShot != nil {
		return *m.EnemyFqShot
	}
	return 0
}

func (m *BehaviourCreateMatchDateCfg) GetEnemyFqTimes() int32 {
	if m != nil && m.EnemyFqTimes != nil {
		return *m.EnemyFqTimes
	}
	return 0
}

type BehaviourDateRangeCfg struct {
	// ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 战力比例下限
	FightProportionMin *int32 `protobuf:"varint,2,opt,name=fight_proportion_min" json:"fight_proportion_min,omitempty"`
	// 战力比例上限
	FightProportionMax *int32 `protobuf:"varint,3,opt,name=fight_proportion_max" json:"fight_proportion_max,omitempty"`
	// 比赛数据随机池
	MatchPool []int32 `protobuf:"varint,4,rep,name=match_pool" json:"match_pool,omitempty"`
	// 比赛剩余时间（毫秒）
	TimeRemain       []int32 `protobuf:"varint,5,rep,name=time_remain" json:"time_remain,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BehaviourDateRangeCfg) Reset()                    { *m = BehaviourDateRangeCfg{} }
func (m *BehaviourDateRangeCfg) String() string            { return proto.CompactTextString(m) }
func (*BehaviourDateRangeCfg) ProtoMessage()               {}
func (*BehaviourDateRangeCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{347} }

func (m *BehaviourDateRangeCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BehaviourDateRangeCfg) GetFightProportionMin() int32 {
	if m != nil && m.FightProportionMin != nil {
		return *m.FightProportionMin
	}
	return 0
}

func (m *BehaviourDateRangeCfg) GetFightProportionMax() int32 {
	if m != nil && m.FightProportionMax != nil {
		return *m.FightProportionMax
	}
	return 0
}

func (m *BehaviourDateRangeCfg) GetMatchPool() []int32 {
	if m != nil {
		return m.MatchPool
	}
	return nil
}

func (m *BehaviourDateRangeCfg) GetTimeRemain() []int32 {
	if m != nil {
		return m.TimeRemain
	}
	return nil
}

type BehaviourPointsCfg struct {
	// 行为ID
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 行为价值
	BehaviourPoints *int32 `protobuf:"varint,2,opt,name=behaviour_points" json:"behaviour_points,omitempty"`
	// 属性
	Nature []int32 `protobuf:"varint,3,rep,name=nature" json:"nature,omitempty"`
	// 分配人数
	People           *int32 `protobuf:"varint,4,opt,name=people" json:"people,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BehaviourPointsCfg) Reset()                    { *m = BehaviourPointsCfg{} }
func (m *BehaviourPointsCfg) String() string            { return proto.CompactTextString(m) }
func (*BehaviourPointsCfg) ProtoMessage()               {}
func (*BehaviourPointsCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{348} }

func (m *BehaviourPointsCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BehaviourPointsCfg) GetBehaviourPoints() int32 {
	if m != nil && m.BehaviourPoints != nil {
		return *m.BehaviourPoints
	}
	return 0
}

func (m *BehaviourPointsCfg) GetNature() []int32 {
	if m != nil {
		return m.Nature
	}
	return nil
}

func (m *BehaviourPointsCfg) GetPeople() int32 {
	if m != nil && m.People != nil {
		return *m.People
	}
	return 0
}

type BehaviourWeightCfg struct {
	// 序号= 行为id*100+排名
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 行为ID
	OrderId *int32 `protobuf:"varint,2,opt,name=order_id" json:"order_id,omitempty"`
	// 排名（1.2.3...
	Rank *int32 `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	// 权重系数（万分比
	WeightProportion *int32 `protobuf:"varint,4,opt,name=weight_proportion" json:"weight_proportion,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BehaviourWeightCfg) Reset()                    { *m = BehaviourWeightCfg{} }
func (m *BehaviourWeightCfg) String() string            { return proto.CompactTextString(m) }
func (*BehaviourWeightCfg) ProtoMessage()               {}
func (*BehaviourWeightCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{349} }

func (m *BehaviourWeightCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BehaviourWeightCfg) GetOrderId() int32 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *BehaviourWeightCfg) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *BehaviourWeightCfg) GetWeightProportion() int32 {
	if m != nil && m.WeightProportion != nil {
		return *m.WeightProportion
	}
	return 0
}

// 竞猜商店商品表
type GuessShopCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Commodity        []*ItemVaryConfig `protobuf:"bytes,2,rep,name=commodity" json:"commodity,omitempty"`
	Prices           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=prices" json:"prices,omitempty"`
	BuyLimitCount    *int32            `protobuf:"varint,4,opt,name=buyLimitCount" json:"buyLimitCount,omitempty"`
	BuyLimitType     *int32            `protobuf:"varint,5,opt,name=buyLimitType" json:"buyLimitType,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GuessShopCfg) Reset()                    { *m = GuessShopCfg{} }
func (m *GuessShopCfg) String() string            { return proto.CompactTextString(m) }
func (*GuessShopCfg) ProtoMessage()               {}
func (*GuessShopCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{350} }

func (m *GuessShopCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GuessShopCfg) GetCommodity() []*ItemVaryConfig {
	if m != nil {
		return m.Commodity
	}
	return nil
}

func (m *GuessShopCfg) GetPrices() []*ItemVaryConfig {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *GuessShopCfg) GetBuyLimitCount() int32 {
	if m != nil && m.BuyLimitCount != nil {
		return *m.BuyLimitCount
	}
	return 0
}

func (m *GuessShopCfg) GetBuyLimitType() int32 {
	if m != nil && m.BuyLimitType != nil {
		return *m.BuyLimitType
	}
	return 0
}

// 竞猜奖励表
type GuessReward struct {
	Id                   *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RewardForGuessing    []*ItemVaryConfig `protobuf:"bytes,2,rep,name=RewardForGuessing" json:"RewardForGuessing,omitempty"`
	RewardForNotGuessing []*ItemVaryConfig `protobuf:"bytes,3,rep,name=RewardForNotGuessing" json:"RewardForNotGuessing,omitempty"`
	XXX_unrecognized     []byte            `json:"-"`
}

func (m *GuessReward) Reset()                    { *m = GuessReward{} }
func (m *GuessReward) String() string            { return proto.CompactTextString(m) }
func (*GuessReward) ProtoMessage()               {}
func (*GuessReward) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{351} }

func (m *GuessReward) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GuessReward) GetRewardForGuessing() []*ItemVaryConfig {
	if m != nil {
		return m.RewardForGuessing
	}
	return nil
}

func (m *GuessReward) GetRewardForNotGuessing() []*ItemVaryConfig {
	if m != nil {
		return m.RewardForNotGuessing
	}
	return nil
}

// 设置有奖
type SetAwardCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SetAwardCfg) Reset()                    { *m = SetAwardCfg{} }
func (m *SetAwardCfg) String() string            { return proto.CompactTextString(m) }
func (*SetAwardCfg) ProtoMessage()               {}
func (*SetAwardCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{352} }

func (m *SetAwardCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SetAwardCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 评价条件配置
type EvaluateCfg struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 条件id
	ConditionId      *int32 `protobuf:"varint,2,opt,name=condition_id" json:"condition_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvaluateCfg) Reset()                    { *m = EvaluateCfg{} }
func (m *EvaluateCfg) String() string            { return proto.CompactTextString(m) }
func (*EvaluateCfg) ProtoMessage()               {}
func (*EvaluateCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{353} }

func (m *EvaluateCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EvaluateCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

// 大富翁格子
type RichmanGridCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             *int32            `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Reward           []*ItemVaryConfig `protobuf:"bytes,3,rep,name=reward" json:"reward,omitempty"`
	BuffID           *int32            `protobuf:"varint,4,opt,name=buffID" json:"buffID,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RichmanGridCfg) Reset()                    { *m = RichmanGridCfg{} }
func (m *RichmanGridCfg) String() string            { return proto.CompactTextString(m) }
func (*RichmanGridCfg) ProtoMessage()               {}
func (*RichmanGridCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{354} }

func (m *RichmanGridCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RichmanGridCfg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *RichmanGridCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RichmanGridCfg) GetBuffID() int32 {
	if m != nil && m.BuffID != nil {
		return *m.BuffID
	}
	return 0
}

// 大富翁色子概率
type RichmanDiceCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Weight           *int32 `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RichmanDiceCfg) Reset()                    { *m = RichmanDiceCfg{} }
func (m *RichmanDiceCfg) String() string            { return proto.CompactTextString(m) }
func (*RichmanDiceCfg) ProtoMessage()               {}
func (*RichmanDiceCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{355} }

func (m *RichmanDiceCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RichmanDiceCfg) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

// 大富翁buff效果
type RichmanBuffCfg struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Disable          *bool  `protobuf:"varint,2,opt,name=disable" json:"disable,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RichmanBuffCfg) Reset()                    { *m = RichmanBuffCfg{} }
func (m *RichmanBuffCfg) String() string            { return proto.CompactTextString(m) }
func (*RichmanBuffCfg) ProtoMessage()               {}
func (*RichmanBuffCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{356} }

func (m *RichmanBuffCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RichmanBuffCfg) GetDisable() bool {
	if m != nil && m.Disable != nil {
		return *m.Disable
	}
	return false
}

// 大富翁全局配置
type RichmanGlobalCfg struct {
	Id               *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NormalMax        *int32            `protobuf:"varint,2,opt,name=normalMax" json:"normalMax,omitempty"`
	PeculiarMax      *int32            `protobuf:"varint,3,opt,name=peculiarMax" json:"peculiarMax,omitempty"`
	NormalPrice      []*ItemVaryConfig `protobuf:"bytes,4,rep,name=normalPrice" json:"normalPrice,omitempty"`
	PeculiarPrice    []*ItemVaryConfig `protobuf:"bytes,5,rep,name=peculiarPrice" json:"peculiarPrice,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RichmanGlobalCfg) Reset()                    { *m = RichmanGlobalCfg{} }
func (m *RichmanGlobalCfg) String() string            { return proto.CompactTextString(m) }
func (*RichmanGlobalCfg) ProtoMessage()               {}
func (*RichmanGlobalCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{357} }

func (m *RichmanGlobalCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RichmanGlobalCfg) GetNormalMax() int32 {
	if m != nil && m.NormalMax != nil {
		return *m.NormalMax
	}
	return 0
}

func (m *RichmanGlobalCfg) GetPeculiarMax() int32 {
	if m != nil && m.PeculiarMax != nil {
		return *m.PeculiarMax
	}
	return 0
}

func (m *RichmanGlobalCfg) GetNormalPrice() []*ItemVaryConfig {
	if m != nil {
		return m.NormalPrice
	}
	return nil
}

func (m *RichmanGlobalCfg) GetPeculiarPrice() []*ItemVaryConfig {
	if m != nil {
		return m.PeculiarPrice
	}
	return nil
}

// 大富翁任务配置
type RichmanTaskCfg struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 接任务的条件
	ConditionId *int32 `protobuf:"varint,5,opt,name=condition_id" json:"condition_id,omitempty"`
	// 奖励
	Reward           []*ItemVaryConfig `protobuf:"bytes,7,rep,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RichmanTaskCfg) Reset()                    { *m = RichmanTaskCfg{} }
func (m *RichmanTaskCfg) String() string            { return proto.CompactTextString(m) }
func (*RichmanTaskCfg) ProtoMessage()               {}
func (*RichmanTaskCfg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{358} }

func (m *RichmanTaskCfg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RichmanTaskCfg) GetConditionId() int32 {
	if m != nil && m.ConditionId != nil {
		return *m.ConditionId
	}
	return 0
}

func (m *RichmanTaskCfg) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func init() {
	proto.RegisterType((*ItemConfig)(nil), "ItemConfig")
	proto.RegisterType((*ItemVaryConfig)(nil), "ItemVaryConfig")
	proto.RegisterType((*ItemVaryConfigList)(nil), "ItemVaryConfigList")
	proto.RegisterType((*TypeValueConfig)(nil), "TypeValueConfig")
	proto.RegisterType((*AccLv)(nil), "AccLv")
	proto.RegisterType((*ItemBase)(nil), "ItemBase")
	proto.RegisterType((*ItemBaseConfig)(nil), "ItemBaseConfig")
	proto.RegisterType((*ShardExchangePlayerCfg)(nil), "ShardExchangePlayerCfg")
	proto.RegisterType((*CycleTime)(nil), "CycleTime")
	proto.RegisterType((*MultipeDrop)(nil), "MultipeDrop")
	proto.RegisterType((*MultipeDrop_DropPackage)(nil), "MultipeDrop.DropPackage")
	proto.RegisterType((*ChangeNameExpend)(nil), "ChangeNameExpend")
	proto.RegisterType((*PlayerBaseAttConf)(nil), "PlayerBaseAttConf")
	proto.RegisterType((*NewImageCfg)(nil), "NewImageCfg")
	proto.RegisterType((*BallerComposeCfg)(nil), "BallerComposeCfg")
	proto.RegisterType((*PlayerWorthCoefficientCfg)(nil), "PlayerWorthCoefficientCfg")
	proto.RegisterType((*PlayerWorthRankingListCfg)(nil), "PlayerWorthRankingListCfg")
	proto.RegisterType((*DataStatisticsCfg)(nil), "DataStatisticsCfg")
	proto.RegisterType((*TradingCenterCurrencyCfg)(nil), "TradingCenterCurrencyCfg")
	proto.RegisterType((*TradingCenterGuidanceCfg)(nil), "TradingCenterGuidanceCfg")
	proto.RegisterType((*MultipleDropAggregate)(nil), "MultipleDropAggregate")
	proto.RegisterType((*CreateRoleAddItem)(nil), "CreateRoleAddItem")
	proto.RegisterType((*PlayerAttrValue)(nil), "PlayerAttrValue")
	proto.RegisterType((*PlayerBuffValue)(nil), "PlayerBuffValue")
	proto.RegisterType((*PlayerLv)(nil), "PlayerLv")
	proto.RegisterType((*PlayerStar)(nil), "PlayerStar")
	proto.RegisterType((*NickNameCfg)(nil), "NickNameCfg")
	proto.RegisterType((*AllianceBase)(nil), "AllianceBase")
	proto.RegisterType((*AllianceJob)(nil), "AllianceJob")
	proto.RegisterType((*PlayerGrowAttr)(nil), "PlayerGrowAttr")
	proto.RegisterType((*CreatePlayer)(nil), "CreatePlayer")
	proto.RegisterType((*CreateTeam)(nil), "CreateTeam")
	proto.RegisterType((*BasketballTeam)(nil), "BasketballTeam")
	proto.RegisterType((*PlayerAttBasic)(nil), "PlayerAttBasic")
	proto.RegisterType((*NpcRobot)(nil), "NpcRobot")
	proto.RegisterType((*NpcTeam)(nil), "NpcTeam")
	proto.RegisterType((*NpcParam)(nil), "NpcParam")
	proto.RegisterType((*NpcAttribute)(nil), "NpcAttribute")
	proto.RegisterType((*ArenaChallengeRange)(nil), "ArenaChallengeRange")
	proto.RegisterType((*ArenaRobot)(nil), "ArenaRobot")
	proto.RegisterType((*ArenaRobotRand)(nil), "ArenaRobotRand")
	proto.RegisterType((*FunctionModule)(nil), "FunctionModule")
	proto.RegisterType((*MailProfile)(nil), "MailProfile")
	proto.RegisterType((*AllianceGift)(nil), "AllianceGift")
	proto.RegisterType((*AllianceWelfare)(nil), "AllianceWelfare")
	proto.RegisterType((*AllianceChallengChapter)(nil), "AllianceChallengChapter")
	proto.RegisterType((*AllianceChapterBasic)(nil), "AllianceChapterBasic")
	proto.RegisterType((*SpeedDiamondExpen)(nil), "SpeedDiamondExpen")
	proto.RegisterType((*CurrencyTypeImage)(nil), "CurrencyTypeImage")
	proto.RegisterType((*GuideConf)(nil), "GuideConf")
	proto.RegisterType((*GuideGlobalConf)(nil), "GuideGlobalConf")
	proto.RegisterType((*TradingCenterGuideConf)(nil), "TradingCenterGuideConf")
	proto.RegisterType((*NoticeConf)(nil), "NoticeConf")
	proto.RegisterType((*StrengthBuy)(nil), "StrengthBuy")
	proto.RegisterType((*PlayerPieceCfg)(nil), "PlayerPieceCfg")
	proto.RegisterType((*AssistantModuleScore)(nil), "AssistantModuleScore")
	proto.RegisterType((*AssistantPower)(nil), "AssistantPower")
	proto.RegisterType((*FunctionIcon)(nil), "FunctionIcon")
	proto.RegisterType((*TacticLevel)(nil), "TacticLevel")
	proto.RegisterType((*FightMainAttr)(nil), "FightMainAttr")
	proto.RegisterType((*BattleTeaching)(nil), "BattleTeaching")
	proto.RegisterType((*PlayerCombineCfg)(nil), "PlayerCombineCfg")
	proto.RegisterType((*PlayerTagCfg)(nil), "PlayerTagCfg")
	proto.RegisterType((*CustomerPlayerTagCfg)(nil), "CustomerPlayerTagCfg")
	proto.RegisterType((*TourMatchCfg)(nil), "TourMatchCfg")
	proto.RegisterType((*TourMatchBuffPoolCfg)(nil), "TourMatchBuffPoolCfg")
	proto.RegisterType((*TourMatchBuffCfg)(nil), "TourMatchBuffCfg")
	proto.RegisterType((*TourMatchLotteryCfg)(nil), "TourMatchLotteryCfg")
	proto.RegisterType((*TourMatchDiscreteCfg)(nil), "TourMatchDiscreteCfg")
	proto.RegisterType((*TourMatchRobotCfg)(nil), "TourMatchRobotCfg")
	proto.RegisterType((*TourMatchSaoDangCfg)(nil), "TourMatchSaoDangCfg")
	proto.RegisterType((*LeagueLevelCfg)(nil), "LeagueLevelCfg")
	proto.RegisterType((*LeagueDonateCfg)(nil), "LeagueDonateCfg")
	proto.RegisterType((*LeagueDiscreteDataCfg)(nil), "LeagueDiscreteDataCfg")
	proto.RegisterType((*LeagueBuildingTradingCenterCfg)(nil), "LeagueBuildingTradingCenterCfg")
	proto.RegisterType((*LeagueBuildingShopCfg)(nil), "LeagueBuildingShopCfg")
	proto.RegisterType((*LeagueBuildingRedPacketCfg)(nil), "LeagueBuildingRedPacketCfg")
	proto.RegisterType((*PlayerGlobalCfg)(nil), "PlayerGlobalCfg")
	proto.RegisterType((*LeagueBuildingFinancialCenterCfg)(nil), "LeagueBuildingFinancialCenterCfg")
	proto.RegisterType((*LeaguePositionCfg)(nil), "LeaguePositionCfg")
	proto.RegisterType((*LeagueDailyBoxCfg)(nil), "LeagueDailyBoxCfg")
	proto.RegisterType((*LeagueRedPacketCfg)(nil), "LeagueRedPacketCfg")
	proto.RegisterType((*LeagueSalaryCfg)(nil), "LeagueSalaryCfg")
	proto.RegisterType((*LeagueBossLevelGroupCfg)(nil), "LeagueBossLevelGroupCfg")
	proto.RegisterType((*LeagueBossLevelCfg)(nil), "LeagueBossLevelCfg")
	proto.RegisterType((*LeagueBossBuffCfg)(nil), "LeagueBossBuffCfg")
	proto.RegisterType((*LeagueLogoCfg)(nil), "LeagueLogoCfg")
	proto.RegisterType((*LeagueBossFightCountCfg)(nil), "LeagueBossFightCountCfg")
	proto.RegisterType((*LeagueBossRankRewardCfg)(nil), "LeagueBossRankRewardCfg")
	proto.RegisterType((*LeagueBattleServerGroupCfg)(nil), "LeagueBattleServerGroupCfg")
	proto.RegisterType((*LeagueBattleGlobalCfg)(nil), "LeagueBattleGlobalCfg")
	proto.RegisterType((*LeagueBattleMatchCfg)(nil), "LeagueBattleMatchCfg")
	proto.RegisterType((*LeagueBattleWinStreakRateCfg)(nil), "LeagueBattleWinStreakRateCfg")
	proto.RegisterType((*LeagueBattleKValueCfg)(nil), "LeagueBattleKValueCfg")
	proto.RegisterType((*LeagueBattlePointRaceRewardCfg)(nil), "LeagueBattlePointRaceRewardCfg")
	proto.RegisterType((*LeagueBattleFinalRewardCfg)(nil), "LeagueBattleFinalRewardCfg")
	proto.RegisterType((*LeagueActivityGlobalCfg)(nil), "LeagueActivityGlobalCfg")
	proto.RegisterType((*LeagueActivityDonateCfg)(nil), "LeagueActivityDonateCfg")
	proto.RegisterType((*LeagueActivityLevelCfg)(nil), "LeagueActivityLevelCfg")
	proto.RegisterType((*LeagueActivityTaskCfg)(nil), "LeagueActivityTaskCfg")
	proto.RegisterType((*LeagueActivityRankRewardCfg)(nil), "LeagueActivityRankRewardCfg")
	proto.RegisterType((*LeagueActivityShopCfg)(nil), "LeagueActivityShopCfg")
	proto.RegisterType((*LeagueActivityGiftCfg)(nil), "LeagueActivityGiftCfg")
	proto.RegisterType((*BuffEffectConfig)(nil), "BuffEffectConfig")
	proto.RegisterType((*BuffConfig)(nil), "BuffConfig")
	proto.RegisterType((*BallerSkill)(nil), "BallerSkill")
	proto.RegisterType((*SkillConfig)(nil), "SkillConfig")
	proto.RegisterType((*ExclusiveCondition)(nil), "exclusiveCondition")
	proto.RegisterType((*ExclusiveTimeCfg)(nil), "exclusiveTimeCfg")
	proto.RegisterType((*ExclusiveTimeTrigCfg)(nil), "exclusiveTimeTrigCfg")
	proto.RegisterType((*PeerlessDanCfg)(nil), "PeerlessDanCfg")
	proto.RegisterType((*PeerlessDanRewardCfg)(nil), "PeerlessDanRewardCfg")
	proto.RegisterType((*PeerlessRankRewardCfg)(nil), "PeerlessRankRewardCfg")
	proto.RegisterType((*PeerlessChallengeRangeCfg)(nil), "PeerlessChallengeRangeCfg")
	proto.RegisterType((*PeerlessBuyChallengeCountPriceCfg)(nil), "PeerlessBuyChallengeCountPriceCfg")
	proto.RegisterType((*PeerlessRobotCfg)(nil), "PeerlessRobotCfg")
	proto.RegisterType((*PeerlessRobotRandCfg)(nil), "PeerlessRobotRandCfg")
	proto.RegisterType((*PeerlessDiscreteCfg)(nil), "PeerlessDiscreteCfg")
	proto.RegisterType((*PeerlessGroupingCfg)(nil), "PeerlessGroupingCfg")
	proto.RegisterType((*RegularSeasonCfg)(nil), "RegularSeasonCfg")
	proto.RegisterType((*RegularScheduleCfg)(nil), "RegularScheduleCfg")
	proto.RegisterType((*PlayoffScheduleCfg)(nil), "PlayoffScheduleCfg")
	proto.RegisterType((*PlayoffTaskCfg)(nil), "PlayoffTaskCfg")
	proto.RegisterType((*PlayoffDiscreteDataCfg)(nil), "PlayoffDiscreteDataCfg")
	proto.RegisterType((*RegularMatchCfg)(nil), "RegularMatchCfg")
	proto.RegisterType((*RegularChoiceQuestionCfg)(nil), "RegularChoiceQuestionCfg")
	proto.RegisterType((*RegularSaleCfg)(nil), "RegularSaleCfg")
	proto.RegisterType((*RegularChallengeCfg)(nil), "RegularChallengeCfg")
	proto.RegisterType((*RegularTaskCfg)(nil), "RegularTaskCfg")
	proto.RegisterType((*RegularNpcBaseCfg)(nil), "RegularNpcBaseCfg")
	proto.RegisterType((*HallOfFameCfg)(nil), "HallOfFameCfg")
	proto.RegisterType((*Assistant)(nil), "Assistant")
	proto.RegisterType((*ExclusiveAction)(nil), "ExclusiveAction")
	proto.RegisterType((*QuestionnaireSurvey)(nil), "QuestionnaireSurvey")
	proto.RegisterType((*KidLimitGlobal)(nil), "KidLimitGlobal")
	proto.RegisterType((*IsWorkDayConf)(nil), "IsWorkDayConf")
	proto.RegisterType((*TaskCfg)(nil), "TaskCfg")
	proto.RegisterType((*HandbookCfg)(nil), "HandbookCfg")
	proto.RegisterType((*TaskDiscreetDataCfg)(nil), "TaskDiscreetDataCfg")
	proto.RegisterType((*StoryTaskCfg)(nil), "StoryTaskCfg")
	proto.RegisterType((*ArenaChallengeCountPriceCfg)(nil), "ArenaChallengeCountPriceCfg")
	proto.RegisterType((*ArenaChallengeRewardCfg)(nil), "ArenaChallengeRewardCfg")
	proto.RegisterType((*ArenaRankingHistoryHighRewardCfg)(nil), "ArenaRankingHistoryHighRewardCfg")
	proto.RegisterType((*ArenaFlopCfg)(nil), "ArenaFlopCfg")
	proto.RegisterType((*ArenaTaskCfg)(nil), "ArenaTaskCfg")
	proto.RegisterType((*ArenaDailyRankingRewardCfg)(nil), "ArenaDailyRankingRewardCfg")
	proto.RegisterType((*ArenaDiscreteCfg)(nil), "ArenaDiscreteCfg")
	proto.RegisterType((*BallerRelationConf)(nil), "BallerRelationConf")
	proto.RegisterType((*BallerRelationStrengthenConf)(nil), "BallerRelationStrengthenConf")
	proto.RegisterType((*BallerRelationDungeonConf)(nil), "BallerRelationDungeonConf")
	proto.RegisterType((*BallerRelationGlobalConf)(nil), "BallerRelationGlobalConf")
	proto.RegisterType((*ConditionCfg)(nil), "ConditionCfg")
	proto.RegisterType((*PerformanceWeightCfg)(nil), "PerformanceWeightCfg")
	proto.RegisterType((*TestPlayerCfg)(nil), "TestPlayerCfg")
	proto.RegisterType((*LoopNoticeConf)(nil), "LoopNoticeConf")
	proto.RegisterType((*InformationConf)(nil), "InformationConf")
	proto.RegisterType((*RankListConf)(nil), "RankListConf")
	proto.RegisterType((*RankRewardGlobalCfg)(nil), "RankRewardGlobalCfg")
	proto.RegisterType((*RankRewardTaskCfg)(nil), "RankRewardTaskCfg")
	proto.RegisterType((*RankRewardCfg)(nil), "RankRewardCfg")
	proto.RegisterType((*DollarsBuyConf)(nil), "DollarsBuyConf")
	proto.RegisterType((*AllianceServerGroup)(nil), "AllianceServerGroup")
	proto.RegisterType((*ServerGroup)(nil), "ServerGroup")
	proto.RegisterType((*TreenodeType)(nil), "TreenodeType")
	proto.RegisterType((*OptionalBox)(nil), "OptionalBox")
	proto.RegisterType((*ShopCollectionCfg)(nil), "ShopCollectionCfg")
	proto.RegisterType((*ShopGlobalCfg)(nil), "ShopGlobalCfg")
	proto.RegisterType((*PlayerTransferCfg)(nil), "PlayerTransferCfg")
	proto.RegisterType((*GlobalTransferCfg)(nil), "GlobalTransferCfg")
	proto.RegisterType((*RosterLvCfg)(nil), "RosterLvCfg")
	proto.RegisterType((*RosterValueCfg)(nil), "RosterValueCfg")
	proto.RegisterType((*AllianceDeal)(nil), "AllianceDeal")
	proto.RegisterType((*AllianceGlobal)(nil), "AllianceGlobal")
	proto.RegisterType((*SettingGlobal)(nil), "SettingGlobal")
	proto.RegisterType((*PlatformChannel)(nil), "PlatformChannel")
	proto.RegisterType((*RankServerGroup)(nil), "RankServerGroup")
	proto.RegisterType((*MatchServerGroup)(nil), "matchServerGroup")
	proto.RegisterType((*FightFormula)(nil), "FightFormula")
	proto.RegisterType((*FightKey)(nil), "FightKey")
	proto.RegisterType((*FightAttrQuality)(nil), "FightAttrQuality")
	proto.RegisterType((*AutoExecCfg)(nil), "AutoExecCfg")
	proto.RegisterType((*FightBranchKey)(nil), "FightBranchKey")
	proto.RegisterType((*FightExecute)(nil), "FightExecute")
	proto.RegisterType((*FightGlobal)(nil), "FightGlobal")
	proto.RegisterType((*FightFastMultiple)(nil), "FightFastMultiple")
	proto.RegisterType((*BallerFeatures)(nil), "BallerFeatures")
	proto.RegisterType((*TacticRestraint)(nil), "TacticRestraint")
	proto.RegisterType((*AnimationClassification)(nil), "AnimationClassification")
	proto.RegisterType((*TacticName)(nil), "TacticName")
	proto.RegisterType((*TacticsWeight)(nil), "TacticsWeight")
	proto.RegisterType((*TacticAttr)(nil), "tacticAttr")
	proto.RegisterType((*PerformanceCustomsPass)(nil), "PerformanceCustomsPass")
	proto.RegisterType((*ThreeDunkPlaceBall)(nil), "ThreeDunkPlaceBall")
	proto.RegisterType((*PerformanceReward)(nil), "PerformanceReward")
	proto.RegisterType((*RarityHaloCfg)(nil), "RarityHaloCfg")
	proto.RegisterType((*TeamHaloCfg)(nil), "TeamHaloCfg")
	proto.RegisterType((*BestSquadGridCfg)(nil), "BestSquadGridCfg")
	proto.RegisterType((*BestSquadAttrCfg)(nil), "BestSquadAttrCfg")
	proto.RegisterType((*BestSquadHaloAttrCfg)(nil), "BestSquadHaloAttrCfg")
	proto.RegisterType((*BestSquadDiscreteDataCfg)(nil), "BestSquadDiscreteDataCfg")
	proto.RegisterType((*BestSquadStarCfg)(nil), "BestSquadStarCfg")
	proto.RegisterType((*PerformanceChapterCfg)(nil), "PerformanceChapterCfg")
	proto.RegisterType((*PerformanceWeighing)(nil), "PerformanceWeighing")
	proto.RegisterType((*PerformanceGlobal)(nil), "PerformanceGlobal")
	proto.RegisterType((*ColorBlockAdditionCfg)(nil), "ColorBlockAdditionCfg")
	proto.RegisterType((*TreeChoiceCfg)(nil), "TreeChoiceCfg")
	proto.RegisterType((*PlayerClassCfg)(nil), "PlayerClassCfg")
	proto.RegisterType((*ClassSlotActivateCfg)(nil), "ClassSlotActivateCfg")
	proto.RegisterType((*PlayerClassSlotAttrCfg)(nil), "PlayerClassSlotAttrCfg")
	proto.RegisterType((*PlayerTalentCfg)(nil), "PlayerTalentCfg")
	proto.RegisterType((*ClassTotalAttrCfg)(nil), "ClassTotalAttrCfg")
	proto.RegisterType((*RecruitBasic)(nil), "RecruitBasic")
	proto.RegisterType((*ExclusiveEquipLvItemCfg)(nil), "ExclusiveEquipLvItemCfg")
	proto.RegisterType((*ExclusiveEquipStarCfg)(nil), "ExclusiveEquipStarCfg")
	proto.RegisterType((*ExclusiveEquipLvCfg)(nil), "ExclusiveEquipLvCfg")
	proto.RegisterType((*ExclusiveEquipTalentCfg)(nil), "ExclusiveEquipTalentCfg")
	proto.RegisterType((*RecruitUrAchieveCfg)(nil), "RecruitUrAchieveCfg")
	proto.RegisterType((*RecruitUrControlCfg)(nil), "RecruitUrControlCfg")
	proto.RegisterType((*EquipmentCfg)(nil), "EquipmentCfg")
	proto.RegisterType((*PlayerSlotGlobalCfg)(nil), "PlayerSlotGlobalCfg")
	proto.RegisterType((*PlayerSlotLvCfg)(nil), "PlayerSlotLvCfg")
	proto.RegisterType((*EquipmentLvCfg)(nil), "EquipmentLvCfg")
	proto.RegisterType((*EquipmentLvTalentCfg)(nil), "EquipmentLvTalentCfg")
	proto.RegisterType((*EquipmentRefineCfg)(nil), "EquipmentRefineCfg")
	proto.RegisterType((*EquipmentRefineTalentCfg)(nil), "EquipmentRefineTalentCfg")
	proto.RegisterType((*EquipmentSuitCfg)(nil), "EquipmentSuitCfg")
	proto.RegisterType((*EquipmentLvMasterCfg)(nil), "EquipmentLvMasterCfg")
	proto.RegisterType((*EquipmentRefineMasterCfg)(nil), "EquipmentRefineMasterCfg")
	proto.RegisterType((*JewelryLvCfg)(nil), "JewelryLvCfg")
	proto.RegisterType((*EquipmentDiscreteDataCfg)(nil), "EquipmentDiscreteDataCfg")
	proto.RegisterType((*RecruitPrice)(nil), "RecruitPrice")
	proto.RegisterType((*RecruitGlobal)(nil), "RecruitGlobal")
	proto.RegisterType((*PopExchangeCfg)(nil), "PopExchangeCfg")
	proto.RegisterType((*LegendaryDan)(nil), "LegendaryDan")
	proto.RegisterType((*LegendaryGlobal)(nil), "LegendaryGlobal")
	proto.RegisterType((*LegendaryFormula)(nil), "LegendaryFormula")
	proto.RegisterType((*LegendaryCoefficient)(nil), "LegendaryCoefficient")
	proto.RegisterType((*LegendaryBossCfg)(nil), "LegendaryBossCfg")
	proto.RegisterType((*LegendaryChallengeReward)(nil), "LegendaryChallengeReward")
	proto.RegisterType((*LegendaryRankReward)(nil), "LegendaryRankReward")
	proto.RegisterType((*BusinessInviteChapter)(nil), "BusinessInviteChapter")
	proto.RegisterType((*BusinessInviteGlobal)(nil), "BusinessInviteGlobal")
	proto.RegisterType((*BusinessRegionalChapter)(nil), "BusinessRegionalChapter")
	proto.RegisterType((*BusinessRegionalLevel)(nil), "BusinessRegionalLevel")
	proto.RegisterType((*BusinessRegionalNpc)(nil), "BusinessRegionalNpc")
	proto.RegisterType((*AppointmentGlobalCfg)(nil), "AppointmentGlobalCfg")
	proto.RegisterType((*AppointmentInviteCfg)(nil), "AppointmentInviteCfg")
	proto.RegisterType((*AppointmentLotteryCfg)(nil), "AppointmentLotteryCfg")
	proto.RegisterType((*RebateGlobalCfg)(nil), "RebateGlobalCfg")
	proto.RegisterType((*BusinessRegionalGlobal)(nil), "BusinessRegionalGlobal")
	proto.RegisterType((*BusinessRegionalLoseProgress)(nil), "BusinessRegionalLoseProgress")
	proto.RegisterType((*MascotSectionCfg)(nil), "mascotSectionCfg")
	proto.RegisterType((*MascotChapterCfg)(nil), "mascotChapterCfg")
	proto.RegisterType((*MascotGlobalCfg)(nil), "mascotGlobalCfg")
	proto.RegisterType((*MascotTaskCfg)(nil), "mascotTaskCfg")
	proto.RegisterType((*LegendBasicCfg)(nil), "LegendBasicCfg")
	proto.RegisterType((*LegendLevelCfg)(nil), "LegendLevelCfg")
	proto.RegisterType((*LegendStarCfg)(nil), "LegendStarCfg")
	proto.RegisterType((*LegendGlobalCfg)(nil), "LegendGlobalCfg")
	proto.RegisterType((*LegendEquipCfg)(nil), "LegendEquipCfg")
	proto.RegisterType((*TeamGlobal)(nil), "teamGlobal")
	proto.RegisterType((*CompositionCfg)(nil), "compositionCfg")
	proto.RegisterType((*DecompositionCfg)(nil), "decompositionCfg")
	proto.RegisterType((*ReplacementCfg)(nil), "replacementCfg")
	proto.RegisterType((*TeamPhotoCfg)(nil), "teamPhotoCfg")
	proto.RegisterType((*CoachBaseCfg)(nil), "coachBaseCfg")
	proto.RegisterType((*CoachEquipCfg)(nil), "coachEquipCfg")
	proto.RegisterType((*CoachLevelCfg)(nil), "coachLevelCfg")
	proto.RegisterType((*CoachTalentCfg)(nil), "coachTalentCfg")
	proto.RegisterType((*HonorCfg)(nil), "honorCfg")
	proto.RegisterType((*TowerGradeCfg)(nil), "TowerGradeCfg")
	proto.RegisterType((*TowerAchieveCfg)(nil), "TowerAchieveCfg")
	proto.RegisterType((*TowerGlobalCfg)(nil), "TowerGlobalCfg")
	proto.RegisterType((*TowerPeakCfg)(nil), "TowerPeakCfg")
	proto.RegisterType((*ActivityOpenList)(nil), "ActivityOpenList")
	proto.RegisterType((*ActivityEveryDayEnergy)(nil), "ActivityEveryDayEnergy")
	proto.RegisterType((*ActivityLevelUp)(nil), "ActivityLevelUp")
	proto.RegisterType((*ActivitySign)(nil), "ActivitySign")
	proto.RegisterType((*ActivityWeek)(nil), "ActivityWeek")
	proto.RegisterType((*ActivityWeekDetails)(nil), "ActivityWeekDetails")
	proto.RegisterType((*ActivityWeekGlobal)(nil), "ActivityWeekGlobal")
	proto.RegisterType((*ActivityTopUpFirst)(nil), "ActivityTopUpFirst")
	proto.RegisterType((*ActivityCumulativeDeposit)(nil), "ActivityCumulativeDeposit")
	proto.RegisterType((*ActivityAccumulateGift)(nil), "ActivityAccumulateGift")
	proto.RegisterType((*ActivityOnlinegiftList)(nil), "ActivityOnlinegiftList")
	proto.RegisterType((*ActivityMonthCard)(nil), "ActivityMonthCard")
	proto.RegisterType((*ActivityFundPay)(nil), "ActivityFundPay")
	proto.RegisterType((*ActivityFundFree)(nil), "ActivityFundFree")
	proto.RegisterType((*ActivityRecruitGift)(nil), "ActivityRecruitGift")
	proto.RegisterType((*ActivityStarGift)(nil), "ActivityStarGift")
	proto.RegisterType((*ActivityURStarGift)(nil), "ActivityURStarGift")
	proto.RegisterType((*ActivityConsumeGift)(nil), "ActivityConsumeGift")
	proto.RegisterType((*ActivityContinuousGift)(nil), "ActivityContinuousGift")
	proto.RegisterType((*ActivityNewComerGift)(nil), "ActivityNewComerGift")
	proto.RegisterType((*ActivityLimitDiscount)(nil), "ActivityLimitDiscount")
	proto.RegisterType((*ActivityPreferentialGift)(nil), "ActivityPreferentialGift")
	proto.RegisterType((*PassportDailyConf)(nil), "PassportDailyConf")
	proto.RegisterType((*PassportBattleConf)(nil), "PassportBattleConf")
	proto.RegisterType((*PassportPurchaseConf)(nil), "PassportPurchaseConf")
	proto.RegisterType((*PassportDropListConf)(nil), "PassportDropListConf")
	proto.RegisterType((*Rechargeconf)(nil), "Rechargeconf")
	proto.RegisterType((*DiamondPurchaseConf)(nil), "DiamondPurchaseConf")
	proto.RegisterType((*BuySalaryConf)(nil), "BuySalaryConf")
	proto.RegisterType((*SalaryAttributeDownConf)(nil), "SalaryAttributeDownConf")
	proto.RegisterType((*SalaryOverallConf)(nil), "SalaryOverallConf")
	proto.RegisterType((*SkyLadderLevelConf)(nil), "SkyLadderLevelConf")
	proto.RegisterType((*SkyLadderMatchAwardConf)(nil), "SkyLadderMatchAwardConf")
	proto.RegisterType((*SkyLadderJoinAwardConf)(nil), "SkyLadderJoinAwardConf")
	proto.RegisterType((*SkyLadderGlobalConf)(nil), "SkyLadderGlobalConf")
	proto.RegisterType((*PrivilegeConf)(nil), "PrivilegeConf")
	proto.RegisterType((*PrivilegeMonthCardConf)(nil), "PrivilegeMonthCardConf")
	proto.RegisterType((*RansomConfig)(nil), "RansomConfig")
	proto.RegisterType((*RansomGlobal)(nil), "RansomGlobal")
	proto.RegisterType((*LimitBugGiftConf)(nil), "LimitBugGiftConf")
	proto.RegisterType((*CustomizeAttrConf)(nil), "CustomizeAttrConf")
	proto.RegisterType((*CustomizeBaseConf)(nil), "CustomizeBaseConf")
	proto.RegisterType((*CustomizePosConf)(nil), "CustomizePosConf")
	proto.RegisterType((*CustomizeStarConf)(nil), "CustomizeStarConf")
	proto.RegisterType((*VersionFunctionSwitchConf)(nil), "VersionFunctionSwitchConf")
	proto.RegisterType((*CustomizeFettersConf)(nil), "CustomizeFettersConf")
	proto.RegisterType((*ActivityGlobalConf)(nil), "ActivityGlobalConf")
	proto.RegisterType((*CustomizeTaskConf)(nil), "CustomizeTaskConf")
	proto.RegisterType((*LittleGameSeePictureCfg)(nil), "LittleGameSeePictureCfg")
	proto.RegisterType((*LittleGameCardCfg)(nil), "LittleGameCardCfg")
	proto.RegisterType((*LittleCupCfg)(nil), "LittleCupCfg")
	proto.RegisterType((*LittleCupGlobal)(nil), "LittleCupGlobal")
	proto.RegisterType((*LittleCupNpc)(nil), "LittleCupNpc")
	proto.RegisterType((*ActivityShoesGlobal)(nil), "ActivityShoesGlobal")
	proto.RegisterType((*AppointmentRewardCfg)(nil), "AppointmentRewardCfg")
	proto.RegisterType((*ActivityShoesTaskCfg)(nil), "ActivityShoesTaskCfg")
	proto.RegisterType((*FestivalSignCfg)(nil), "FestivalSignCfg")
	proto.RegisterType((*FestivalTaskCfg)(nil), "FestivalTaskCfg")
	proto.RegisterType((*FestivalExchangeCfg)(nil), "FestivalExchangeCfg")
	proto.RegisterType((*FestivalGiftCfg)(nil), "FestivalGiftCfg")
	proto.RegisterType((*FestivalDrawCfg)(nil), "FestivalDrawCfg")
	proto.RegisterType((*FestivalUICfg)(nil), "FestivalUICfg")
	proto.RegisterType((*GiftRewardCfg)(nil), "GiftRewardCfg")
	proto.RegisterType((*FashionableDressInformationCfg)(nil), "FashionableDressInformationCfg")
	proto.RegisterType((*FashionableDressIntensifyCfg)(nil), "FashionableDressIntensifyCfg")
	proto.RegisterType((*SneakerInformationCfg)(nil), "SneakerInformationCfg")
	proto.RegisterType((*RoleNameCfg)(nil), "RoleNameCfg")
	proto.RegisterType((*GamerLmdSdkGlobalCfg)(nil), "GamerLmdSdkGlobalCfg")
	proto.RegisterType((*FiftyDrawCfg)(nil), "FiftyDrawCfg")
	proto.RegisterType((*DraftMatchCfg)(nil), "DraftMatchCfg")
	proto.RegisterType((*DraftMatchCardCfg)(nil), "DraftMatchCardCfg")
	proto.RegisterType((*HeadCoachSkillCfg)(nil), "HeadCoachSkillCfg")
	proto.RegisterType((*HeadCoachGlobalCfg)(nil), "HeadCoachGlobalCfg")
	proto.RegisterType((*BehaviourCreateMatchDateCfg)(nil), "BehaviourCreateMatchDateCfg")
	proto.RegisterType((*BehaviourDateRangeCfg)(nil), "BehaviourDateRangeCfg")
	proto.RegisterType((*BehaviourPointsCfg)(nil), "BehaviourPointsCfg")
	proto.RegisterType((*BehaviourWeightCfg)(nil), "BehaviourWeightCfg")
	proto.RegisterType((*GuessShopCfg)(nil), "GuessShopCfg")
	proto.RegisterType((*GuessReward)(nil), "GuessReward")
	proto.RegisterType((*SetAwardCfg)(nil), "SetAwardCfg")
	proto.RegisterType((*EvaluateCfg)(nil), "EvaluateCfg")
	proto.RegisterType((*RichmanGridCfg)(nil), "RichmanGridCfg")
	proto.RegisterType((*RichmanDiceCfg)(nil), "RichmanDiceCfg")
	proto.RegisterType((*RichmanBuffCfg)(nil), "RichmanBuffCfg")
	proto.RegisterType((*RichmanGlobalCfg)(nil), "RichmanGlobalCfg")
	proto.RegisterType((*RichmanTaskCfg)(nil), "RichmanTaskCfg")
	proto.RegisterEnum("ActivityTimeType", ActivityTimeType_name, ActivityTimeType_value)
	proto.RegisterEnum("ActivityGroupType", ActivityGroupType_name, ActivityGroupType_value)
	proto.RegisterEnum("RichmanGridType", RichmanGridType_name, RichmanGridType_value)
}

func init() { proto.RegisterFile("conf.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 15289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x7d, 0x69, 0x8c, 0x24, 0x59,
	0x7a, 0x10, 0x79, 0xd4, 0xf5, 0xea, 0x3e, 0xba, 0xbb, 0x66, 0x7a, 0xb6, 0x77, 0x26, 0x7b, 0xee,
	0xd9, 0xe9, 0xdd, 0xee, 0xde, 0x59, 0xcb, 0x86, 0x5d, 0xbb, 0xbb, 0xaa, 0x7b, 0xa6, 0x67, 0x6b,
	0x7a, 0x6a, 0xaa, 0x6a, 0x66, 0xd6, 0xb3, 0x36, 0xb9, 0x51, 0x99, 0x91, 0x59, 0xe1, 0xca, 0xcc,
	0xc8, 0x89, 0x88, 0xac, 0x63, 0x91, 0xb1, 0xb1, 0x10, 0xbe, 0x2d, 0x2c, 0x0c, 0xd6, 0x82, 0x30,
	0x42, 0xb6, 0x39, 0x6d, 0xf8, 0x03, 0x08, 0xb0, 0xfc, 0xcb, 0x42, 0xc8, 0xc6, 0xc2, 0xe2, 0x87,
	0x85, 0xcc, 0x61, 0x1b, 0xc9, 0x7f, 0xf8, 0x81, 0x04, 0xe2, 0x07, 0x42, 0x02, 0xc1, 0x77, 0xbd,
	0x23, 0x22, 0x5f, 0x64, 0x55, 0x8f, 0x77, 0xc1, 0x88, 0x3f, 0xdd, 0x95, 0x2f, 0x5e, 0xbc, 0x78,
	0xef, 0x7b, 0xef, 0x7d, 0xf7, 0xa1, 0x54, 0x2b, 0x1e, 0x74, 0x6e, 0x0d, 0x93, 0x38, 0x8b, 0x1b,
	0x2f, 0x2b, 0xf5, 0x28, 0x0b, 0xfb, 0x5b, 0xd0, 0x12, 0x75, 0xd7, 0x94, 0xaa, 0x46, 0xed, 0xcd,
	0xca, 0xb3, 0x95, 0x97, 0xa7, 0xd6, 0x96, 0xd4, 0xf4, 0x60, 0xd4, 0x3f, 0x0c, 0x93, 0xcd, 0x2a,
	0xfe, 0x6e, 0x7c, 0x87, 0x5a, 0xc2, 0x9e, 0x1f, 0x04, 0xc9, 0xb9, 0xf4, 0x5e, 0x50, 0xf5, 0xec,
	0x7c, 0x18, 0x4a, 0x7f, 0x7e, 0xb7, 0x5a, 0x78, 0xb7, 0x46, 0xef, 0x7e, 0x9b, 0x5a, 0xcb, 0xbf,
	0xbb, 0x13, 0xa5, 0xd9, 0xda, 0x73, 0x6a, 0x36, 0x82, 0x56, 0xfc, 0x1b, 0xc6, 0xa8, 0xbd, 0x3c,
	0x7f, 0x67, 0xf9, 0x56, 0xbe, 0x5b, 0xe3, 0x96, 0x5a, 0x3e, 0x80, 0x4f, 0x7c, 0x10, 0xf4, 0x46,
	0xa1, 0xf7, 0xab, 0x8b, 0x6a, 0xea, 0x04, 0x1f, 0xca, 0x24, 0xff, 0x7d, 0x45, 0x4d, 0xdd, 0x6b,
	0xb5, 0x76, 0x4e, 0x70, 0x0a, 0x41, 0xab, 0xd5, 0xec, 0x9d, 0x48, 0xc7, 0x65, 0x35, 0x83, 0xbf,
	0xc3, 0xb3, 0xa1, 0x9d, 0x63, 0x1a, 0xf4, 0xe0, 0x53, 0x3c, 0xc7, 0xb5, 0x4d, 0xb5, 0x32, 0x1a,
	0xf4, 0xe2, 0xd6, 0x71, 0x33, 0xe8, 0x65, 0x61, 0x32, 0x08, 0xb2, 0x70, 0xb3, 0x4e, 0x4f, 0xae,
	0xaa, 0xa5, 0xe1, 0xd1, 0x79, 0x1a, 0xb5, 0x82, 0x5e, 0xb3, 0x17, 0xf5, 0xa3, 0x6c, 0x73, 0x9a,
	0xda, 0x9f, 0x52, 0xab, 0xa6, 0x3d, 0x09, 0x5b, 0xf1, 0x49, 0x08, 0x83, 0xcd, 0xd0, 0xa3, 0x2b,
	0x6a, 0x31, 0x1e, 0x86, 0x83, 0xe6, 0x30, 0x4e, 0xa3, 0x2c, 0x8a, 0x07, 0x9b, 0x73, 0xd4, 0xfc,
	0xb4, 0x5a, 0x6b, 0xc7, 0x3d, 0xf8, 0x68, 0xb3, 0x15, 0x24, 0xed, 0x68, 0x10, 0xf4, 0xa2, 0xec,
	0x7c, 0x53, 0xd1, 0xb3, 0x9b, 0x6a, 0x2e, 0x0b, 0x5a, 0x59, 0x44, 0x73, 0x9e, 0x27, 0x70, 0xac,
	0xdc, 0x2a, 0x2c, 0xbe, 0xf1, 0xfb, 0x55, 0x35, 0x8b, 0x20, 0xba, 0x1f, 0xa4, 0x21, 0x2e, 0x09,
	0xe1, 0xd7, 0x34, 0x5b, 0xb6, 0xaa, 0xe6, 0xa8, 0x61, 0x10, 0xf4, 0x19, 0x20, 0x73, 0x6b, 0xb0,
	0x2d, 0xd4, 0xd4, 0xea, 0x05, 0x69, 0x2a, 0x2b, 0xd5, 0xdd, 0x08, 0x8c, 0x75, 0x0d, 0x9d, 0x8f,
	0x47, 0x3c, 0x9b, 0x29, 0x6a, 0xb8, 0xa6, 0x96, 0xd3, 0xd1, 0x30, 0x4c, 0x60, 0x01, 0x61, 0x6e,
	0xd1, 0xf8, 0x72, 0xda, 0x1c, 0xa5, 0xc1, 0x61, 0x2f, 0x94, 0xc5, 0xc2, 0x37, 0x46, 0xba, 0x57,
	0xba, 0x39, 0xab, 0xf7, 0x65, 0x18, 0x24, 0x41, 0x5f, 0x16, 0x8e, 0x53, 0x4d, 0x9b, 0x69, 0xd8,
	0xeb, 0x99, 0xd5, 0x2a, 0xfc, 0xd5, 0x1c, 0x26, 0x51, 0x2b, 0x84, 0xe5, 0x56, 0x3c, 0xbb, 0xbf,
	0xb6, 0xa1, 0x16, 0xe0, 0xad, 0x2c, 0xea, 0x87, 0x3c, 0x83, 0x05, 0xfd, 0x39, 0xfa, 0x49, 0x0f,
	0x36, 0x17, 0x69, 0x99, 0x2b, 0x6a, 0x36, 0x18, 0x65, 0x31, 0xcc, 0x2b, 0xdc, 0x5c, 0xa2, 0x5e,
	0x2f, 0xa9, 0x25, 0x6a, 0x81, 0xb3, 0xde, 0xe6, 0x2d, 0x58, 0xf6, 0x1e, 0x31, 0x3c, 0x07, 0xdd,
	0x3e, 0xbd, 0xb8, 0x42, 0x47, 0xe8, 0x15, 0x3e, 0xe7, 0x08, 0x61, 0xe9, 0x71, 0x4d, 0xd5, 0xdb,
	0x41, 0x16, 0xc8, 0x19, 0x9d, 0xbb, 0xa5, 0x1f, 0x37, 0xbe, 0xa2, 0xae, 0xee, 0x1f, 0xc1, 0x46,
	0x3e, 0x38, 0x6b, 0x1d, 0x05, 0x83, 0x6e, 0xb8, 0xdb, 0x0b, 0xce, 0xc3, 0x64, 0xab, 0x93, 0xbf,
	0x48, 0xfa, 0xc0, 0xf2, 0xb1, 0x5b, 0x57, 0xf3, 0x30, 0xa5, 0x74, 0xd4, 0x0f, 0x9b, 0x70, 0x45,
	0x64, 0x47, 0x00, 0x3c, 0xed, 0x24, 0x1e, 0xe2, 0x4e, 0xd2, 0x7e, 0x34, 0xbe, 0xaa, 0xe6, 0xb6,
	0xce, 0x5b, 0xbd, 0xf0, 0x00, 0x96, 0x88, 0x8b, 0x6b, 0xe1, 0x8f, 0xdc, 0x46, 0xa7, 0x59, 0x90,
	0x64, 0xcd, 0x76, 0x70, 0x6e, 0x37, 0x9a, 0x9b, 0x08, 0x2a, 0x35, 0x7d, 0x0a, 0xe1, 0x5b, 0x59,
	0x34, 0x18, 0x85, 0xdc, 0xcc, 0x83, 0xff, 0x46, 0x45, 0xcd, 0xbf, 0x33, 0xea, 0x65, 0xd1, 0x30,
	0xdc, 0x86, 0xaf, 0xba, 0x5f, 0xaf, 0xe8, 0x39, 0xf6, 0x83, 0xb3, 0x66, 0x12, 0x0c, 0xda, 0x38,
	0x47, 0xfc, 0xc0, 0xe2, 0xda, 0x2d, 0xb5, 0x40, 0xbd, 0x86, 0x41, 0xeb, 0x38, 0xe8, 0xe2, 0x27,
	0x10, 0x1a, 0x9b, 0xb7, 0x9c, 0x91, 0x6e, 0xe1, 0x3f, 0xbb, 0xfc, 0xfc, 0xe9, 0x50, 0xcd, 0x3b,
	0x3f, 0xf1, 0x12, 0xb5, 0xe2, 0x7e, 0x3f, 0x86, 0xcd, 0x38, 0x6f, 0x3a, 0x17, 0x18, 0xf6, 0xd8,
	0xb6, 0x1b, 0x04, 0x02, 0x97, 0xd1, 0xb6, 0xba, 0xa8, 0x04, 0xb7, 0xeb, 0x34, 0x8c, 0xba, 0x47,
	0x72, 0x1e, 0x1b, 0x23, 0xb5, 0xb2, 0x45, 0xc0, 0x7f, 0x0c, 0x87, 0xfe, 0xc1, 0x19, 0x5c, 0xba,
	0x36, 0x8e, 0x89, 0xaf, 0x76, 0xce, 0x61, 0xf7, 0x47, 0x83, 0x4c, 0xbe, 0xf4, 0x82, 0x5a, 0x08,
	0xe9, 0x79, 0xb3, 0x1f, 0x0f, 0x42, 0x84, 0x9b, 0xf7, 0x3c, 0x3c, 0xaf, 0xe6, 0xe3, 0xec, 0x28,
	0x4c, 0x9a, 0x29, 0xf6, 0xa5, 0xaf, 0x7a, 0x10, 0xd3, 0xef, 0xd7, 0xd5, 0x2a, 0x6f, 0x37, 0x9e,
	0x84, 0x7b, 0x59, 0x86, 0xed, 0xb9, 0x6d, 0x87, 0x5d, 0x4b, 0x8f, 0xe2, 0x53, 0xe7, 0x2e, 0xc2,
	0xd4, 0x93, 0x20, 0xc1, 0x3b, 0x56, 0x2b, 0x60, 0xa0, 0xba, 0x3e, 0xd8, 0x9d, 0x28, 0x49, 0xb3,
	0x61, 0x2f, 0x80, 0x3b, 0x31, 0xa5, 0x47, 0xe9, 0x9d, 0x34, 0xbb, 0x49, 0x3c, 0x1a, 0xca, 0x05,
	0x94, 0x8d, 0x96, 0x36, 0x83, 0x6e, 0x86, 0x34, 0x99, 0x66, 0x70, 0x02, 0x27, 0x35, 0x91, 0x4b,
	0xc8, 0xb7, 0x0e, 0x11, 0x91, 0x5c, 0x1d, 0xc4, 0x58, 0xdc, 0x6f, 0x18, 0x85, 0x2d, 0x38, 0x50,
	0xb0, 0x28, 0xba, 0x41, 0x53, 0x6b, 0x9f, 0x52, 0x57, 0x72, 0x8f, 0x00, 0xfc, 0x43, 0x00, 0x5e,
	0x5b, 0xae, 0x13, 0x1c, 0x09, 0x79, 0x9c, 0x85, 0x70, 0xab, 0x97, 0xf5, 0x02, 0x8e, 0x78, 0x2f,
	0x56, 0x0a, 0xd3, 0xe8, 0x84, 0x19, 0xe0, 0xd0, 0xcd, 0x75, 0x00, 0x31, 0xcf, 0xb8, 0x17, 0x67,
	0x32, 0xe3, 0x0d, 0xbd, 0xed, 0x59, 0xd0, 0x0b, 0x07, 0xba, 0xf5, 0x8a, 0xc6, 0x1a, 0x59, 0x94,
	0x01, 0x62, 0xb9, 0x4a, 0x2f, 0x42, 0xa7, 0x24, 0x4e, 0x61, 0x20, 0xe9, 0x74, 0x4d, 0xa3, 0xe3,
	0xf0, 0xac, 0xd5, 0x1b, 0xa5, 0xd1, 0x09, 0x1c, 0xeb, 0x24, 0xea, 0x6e, 0x6e, 0x52, 0xfb, 0x6b,
	0x6a, 0xcd, 0xb6, 0x23, 0x26, 0x3d, 0x41, 0x14, 0xfe, 0x94, 0x7f, 0x97, 0x01, 0x34, 0x61, 0x3a,
	0x1c, 0xe0, 0x89, 0x7b, 0x9a, 0xde, 0x7e, 0x46, 0x6d, 0xc8, 0xdc, 0xf1, 0xca, 0x24, 0xf0, 0x3e,
	0x43, 0xe7, 0xba, 0x9e, 0x2e, 0x01, 0x9d, 0xa0, 0x02, 0xa8, 0xe2, 0x19, 0x0d, 0xdf, 0x41, 0x04,
	0x04, 0x03, 0x06, 0xf9, 0x94, 0x6e, 0x80, 0x1e, 0x87, 0xd1, 0x20, 0xdc, 0xbc, 0x41, 0x2b, 0xb0,
	0x60, 0x4b, 0xa3, 0xee, 0x60, 0xf3, 0x59, 0x03, 0x0f, 0x39, 0x19, 0xcd, 0x6c, 0xf3, 0x39, 0x7d,
	0xa3, 0x07, 0xe1, 0x69, 0x33, 0xea, 0xe3, 0xd5, 0x6a, 0xd0, 0xc9, 0x7e, 0x4f, 0xcd, 0x3f, 0x0e,
	0x4f, 0x1f, 0x61, 0x4b, 0x11, 0xa5, 0x40, 0xef, 0xc3, 0xa0, 0xd7, 0x83, 0x61, 0xcd, 0x8d, 0x01,
	0xf2, 0x61, 0x51, 0x1d, 0x1f, 0xda, 0x71, 0xf2, 0xf1, 0x17, 0x2b, 0x6a, 0xe5, 0x3e, 0xbd, 0xb8,
	0xc5, 0x0b, 0x29, 0x0e, 0x0c, 0xeb, 0xbc, 0x27, 0x90, 0x3b, 0xb0, 0x38, 0xeb, 0x25, 0xb5, 0xa8,
	0x5b, 0x77, 0x09, 0xa9, 0xd7, 0xfc, 0xe4, 0x09, 0x0f, 0xc4, 0x3b, 0xd1, 0xe0, 0x31, 0xe0, 0x0c,
	0x3e, 0xd1, 0x2f, 0xaa, 0x45, 0xf9, 0xd0, 0x83, 0x4e, 0x27, 0x6c, 0x65, 0x70, 0xa8, 0xbd, 0x64,
	0xfe, 0xbf, 0x57, 0xd4, 0x53, 0x7c, 0x9b, 0x3e, 0x8c, 0x93, 0xec, 0x68, 0x2b, 0x0e, 0x3b, 0x9d,
	0xa8, 0x15, 0xc1, 0xf1, 0x28, 0x4e, 0x70, 0x5e, 0xd5, 0xfa, 0xd1, 0x40, 0xe6, 0x05, 0x0f, 0x3a,
	0x5d, 0xb9, 0x4c, 0x80, 0x65, 0xcf, 0xee, 0xee, 0x66, 0xf2, 0x61, 0x7c, 0x92, 0xc9, 0x15, 0x82,
	0x57, 0x92, 0xf0, 0x50, 0x6e, 0x0f, 0xfc, 0x08, 0x80, 0xdd, 0x98, 0xd1, 0x3f, 0x0e, 0x7b, 0xc7,
	0x72, 0x59, 0xe0, 0x47, 0x9a, 0xf5, 0x84, 0x5e, 0xc1, 0xfb, 0xc3, 0x8e, 0x90, 0x2a, 0xf8, 0x3b,
	0x8b, 0x89, 0x44, 0x51, 0xa7, 0x21, 0xd0, 0xb8, 0x05, 0xc3, 0x52, 0x00, 0xcd, 0xc7, 0x1d, 0x5b,
	0xd4, 0xd7, 0x4b, 0x1a, 0x76, 0x01, 0xf3, 0xc1, 0x4a, 0x70, 0x2f, 0x96, 0x34, 0x42, 0xeb, 0x01,
	0xf8, 0x7a, 0xe7, 0xce, 0x13, 0xba, 0x44, 0x8d, 0x47, 0xb9, 0xa5, 0xef, 0x05, 0x83, 0xe3, 0x68,
	0x40, 0xfc, 0x11, 0x2e, 0x1d, 0x3e, 0x91, 0x70, 0x8b, 0x97, 0xdf, 0xc1, 0x55, 0x1f, 0x8e, 0x3a,
	0x1d, 0x61, 0xb3, 0x7e, 0x40, 0xad, 0x6e, 0xc3, 0xf5, 0xdf, 0xcf, 0x82, 0x0c, 0xde, 0x8f, 0x5a,
	0x29, 0x0e, 0x01, 0x67, 0x45, 0x8e, 0xa0, 0x0b, 0x44, 0x84, 0x08, 0x63, 0x25, 0x81, 0x48, 0x4d,
	0xff, 0x40, 0x20, 0xd4, 0xf5, 0x0f, 0x04, 0xcf, 0x14, 0xfd, 0x60, 0x88, 0x4c, 0xeb, 0xbf, 0x01,
	0x22, 0x33, 0xba, 0xd3, 0x50, 0xa8, 0xfe, 0x5c, 0xe3, 0x77, 0x2a, 0x6a, 0xf3, 0x20, 0x09, 0x80,
	0xb3, 0xe9, 0x6e, 0xc1, 0xe6, 0xc1, 0x31, 0x1b, 0x25, 0x49, 0x38, 0x68, 0x9d, 0x17, 0xb7, 0x11,
	0x0e, 0x4a, 0x2f, 0x3c, 0x09, 0x7b, 0xb7, 0x2d, 0x33, 0x46, 0xbf, 0xef, 0x58, 0x82, 0xa8, 0xf9,
	0x91, 0x3a, 0xdd, 0x19, 0xe0, 0x47, 0xf4, 0x45, 0x42, 0xb6, 0x01, 0xc9, 0x12, 0xef, 0xee, 0x75,
	0xb5, 0xae, 0xf1, 0xd6, 0x28, 0x01, 0x32, 0x9c, 0x32, 0x5d, 0x9d, 0xd6, 0x50, 0x97, 0x87, 0x6d,
	0xb8, 0x6f, 0x4c, 0x03, 0x67, 0x0a, 0xaf, 0x85, 0x42, 0xbc, 0xe9, 0xb5, 0x59, 0x8d, 0xec, 0xe8,
	0x54, 0x0b, 0xe3, 0x43, 0x47, 0xa2, 0xf1, 0x7e, 0x61, 0x69, 0x6f, 0x8e, 0xa2, 0x76, 0x30, 0x68,
	0x8d, 0x5d, 0x21, 0x67, 0xea, 0x55, 0xbd, 0x65, 0x38, 0xe7, 0xdb, 0xb2, 0x34, 0xf9, 0x79, 0x47,
	0x88, 0x71, 0x4f, 0x5d, 0x61, 0x0a, 0xda, 0x23, 0x12, 0x7a, 0xaf, 0xdb, 0x4d, 0xc2, 0x2e, 0x9c,
	0x14, 0x3c, 0x4c, 0x44, 0x6f, 0x03, 0xdd, 0x62, 0xf7, 0x0f, 0x30, 0x60, 0xfe, 0x11, 0xd1, 0xb2,
	0xa9, 0xb5, 0x67, 0x01, 0xa9, 0x9d, 0x35, 0xf1, 0x91, 0xdc, 0xd0, 0xb1, 0x8b, 0xf6, 0x25, 0xb5,
	0xba, 0x95, 0x84, 0xf0, 0xc6, 0x5e, 0xdc, 0x0b, 0xef, 0xb5, 0xdb, 0xf8, 0x38, 0x37, 0xfb, 0x4f,
	0x01, 0xb3, 0x12, 0xf6, 0x99, 0x47, 0xf6, 0xbc, 0x9f, 0xa9, 0x65, 0x3e, 0xac, 0x40, 0xf1, 0x12,
	0x82, 0x11, 0x61, 0xb3, 0x16, 0xd0, 0x18, 0x97, 0xa8, 0x03, 0x00, 0xb9, 0xcd, 0x3d, 0xab, 0x00,
	0x98, 0x7e, 0x10, 0x11, 0xca, 0xad, 0xe9, 0x5e, 0xed, 0x70, 0x38, 0xd2, 0xfc, 0x80, 0x21, 0x82,
	0x01, 0x8c, 0x2d, 0x6f, 0xd2, 0x1e, 0x37, 0xbe, 0xac, 0xbf, 0x7a, 0x1f, 0xce, 0xfa, 0x93, 0x7f,
	0x15, 0x6f, 0x88, 0xf9, 0x6a, 0xe3, 0x4f, 0xa9, 0x59, 0x1e, 0x0c, 0x84, 0x04, 0x3c, 0xee, 0x2e,
	0xc1, 0x36, 0xa4, 0xd6, 0xec, 0x1c, 0x9d, 0x4a, 0x99, 0x2f, 0xf4, 0x46, 0xf1, 0xa1, 0xae, 0x4f,
	0x2c, 0xf2, 0x48, 0xc0, 0xab, 0x4f, 0x11, 0x7b, 0xf4, 0x3c, 0x12, 0x6f, 0x20, 0x85, 0x4d, 0x9c,
	0x3d, 0x1c, 0x3f, 0x46, 0x90, 0x05, 0x60, 0x35, 0x7e, 0xad, 0xa2, 0x14, 0xb7, 0xc1, 0x25, 0x4d,
	0xf2, 0xdf, 0xcf, 0x13, 0xf6, 0x6a, 0xae, 0x8d, 0xa7, 0x31, 0xa5, 0x57, 0xc4, 0x6d, 0x27, 0x96,
	0x25, 0x67, 0x9a, 0x8d, 0x27, 0x78, 0x46, 0xaf, 0x05, 0x67, 0x87, 0xfd, 0x04, 0xa3, 0xe5, 0xe7,
	0x37, 0xef, 0x9f, 0x1f, 0xf6, 0x4a, 0x8f, 0x23, 0xb8, 0x60, 0xf4, 0xe6, 0x62, 0x89, 0x14, 0x92,
	0x01, 0x65, 0x02, 0xba, 0x87, 0x1c, 0x97, 0x87, 0x32, 0x11, 0x49, 0x74, 0xd8, 0x9e, 0x67, 0x91,
	0x28, 0x12, 0xc7, 0x5b, 0x72, 0x2a, 0x0b, 0x73, 0xab, 0x97, 0xc0, 0xee, 0x1c, 0x68, 0x53, 0xaf,
	0x17, 0xe1, 0x9d, 0x23, 0xf1, 0x07, 0xb6, 0x3b, 0x90, 0xdf, 0x56, 0xcc, 0x83, 0x85, 0x8f, 0x86,
	0xc2, 0xba, 0x31, 0x08, 0x5f, 0x01, 0xcc, 0x21, 0x52, 0x98, 0xe5, 0x24, 0xfd, 0xe4, 0x0b, 0x90,
	0x8c, 0x19, 0x51, 0xba, 0xf2, 0x25, 0x7d, 0x57, 0xcd, 0xeb, 0x4f, 0xbf, 0x1d, 0x1f, 0x12, 0x55,
	0xd7, 0x43, 0x9a, 0x95, 0x23, 0xf3, 0x63, 0xbe, 0x63, 0x57, 0x0f, 0x14, 0x15, 0xe4, 0x90, 0xa3,
	0x38, 0x11, 0xfe, 0x16, 0xbf, 0x3d, 0xd5, 0xb8, 0xaf, 0x96, 0x78, 0x79, 0x6f, 0x26, 0xf1, 0x29,
	0x2e, 0x31, 0x07, 0xc4, 0x3c, 0x3c, 0x9e, 0x2e, 0x81, 0xc7, 0x2f, 0x55, 0xd4, 0x02, 0x5f, 0x66,
	0x7e, 0x62, 0x31, 0xbd, 0x3d, 0x53, 0x28, 0x86, 0x11, 0x37, 0xc9, 0xb0, 0x78, 0x55, 0xad, 0x0c,
	0x60, 0x7a, 0xad, 0x38, 0x09, 0x9b, 0xd2, 0xb5, 0x14, 0x18, 0xcf, 0xaa, 0x4d, 0xe0, 0x48, 0x34,
	0xfa, 0xcc, 0xa3, 0x9b, 0x29, 0x7d, 0x38, 0x51, 0x8c, 0x3d, 0x0c, 0xba, 0xb8, 0xb0, 0x69, 0xcb,
	0xb8, 0x8f, 0x12, 0xc0, 0xc2, 0xf2, 0x08, 0x9e, 0xd0, 0x91, 0x6c, 0xbc, 0xa1, 0x14, 0xcf, 0xf6,
	0x00, 0x18, 0x48, 0xbc, 0x3e, 0xc8, 0x48, 0x9a, 0x89, 0x02, 0xe8, 0xf1, 0x77, 0xb3, 0x1d, 0x76,
	0x02, 0x40, 0x87, 0x86, 0xaf, 0x69, 0xfc, 0x74, 0x45, 0x2d, 0xc1, 0x76, 0x1f, 0x87, 0x19, 0x72,
	0x3c, 0xf4, 0x6e, 0xe1, 0xbc, 0xd1, 0x7b, 0x0e, 0xc4, 0x75, 0x13, 0xc8, 0x9f, 0x99, 0xe5, 0xb4,
	0xcd, 0x7e, 0x0a, 0x5b, 0x66, 0xde, 0x6a, 0x6a, 0x3e, 0x21, 0xd7, 0x18, 0x0a, 0xa9, 0xcb, 0x35,
	0x06, 0x4c, 0xf3, 0x1a, 0x0f, 0xf4, 0xee, 0xc1, 0x66, 0xc0, 0xdc, 0xa2, 0x96, 0x33, 0xa5, 0x45,
	0xda, 0x06, 0xe4, 0x92, 0xc2, 0x4c, 0x74, 0x27, 0x74, 0x08, 0x86, 0xf1, 0x29, 0xf2, 0xc5, 0xc0,
	0x57, 0xc6, 0x2c, 0xca, 0x2c, 0x36, 0x7e, 0x14, 0x84, 0xf9, 0xc7, 0xc3, 0xd6, 0x5e, 0x7c, 0x18,
	0x67, 0xf8, 0xa1, 0x08, 0xc9, 0x0a, 0xe0, 0xae, 0xdc, 0x99, 0x12, 0xf2, 0xdf, 0xec, 0xf4, 0xe2,
	0x38, 0xb1, 0xd2, 0x91, 0x6e, 0xce, 0xe2, 0x21, 0x13, 0x29, 0xbb, 0xd0, 0x61, 0x4b, 0x63, 0x25,
	0x97, 0x51, 0x34, 0xd8, 0x02, 0x88, 0x87, 0x34, 0x69, 0x32, 0x35, 0xa3, 0x97, 0x2f, 0xed, 0xa9,
	0x95, 0x20, 0x50, 0x92, 0x42, 0x9c, 0xcd, 0x4f, 0x52, 0xc0, 0x25, 0x35, 0x3d, 0x44, 0xeb, 0x18,
	0x2e, 0x9a, 0x6e, 0x57, 0x1a, 0xac, 0xe1, 0x19, 0xf0, 0xce, 0x82, 0x80, 0xe7, 0xf5, 0x14, 0x80,
	0x63, 0x6b, 0xd2, 0xfa, 0x85, 0x71, 0xc2, 0x26, 0xc0, 0x4e, 0xdc, 0x44, 0xac, 0x53, 0xe3, 0x1f,
	0x56, 0xd4, 0x0c, 0xc0, 0x82, 0xf6, 0x17, 0x86, 0xc1, 0x45, 0x10, 0xdc, 0x5d, 0x99, 0x74, 0x70,
	0x18, 0x98, 0xc6, 0x6a, 0x6e, 0x7a, 0xee, 0x59, 0x76, 0xa7, 0xa7, 0xdb, 0xeb, 0x5a, 0x9c, 0x38,
	0x84, 0x1b, 0xd5, 0x0b, 0x5d, 0xe2, 0x82, 0xad, 0xf8, 0xd5, 0x07, 0x67, 0x74, 0xf8, 0x53, 0x42,
	0xdd, 0x34, 0x45, 0x6c, 0x45, 0x82, 0x93, 0x02, 0x80, 0x64, 0x75, 0x96, 0x0a, 0x21, 0xc7, 0x83,
	0x17, 0xf9, 0xf7, 0x2a, 0xb4, 0x87, 0xc4, 0x16, 0x6b, 0xe8, 0xbb, 0x14, 0x05, 0x7f, 0x3b, 0x67,
	0x13, 0x76, 0x0e, 0x5b, 0x48, 0xf7, 0x86, 0x94, 0xcb, 0x12, 0x43, 0x98, 0x34, 0x3e, 0x71, 0x04,
	0xc0, 0xba, 0x3b, 0x06, 0x08, 0x8e, 0xa1, 0x3d, 0xa7, 0xd8, 0xa2, 0x77, 0x6f, 0xba, 0xb0, 0xf1,
	0x33, 0xee, 0x6b, 0xce, 0x56, 0xc2, 0x59, 0x82, 0x89, 0x1a, 0xf4, 0xa1, 0xf7, 0x12, 0x31, 0x04,
	0xed, 0x83, 0xd2, 0xef, 0x41, 0x2f, 0x5e, 0xe1, 0x3c, 0xad, 0xf0, 0x91, 0x5a, 0x90, 0xf7, 0xa2,
	0xc3, 0x11, 0xf0, 0x25, 0x30, 0x8e, 0x25, 0xd0, 0x76, 0xad, 0x0d, 0xfe, 0x20, 0x61, 0xac, 0x5a,
	0x09, 0xc6, 0xfa, 0xd7, 0x15, 0xb5, 0x7e, 0x0f, 0xf8, 0xc1, 0x00, 0x24, 0x76, 0x38, 0x37, 0xc0,
	0x74, 0xed, 0x21, 0xe7, 0x95, 0xbb, 0xd0, 0x25, 0x47, 0x1e, 0xf0, 0x83, 0x6e, 0x6e, 0x85, 0x51,
	0x0f, 0x19, 0xe2, 0x9a, 0xc8, 0x3d, 0xd7, 0xd3, 0x2c, 0x89, 0xa1, 0x3d, 0x1e, 0x0e, 0x41, 0xae,
	0x1f, 0x64, 0x29, 0x2a, 0x2e, 0x8e, 0xe1, 0x1f, 0x40, 0xc5, 0xb2, 0xf3, 0x80, 0xcb, 0x4e, 0xc3,
	0xe0, 0xd8, 0x74, 0x71, 0x7b, 0x30, 0x50, 0x3f, 0xad, 0xae, 0xf9, 0x86, 0x69, 0xc7, 0x7d, 0x39,
	0x10, 0x20, 0x1f, 0x8e, 0x0d, 0x81, 0x4f, 0x19, 0xb9, 0xfd, 0x58, 0x55, 0x29, 0x5a, 0x19, 0x5f,
	0xe6, 0x4b, 0x2c, 0xe8, 0xff, 0xa9, 0x3b, 0x6c, 0x1a, 0xdd, 0x5b, 0x0c, 0x5b, 0x22, 0x8d, 0xc8,
	0x7c, 0x3b, 0x77, 0xf9, 0x6d, 0xb5, 0x64, 0x61, 0x01, 0x3b, 0xdc, 0xce, 0xc1, 0xe3, 0x33, 0x6a,
	0x0d, 0x41, 0xd7, 0xa4, 0xd3, 0x92, 0x63, 0x60, 0x7d, 0xac, 0xc6, 0x5f, 0x02, 0xf4, 0xff, 0x70,
	0x34, 0x68, 0x21, 0x59, 0x7d, 0x27, 0x6e, 0x8f, 0x7a, 0xf9, 0xd3, 0x02, 0x3f, 0xfa, 0xd4, 0x9a,
	0xe6, 0x90, 0x42, 0x3a, 0x3a, 0xe4, 0x66, 0xa3, 0x51, 0xc3, 0x9e, 0xa4, 0x91, 0x05, 0x4e, 0xaa,
	0x17, 0x0a, 0x18, 0xa1, 0x27, 0xb5, 0xc9, 0x10, 0x02, 0x44, 0x94, 0xb9, 0xc2, 0x36, 0x48, 0x0c,
	0x99, 0x15, 0x07, 0xa8, 0x5b, 0xc8, 0x32, 0x2c, 0x8b, 0x03, 0x7f, 0x52, 0xcd, 0xbf, 0x13, 0x44,
	0x3d, 0x10, 0xe7, 0x3a, 0x51, 0x61, 0x52, 0x70, 0x87, 0x3a, 0x32, 0x65, 0xb9, 0xf6, 0x46, 0xaf,
	0x51, 0xd3, 0x14, 0x2a, 0x68, 0xb7, 0x93, 0x30, 0x4d, 0x85, 0xc3, 0x98, 0x63, 0xcd, 0x01, 0xe0,
	0xff, 0x01, 0x53, 0xa3, 0xb9, 0x46, 0xdb, 0x72, 0x3b, 0x6f, 0x46, 0x9d, 0x0c, 0x3b, 0x74, 0xe1,
	0xff, 0x9c, 0x0e, 0x90, 0x1a, 0x1c, 0xec, 0xf2, 0x69, 0x35, 0x9d, 0x84, 0xa7, 0x40, 0x77, 0xcb,
	0x18, 0xad, 0x65, 0xcb, 0x8a, 0x31, 0x63, 0xf3, 0x25, 0xb5, 0xac, 0xbf, 0xf2, 0x61, 0xd8, 0xeb,
	0x00, 0x92, 0xf1, 0xb3, 0x55, 0x70, 0x5a, 0xe8, 0x63, 0x05, 0x89, 0xa3, 0xf1, 0xf7, 0x2a, 0xea,
	0x9a, 0x1e, 0x40, 0x5f, 0x6a, 0xf8, 0x7f, 0x08, 0x84, 0xac, 0xa8, 0x03, 0x35, 0xf3, 0x24, 0x46,
	0x1a, 0x76, 0xdf, 0x8a, 0x7a, 0x2d, 0x7e, 0x43, 0xe0, 0x7f, 0x53, 0xa9, 0x53, 0x38, 0xae, 0xb2,
	0x92, 0xba, 0x7f, 0x25, 0xd0, 0xe9, 0x30, 0x3e, 0xd3, 0x9d, 0xfc, 0x6a, 0x05, 0x04, 0x91, 0xd5,
	0x89, 0x4c, 0x8b, 0xb8, 0xb5, 0xe1, 0xcc, 0x17, 0xbf, 0x5a, 0x24, 0xe0, 0x74, 0x2c, 0x86, 0xa8,
	0xcf, 0xd7, 0x6f, 0x1a, 0x61, 0x20, 0x23, 0xa5, 0x37, 0x13, 0x99, 0xfc, 0x04, 0xfc, 0xb3, 0x6c,
	0xfc, 0x42, 0x45, 0xad, 0xee, 0x0f, 0xc3, 0xb0, 0xbd, 0x1d, 0x05, 0x7d, 0x18, 0x8f, 0xf4, 0x93,
	0x13, 0x94, 0xc3, 0xc8, 0xba, 0x80, 0x8c, 0xca, 0x78, 0xa2, 0x66, 0x14, 0x65, 0xd0, 0x64, 0x70,
	0x44, 0x5d, 0x1b, 0x12, 0x46, 0x83, 0x28, 0x23, 0xed, 0x79, 0x1f, 0x44, 0xb9, 0xd6, 0xa8, 0x07,
	0xf7, 0x7d, 0x4a, 0x6b, 0xb2, 0xcc, 0xb3, 0x76, 0x38, 0x88, 0x81, 0xfa, 0x06, 0xc8, 0x74, 0x18,
	0xf5, 0x21, 0x3d, 0xe1, 0x6f, 0x30, 0xf6, 0xfa, 0x10, 0xa4, 0x42, 0x11, 0xd4, 0xf1, 0xfe, 0x91,
	0xca, 0x89, 0x14, 0xb6, 0x6e, 0xa3, 0x03, 0x1d, 0xb7, 0xdd, 0x72, 0x38, 0xba, 0xb5, 0x09, 0xb4,
	0xdd, 0xc8, 0x5a, 0x73, 0x28, 0x26, 0x87, 0x63, 0xca, 0x51, 0xf8, 0xd1, 0xc5, 0x07, 0x4d, 0x67,
	0xf1, 0xa8, 0x4d, 0x03, 0x84, 0x62, 0x49, 0x22, 0xaa, 0xff, 0x70, 0x1b, 0x06, 0x61, 0x2b, 0xb3,
	0x17, 0x19, 0x15, 0xe8, 0xe7, 0x80, 0xdf, 0xc2, 0xa1, 0xa3, 0x05, 0xb0, 0xe3, 0xc1, 0x08, 0xcc,
	0xba, 0x35, 0x7e, 0xae, 0xa2, 0x96, 0xe9, 0xeb, 0x6f, 0xf6, 0x62, 0xc0, 0x71, 0x63, 0x73, 0x78,
	0x5d, 0xad, 0xf3, 0x3b, 0x69, 0x18, 0xa4, 0xc0, 0x15, 0xb3, 0xf5, 0xc5, 0x60, 0xa2, 0xa2, 0x68,
	0x04, 0xb3, 0x91, 0xee, 0xa7, 0x51, 0xd6, 0x3a, 0xb2, 0xb6, 0x14, 0x6e, 0x45, 0x81, 0xa3, 0x9e,
	0x9f, 0xcb, 0x20, 0x6e, 0x87, 0x74, 0x34, 0x89, 0x8d, 0x94, 0x97, 0x51, 0xba, 0x62, 0x92, 0xd2,
	0xf8, 0x91, 0x8a, 0xba, 0x3a, 0xa6, 0x52, 0x18, 0x87, 0xd5, 0xf3, 0x64, 0x31, 0x10, 0x95, 0x64,
	0xbb, 0x44, 0x32, 0xc7, 0xf3, 0x28, 0xbc, 0xba, 0x36, 0x2b, 0x78, 0x3a, 0x01, 0xca, 0x8e, 0x87,
	0x78, 0xa6, 0x81, 0xc9, 0xe4, 0xde, 0x82, 0x07, 0x7e, 0x0a, 0xe8, 0xd7, 0xe3, 0x18, 0x96, 0xcf,
	0x9f, 0x47, 0x29, 0x8e, 0x7e, 0x35, 0xdd, 0x1d, 0x93, 0x26, 0xb8, 0x05, 0x76, 0xd3, 0x75, 0x9b,
	0x83, 0xdd, 0x90, 0x93, 0xe1, 0x56, 0x8d, 0xd1, 0xea, 0x9a, 0x95, 0xd6, 0xbd, 0x71, 0xd3, 0xa7,
	0x0c, 0xdb, 0x23, 0x9d, 0x8f, 0x02, 0xd8, 0xe9, 0x9e, 0x3d, 0xa6, 0xba, 0x73, 0xcc, 0x5a, 0xee,
	0x59, 0x3c, 0xf4, 0xba, 0x2f, 0x09, 0x12, 0xac, 0xcf, 0x41, 0x1c, 0x5d, 0x43, 0x7d, 0x4e, 0xfe,
	0xa3, 0xfc, 0x11, 0x63, 0x76, 0x93, 0x87, 0x8c, 0xc2, 0xf9, 0x45, 0x45, 0x2f, 0x02, 0x79, 0x96,
	0x67, 0xe9, 0x51, 0x14, 0xf6, 0xda, 0x44, 0xf1, 0x66, 0x1b, 0x1f, 0xa9, 0xf9, 0xfd, 0x0c, 0x8e,
	0x73, 0x37, 0x3b, 0xba, 0x3f, 0x3a, 0x27, 0x1a, 0x3c, 0x3a, 0xa7, 0xf7, 0x52, 0xc3, 0xf0, 0x50,
	0x13, 0x1b, 0xb0, 0xaa, 0xa5, 0x06, 0xac, 0x70, 0x10, 0x26, 0x5d, 0xe8, 0x16, 0x03, 0x77, 0x2f,
	0x7c, 0xff, 0x37, 0x2a, 0x5a, 0x7e, 0xd8, 0x45, 0xb1, 0xdd, 0xa3, 0x83, 0x95, 0x9d, 0x74, 0xf5,
	0x18, 0xb0, 0xc0, 0x24, 0x1c, 0xc2, 0xb2, 0x9b, 0xae, 0x9a, 0x5e, 0x4e, 0xe1, 0x8b, 0xf0, 0x0a,
	0x6b, 0xed, 0x49, 0x95, 0x65, 0x44, 0xe8, 0x71, 0x99, 0x0e, 0x48, 0x1b, 0xd9, 0x92, 0x08, 0xfc,
	0x1e, 0x8c, 0xf5, 0xd7, 0x2a, 0x80, 0x20, 0xd3, 0x34, 0x02, 0xfe, 0x61, 0x90, 0x31, 0xc1, 0xdd,
	0x47, 0x71, 0x31, 0x37, 0x43, 0xd8, 0x49, 0x4d, 0xe0, 0x2c, 0xd9, 0x15, 0x3e, 0xdf, 0x55, 0x98,
	0x08, 0x9f, 0xcf, 0x4d, 0x46, 0x6d, 0x42, 0x86, 0x9d, 0x81, 0x65, 0x6e, 0xc2, 0xb3, 0x56, 0x88,
	0x84, 0x43, 0x5b, 0x18, 0x51, 0x41, 0x86, 0xa6, 0x47, 0x21, 0x07, 0xa4, 0x1a, 0xec, 0xe2, 0xf5,
	0x22, 0x6a, 0xdc, 0xf8, 0xb3, 0x00, 0x3d, 0x33, 0xc3, 0x5d, 0x64, 0x3b, 0x8a, 0x02, 0xa1, 0x9d,
	0x46, 0x75, 0x7c, 0x1a, 0xb5, 0xc2, 0x34, 0xea, 0xe3, 0xd3, 0x98, 0xca, 0x4f, 0x63, 0xba, 0x30,
	0x0d, 0xc6, 0x99, 0x5f, 0x54, 0x0b, 0x9a, 0x2f, 0x79, 0x04, 0x47, 0xae, 0x08, 0x93, 0x8a, 0x66,
	0xf2, 0x4c, 0x23, 0xb1, 0x10, 0x46, 0xac, 0x1d, 0xa9, 0xf9, 0x03, 0xc2, 0x37, 0x3b, 0x38, 0xab,
	0x31, 0x91, 0x96, 0x0d, 0xc1, 0x2e, 0x6c, 0xad, 0x6d, 0xb8, 0xee, 0xd8, 0x61, 0x1d, 0x15, 0xd4,
	0xd4, 0xda, 0x73, 0x6a, 0xe6, 0x30, 0x1e, 0x8c, 0x52, 0x11, 0x62, 0x7c, 0x1c, 0xf8, 0xbb, 0x6a,
	0xf1, 0x21, 0x6a, 0x16, 0x80, 0x75, 0x19, 0x90, 0xda, 0x41, 0x33, 0x87, 0xc4, 0xd2, 0xbb, 0x97,
	0x9d, 0x44, 0xd8, 0x82, 0x22, 0x63, 0x4c, 0x86, 0x9d, 0x6a, 0xfc, 0x42, 0x1d, 0xc5, 0x73, 0x14,
	0xaa, 0x40, 0x5c, 0x6a, 0x1d, 0x01, 0x2a, 0x43, 0xc5, 0x25, 0x8b, 0x59, 0x99, 0xb4, 0xe4, 0xc6,
	0x85, 0x27, 0xc0, 0x76, 0x92, 0x11, 0xc9, 0xa0, 0x7d, 0x2d, 0xd4, 0x99, 0x53, 0x03, 0x37, 0x2f,
	0xe4, 0x6f, 0xd7, 0x09, 0x7d, 0xe2, 0x5e, 0xe0, 0x29, 0xb4, 0x87, 0x86, 0x84, 0x1b, 0x6a, 0x9a,
	0xd6, 0x5c, 0xb6, 0x8c, 0x4c, 0x70, 0x4a, 0x45, 0x3b, 0x8d, 0x9a, 0xd2, 0xb0, 0x13, 0x0e, 0xd2,
	0x50, 0xb7, 0x93, 0xa2, 0x1a, 0xe7, 0x28, 0xd2, 0x8a, 0xf3, 0xca, 0x1c, 0x3d, 0x42, 0x64, 0x01,
	0x8f, 0x0a, 0xaf, 0x29, 0xad, 0xec, 0x46, 0x0d, 0xe0, 0xbc, 0x01, 0x92, 0x56, 0x21, 0x0f, 0x85,
	0x27, 0x86, 0x69, 0x98, 0x55, 0x3b, 0xe6, 0xe9, 0x4f, 0xa9, 0x3a, 0x69, 0x65, 0x97, 0x4a, 0xf9,
	0x94, 0xfe, 0xb9, 0x06, 0xc2, 0xb2, 0xd6, 0x5a, 0x19, 0x4e, 0x9e, 0xd1, 0xd0, 0xe6, 0x4a, 0xc9,
	0xa5, 0x7e, 0x55, 0xad, 0x70, 0xd7, 0x3b, 0xb6, 0xef, 0x6a, 0x49, 0xdf, 0xe7, 0x81, 0x6b, 0xe1,
	0x61, 0x91, 0x01, 0x5b, 0x2b, 0xe9, 0x75, 0x53, 0xe0, 0x4b, 0xb4, 0x6a, 0xdd, 0x6f, 0x4b, 0x5a,
	0x7b, 0x8d, 0x41, 0x28, 0xe7, 0x52, 0x10, 0xcf, 0x46, 0x89, 0xe1, 0xe9, 0xc7, 0x2a, 0x6a, 0x45,
	0xac, 0xe3, 0x6c, 0x1f, 0xf3, 0x20, 0x3d, 0xb1, 0x9c, 0xb9, 0x2c, 0x81, 0x05, 0x71, 0xd4, 0xd6,
	0xd2, 0xfd, 0xa7, 0xd5, 0x14, 0x1e, 0xd6, 0xb4, 0x4c, 0x4f, 0x88, 0x1d, 0x0e, 0x49, 0x7e, 0x9d,
	0xca, 0x75, 0x30, 0xba, 0xe3, 0xc6, 0x89, 0x5a, 0xe0, 0xa6, 0x83, 0xa0, 0xeb, 0xb1, 0x2f, 0x65,
	0x41, 0xd7, 0xe1, 0x53, 0x8d, 0x8d, 0xde, 0x0c, 0x5b, 0xf7, 0x0f, 0x6b, 0x27, 0x36, 0x55, 0x72,
	0xf9, 0xf6, 0xd5, 0xc6, 0xd6, 0x28, 0xcd, 0xe2, 0x3e, 0x20, 0xfe, 0xb2, 0xef, 0xe7, 0xf9, 0x41,
	0x90, 0x24, 0xf8, 0x1e, 0x9a, 0xcb, 0x81, 0xca, 0xdf, 0xa8, 0x3b, 0xb0, 0x9e, 0x02, 0x7f, 0x50,
	0x51, 0x0b, 0x07, 0xf1, 0x28, 0x79, 0x27, 0x00, 0xa6, 0xa4, 0x38, 0x1a, 0x1c, 0xc7, 0x2e, 0x30,
	0x18, 0xc8, 0xe2, 0x68, 0x71, 0x44, 0x0c, 0x90, 0x84, 0x0c, 0x19, 0xd4, 0x35, 0x6d, 0xbb, 0x12,
	0xe5, 0x08, 0xdf, 0xf2, 0x21, 0x9e, 0xd7, 0xba, 0xac, 0x7c, 0x7a, 0x32, 0x9f, 0x0d, 0xb7, 0x8c,
	0x44, 0x3a, 0xee, 0x65, 0x95, 0x81, 0x37, 0x90, 0x44, 0x76, 0x3a, 0x30, 0x62, 0xdc, 0x23, 0x25,
	0xca, 0xfc, 0x9d, 0xf9, 0x5b, 0x8e, 0xbb, 0x11, 0xe0, 0x4c, 0x9e, 0x47, 0x34, 0x68, 0x87, 0x67,
	0x42, 0xac, 0x99, 0xfb, 0x6e, 0xca, 0x83, 0x36, 0xeb, 0x25, 0x00, 0xdd, 0x6e, 0x98, 0x55, 0x22,
	0xc8, 0x77, 0x61, 0xc8, 0xe2, 0x6a, 0x9f, 0x52, 0x75, 0xfa, 0x52, 0x75, 0xec, 0x4b, 0x20, 0xe7,
	0xac, 0xe4, 0x5e, 0x2f, 0xbe, 0x7a, 0x43, 0xec, 0x68, 0x55, 0x39, 0xbf, 0xc5, 0xad, 0xbb, 0xa7,
	0xd6, 0xcd, 0xfb, 0x3b, 0x31, 0xda, 0xb6, 0xc7, 0x4c, 0x5a, 0xc6, 0x58, 0xc0, 0x30, 0x76, 0x9c,
	0x2a, 0x18, 0x53, 0x7e, 0xa3, 0xea, 0x2c, 0x61, 0x3b, 0x4a, 0x81, 0x87, 0xc9, 0xc6, 0xae, 0x01,
	0x6c, 0x38, 0x41, 0x4c, 0xbb, 0x5d, 0x20, 0x9b, 0xf1, 0x74, 0x2b, 0x06, 0x8c, 0x02, 0xec, 0x09,
	0x3a, 0x5f, 0x58, 0xc8, 0x10, 0xc8, 0xf8, 0x4a, 0xdc, 0x50, 0x57, 0x81, 0x54, 0x0d, 0x7b, 0xe7,
	0x80, 0xb5, 0x86, 0x71, 0x66, 0x7b, 0x89, 0xfa, 0x03, 0x38, 0xc8, 0x24, 0x3c, 0x41, 0xb3, 0x38,
	0x99, 0xb4, 0xfd, 0xa4, 0x5f, 0x54, 0xe7, 0xec, 0x31, 0x31, 0x6d, 0x0e, 0x9b, 0x1c, 0x1c, 0xa6,
	0xc5, 0x2f, 0xab, 0x65, 0x67, 0x32, 0xad, 0x38, 0xcd, 0x48, 0x0d, 0xe6, 0x3f, 0x12, 0x8f, 0x87,
	0x2d, 0xf6, 0xcc, 0xb8, 0x47, 0xb7, 0x62, 0x4e, 0xeb, 0xe0, 0x50, 0x5d, 0x86, 0x47, 0x0c, 0x35,
	0x03, 0xb2, 0xbb, 0xfb, 0x6a, 0xd5, 0x80, 0x86, 0xb4, 0x06, 0x1e, 0xb8, 0x00, 0x55, 0xdf, 0x71,
	0x88, 0x3a, 0x5b, 0x38, 0x76, 0xf2, 0x34, 0x3d, 0xc1, 0x77, 0x45, 0xdd, 0xd7, 0x78, 0xcf, 0xd9,
	0xb3, 0xfd, 0x20, 0xde, 0x86, 0xa9, 0x14, 0x87, 0x05, 0xfa, 0x9c, 0x9e, 0x86, 0xe1, 0xd0, 0x55,
	0x2b, 0x55, 0x0b, 0x4c, 0x98, 0x66, 0x1b, 0x70, 0xc8, 0xbf, 0x52, 0x55, 0x4b, 0x3b, 0x61, 0xd0,
	0x1d, 0x85, 0xf4, 0x61, 0xcf, 0x2c, 0x3f, 0xb9, 0xf1, 0x01, 0xee, 0x6a, 0x8f, 0x86, 0xce, 0x99,
	0x1e, 0xf0, 0x5e, 0x66, 0x71, 0x3b, 0x38, 0x6f, 0x1e, 0x8e, 0xa2, 0x5e, 0xdb, 0x68, 0x2e, 0x11,
	0x96, 0xb7, 0xd4, 0x15, 0xf7, 0x91, 0xdc, 0xbe, 0xcf, 0xdd, 0x16, 0xea, 0x3f, 0xb6, 0x27, 0x25,
	0xfd, 0xef, 0xc8, 0xd5, 0xbc, 0x6c, 0xff, 0xbb, 0x25, 0x7b, 0xde, 0xe8, 0xab, 0x65, 0x06, 0xce,
	0x76, 0x8c, 0xde, 0x73, 0x45, 0xe8, 0x38, 0x76, 0xa0, 0x12, 0xd7, 0x9b, 0x0b, 0xf5, 0x17, 0xae,
	0x05, 0xae, 0xf1, 0x63, 0x4a, 0x5d, 0x91, 0xef, 0xc9, 0x6d, 0x42, 0xe3, 0x77, 0xf1, 0xab, 0x70,
	0x7f, 0xa2, 0xfe, 0x10, 0x69, 0x32, 0xfb, 0x84, 0xa0, 0x19, 0xc6, 0x8a, 0xf6, 0x33, 0x7a, 0xb3,
	0x43, 0xe0, 0x82, 0x7a, 0x1a, 0xf2, 0x46, 0x6f, 0x16, 0x77, 0x3a, 0x3d, 0x22, 0x49, 0x48, 0xca,
	0xe7, 0x0a, 0x02, 0x0b, 0xf2, 0x5e, 0x78, 0x4f, 0x95, 0xee, 0x4d, 0x36, 0x02, 0x64, 0x3e, 0xb1,
	0x75, 0x3e, 0xdf, 0x2a, 0x7d, 0x0d, 0x97, 0x80, 0x82, 0x6d, 0xbf, 0x8f, 0xce, 0x48, 0xd8, 0xbc,
	0x68, 0x14, 0x57, 0x61, 0x96, 0x11, 0xef, 0x80, 0x88, 0x79, 0x49, 0x77, 0xd6, 0xad, 0xac, 0x64,
	0x5b, 0xd6, 0xda, 0xb7, 0x00, 0xae, 0x7c, 0xd4, 0x0a, 0xf4, 0xe1, 0x12, 0x27, 0x1c, 0x10, 0x14,
	0xdc, 0x07, 0xfa, 0xcb, 0xab, 0xfa, 0xc0, 0xbb, 0x0f, 0x69, 0x5d, 0x6b, 0xa2, 0x96, 0x5b, 0x17,
	0xa9, 0x4a, 0xbb, 0xa7, 0x11, 0xae, 0xd8, 0x28, 0x55, 0x24, 0x7d, 0x3c, 0x8a, 0xb2, 0x66, 0xab,
	0x2d, 0x9e, 0x3b, 0xc0, 0x35, 0x11, 0x04, 0x49, 0x10, 0x34, 0x1f, 0xbd, 0xaa, 0x15, 0x12, 0xf4,
	0x4c, 0x4b, 0x66, 0xfa, 0xe9, 0x35, 0x71, 0xcb, 0xfa, 0x94, 0xde, 0x20, 0xa0, 0x39, 0x87, 0x3c,
	0x31, 0xe0, 0xbb, 0xa3, 0xb8, 0xcd, 0xf3, 0x7b, 0x9a, 0xe4, 0x34, 0xa4, 0x15, 0x71, 0xd7, 0xbc,
	0x7b, 0x5d, 0xaf, 0x15, 0x88, 0x21, 0x5a, 0xb3, 0x64, 0x36, 0xfc, 0xc6, 0x33, 0x66, 0x45, 0x62,
	0xd9, 0xc7, 0x2d, 0xd0, 0x67, 0xef, 0x53, 0xfe, 0x15, 0xc1, 0x3d, 0x83, 0xde, 0x20, 0x61, 0x0f,
	0x3a, 0xb1, 0xf9, 0xca, 0x0d, 0x21, 0x0e, 0x57, 0xdb, 0x30, 0x7f, 0x52, 0x6c, 0x34, 0xdb, 0x74,
	0xb6, 0x05, 0x4d, 0x7e, 0x9a, 0x9e, 0x7f, 0x9b, 0xfa, 0x6c, 0x0a, 0xdb, 0x83, 0xeb, 0x0e, 0xf1,
	0xfc, 0x34, 0xb9, 0x77, 0x17, 0x11, 0x2e, 0x6a, 0x12, 0xd1, 0x63, 0x2e, 0xcc, 0xf8, 0x15, 0x71,
	0x29, 0x78, 0x76, 0xe2, 0x8b, 0x49, 0x70, 0x58, 0xf6, 0xe2, 0x73, 0xe2, 0x90, 0xf3, 0xe9, 0x23,
	0x60, 0xe3, 0xdf, 0x44, 0xda, 0xbe, 0x17, 0xb6, 0x77, 0xa9, 0xdf, 0x36, 0xbe, 0xfc, 0x78, 0xd4,
	0xdf, 0xa1, 0x8e, 0x0d, 0xed, 0x05, 0x19, 0x0d, 0x4e, 0xc2, 0x94, 0x9d, 0x99, 0x90, 0x18, 0xdd,
	0xf4, 0x23, 0x7f, 0xf4, 0x13, 0xe5, 0x8e, 0x78, 0xc1, 0x9e, 0xd7, 0x00, 0x94, 0x36, 0x90, 0xb5,
	0xba, 0xa1, 0xd6, 0x75, 0xbd, 0xe0, 0x07, 0xe0, 0x8b, 0x6a, 0x51, 0x7a, 0x4b, 0xbf, 0x17, 0xfd,
	0xfd, 0xae, 0x9b, 0x51, 0x05, 0xa1, 0xf0, 0xc2, 0x5e, 0xd2, 0x87, 0x1d, 0xbe, 0x4f, 0x1a, 0x65,
	0xc6, 0xbb, 0x2f, 0xeb, 0x7d, 0xee, 0x44, 0x83, 0x60, 0xd0, 0x8a, 0x82, 0x5e, 0xd3, 0xca, 0x72,
	0xaf, 0x88, 0xd8, 0xf3, 0x14, 0xc1, 0xed, 0x4d, 0x80, 0xf7, 0xc3, 0x24, 0xe8, 0xc2, 0xad, 0x02,
	0xf9, 0xe6, 0x6c, 0x8b, 0x76, 0xe8, 0x55, 0xfd, 0xbe, 0xe0, 0xd6, 0xc3, 0x38, 0x65, 0x8f, 0x38,
	0x14, 0x9b, 0x5e, 0xd3, 0xef, 0x7b, 0x96, 0x29, 0xd3, 0xfa, 0x8c, 0xee, 0x22, 0xef, 0x67, 0xc4,
	0x4e, 0xb1, 0xb0, 0x2d, 0xce, 0x7c, 0xaf, 0x13, 0x32, 0x7e, 0x5d, 0x6d, 0xd0, 0x86, 0x77, 0x64,
	0x06, 0x1a, 0x0a, 0xb7, 0xfc, 0x50, 0x78, 0x45, 0x3d, 0xe7, 0xce, 0x88, 0x37, 0xbe, 0xa5, 0xcd,
	0x22, 0x72, 0xbc, 0x3e, 0xab, 0x2d, 0x1c, 0x6e, 0x57, 0x5c, 0x3e, 0x5b, 0x87, 0xb9, 0xd3, 0xe7,
	0x08, 0x19, 0x1e, 0xab, 0x1b, 0x8c, 0x0b, 0xef, 0x23, 0xae, 0x86, 0x43, 0x95, 0x77, 0xc3, 0x19,
	0xe7, 0x72, 0xad, 0x23, 0x34, 0x5c, 0xdd, 0xc3, 0xb0, 0x6b, 0x27, 0xce, 0xc3, 0x1a, 0x15, 0x9c,
	0x96, 0x32, 0x09, 0xe2, 0x8a, 0x94, 0x23, 0x0f, 0x35, 0xe2, 0xd5, 0x1f, 0xdb, 0x07, 0x76, 0x60,
	0xe2, 0x37, 0xfc, 0xe3, 0xf4, 0xd4, 0xd3, 0xf9, 0x71, 0xcc, 0x59, 0x9e, 0x38, 0x18, 0xda, 0x6a,
	0xce, 0x53, 0x3c, 0xcf, 0x70, 0x49, 0xe4, 0x8e, 0x38, 0x74, 0xa3, 0xec, 0x6b, 0xdf, 0xa3, 0xbd,
	0x48, 0x44, 0x1f, 0x58, 0xf8, 0x04, 0x20, 0x54, 0x00, 0x7f, 0x4c, 0x08, 0x5c, 0x76, 0xb6, 0xaa,
	0xad, 0xf1, 0xfc, 0x5b, 0x34, 0x6b, 0x7e, 0x43, 0xc5, 0x9f, 0xa9, 0xa8, 0x67, 0xf3, 0x8b, 0x79,
	0xa8, 0x4f, 0xec, 0x25, 0xf6, 0x00, 0x48, 0xad, 0xec, 0xf1, 0x29, 0xab, 0xe1, 0x9b, 0x93, 0x09,
	0xa1, 0x7f, 0x85, 0xc7, 0x6a, 0x95, 0xa7, 0xb0, 0x2b, 0x3c, 0x87, 0x4f, 0xb5, 0x94, 0x00, 0x0d,
	0x44, 0x4d, 0x06, 0x6b, 0x17, 0x6a, 0xec, 0xfa, 0xd9, 0x41, 0x81, 0xbb, 0x88, 0x72, 0xac, 0x17,
	0x71, 0xde, 0xb1, 0x81, 0xd4, 0x79, 0x8d, 0xaf, 0xea, 0x8f, 0x11, 0xde, 0xb9, 0x1f, 0x9f, 0x8d,
	0xb3, 0xe3, 0x1e, 0xce, 0xa5, 0x5a, 0x90, 0x28, 0x4a, 0xfc, 0x94, 0xfe, 0x45, 0x45, 0xad, 0xf1,
	0xe8, 0xa5, 0x47, 0x02, 0x2d, 0x82, 0x76, 0xc2, 0x8e, 0xd0, 0x74, 0xb1, 0xbf, 0x09, 0x1a, 0xf5,
	0xe3, 0x0c, 0x51, 0x09, 0x39, 0x02, 0xd7, 0x5d, 0x61, 0xcf, 0xa8, 0x25, 0xe9, 0x1c, 0x98, 0x0f,
	0x08, 0x47, 0x6c, 0x27, 0x3e, 0x53, 0x3a, 0x34, 0xb1, 0xfd, 0xd2, 0x8b, 0x55, 0x56, 0x20, 0xfd,
	0x0a, 0x67, 0xb4, 0x4f, 0xfe, 0xbe, 0x9e, 0x6d, 0x91, 0xdd, 0x77, 0xd5, 0x56, 0x70, 0x2f, 0x49,
	0xef, 0x4b, 0x66, 0xd7, 0x82, 0xd5, 0x93, 0xdc, 0x2c, 0xcc, 0x33, 0xd6, 0xe5, 0x1b, 0x61, 0x4d,
	0x9c, 0x8a, 0xa7, 0xca, 0xb8, 0xb4, 0x6b, 0x72, 0x4e, 0x01, 0x9b, 0x10, 0x1b, 0xfb, 0x26, 0x3a,
	0x1c, 0x79, 0xc0, 0x6b, 0x85, 0x0d, 0xd7, 0x25, 0xe9, 0x42, 0x26, 0x4d, 0xdb, 0x7a, 0xf8, 0x98,
	0xfc, 0x33, 0xb3, 0x93, 0xe6, 0x7b, 0xc5, 0x4f, 0x01, 0xb0, 0x9d, 0xcf, 0xe4, 0x0c, 0x79, 0x39,
	0x49, 0xb0, 0x66, 0x75, 0x53, 0x80, 0x07, 0x59, 0xfb, 0x53, 0xb7, 0x86, 0xbc, 0x61, 0x6c, 0xbc,
	0x03, 0xa6, 0xb4, 0xe2, 0x9c, 0x7a, 0xca, 0x74, 0x4b, 0xb8, 0xe2, 0x17, 0xd4, 0x02, 0xa3, 0xd3,
	0x89, 0x1b, 0x0b, 0x12, 0xe0, 0xaa, 0x5d, 0x86, 0x4f, 0x84, 0x5c, 0x70, 0x44, 0x48, 0x57, 0x73,
	0x01, 0x77, 0x47, 0x24, 0xc0, 0xc7, 0x6a, 0x51, 0x84, 0x87, 0xb8, 0x1b, 0x7b, 0xe0, 0x2d, 0x67,
	0x20, 0x6a, 0x21, 0x67, 0x16, 0x0f, 0xad, 0xa1, 0xd8, 0x7d, 0x80, 0x8e, 0x8c, 0x32, 0xde, 0x47,
	0xee, 0x4e, 0x92, 0x5a, 0x8f, 0x68, 0x9e, 0xcf, 0x59, 0x78, 0xa4, 0x5d, 0xe1, 0x2f, 0x79, 0x45,
	0x1a, 0x3f, 0x5e, 0x71, 0x07, 0x47, 0xaf, 0xd4, 0x3d, 0x02, 0xcf, 0xe5, 0x8e, 0x2e, 0x5a, 0x6e,
	0xd0, 0xc2, 0x9e, 0x3f, 0xb4, 0x6b, 0x88, 0x48, 0xa1, 0xd5, 0x3d, 0xae, 0x28, 0x9a, 0x92, 0x2d,
	0x7e, 0x92, 0x82, 0xa1, 0xf1, 0xae, 0x21, 0x14, 0xa4, 0xa2, 0xd8, 0x0f, 0x93, 0x13, 0x72, 0x9d,
	0x1a, 0x3f, 0xb6, 0x68, 0x7c, 0xa1, 0x53, 0x94, 0xb7, 0xaa, 0x01, 0x46, 0x0d, 0x80, 0xa2, 0x93,
	0x9f, 0x2b, 0x0a, 0x72, 0xbf, 0x3b, 0x65, 0x48, 0x18, 0x8d, 0xe8, 0x27, 0x09, 0xcf, 0xaa, 0x4d,
	0x74, 0xd4, 0x6e, 0xf6, 0x02, 0x64, 0x0e, 0xc4, 0x4a, 0x14, 0x0f, 0x1d, 0xe9, 0x1c, 0x48, 0x11,
	0x31, 0x13, 0x34, 0x3e, 0xe2, 0xba, 0x56, 0x30, 0x68, 0x12, 0xba, 0x97, 0x35, 0x03, 0xef, 0x18,
	0x90, 0x64, 0xce, 0xbc, 0x85, 0x13, 0xa2, 0xc1, 0x46, 0x11, 0x78, 0x0e, 0xaf, 0xb6, 0x3d, 0xcf,
	0xa7, 0x44, 0x73, 0x78, 0x85, 0x4c, 0x07, 0x40, 0x92, 0x5a, 0xb9, 0xc7, 0xd3, 0xfa, 0x75, 0x64,
	0x8c, 0x7a, 0xe3, 0xaf, 0xcf, 0xe4, 0x9f, 0x93, 0x5f, 0x49, 0x33, 0x41, 0x8f, 0x7e, 0x6b, 0x36,
	0x41, 0x8b, 0xf1, 0x35, 0x79, 0x9f, 0xec, 0x9d, 0x6e, 0x87, 0x39, 0x1d, 0x56, 0xc2, 0x1d, 0x8c,
	0xc9, 0x84, 0x6c, 0xd5, 0x9a, 0x83, 0x9a, 0x97, 0x4d, 0x7c, 0xa6, 0xc0, 0xba, 0xc0, 0x7e, 0x02,
	0x49, 0x49, 0x8f, 0xf8, 0xb5, 0x05, 0xe2, 0xe0, 0x61, 0x29, 0xc5, 0x5e, 0xcc, 0x63, 0x2d, 0x5a,
	0x2d, 0x3d, 0x88, 0xea, 0x04, 0xdd, 0x25, 0xbd, 0x99, 0xd1, 0x00, 0xf8, 0x7a, 0xbe, 0xea, 0xcb,
	0x56, 0xee, 0xc7, 0x6e, 0x20, 0x7a, 0xac, 0x68, 0x0b, 0x0e, 0xb7, 0xe8, 0xad, 0x31, 0xa2, 0x0e,
	0x37, 0x1f, 0xc6, 0x59, 0x16, 0xf7, 0xe9, 0xc9, 0x9a, 0xe6, 0xe6, 0x48, 0xdc, 0x10, 0xa6, 0x1b,
	0xa9, 0xa8, 0xfd, 0xf2, 0xba, 0xa6, 0x5d, 0x62, 0x6d, 0x91, 0x31, 0xf0, 0x66, 0x6f, 0x68, 0xc5,
	0x4e, 0xca, 0x0e, 0x74, 0x36, 0x68, 0x01, 0xed, 0xd5, 0xa9, 0x48, 0x3b, 0x68, 0x28, 0xc0, 0xa0,
	0xa9, 0x54, 0xe4, 0x1b, 0x58, 0x36, 0xec, 0x5f, 0xdc, 0x64, 0x30, 0x5a, 0x11, 0x5f, 0xa2, 0x16,
	0x00, 0xf9, 0xf1, 0x13, 0x3a, 0xb6, 0x78, 0x59, 0x9e, 0x22, 0x20, 0x93, 0xd0, 0x84, 0x9f, 0x46,
	0x3a, 0x24, 0x33, 0xc5, 0xb7, 0x9e, 0xd6, 0xe7, 0xee, 0x30, 0xea, 0x0a, 0xc2, 0x14, 0x91, 0x53,
	0xa0, 0x49, 0x92, 0x51, 0xe3, 0xfb, 0xd5, 0x86, 0x7b, 0xbe, 0xbd, 0xda, 0x41, 0xd6, 0xaa, 0x0f,
	0xb5, 0xf7, 0x30, 0x4c, 0x7c, 0x34, 0x74, 0x82, 0x92, 0x30, 0xac, 0x6b, 0xd8, 0xd4, 0xee, 0xe7,
	0xc6, 0x1b, 0x89, 0x3c, 0xa9, 0x2d, 0xa5, 0x84, 0xab, 0x4e, 0x2d, 0xba, 0x1f, 0x9b, 0xd9, 0x77,
	0xd4, 0x33, 0xee, 0xe7, 0x3f, 0x8c, 0x06, 0x68, 0x4d, 0x0b, 0x8e, 0xf7, 0x3c, 0x7a, 0x81, 0x35,
	0xb6, 0xf7, 0xa7, 0xd4, 0x41, 0xe6, 0x02, 0xc8, 0x34, 0x41, 0x2f, 0x03, 0x46, 0x74, 0x5b, 0xf9,
	0xcb, 0xfa, 0x65, 0xe6, 0xbb, 0x0a, 0xc3, 0xb0, 0xf7, 0x2f, 0x72, 0x4e, 0xa4, 0x89, 0xe6, 0x71,
	0xe6, 0x54, 0xe5, 0x58, 0x06, 0x09, 0x0c, 0x87, 0x4c, 0x83, 0xec, 0xe2, 0xad, 0xda, 0x83, 0x4b,
	0xe5, 0xc7, 0x6b, 0x1a, 0x57, 0xb9, 0x83, 0x5d, 0xc8, 0xb5, 0x7c, 0x2d, 0x8f, 0xa6, 0x90, 0x01,
	0xec, 0xf9, 0x87, 0x17, 0xa7, 0xa0, 0x66, 0x3b, 0x4c, 0x5b, 0x40, 0xc4, 0x2f, 0xeb, 0xc0, 0x81,
	0x7c, 0x91, 0xa0, 0xe5, 0x7b, 0xa2, 0xcc, 0x28, 0x65, 0x66, 0xbb, 0x86, 0x2b, 0xe6, 0x4b, 0x68,
	0x98, 0x0a, 0x42, 0x69, 0xf4, 0x75, 0x0e, 0x16, 0x34, 0x1b, 0x0e, 0xb8, 0x18, 0x5b, 0x6e, 0x6f,
	0x69, 0x23, 0x62, 0xa5, 0x24, 0x3e, 0x0a, 0x7b, 0xdd, 0x91, 0x5e, 0x53, 0xa5, 0xe6, 0xe8, 0x16,
	0x40, 0x58, 0x3a, 0x4d, 0xfb, 0x8d, 0x8d, 0x3f, 0x3b, 0xb6, 0x1a, 0xbf, 0xe6, 0x08, 0x4e, 0x26,
	0x7e, 0xf2, 0x51, 0xdb, 0x3a, 0x83, 0x75, 0x81, 0xc3, 0x48, 0x08, 0xe3, 0xba, 0xae, 0x53, 0x96,
	0x56, 0xda, 0x27, 0x75, 0x4d, 0xf1, 0x18, 0x18, 0x69, 0x99, 0x12, 0x5b, 0xf8, 0xf1, 0x69, 0x51,
	0x48, 0x5e, 0xcd, 0x4f, 0xcc, 0xcb, 0xb8, 0xc8, 0x2b, 0xb5, 0xcb, 0x7d, 0xa1, 0x31, 0xd0, 0xc7,
	0x58, 0x0f, 0x7a, 0x10, 0xa4, 0xc7, 0x1e, 0x6a, 0x9d, 0x41, 0xb3, 0x4b, 0xbf, 0xc8, 0x36, 0x22,
	0x1a, 0x2b, 0xcb, 0x07, 0x5d, 0xfc, 0xbd, 0xaf, 0xaa, 0xeb, 0xf9, 0xef, 0x95, 0x93, 0x71, 0x27,
	0xce, 0xe4, 0x92, 0x67, 0xfd, 0x87, 0x2a, 0xc5, 0xd5, 0xf8, 0x84, 0x40, 0x3b, 0x4c, 0x89, 0xca,
	0x0f, 0xb5, 0xe6, 0xce, 0x06, 0x1a, 0x43, 0x5f, 0x5d, 0xa8, 0xe7, 0x14, 0xdb, 0xd7, 0x4b, 0x56,
	0x78, 0x58, 0x9c, 0x03, 0xba, 0x4a, 0x7d, 0x13, 0xe6, 0x00, 0x94, 0x64, 0xa4, 0xd5, 0x8c, 0x5f,
	0x54, 0x2b, 0xc8, 0xee, 0x71, 0x00, 0x93, 0x3d, 0x2b, 0xc7, 0x20, 0x38, 0x18, 0x34, 0xda, 0x21,
	0xcf, 0x81, 0x6a, 0x3e, 0x42, 0x87, 0xd1, 0xce, 0xff, 0xaa, 0x2a, 0x45, 0xec, 0xe2, 0x78, 0x84,
	0x35, 0xfa, 0xa3, 0xa2, 0xb2, 0x5f, 0x47, 0x45, 0xe4, 0x03, 0x16, 0x80, 0xba, 0x1a, 0x3c, 0x4c,
	0x0d, 0x68, 0xf7, 0xd1, 0xae, 0xac, 0x70, 0x4a, 0x88, 0x29, 0x71, 0x3c, 0x29, 0x4c, 0x93, 0xe6,
	0x0e, 0xe8, 0x3a, 0x68, 0x87, 0x87, 0x24, 0xea, 0xba, 0xe1, 0x2f, 0xf6, 0x89, 0xd5, 0x85, 0xce,
	0x1a, 0xef, 0x69, 0xec, 0x8c, 0xba, 0x38, 0x51, 0x79, 0xa2, 0x8f, 0x4b, 0x30, 0x64, 0xde, 0x40,
	0xb4, 0x9d, 0x28, 0x41, 0x61, 0x2f, 0x71, 0x89, 0x9b, 0xa7, 0x57, 0xd1, 0xbb, 0xe4, 0x74, 0x60,
	0x7c, 0x2c, 0x70, 0x6a, 0x0b, 0xa2, 0xe2, 0x53, 0xf6, 0x81, 0x44, 0x15, 0xac, 0xde, 0x1a, 0x83,
	0xea, 0xab, 0x6a, 0xc5, 0xcc, 0x33, 0x95, 0xdb, 0xbb, 0x54, 0x62, 0x7d, 0xa4, 0x30, 0x5a, 0x8c,
	0x2c, 0xe3, 0xef, 0x2c, 0x3b, 0x46, 0x44, 0x6c, 0xe4, 0x97, 0x57, 0x88, 0xd7, 0xfb, 0x9c, 0x9a,
	0xe7, 0x98, 0xb7, 0x7d, 0xb4, 0x67, 0xe6, 0x63, 0xe7, 0x0c, 0x7e, 0x21, 0x5b, 0x67, 0x2a, 0x5e,
	0x6d, 0xa9, 0x9a, 0xa7, 0xbe, 0xd6, 0x30, 0xc2, 0x41, 0x11, 0xee, 0x75, 0xc9, 0x6f, 0x9a, 0xe9,
	0x62, 0x76, 0xcd, 0x89, 0x3b, 0xa9, 0xbb, 0x0d, 0x91, 0xdc, 0x57, 0xc7, 0xf3, 0x76, 0x46, 0xe8,
	0x93, 0x0d, 0x5f, 0xdc, 0xd2, 0x9b, 0xa2, 0x5d, 0xd8, 0xdc, 0x30, 0x17, 0x0c, 0x07, 0xc6, 0xa6,
	0xe3, 0xf0, 0xdc, 0x0a, 0x1b, 0xd4, 0xc2, 0xc7, 0xb0, 0x96, 0x6b, 0xe3, 0xb3, 0xc8, 0x47, 0xf9,
	0xb7, 0x2a, 0xb0, 0xed, 0xfa, 0x1b, 0x18, 0x5a, 0xec, 0xa1, 0xa1, 0x87, 0x80, 0x07, 0x90, 0x97,
	0x72, 0xe5, 0xe9, 0xcd, 0x7c, 0x5c, 0x25, 0x4a, 0x21, 0x51, 0x4a, 0x71, 0x90, 0xec, 0xf1, 0xf3,
	0x05, 0x60, 0xa8, 0xce, 0x80, 0x7c, 0x37, 0x6d, 0x3f, 0x7b, 0xac, 0xd8, 0x5c, 0xba, 0x7e, 0xcb,
	0xb3, 0xb8, 0xc2, 0xf9, 0xa4, 0x23, 0x37, 0x25, 0x0e, 0x2d, 0xb9, 0xf3, 0x35, 0x5d, 0x72, 0x64,
	0x1a, 0x3f, 0x59, 0x51, 0x1b, 0xb9, 0x15, 0x1d, 0xc0, 0x5b, 0x1e, 0x5a, 0xce, 0xe3, 0x93, 0x0f,
	0x4e, 0xd5, 0x2a, 0x35, 0x90, 0xaf, 0xce, 0x8b, 0x28, 0xb9, 0xa3, 0x5e, 0x97, 0xb0, 0xd2, 0x25,
	0xee, 0x19, 0xb4, 0x31, 0x72, 0xb8, 0xad, 0x91, 0x91, 0x6f, 0x45, 0x8d, 0x9f, 0x47, 0xd7, 0x9e,
	0x30, 0x4c, 0x7a, 0x61, 0x9a, 0x6e, 0x07, 0x03, 0x0f, 0x72, 0x77, 0xdd, 0x0a, 0xc5, 0x16, 0x4b,
	0x76, 0x89, 0xb0, 0x09, 0x4c, 0x90, 0x0d, 0x8c, 0x92, 0x36, 0xe4, 0x24, 0xad, 0xdf, 0x1b, 0x4a,
	0xb3, 0xba, 0xa7, 0xe1, 0xbe, 0x74, 0x23, 0x75, 0xd5, 0x76, 0xd7, 0xab, 0xe4, 0x49, 0x27, 0x5a,
	0x74, 0x87, 0x87, 0xe6, 0xa3, 0xd6, 0x56, 0x1b, 0xce, 0x24, 0x4b, 0x05, 0xbb, 0x1c, 0xd1, 0xd1,
	0x01, 0x24, 0xa8, 0x25, 0x1f, 0x08, 0x13, 0x3f, 0x99, 0x42, 0x7c, 0xbf, 0xba, 0xa2, 0xbf, 0x52,
	0x4e, 0x78, 0x9e, 0xd8, 0x3b, 0xfa, 0x25, 0xb2, 0x35, 0xd3, 0x93, 0xc9, 0xbe, 0x97, 0x7f, 0x1e,
	0x63, 0x4a, 0xe5, 0xfb, 0x79, 0x7f, 0xf3, 0x3f, 0xf4, 0x1c, 0x80, 0x37, 0x9f, 0xe0, 0x6c, 0x0e,
	0xef, 0x8d, 0xf9, 0x90, 0xd3, 0x8d, 0x6f, 0x1c, 0xa9, 0xe7, 0xf4, 0x8c, 0xee, 0x8f, 0xce, 0xcd,
	0xa4, 0x48, 0x6a, 0xdf, 0x45, 0x3a, 0xe7, 0x99, 0x59, 0x80, 0x9e, 0xd4, 0xcd, 0x61, 0x70, 0xee,
	0x30, 0x71, 0x39, 0xf1, 0xdd, 0xcb, 0x59, 0xfd, 0xd7, 0xaa, 0x5a, 0x31, 0xc0, 0xf7, 0x19, 0x54,
	0xbf, 0xd9, 0x4e, 0xe6, 0x80, 0xfb, 0x5d, 0x27, 0x73, 0xb4, 0x42, 0xce, 0xe9, 0xc0, 0xcd, 0xfc,
	0x83, 0x3b, 0xe2, 0x68, 0x3e, 0xf6, 0xe0, 0x2e, 0x07, 0x1c, 0xb0, 0x27, 0x82, 0xeb, 0x99, 0x8e,
	0x83, 0x2d, 0x94, 0x3d, 0xba, 0x43, 0xf4, 0xc4, 0xfb, 0xe8, 0x2e, 0xf9, 0xdb, 0x8c, 0xb9, 0xb4,
	0x2f, 0x8f, 0x87, 0xa5, 0xac, 0x8c, 0x87, 0xa5, 0xac, 0xfa, 0x1c, 0xdf, 0xd7, 0xca, 0x1c, 0xdf,
	0x49, 0x6a, 0x6c, 0xec, 0xda, 0x7b, 0x65, 0x7c, 0xdf, 0x8b, 0x80, 0x7f, 0x32, 0xf7, 0xf7, 0x3f,
	0xa8, 0xaa, 0x75, 0x73, 0x55, 0xcb, 0x7d, 0x06, 0x48, 0xf9, 0x65, 0xb5, 0x12, 0xb0, 0x10, 0xb2,
	0x84, 0xe7, 0x85, 0xb9, 0x9c, 0xee, 0x41, 0x98, 0x08, 0xcc, 0x59, 0xa2, 0xd5, 0x0d, 0xa2, 0x0a,
	0xf6, 0x9b, 0x22, 0xa6, 0x8d, 0xd8, 0x39, 0x1a, 0x7b, 0xd8, 0xb4, 0xce, 0x7a, 0x78, 0x67, 0xe8,
	0xcb, 0x0e, 0xce, 0x31, 0x07, 0xe4, 0x28, 0x4a, 0xb3, 0x38, 0x39, 0x37, 0xd6, 0xb5, 0x39, 0x13,
	0xf9, 0x15, 0x1b, 0x39, 0xd3, 0xb1, 0xa8, 0x62, 0x00, 0x6c, 0xc0, 0x82, 0x65, 0x93, 0x64, 0x16,
	0x6b, 0x56, 0x25, 0xdd, 0x2f, 0x2b, 0x18, 0x58, 0xcf, 0xd4, 0x16, 0x4e, 0x03, 0x3d, 0x51, 0xe4,
	0x01, 0xc0, 0x04, 0xdb, 0x4d, 0x76, 0x03, 0x33, 0x16, 0x05, 0x46, 0xea, 0xf1, 0x96, 0x24, 0x3f,
	0x8d, 0x81, 0xf2, 0x9b, 0x22, 0x86, 0x7b, 0xf0, 0xe1, 0xd7, 0xe1, 0x4e, 0x03, 0x2a, 0x64, 0x3d,
	0x12, 0x73, 0x0a, 0xb1, 0x5a, 0xd9, 0x0b, 0xbb, 0xe8, 0x7c, 0xbd, 0x4f, 0xea, 0x21, 0x8f, 0x6a,
	0xd3, 0x62, 0x51, 0xab, 0x7f, 0x72, 0x78, 0xd2, 0x7a, 0xa9, 0xff, 0x04, 0xa1, 0x70, 0xd1, 0x3a,
	0x69, 0x9d, 0x66, 0xe3, 0x87, 0x6a, 0x6a, 0x4d, 0x7f, 0xb1, 0x75, 0x14, 0xa2, 0x7f, 0xa6, 0x87,
	0xc8, 0xd8, 0xb7, 0x0c, 0x4f, 0xda, 0x8f, 0x07, 0xd9, 0x91, 0x3d, 0x0c, 0x20, 0xce, 0x68, 0x1f,
	0x59, 0x23, 0xd9, 0x73, 0x9b, 0x51, 0x9f, 0x02, 0xcc, 0x06, 0xf1, 0x09, 0x5a, 0xba, 0xbb, 0xa4,
	0xc0, 0x67, 0x75, 0x44, 0xd4, 0x96, 0x80, 0x18, 0x51, 0x10, 0xa7, 0x32, 0x8b, 0xa6, 0x0e, 0xf4,
	0x43, 0x67, 0x37, 0xf1, 0x0c, 0xf1, 0x4a, 0x86, 0x0d, 0x24, 0xb1, 0x7d, 0xf1, 0x9a, 0x9b, 0x2b,
	0xb5, 0x46, 0x3a, 0xae, 0x75, 0x26, 0x63, 0x0c, 0x2b, 0xb1, 0x70, 0xef, 0x24, 0x80, 0xd5, 0xe7,
	0xe0, 0x3c, 0x80, 0xd3, 0xc7, 0x1d, 0x51, 0x11, 0xaf, 0x63, 0xf5, 0x51, 0x71, 0x01, 0x12, 0x42,
	0x8a, 0x84, 0x77, 0x51, 0x6f, 0x0d, 0x1c, 0xe3, 0x4e, 0x93, 0x00, 0xd3, 0x6c, 0xa7, 0x2d, 0x51,
	0x3a, 0x19, 0x3f, 0x9e, 0x65, 0x1b, 0x61, 0x82, 0x3d, 0x5a, 0xc9, 0xe8, 0x4c, 0x52, 0xc4, 0xfc,
	0x4c, 0x55, 0xad, 0xa1, 0x29, 0x29, 0xee, 0x74, 0x9e, 0x6c, 0x13, 0x98, 0xaf, 0xa8, 0xe5, 0xc0,
	0x54, 0x72, 0x00, 0x72, 0x60, 0x9a, 0xba, 0x0c, 0x98, 0xa6, 0x3d, 0x60, 0x9a, 0x29, 0x3f, 0x5d,
	0x06, 0x4c, 0xd4, 0x71, 0x56, 0x6f, 0x79, 0x88, 0x32, 0x84, 0x55, 0xa6, 0xb7, 0x3a, 0xe4, 0xbe,
	0x39, 0xa7, 0x1f, 0x9f, 0x86, 0xbe, 0xc7, 0xec, 0xc5, 0x73, 0xc4, 0x6e, 0xcd, 0x00, 0x95, 0x12,
	0xc1, 0xb6, 0x08, 0x91, 0xd5, 0x62, 0xce, 0x0a, 0xd2, 0x41, 0x90, 0xf8, 0x3b, 0x99, 0xb6, 0x1f,
	0xaa, 0xab, 0xf2, 0xa5, 0x49, 0xae, 0x1f, 0x70, 0x18, 0x1c, 0x43, 0x29, 0x61, 0x29, 0x9d, 0x2b,
	0xe3, 0x7a, 0xc2, 0x77, 0xa8, 0x49, 0xee, 0x3f, 0x84, 0x12, 0x86, 0x94, 0xfa, 0xc3, 0x98, 0xbd,
	0x1a, 0xdf, 0xad, 0x96, 0xe5, 0xa2, 0x79, 0x95, 0x67, 0x93, 0x36, 0xb8, 0xae, 0x71, 0xe1, 0x18,
	0xa0, 0xf8, 0x12, 0xff, 0xad, 0x8a, 0xda, 0x94, 0xb1, 0xb7, 0x8e, 0x62, 0xb8, 0x61, 0xef, 0x8d,
	0x00, 0xac, 0x1e, 0x7b, 0x5d, 0xde, 0x1b, 0x90, 0xa2, 0x77, 0x92, 0x04, 0x19, 0x62, 0xed, 0x92,
	0x38, 0x1d, 0x20, 0x98, 0x6e, 0x97, 0x1d, 0x22, 0xdd, 0xe1, 0x4e, 0x99, 0xd2, 0x43, 0x77, 0xb8,
	0x5b, 0x62, 0x1d, 0xc1, 0x18, 0x85, 0x25, 0x8d, 0x6f, 0x82, 0xf1, 0x63, 0x0e, 0x02, 0x7a, 0x37,
	0x8e, 0xdb, 0x69, 0x99, 0x2d, 0xe8, 0x26, 0xb2, 0xde, 0xa3, 0x50, 0xbc, 0xe4, 0xeb, 0xa5, 0xee,
	0xaf, 0xd6, 0x40, 0x31, 0x65, 0x3c, 0x14, 0x6d, 0x8e, 0x27, 0x3c, 0xd9, 0x35, 0xc0, 0xb5, 0xeb,
	0x06, 0x68, 0x9a, 0x73, 0x1a, 0x47, 0xd2, 0x39, 0x3b, 0x50, 0xcd, 0xe3, 0xa8, 0x3b, 0xad, 0xbd,
	0xf7, 0xc9, 0x4e, 0x47, 0x87, 0x7f, 0xce, 0xbf, 0xf6, 0x23, 0xb3, 0xf4, 0x6f, 0xf5, 0x79, 0x06,
	0xb1, 0x61, 0x55, 0x3e, 0x85, 0xd1, 0x97, 0x01, 0x27, 0x66, 0x29, 0x86, 0x93, 0x5e, 0x57, 0xeb,
	0xf2, 0x45, 0x6c, 0x36, 0xf1, 0x97, 0xd5, 0xb1, 0x38, 0xd1, 0x9a, 0x2f, 0x4e, 0xb4, 0xee, 0xe5,
	0xfb, 0xdc, 0x38, 0x51, 0xa3, 0x34, 0x18, 0x0b, 0x51, 0x65, 0xb1, 0xe1, 0x03, 0xb5, 0xf8, 0x16,
	0x00, 0xfe, 0xdd, 0xce, 0x43, 0x4f, 0xe0, 0x3f, 0x1c, 0x7e, 0xc6, 0xb7, 0xd5, 0x9c, 0xfe, 0x14,
	0x47, 0x70, 0xe2, 0x72, 0xb3, 0xa0, 0x9b, 0x3a, 0xd7, 0x91, 0xc5, 0xd2, 0x6f, 0x54, 0xd4, 0x9c,
	0xf1, 0xe8, 0xc7, 0x69, 0x27, 0x61, 0x1f, 0xdd, 0x1b, 0x93, 0x5c, 0xf4, 0x6f, 0xef, 0x04, 0x80,
	0xf8, 0xf1, 0x28, 0x4a, 0x42, 0x07, 0xdc, 0xd0, 0xd8, 0x42, 0xc1, 0xa7, 0x6d, 0x6d, 0xd5, 0xe6,
	0x65, 0x87, 0xb8, 0x81, 0x08, 0x6b, 0x9a, 0x2d, 0x3d, 0x76, 0xa3, 0x80, 0xd1, 0xe0, 0x0b, 0x8c,
	0x58, 0x82, 0x0e, 0x26, 0x80, 0xd2, 0x5b, 0xc7, 0xa2, 0x08, 0xfc, 0xe5, 0x8a, 0x5a, 0x7e, 0xa0,
	0xe5, 0xbc, 0x7b, 0x2d, 0x2d, 0x93, 0x8f, 0x06, 0xd1, 0xc7, 0xa3, 0x7c, 0x42, 0xae, 0x62, 0x42,
	0x9e, 0x82, 0x2c, 0x5d, 0xcb, 0x13, 0x97, 0xba, 0xbe, 0xdf, 0x94, 0x17, 0x68, 0x6a, 0x3c, 0x85,
	0xcf, 0x74, 0x89, 0x9b, 0x20, 0xa2, 0xe8, 0xa2, 0x34, 0x4e, 0xe6, 0x56, 0x44, 0xf5, 0x73, 0x8d,
	0xef, 0x54, 0xeb, 0x1a, 0x99, 0x0c, 0x02, 0x80, 0xd5, 0xfe, 0x28, 0x39, 0x09, 0xcf, 0x8b, 0xba,
	0x3e, 0x6d, 0xbe, 0x31, 0x6e, 0xce, 0xa3, 0x84, 0xbd, 0x28, 0xe7, 0x1a, 0x5f, 0x50, 0x4b, 0x5f,
	0x8e, 0xda, 0xe4, 0x43, 0xc4, 0xaa, 0x65, 0x76, 0x40, 0xa3, 0x63, 0xd7, 0xa5, 0x06, 0x27, 0xb5,
	0x00, 0x25, 0x03, 0x22, 0xd5, 0x75, 0xe3, 0x4f, 0xa8, 0xc5, 0x47, 0xe9, 0x87, 0x71, 0x72, 0xbc,
	0x1d, 0xd0, 0xa9, 0x26, 0x07, 0x58, 0x40, 0xca, 0x4d, 0x17, 0x99, 0x51, 0x1a, 0x35, 0x56, 0x75,
	0x6b, 0xd4, 0x56, 0xd3, 0x18, 0x71, 0xc6, 0x77, 0xc9, 0xe0, 0x78, 0xe2, 0xf5, 0x39, 0xb8, 0x48,
	0x19, 0xaa, 0xa5, 0x68, 0xf2, 0x1e, 0x33, 0x21, 0xbd, 0xd3, 0x93, 0x2d, 0xbf, 0x5a, 0xd5, 0x2a,
	0xe0, 0x93, 0xcc, 0x36, 0x00, 0x16, 0x13, 0x30, 0x9d, 0x0b, 0xde, 0x90, 0xc0, 0xcf, 0x96, 0x9a,
	0x7f, 0x0b, 0x18, 0xf8, 0xc3, 0x38, 0x3e, 0xbe, 0x48, 0x66, 0xae, 0x69, 0x36, 0xbb, 0x18, 0x8c,
	0x7a, 0xd1, 0xd4, 0x1a, 0x89, 0x5a, 0x47, 0x70, 0x30, 0x75, 0x43, 0xd7, 0xae, 0x71, 0xea, 0x76,
	0xa1, 0x5a, 0xf3, 0x96, 0xba, 0x82, 0x91, 0x08, 0x70, 0xdc, 0xc8, 0xad, 0x07, 0xa3, 0x15, 0x19,
	0x0d, 0x97, 0xc8, 0x8c, 0xbf, 0x51, 0x51, 0x0b, 0xfb, 0xc8, 0xa0, 0x5f, 0x52, 0x2d, 0x8d, 0x0a,
	0x89, 0x04, 0xc3, 0xc1, 0xd2, 0xe3, 0x5c, 0xcc, 0x1e, 0xf1, 0xad, 0xba, 0xb5, 0x6e, 0x7c, 0x12,
	0x5b, 0xad, 0x70, 0xe8, 0xa8, 0x1b, 0x2d, 0x9f, 0x49, 0x91, 0x4d, 0x64, 0xa7, 0xc8, 0x3d, 0xbc,
	0xa4, 0xc3, 0x85, 0xcd, 0x39, 0x26, 0xb8, 0x72, 0x56, 0xc2, 0x73, 0xaf, 0xe7, 0x23, 0xcd, 0xcb,
	0x85, 0xec, 0x8b, 0xec, 0xe3, 0x95, 0x92, 0xc8, 0xce, 0x6b, 0x85, 0x50, 0xf6, 0x6f, 0x8e, 0x7e,
	0xe3, 0x52, 0xd1, 0xaf, 0x2f, 0xa9, 0xa5, 0x0e, 0x88, 0x69, 0x23, 0xeb, 0x27, 0x54, 0xa2, 0x20,
	0x1f, 0xa9, 0x67, 0x39, 0x14, 0x9b, 0x3f, 0xf6, 0x16, 0x4b, 0x60, 0x6f, 0x01, 0x57, 0xe4, 0x9f,
	0xae, 0x27, 0xcc, 0xbe, 0xea, 0x5f, 0x87, 0x83, 0x6f, 0x69, 0xef, 0x24, 0x2a, 0xa8, 0x2e, 0x9e,
	0x09, 0x0b, 0xf4, 0xd9, 0x87, 0xbd, 0x71, 0x93, 0x00, 0xf9, 0x39, 0xa3, 0x47, 0x47, 0xfe, 0x03,
	0x26, 0x16, 0xc0, 0x1d, 0x7e, 0xad, 0x00, 0x0c, 0x1c, 0x7b, 0x4f, 0xc6, 0xf6, 0x9d, 0x52, 0x4e,
	0x78, 0x68, 0xce, 0x50, 0x7a, 0x59, 0x63, 0xc6, 0xb9, 0x7a, 0x9a, 0xc6, 0x24, 0x57, 0x26, 0x81,
	0xd5, 0x13, 0xed, 0x67, 0x69, 0x7a, 0x82, 0x8b, 0x04, 0xbd, 0xc6, 0x0f, 0x57, 0xd5, 0x0a, 0x7f,
	0xbb, 0x44, 0xbc, 0x2f, 0x15, 0xc9, 0x2d, 0xa1, 0x15, 0x89, 0xb7, 0xa5, 0x2f, 0xe1, 0x73, 0xea,
	0x29, 0xf4, 0x43, 0xb0, 0x2f, 0x38, 0x02, 0xb6, 0xdc, 0x48, 0x0c, 0x54, 0x82, 0x46, 0x16, 0x31,
	0xac, 0x35, 0x97, 0x02, 0x90, 0xc9, 0xa1, 0xca, 0xdc, 0x40, 0x22, 0x17, 0x43, 0x27, 0xb7, 0xd0,
	0x18, 0x08, 0x8c, 0x80, 0x5f, 0x9c, 0xe1, 0x9c, 0xe8, 0x72, 0x6f, 0x90, 0x2d, 0x52, 0xde, 0xd1,
	0x46, 0xc7, 0x26, 0xd9, 0xe0, 0x8d, 0x5b, 0xc1, 0x54, 0xe3, 0xbb, 0xd4, 0x1a, 0xeb, 0xe9, 0xf7,
	0xc2, 0x1e, 0xe1, 0x71, 0x22, 0x23, 0xe8, 0x80, 0x40, 0xc9, 0x04, 0xd3, 0x5c, 0xfe, 0x2b, 0xdd,
	0xc6, 0x54, 0x57, 0xbc, 0x3a, 0x7e, 0xad, 0xa2, 0x9e, 0xc9, 0x0f, 0xa1, 0x63, 0x38, 0xc3, 0x81,
	0x2f, 0x04, 0xd9, 0x19, 0xb8, 0x5a, 0x6c, 0x33, 0x8a, 0x7c, 0x34, 0x3e, 0x92, 0xab, 0x1d, 0x41,
	0x6e, 0xb6, 0x90, 0x9c, 0xa7, 0x24, 0xd6, 0x87, 0xf3, 0xf9, 0x85, 0x6d, 0x97, 0xb1, 0x62, 0x7b,
	0x3a, 0x70, 0x2c, 0x84, 0x43, 0x67, 0x3c, 0x01, 0x4e, 0x9c, 0x52, 0xe4, 0x7f, 0x56, 0xd4, 0x53,
	0xf9, 0x55, 0x6c, 0x8f, 0x00, 0xa6, 0xf1, 0xf8, 0x12, 0x3c, 0x5c, 0xc7, 0xd3, 0x6a, 0x4d, 0xaf,
	0x40, 0xa2, 0xea, 0x2d, 0x6e, 0x5e, 0x90, 0x28, 0x34, 0x83, 0x93, 0x25, 0xe0, 0x27, 0x48, 0x12,
	0xf4, 0xd2, 0x63, 0x48, 0x32, 0xff, 0xfd, 0xb2, 0x5a, 0x22, 0x1e, 0x21, 0x1f, 0x3e, 0xef, 0xe3,
	0x47, 0x90, 0x0d, 0x6e, 0x25, 0xd1, 0x30, 0xb3, 0x0a, 0x00, 0xf4, 0x63, 0xa7, 0x3c, 0x9b, 0x1c,
	0xfb, 0x2a, 0xe7, 0x23, 0xcf, 0x85, 0xcf, 0xb9, 0x2c, 0xaa, 0x66, 0xd7, 0x95, 0x24, 0x0a, 0xda,
	0xcc, 0x2f, 0xbf, 0x24, 0x7e, 0xbb, 0xc0, 0x80, 0xfc, 0x0d, 0x4c, 0x87, 0xa4, 0xa7, 0x8b, 0x97,
	0xa8, 0x48, 0x8d, 0x6d, 0x6e, 0x53, 0xa6, 0xc6, 0x0e, 0x29, 0xcb, 0xa9, 0x69, 0x1c, 0x76, 0x0d,
	0x53, 0xf9, 0xa0, 0xa7, 0x07, 0x7d, 0xa6, 0xae, 0x99, 0x58, 0x60, 0x8d, 0xbb, 0x98, 0xbc, 0x41,
	0xda, 0xa7, 0x8c, 0x67, 0x3d, 0xe6, 0x9b, 0x0d, 0xcf, 0xc2, 0x96, 0x96, 0xf6, 0x4c, 0xe4, 0x68,
	0x7a, 0x14, 0x20, 0xdb, 0x4a, 0x61, 0xcc, 0x8d, 0x6f, 0x47, 0x2d, 0x61, 0xd2, 0x89, 0x93, 0x3e,
	0xa7, 0x5d, 0x20, 0xc7, 0xad, 0x4e, 0x37, 0x1f, 0xf7, 0x69, 0xb4, 0xb4, 0xf0, 0xa1, 0x51, 0x4f,
	0xab, 0x9b, 0x1e, 0xab, 0xc5, 0x03, 0x60, 0xee, 0x6c, 0x9e, 0xd9, 0xa2, 0x88, 0xa0, 0x73, 0x1f,
	0x39, 0x6b, 0x43, 0x8b, 0x3f, 0x6a, 0xfe, 0x50, 0x5f, 0x3b, 0x3a, 0x04, 0xce, 0x30, 0x1b, 0x19,
	0xc7, 0x8a, 0xbf, 0x0a, 0xd2, 0xdd, 0x4e, 0x1c, 0x0f, 0x9d, 0xd0, 0xef, 0x02, 0x84, 0x39, 0xcc,
	0xa8, 0xea, 0x64, 0x6a, 0xa0, 0x20, 0x6d, 0x93, 0xc7, 0x02, 0x10, 0xc0, 0xd0, 0xc9, 0x2d, 0x4b,
	0xd8, 0x1d, 0x9b, 0x74, 0x2e, 0x23, 0x1b, 0x9f, 0x7f, 0x18, 0x76, 0xa3, 0x81, 0x23, 0xcf, 0x91,
	0xc6, 0x49, 0x3b, 0x1b, 0xcd, 0x50, 0x8b, 0x93, 0x04, 0x83, 0xf3, 0x09, 0xa6, 0x6a, 0xf9, 0xd1,
	0x80, 0x20, 0x65, 0xf0, 0xc1, 0x85, 0x71, 0xc8, 0x08, 0xee, 0xd1, 0xa1, 0x3d, 0xf5, 0xa8, 0xf9,
	0xd1, 0x5e, 0x16, 0x75, 0xeb, 0x91, 0x63, 0x46, 0x6d, 0xda, 0x64, 0x4d, 0x2c, 0x9d, 0x1f, 0xa8,
	0x05, 0x24, 0x01, 0x94, 0x82, 0xb1, 0xf8, 0x45, 0x0c, 0x56, 0x15, 0x99, 0xc8, 0xaa, 0x5a, 0x43,
	0x90, 0xca, 0xdb, 0xf7, 0x7a, 0x3d, 0xcb, 0x02, 0x0d, 0x43, 0x20, 0xea, 0xa1, 0xeb, 0x80, 0xd0,
	0xf8, 0xcd, 0x2a, 0x88, 0xaf, 0xc6, 0x0c, 0xe2, 0xf7, 0xda, 0xb8, 0xa1, 0xae, 0x72, 0xf0, 0x9d,
	0xe3, 0x12, 0x67, 0x9d, 0x37, 0x6a, 0x94, 0xa3, 0xd4, 0x3e, 0x27, 0x1d, 0xa6, 0xc9, 0xf6, 0x4b,
	0x4f, 0x29, 0x2f, 0x1c, 0x3f, 0xcc, 0x3b, 0x9a, 0x91, 0xf7, 0x95, 0x7d, 0xea, 0x0e, 0x3d, 0xa5,
	0xe3, 0xe7, 0x9d, 0x97, 0xcd, 0xc8, 0xbc, 0x53, 0x37, 0xd5, 0xf5, 0xf1, 0x79, 0x59, 0xed, 0xf9,
	0x8c, 0x0e, 0xb4, 0xf1, 0x77, 0x72, 0xac, 0x04, 0xcf, 0xab, 0x67, 0x72, 0xdf, 0x47, 0x26, 0xb1,
	0x13, 0x0d, 0xa2, 0xf4, 0xc8, 0x0d, 0xc9, 0x87, 0x91, 0xc6, 0x7a, 0xd9, 0x29, 0xcd, 0x93, 0x32,
	0x20, 0x02, 0x81, 0xd9, 0x40, 0xd3, 0xc7, 0x0a, 0xf8, 0xe5, 0x84, 0x0b, 0xf5, 0xae, 0x39, 0x3e,
	0x97, 0xcf, 0xc3, 0x8f, 0x56, 0xd4, 0xe2, 0xa5, 0x0c, 0x58, 0xec, 0x2b, 0xc4, 0x4c, 0xff, 0xab,
	0x6a, 0x75, 0x0c, 0x1a, 0x65, 0xdf, 0x7c, 0x45, 0xad, 0x14, 0xb7, 0xa6, 0x8c, 0x9f, 0x6b, 0xa9,
	0xa5, 0x6d, 0x4a, 0x20, 0x4e, 0x06, 0x24, 0x49, 0xd5, 0xf0, 0x49, 0x32, 0x13, 0x38, 0x99, 0xc8,
	0x6d, 0xb2, 0x55, 0xc1, 0x0a, 0xfb, 0x6a, 0x5d, 0xe7, 0x48, 0x71, 0x3c, 0x2d, 0x8b, 0x81, 0x73,
	0x41, 0xae, 0x8b, 0xf1, 0xcd, 0x41, 0x67, 0xde, 0xb8, 0x1b, 0xb5, 0x74, 0xb3, 0x08, 0xff, 0x8d,
	0x0f, 0xd5, 0x7c, 0xd9, 0x60, 0x68, 0x9b, 0xa0, 0x47, 0x07, 0xb9, 0xc8, 0xd7, 0x54, 0x0f, 0x5c,
	0x2b, 0x19, 0x98, 0xc3, 0xfc, 0x5e, 0x57, 0x0b, 0x07, 0x20, 0x23, 0x61, 0xb2, 0x0d, 0x7c, 0x7f,
	0x2c, 0x19, 0x40, 0x90, 0x1c, 0xb3, 0xd9, 0xb6, 0x2a, 0x5c, 0xc6, 0xfc, 0xbb, 0x92, 0x02, 0xe3,
	0x7e, 0x7c, 0x96, 0xeb, 0xfd, 0x82, 0x5a, 0x20, 0xe6, 0xa4, 0x1d, 0x66, 0xc0, 0x70, 0xa5, 0x25,
	0x72, 0x15, 0xe6, 0xca, 0x58, 0x25, 0x5f, 0x17, 0x80, 0x1f, 0x47, 0x47, 0x7a, 0xbc, 0x69, 0x28,
	0x40, 0xd2, 0x60, 0x09, 0xcc, 0xa4, 0x1a, 0x9f, 0x59, 0x84, 0xc4, 0xb7, 0xd3, 0xc4, 0xf2, 0x03,
	0xca, 0x42, 0x4c, 0x68, 0x94, 0x32, 0x0d, 0x54, 0x04, 0x48, 0xf6, 0xeb, 0x12, 0xdf, 0x29, 0x3c,
	0xc9, 0xb4, 0xc1, 0x69, 0x99, 0x60, 0x44, 0xde, 0x25, 0xe7, 0x24, 0xc8, 0x13, 0x5c, 0x8d, 0x50,
	0xab, 0x5b, 0xb7, 0x1c, 0x1e, 0xcd, 0x66, 0xd5, 0x56, 0x1a, 0xd8, 0x05, 0xfa, 0xbf, 0x60, 0xf2,
	0x19, 0x63, 0x90, 0xd6, 0x61, 0x44, 0x3a, 0x25, 0x8a, 0x6e, 0x6f, 0xfc, 0x2b, 0xb8, 0x20, 0x08,
	0x10, 0x3f, 0x52, 0x83, 0xa1, 0x61, 0xed, 0xef, 0x04, 0x67, 0x56, 0x80, 0x47, 0x42, 0xb9, 0x17,
	0x76, 0x0e, 0xe8, 0xcc, 0xf2, 0x7d, 0x01, 0xa0, 0x00, 0x1b, 0xcb, 0x53, 0x32, 0x09, 0x0e, 0x30,
	0x2a, 0x61, 0x4b, 0xb4, 0x82, 0x3a, 0x9a, 0x09, 0x16, 0xb9, 0x87, 0x1d, 0x59, 0x3a, 0x2b, 0x01,
	0xce, 0x6b, 0x6a, 0x4d, 0x67, 0xa3, 0x71, 0x3a, 0x97, 0xbb, 0xec, 0x03, 0xc1, 0xe0, 0x5c, 0x17,
	0x8f, 0xb4, 0xfc, 0x88, 0x9b, 0x2c, 0x41, 0xda, 0x70, 0x2d, 0xd3, 0xce, 0x78, 0xfc, 0xc6, 0xff,
	0x67, 0x9b, 0xfc, 0x91, 0x5a, 0xe5, 0xfd, 0x2d, 0x83, 0xc7, 0xe5, 0xf6, 0xb9, 0x00, 0xec, 0xba,
	0xa4, 0x40, 0x9e, 0xdf, 0xa3, 0x3c, 0xdf, 0x3b, 0x27, 0x7e, 0x1f, 0xd5, 0xc4, 0x06, 0x8e, 0x48,
	0x8c, 0x7d, 0x59, 0x8a, 0xb9, 0x1d, 0xb5, 0xc4, 0x43, 0xb9, 0x3e, 0xa2, 0x26, 0x8d, 0xd5, 0x93,
	0x8e, 0x76, 0x62, 0x93, 0x70, 0x6d, 0x87, 0x41, 0x8f, 0x33, 0x08, 0x12, 0xc3, 0xcd, 0xba, 0xc3,
	0x8a, 0x49, 0x2f, 0x43, 0x81, 0xa3, 0xcd, 0xb8, 0x63, 0xc2, 0xa8, 0x3c, 0xd1, 0x12, 0x95, 0x92,
	0xd3, 0xe7, 0xa6, 0xdb, 0x62, 0x80, 0xfc, 0x5e, 0x55, 0x2d, 0x99, 0xec, 0x5f, 0xac, 0x85, 0x73,
	0x81, 0x92, 0xfb, 0x20, 0x2a, 0x45, 0x81, 0x27, 0x4c, 0x6d, 0x9e, 0x18, 0xfb, 0x0c, 0x98, 0xd7,
	0xd4, 0xf5, 0x46, 0xa7, 0x8c, 0x4a, 0x8e, 0x63, 0xb6, 0x09, 0x31, 0x76, 0x87, 0x23, 0xbc, 0x2b,
	0x87, 0x14, 0x38, 0x92, 0x56, 0x2f, 0x0c, 0x12, 0x24, 0x6f, 0x26, 0x7c, 0xd6, 0xf1, 0x30, 0xbb,
	0x4c, 0x74, 0x2d, 0xe7, 0xa3, 0x62, 0xa7, 0xa1, 0x34, 0xee, 0x9d, 0x84, 0x8e, 0x07, 0x3a, 0x73,
	0x86, 0x2c, 0x86, 0x58, 0x93, 0x30, 0x7c, 0xd5, 0xb6, 0x69, 0x57, 0x72, 0x2b, 0x29, 0x32, 0xd3,
	0x45, 0x41, 0xb1, 0xc2, 0x0f, 0x50, 0x01, 0x08, 0xf2, 0xba, 0xb6, 0x41, 0xb6, 0xf0, 0x59, 0xdd,
	0x92, 0x1b, 0x82, 0x73, 0xd4, 0xdd, 0x06, 0x94, 0xc5, 0x51, 0xb5, 0x1e, 0xf8, 0x22, 0xef, 0x00,
	0x0c, 0x3b, 0x02, 0x24, 0x69, 0x93, 0xd5, 0xa8, 0x46, 0xea, 0x6f, 0x8c, 0x1f, 0xcb, 0x90, 0x71,
	0xdc, 0x62, 0x36, 0x78, 0x2c, 0xf3, 0x2d, 0xa5, 0x13, 0xcd, 0x11, 0x31, 0x6a, 0x42, 0x4f, 0xad,
	0x9a, 0x76, 0xa7, 0xa7, 0x16, 0xeb, 0x95, 0x35, 0xd7, 0x78, 0x5b, 0x2d, 0x23, 0x7b, 0x51, 0x46,
	0x1d, 0x25, 0x96, 0xa2, 0x40, 0x66, 0x89, 0xcf, 0x76, 0xa8, 0xa1, 0x50, 0xd9, 0x1d, 0x71, 0x7a,
	0x2f, 0x1b, 0x4c, 0xfb, 0xca, 0x5f, 0x6e, 0xb4, 0xff, 0x0c, 0x22, 0x15, 0xc5, 0x95, 0x3c, 0x84,
	0x35, 0x8f, 0x7a, 0x01, 0xde, 0x71, 0x58, 0x4b, 0xd3, 0x9d, 0x1b, 0xa7, 0x50, 0xf9, 0x0a, 0x4b,
	0xc3, 0x66, 0x34, 0xc9, 0x9e, 0xf2, 0x15, 0x9d, 0x0f, 0xd2, 0xa6, 0x68, 0xc1, 0xbe, 0xae, 0xae,
	0x88, 0xef, 0x14, 0xfa, 0xcb, 0x8f, 0x5a, 0x80, 0xe8, 0xb4, 0x73, 0x9c, 0x6e, 0x25, 0x45, 0x42,
	0x98, 0xd8, 0xac, 0x9c, 0xd4, 0xda, 0x87, 0x93, 0x24, 0x59, 0x39, 0xe1, 0xf0, 0x02, 0x1a, 0x8e,
	0x33, 0xfd, 0xbe, 0xa4, 0xf1, 0x16, 0x51, 0x8d, 0x1f, 0x75, 0x24, 0xb6, 0x5b, 0x5c, 0x52, 0xd8,
	0x07, 0xda, 0x79, 0x85, 0x5c, 0xcd, 0x29, 0xb6, 0xa1, 0xf1, 0x4f, 0x2a, 0x6a, 0x96, 0x96, 0xfc,
	0xe5, 0x82, 0xd6, 0x1c, 0x26, 0xd4, 0x61, 0x28, 0x14, 0x12, 0x94, 0xe8, 0xd6, 0xc8, 0xb1, 0x41,
	0x88, 0xe2, 0x5f, 0x60, 0x55, 0x77, 0x42, 0x20, 0x59, 0x30, 0x86, 0x7b, 0x62, 0xed, 0x2f, 0x27,
	0x18, 0xb9, 0x8c, 0x96, 0xe0, 0x69, 0xbd, 0x72, 0x09, 0x5b, 0xce, 0x73, 0xd7, 0xb3, 0x38, 0x5a,
	0x16, 0x9a, 0x94, 0x0b, 0xe3, 0xce, 0x22, 0x0f, 0xd4, 0x0a, 0x4d, 0x1d, 0xf1, 0xd7, 0x7b, 0x6c,
	0xf5, 0x21, 0x2a, 0x4a, 0xd0, 0x6e, 0xba, 0xb9, 0x2e, 0xfa, 0x5a, 0xa4, 0xf4, 0x0d, 0xf3, 0x15,
	0x35, 0x7f, 0x0f, 0x10, 0xf7, 0x03, 0x10, 0x64, 0x3d, 0xaa, 0x52, 0x92, 0x6f, 0x1d, 0x08, 0x18,
	0x29, 0x9c, 0x0f, 0xf8, 0x75, 0x0c, 0xba, 0x0e, 0x5b, 0xc7, 0xcd, 0xbc, 0x1e, 0x8e, 0x59, 0xb5,
	0x7f, 0x89, 0xc9, 0x1c, 0x71, 0x86, 0xf7, 0x09, 0x3e, 0x45, 0x10, 0xa3, 0x2a, 0xe1, 0x34, 0xc8,
	0x85, 0xee, 0x8c, 0xc1, 0xd2, 0x46, 0x12, 0xb1, 0x65, 0x37, 0xe8, 0x0f, 0x4d, 0x24, 0x91, 0xb4,
	0xd1, 0xe2, 0xa6, 0x4a, 0xcc, 0x27, 0x2f, 0x60, 0x2e, 0x47, 0x2a, 0x6a, 0x43, 0xdd, 0xa6, 0xcb,
	0xbb, 0x89, 0x2c, 0x9e, 0x71, 0xca, 0x27, 0x3f, 0xa8, 0xde, 0x96, 0xfb, 0x81, 0xb0, 0xc2, 0xdc,
	0xa8, 0x63, 0xb0, 0xd2, 0x29, 0xa5, 0x6c, 0x59, 0x24, 0x14, 0x3b, 0x9d, 0x84, 0xe2, 0x87, 0x81,
	0x26, 0x82, 0x6f, 0xa8, 0x79, 0x1a, 0x4b, 0xf0, 0x91, 0x31, 0x5e, 0xb3, 0xd1, 0xa5, 0xe9, 0x52,
	0x44, 0x1b, 0x4a, 0x39, 0xd7, 0x78, 0x53, 0xad, 0xf2, 0x15, 0x0d, 0xd2, 0x4c, 0x27, 0x92, 0x2f,
	0x5e, 0xf9, 0x0e, 0xda, 0xf4, 0xfb, 0xf2, 0xd0, 0x0a, 0xf3, 0xda, 0x0a, 0xc4, 0x5c, 0xff, 0x3f,
	0xa7, 0x44, 0xcb, 0x48, 0xdc, 0x1e, 0x86, 0x41, 0x36, 0x02, 0x7c, 0x59, 0x24, 0xc4, 0x6e, 0x04,
	0x27, 0x92, 0x2d, 0xba, 0xf9, 0x4d, 0x64, 0xb0, 0x6d, 0xdc, 0xad, 0x5c, 0x7c, 0x6e, 0x35, 0x1a,
	0x13, 0x6b, 0xb1, 0x22, 0x7b, 0xeb, 0x94, 0x4e, 0x46, 0x2d, 0x43, 0x60, 0xbd, 0x82, 0x16, 0xfa,
	0x57, 0x96, 0xee, 0xc7, 0x6b, 0x6a, 0x55, 0x8f, 0x6c, 0x3b, 0x97, 0xef, 0xca, 0x32, 0xe7, 0xd6,
	0xda, 0x83, 0xdb, 0x92, 0x04, 0xd1, 0x20, 0x23, 0x17, 0x50, 0xce, 0xe4, 0x64, 0x01, 0x79, 0x93,
	0xa8, 0x08, 0x77, 0x28, 0xbd, 0x0c, 0x8f, 0xd5, 0xb5, 0x7b, 0x83, 0x48, 0xf4, 0x0f, 0x58, 0x43,
	0x29, 0xea, 0x48, 0xf2, 0x84, 0x0b, 0x04, 0x0d, 0x4e, 0x8e, 0xd7, 0x26, 0xbe, 0xe1, 0xc0, 0x1a,
	0xba, 0x7e, 0xb8, 0xa2, 0x14, 0x4f, 0x0e, 0xb3, 0xa7, 0xfb, 0x74, 0x3e, 0xeb, 0xf6, 0xe8, 0xe5,
	0x13, 0x43, 0x9a, 0x9c, 0x58, 0x35, 0xed, 0x6d, 0x6d, 0x5e, 0x85, 0x23, 0x66, 0x4b, 0x25, 0xa0,
	0x02, 0x24, 0xec, 0x71, 0xb5, 0x0d, 0x53, 0x8b, 0x8a, 0x8e, 0xbc, 0x64, 0x38, 0x9c, 0x96, 0x88,
	0xf1, 0x45, 0x9e, 0x48, 0xca, 0x2a, 0xa8, 0x22, 0xb6, 0xd3, 0xf0, 0x72, 0x66, 0x81, 0x2c, 0x2c,
	0x3b, 0xe4, 0xd6, 0x24, 0x1d, 0xcc, 0x92, 0xee, 0x25, 0x8c, 0x65, 0x49, 0xe2, 0xb9, 0xc6, 0x4f,
	0x54, 0xf4, 0x06, 0x50, 0xd6, 0x31, 0xa4, 0x10, 0x11, 0x4a, 0x9d, 0x70, 0x26, 0xcf, 0x9b, 0xe5,
	0xda, 0x15, 0x7b, 0x44, 0xec, 0x55, 0xaa, 0x95, 0xa7, 0xc1, 0xa2, 0x23, 0xd2, 0x76, 0xfa, 0x96,
	0x4d, 0xe7, 0xd7, 0xab, 0xea, 0xaa, 0xa3, 0x83, 0xe3, 0xac, 0x4c, 0xe9, 0x2e, 0x6c, 0xef, 0x18,
	0x42, 0x22, 0xbd, 0x43, 0x0e, 0xe1, 0x8f, 0xe9, 0x55, 0xf3, 0x1a, 0x62, 0x9a, 0xb5, 0x54, 0x12,
	0xb3, 0xac, 0x50, 0x19, 0x3e, 0xe2, 0x02, 0x31, 0xc0, 0xfb, 0x31, 0x23, 0x3a, 0xed, 0x10, 0xbf,
	0x4c, 0x72, 0x9e, 0xeb, 0x5c, 0x66, 0x98, 0x4b, 0x06, 0xc3, 0x59, 0xcd, 0xa0, 0x69, 0x19, 0x25,
	0x40, 0xd9, 0x42, 0x62, 0x43, 0x9a, 0xb7, 0x4b, 0xbc, 0x1b, 0xdc, 0x3e, 0xec, 0x92, 0x39, 0xb9,
	0xcf, 0xdd, 0x12, 0x97, 0xab, 0xc6, 0x4d, 0xb5, 0x76, 0x70, 0x04, 0x67, 0x73, 0x7b, 0x34, 0x38,
	0xde, 0xc5, 0xa5, 0x20, 0x12, 0x41, 0x74, 0xc1, 0x73, 0xaf, 0x10, 0xe6, 0x7f, 0x03, 0xa4, 0x29,
	0x0b, 0x6f, 0xd6, 0xa4, 0xb8, 0x11, 0x2c, 0x95, 0xb2, 0xb8, 0xcf, 0xc5, 0x3d, 0x0a, 0xbd, 0x7f,
	0x2b, 0xe8, 0xc5, 0x1e, 0xb7, 0xee, 0xf4, 0xe3, 0x51, 0xd0, 0xfe, 0x40, 0xd0, 0x12, 0x67, 0x42,
	0xaa, 0x4f, 0xcc, 0x40, 0xfd, 0x50, 0xcd, 0x63, 0x5a, 0x6f, 0xdf, 0x70, 0x12, 0xff, 0x5d, 0xd5,
	0x34, 0x72, 0xe2, 0x38, 0xdf, 0xa5, 0x56, 0xee, 0x03, 0xee, 0xd8, 0xc7, 0xef, 0xbf, 0x99, 0x44,
	0xed, 0x09, 0xb9, 0x6e, 0x4a, 0x4c, 0x4e, 0xee, 0x08, 0x38, 0x2e, 0x8e, 0x80, 0xee, 0x00, 0xa8,
	0x2c, 0xbb, 0xdc, 0x1c, 0xbe, 0xa6, 0x36, 0xcc, 0x08, 0xb8, 0x20, 0x3d, 0x4a, 0xc1, 0x81, 0xc8,
	0x19, 0xb1, 0x58, 0xf2, 0x4e, 0x7f, 0xa1, 0xac, 0xe2, 0xc2, 0x97, 0xd4, 0xa6, 0xf9, 0xc2, 0x24,
	0x47, 0xab, 0xab, 0x98, 0x65, 0x24, 0xca, 0x38, 0xaf, 0x46, 0x37, 0x31, 0x49, 0x0e, 0xef, 0x3b,
	0x6b, 0xc4, 0x7a, 0x17, 0x1e, 0x91, 0x31, 0x97, 0x69, 0x01, 0xfd, 0x12, 0xc9, 0xb1, 0x96, 0xe6,
	0xcc, 0x08, 0xf3, 0xe7, 0xab, 0xe8, 0x46, 0x6e, 0xaf, 0x2a, 0x5f, 0x3e, 0x9f, 0x33, 0xce, 0xff,
	0x8d, 0x9b, 0x8a, 0x78, 0x19, 0x33, 0x09, 0xe0, 0x99, 0x37, 0xe9, 0x8b, 0xa7, 0xa9, 0x9f, 0xbe,
	0x9d, 0xeb, 0xb7, 0x3c, 0xd7, 0xc3, 0x73, 0x97, 0xe7, 0x4a, 0x93, 0xf1, 0x99, 0x5b, 0xc2, 0xb7,
	0x74, 0xed, 0xd6, 0xd8, 0x55, 0x6a, 0x0c, 0xd1, 0x81, 0x35, 0x6f, 0x53, 0xc0, 0x54, 0x8c, 0x85,
	0xeb, 0xd2, 0x86, 0x39, 0x34, 0x83, 0x4e, 0x66, 0x1c, 0xe1, 0x50, 0x37, 0x8e, 0x6d, 0x59, 0x3c,
	0x34, 0xee, 0xf5, 0x8b, 0x1c, 0x45, 0xc9, 0x08, 0x3d, 0x2d, 0x45, 0xa1, 0x3f, 0x5d, 0xc9, 0x5d,
	0x69, 0x8f, 0x14, 0xb5, 0xa9, 0x56, 0x32, 0x5c, 0x79, 0x93, 0x3e, 0x51, 0xb0, 0x59, 0x3a, 0x6d,
	0x35, 0xc7, 0xa5, 0x37, 0x84, 0xfe, 0x69, 0x3e, 0x01, 0x16, 0x26, 0x67, 0xa2, 0x43, 0x01, 0xc7,
	0xaf, 0x1d, 0x69, 0x07, 0x31, 0x0a, 0x40, 0x0a, 0x31, 0xe1, 0x29, 0xfa, 0xcf, 0x09, 0x49, 0x7b,
	0x43, 0x5d, 0xd9, 0x8a, 0x7b, 0x71, 0x72, 0x1f, 0xb7, 0xf4, 0x5e, 0xbb, 0xed, 0xcd, 0x81, 0x81,
	0xa5, 0x02, 0xdb, 0x6e, 0x66, 0xe7, 0xc6, 0x3d, 0xa0, 0x84, 0xa8, 0x69, 0xa2, 0xa1, 0x7c, 0x8e,
	0x0f, 0xf8, 0xa1, 0x89, 0xc4, 0xb8, 0xd1, 0xd7, 0x19, 0x5d, 0x89, 0x47, 0xc0, 0x31, 0x00, 0x01,
	0x72, 0xcd, 0x45, 0x5b, 0x0d, 0x0e, 0x6b, 0xa0, 0x59, 0xa3, 0xb4, 0x78, 0x9b, 0x17, 0x0a, 0x33,
	0xea, 0xa4, 0x63, 0x27, 0x76, 0xf5, 0x1c, 0x58, 0xc4, 0xe7, 0x54, 0x54, 0xd2, 0x7f, 0xb3, 0xa2,
	0x36, 0xe8, 0x4b, 0xfb, 0x30, 0xa6, 0x2e, 0xcd, 0xe5, 0xbb, 0x13, 0xf8, 0xc9, 0xbc, 0x40, 0x8a,
	0xb6, 0x11, 0x6c, 0x16, 0x96, 0xed, 0x05, 0x52, 0x93, 0xdb, 0x7c, 0x4f, 0x25, 0x41, 0x9f, 0x2f,
	0x92, 0x61, 0x9d, 0xba, 0x71, 0xce, 0x8c, 0x12, 0x8f, 0x54, 0xca, 0xe1, 0x1c, 0xb6, 0x4d, 0x10,
	0x41, 0xe3, 0x11, 0x7b, 0x6a, 0x0a, 0x60, 0x68, 0xba, 0x1e, 0x34, 0x75, 0x53, 0xa6, 0x2a, 0x42,
	0xa4, 0x1f, 0x1b, 0x6d, 0xeb, 0xfc, 0x2d, 0x07, 0x54, 0x38, 0xae, 0x38, 0x06, 0xb1, 0xec, 0x54,
	0x51, 0x6e, 0xe2, 0x28, 0xdf, 0xa9, 0x56, 0x69, 0x2a, 0x07, 0x78, 0x6d, 0x7d, 0x73, 0xd1, 0x48,
	0xb1, 0x6c, 0x80, 0x5f, 0xac, 0xa9, 0x85, 0xbd, 0xb0, 0x95, 0x8c, 0xa2, 0x6c, 0x3c, 0x75, 0x38,
	0x67, 0xf6, 0x4a, 0x28, 0x19, 0x15, 0x6d, 0x6c, 0xd5, 0xc9, 0x64, 0x4d, 0xcd, 0xc2, 0x2e, 0x17,
	0x5a, 0x1d, 0x5f, 0xb5, 0x2b, 0x98, 0x47, 0x49, 0x0a, 0x81, 0x38, 0xe1, 0x7d, 0x80, 0xaa, 0x74,
	0x67, 0x63, 0x5b, 0x2b, 0xb3, 0xc9, 0xbe, 0x04, 0x82, 0x2f, 0xe7, 0x95, 0x6a, 0x19, 0xd5, 0x67,
	0x59, 0x2c, 0x6f, 0xc6, 0x0a, 0x40, 0xea, 0x55, 0xe2, 0xb1, 0xed, 0x2c, 0x0a, 0xf3, 0x2b, 0xea,
	0x54, 0x7e, 0x94, 0x91, 0xeb, 0xd4, 0x20, 0x0a, 0xa5, 0x99, 0xfd, 0x7e, 0xd4, 0x6e, 0xf7, 0x2c,
	0x02, 0x99, 0xd7, 0x2c, 0x0d, 0x66, 0xac, 0x32, 0xad, 0x0b, 0x3a, 0x54, 0x46, 0x7a, 0x23, 0xa6,
	0x00, 0x0c, 0xde, 0x6b, 0x3b, 0xde, 0xd9, 0xd8, 0xdf, 0xb6, 0x2f, 0xe9, 0x0c, 0x84, 0xa6, 0xce,
	0x97, 0x28, 0xd6, 0xfc, 0x75, 0x3d, 0x1b, 0x6d, 0x75, 0xcd, 0x38, 0xee, 0x3d, 0xf8, 0x78, 0x14,
	0x0d, 0x77, 0x4e, 0x28, 0x21, 0xe4, 0x38, 0xed, 0x62, 0xab, 0xbc, 0x24, 0xc8, 0xd2, 0x5b, 0xf6,
	0x02, 0x87, 0x39, 0x37, 0x6f, 0x4f, 0x2e, 0x69, 0x01, 0x68, 0xf0, 0x4a, 0xfe, 0x33, 0x3e, 0x42,
	0x47, 0x5e, 0x51, 0xa7, 0x4d, 0x13, 0x45, 0x78, 0x29, 0x02, 0xef, 0x32, 0x11, 0xf5, 0xd2, 0xfc,
	0xd2, 0x00, 0x1a, 0x3b, 0xee, 0x94, 0xb6, 0xdf, 0x14, 0x57, 0xee, 0x41, 0x82, 0x26, 0xf8, 0xfb,
	0x72, 0xdc, 0xc6, 0x57, 0x8a, 0xe0, 0xf4, 0xdf, 0x42, 0xf2, 0x8d, 0x24, 0x8a, 0x6a, 0xdc, 0x0b,
	0x2f, 0x1a, 0xf9, 0x07, 0x2b, 0xe8, 0xd8, 0x4b, 0xe7, 0xeb, 0xfd, 0xe4, 0x1e, 0x7b, 0xac, 0x79,
	0x02, 0x13, 0xf5, 0x11, 0xb4, 0x53, 0x2e, 0xde, 0x9f, 0xcb, 0x9b, 0xf8, 0xc8, 0x44, 0x4d, 0xb9,
	0x42, 0x19, 0x62, 0x7f, 0xdb, 0x9d, 0xc2, 0x16, 0x26, 0xd6, 0x19, 0xcf, 0x2e, 0x3a, 0xe6, 0x8b,
	0x9d, 0x13, 0x9f, 0xf1, 0x31, 0x39, 0x09, 0x9a, 0x60, 0x3d, 0x32, 0xfe, 0xde, 0x43, 0x62, 0xfb,
	0xd8, 0xea, 0x7a, 0xb0, 0xcb, 0x36, 0x6a, 0x9b, 0xa6, 0xdd, 0x4c, 0x1a, 0xdb, 0xc1, 0xb9, 0x4d,
	0x76, 0x1d, 0xa5, 0x68, 0x91, 0x17, 0xed, 0x68, 0x6e, 0xae, 0x74, 0xed, 0x30, 0x33, 0xcb, 0x02,
	0x6d, 0x40, 0xdf, 0x0f, 0xfe, 0x62, 0x05, 0x60, 0x4c, 0xa9, 0x86, 0xdd, 0x8d, 0x23, 0xb0, 0x99,
	0x2f, 0x15, 0x48, 0x32, 0xc1, 0xa9, 0x29, 0xa1, 0x96, 0xb6, 0x15, 0x1a, 0x87, 0x52, 0x25, 0x6d,
	0xc7, 0xa9, 0xfe, 0xeb, 0x14, 0xb7, 0x63, 0x9f, 0xe0, 0x2f, 0x00, 0xe3, 0xc1, 0xf5, 0xcc, 0x00,
	0x7f, 0xfb, 0x0d, 0x40, 0xa8, 0xf2, 0x47, 0xe4, 0x2e, 0xb9, 0xaa, 0x99, 0xe6, 0xbe, 0xaa, 0x91,
	0x39, 0xbe, 0x37, 0x7e, 0x3e, 0xdd, 0xe4, 0x58, 0x8d, 0x54, 0x2d, 0x99, 0x05, 0x8f, 0x77, 0xbd,
	0x00, 0x5f, 0x5f, 0xec, 0xcb, 0x47, 0x41, 0x5e, 0x04, 0x21, 0xb6, 0x0d, 0xb0, 0x17, 0xca, 0x5f,
	0x00, 0x12, 0xeb, 0x7c, 0xd5, 0x7f, 0xda, 0x91, 0x37, 0xd1, 0x7d, 0x2e, 0x7f, 0xaf, 0x73, 0x77,
	0xa4, 0x9e, 0xbf, 0x36, 0x3b, 0x27, 0xa9, 0x2d, 0xf3, 0x33, 0x3e, 0xab, 0x6f, 0x54, 0xd4, 0x9a,
	0x99, 0xd5, 0x5e, 0xd8, 0xf1, 0x64, 0x52, 0x7e, 0x22, 0x78, 0xd4, 0x4a, 0x12, 0xc1, 0x02, 0x3e,
	0x74, 0xb3, 0x27, 0x60, 0x4e, 0x93, 0x93, 0xe6, 0x61, 0xd4, 0x9d, 0x34, 0xb7, 0x9f, 0xad, 0xa8,
	0xcd, 0xc2, 0xdc, 0xfe, 0x4f, 0x41, 0xad, 0x37, 0x19, 0x6a, 0x5f, 0x52, 0x2b, 0x66, 0x62, 0xfb,
	0x70, 0xcc, 0xcb, 0x40, 0x56, 0x86, 0xa1, 0xee, 0xe7, 0x8e, 0xc2, 0x3b, 0x41, 0xea, 0x91, 0x40,
	0x2e, 0x62, 0x1b, 0x1e, 0x8e, 0x01, 0xe7, 0x93, 0x8d, 0xf3, 0x9b, 0x70, 0xfd, 0xdf, 0x0e, 0x4f,
	0xc3, 0x5e, 0x72, 0x3e, 0x7e, 0x17, 0x2e, 0x4e, 0xb1, 0x8a, 0xb5, 0x6c, 0xd0, 0xd4, 0x04, 0x34,
	0xcf, 0xa6, 0xae, 0xe0, 0xed, 0xb5, 0xb5, 0x0d, 0xf5, 0x1c, 0x4a, 0xb2, 0xc8, 0xa3, 0x02, 0xdd,
	0x6e, 0x20, 0xbc, 0x99, 0xf6, 0xad, 0xf8, 0x83, 0x31, 0xdd, 0xee, 0x33, 0x3c, 0x34, 0xb3, 0xe5,
	0x5b, 0xf3, 0xe3, 0x55, 0x07, 0x2e, 0x93, 0x64, 0xcc, 0x9b, 0xea, 0x7a, 0x6e, 0xdc, 0x3e, 0x41,
	0xaf, 0x49, 0x41, 0x5d, 0xc6, 0x0d, 0xf3, 0x39, 0xf5, 0xd4, 0xf7, 0x31, 0x6c, 0x3c, 0x5d, 0x74,
	0xd8, 0xd5, 0x95, 0x84, 0xc0, 0x5f, 0x7c, 0x5c, 0x97, 0x44, 0x7c, 0x1b, 0xce, 0x08, 0xad, 0x04,
	0x79, 0x1e, 0x0c, 0x4b, 0x2f, 0xd3, 0xb4, 0xbc, 0xa8, 0x6e, 0xd8, 0x69, 0x31, 0x23, 0xa1, 0x15,
	0xad, 0x72, 0x83, 0x94, 0xf6, 0x7c, 0xd1, 0xe3, 0x7a, 0x7b, 0x51, 0x5c, 0x63, 0xa3, 0x63, 0x58,
	0x4b, 0xf2, 0x54, 0x76, 0x12, 0x9f, 0x18, 0xcf, 0x0e, 0x8c, 0x41, 0x9c, 0xe8, 0xd9, 0xd1, 0x40,
	0x17, 0xb0, 0xc1, 0x64, 0x57, 0xef, 0x9f, 0xa8, 0xab, 0x45, 0xf9, 0x90, 0x47, 0x70, 0xc3, 0xb4,
	0x57, 0x18, 0x16, 0x25, 0x08, 0x1a, 0xe4, 0xea, 0xad, 0x42, 0x2d, 0x9c, 0x7c, 0x8f, 0x77, 0x87,
	0xe4, 0x5e, 0x99, 0x8b, 0x7b, 0x41, 0x1b, 0x8b, 0xed, 0x41, 0xd6, 0x88, 0x8e, 0x56, 0x50, 0xc2,
	0x2e, 0x91, 0x84, 0x2c, 0x33, 0xc8, 0xbf, 0x3e, 0x95, 0x2f, 0xdc, 0x0a, 0xa4, 0xf1, 0x21, 0xc8,
	0x5a, 0x8f, 0x4d, 0x49, 0x57, 0x74, 0x54, 0xc2, 0xb2, 0x0c, 0xc8, 0x66, 0x39, 0x0f, 0x6d, 0xf8,
	0x29, 0x0f, 0xfa, 0x38, 0x3c, 0x7d, 0x27, 0x38, 0x7b, 0x6c, 0x4a, 0xba, 0x62, 0x3d, 0x7b, 0x3b,
	0x1f, 0xf4, 0xed, 0x12, 0x2e, 0x56, 0xa7, 0x80, 0xe6, 0x07, 0x6f, 0x89, 0x79, 0xbc, 0xa6, 0x9d,
	0x41, 0xa3, 0xf7, 0xa2, 0xd1, 0x81, 0x36, 0x33, 0x72, 0x15, 0xa9, 0xd1, 0x5b, 0xa3, 0x60, 0xd0,
	0x7d, 0x6c, 0x0c, 0x8d, 0x0d, 0xf5, 0xf4, 0x69, 0x94, 0x1e, 0x09, 0xb4, 0x86, 0x21, 0xa6, 0x7c,
	0x3c, 0x28, 0xb0, 0xb3, 0x18, 0x39, 0x67, 0xfa, 0x3c, 0xc4, 0xb0, 0xbb, 0x3d, 0x0e, 0x0c, 0x5f,
	0xd2, 0x06, 0x4f, 0xfb, 0xf8, 0x5d, 0xac, 0x3e, 0x9e, 0xca, 0xf3, 0x65, 0x4d, 0x8d, 0xed, 0xf3,
	0xc7, 0x26, 0xd5, 0x2f, 0xd6, 0x24, 0xb3, 0xa3, 0x02, 0x24, 0x58, 0x93, 0x2b, 0xb1, 0xcb, 0x2f,
	0xab, 0x25, 0xfb, 0x94, 0x56, 0x5c, 0x92, 0xef, 0xbf, 0xf1, 0x2b, 0x55, 0x10, 0x5f, 0xe3, 0xa1,
	0x2e, 0x63, 0xef, 0xcd, 0x1a, 0x19, 0xb7, 0x47, 0xad, 0x6c, 0xcc, 0x67, 0x32, 0x57, 0xd0, 0xbd,
	0xe6, 0x2d, 0xe8, 0x5e, 0x1f, 0xf7, 0x49, 0x2a, 0x2f, 0xd7, 0x44, 0xd6, 0x3d, 0x1a, 0x6c, 0xda,
	0xe6, 0x3e, 0x31, 0x15, 0xe0, 0x67, 0xb4, 0x28, 0xa1, 0xa7, 0x83, 0xbe, 0x4b, 0x62, 0xec, 0x73,
	0x4d, 0xdb, 0xb6, 0xf2, 0x0b, 0x0c, 0xd9, 0x0e, 0xce, 0xef, 0x8f, 0xce, 0x0f, 0x62, 0x1d, 0x47,
	0x4a, 0x69, 0x15, 0xf5, 0xfc, 0xc8, 0x75, 0x0a, 0xbb, 0xcf, 0xeb, 0xf3, 0x83, 0x2d, 0x39, 0x43,
	0x9f, 0xa9, 0x9c, 0xee, 0x3e, 0x61, 0x93, 0x17, 0x45, 0x9e, 0x37, 0xba, 0x6a, 0x61, 0x87, 0x2a,
	0x83, 0xc0, 0x4a, 0xb6, 0x83, 0x41, 0x51, 0x1e, 0xd4, 0xd2, 0xda, 0x43, 0xc7, 0x5d, 0xdc, 0x69,
	0x7e, 0x7f, 0x38, 0x34, 0xe6, 0x79, 0xf4, 0xb7, 0x4c, 0xdf, 0x31, 0xda, 0x29, 0xf4, 0xa8, 0x18,
	0x75, 0x3a, 0x8f, 0xb6, 0x85, 0x4b, 0xfd, 0x65, 0x4a, 0x23, 0x29, 0x5f, 0x2a, 0x31, 0x5b, 0x6b,
	0x0f, 0x6c, 0x5b, 0x83, 0x9b, 0xd2, 0x8c, 0x0c, 0x1f, 0xb5, 0x2d, 0x13, 0x8a, 0x69, 0x64, 0xe9,
	0x3c, 0x18, 0x1d, 0x16, 0x32, 0xa1, 0x5b, 0x54, 0x16, 0x66, 0xc6, 0x84, 0x5e, 0x73, 0x21, 0xce,
	0x0f, 0x22, 0xc0, 0x5a, 0x49, 0x7a, 0x14, 0x0d, 0x6d, 0x56, 0x6c, 0x79, 0x44, 0x75, 0x61, 0xac,
	0x23, 0x2f, 0x67, 0x3a, 0xa0, 0x04, 0x0b, 0x82, 0xdb, 0xef, 0xab, 0x15, 0x33, 0x5d, 0x6d, 0x41,
	0x2e, 0x78, 0xd0, 0xf4, 0xcf, 0x79, 0x0f, 0x8d, 0x62, 0x85, 0x52, 0xdc, 0x52, 0x53, 0x4d, 0x97,
	0xff, 0xdc, 0x30, 0x83, 0x38, 0x75, 0xc1, 0x8b, 0xaa, 0x2d, 0xca, 0x28, 0xef, 0x82, 0x58, 0xb7,
	0x4d, 0x80, 0xaf, 0x51, 0xb7, 0x3c, 0x36, 0xfe, 0xef, 0x00, 0x1d, 0xa7, 0x10, 0xa4, 0x74, 0x62,
	0x93, 0x25, 0x66, 0x80, 0x63, 0x9e, 0xf7, 0xf3, 0xce, 0xba, 0x30, 0x3b, 0xa2, 0xe7, 0xbe, 0xd0,
	0x32, 0x72, 0xb5, 0x2a, 0x1b, 0xdf, 0xa3, 0x36, 0xed, 0x42, 0xf2, 0x41, 0x23, 0xc5, 0xc5, 0x9c,
	0x58, 0xa0, 0x57, 0x8b, 0xb9, 0x9e, 0x4a, 0xd4, 0xc9, 0x5f, 0x57, 0xeb, 0x66, 0x74, 0xeb, 0xac,
	0x38, 0xae, 0xa5, 0x15, 0xc5, 0x82, 0x1b, 0xbb, 0xe0, 0xb6, 0x8f, 0x1c, 0x68, 0x5d, 0x3a, 0xd3,
	0xc6, 0x9f, 0x56, 0x57, 0xee, 0x83, 0x5c, 0x38, 0x08, 0xd3, 0xf4, 0xd1, 0xe0, 0x04, 0x08, 0x96,
	0xaf, 0x02, 0x9c, 0x53, 0x1e, 0x41, 0x6e, 0xa1, 0x63, 0x01, 0xca, 0x8b, 0x26, 0x54, 0x5a, 0x79,
	0x68, 0x71, 0xc7, 0x92, 0x53, 0x7f, 0xc2, 0x89, 0x61, 0xd4, 0x91, 0xe8, 0x54, 0xb3, 0x28, 0x3f,
	0x01, 0xcf, 0xe5, 0xb0, 0x47, 0xba, 0x69, 0x3e, 0x2c, 0x9a, 0x38, 0x4a, 0x1a, 0xd0, 0xe5, 0xaa,
	0x58, 0x85, 0xf2, 0x45, 0x1c, 0x79, 0x31, 0x30, 0x97, 0xe9, 0x72, 0x95, 0x14, 0x9c, 0xdc, 0x3f,
	0xac, 0x05, 0xfb, 0x4f, 0x15, 0x75, 0x4d, 0xcf, 0x70, 0x4f, 0x3e, 0xf5, 0x4d, 0x06, 0x12, 0xcd,
	0x4c, 0x22, 0x71, 0x06, 0xe9, 0x84, 0x4a, 0x1d, 0xd6, 0x30, 0x4f, 0x1d, 0xa7, 0x2d, 0x92, 0xb0,
	0xde, 0x06, 0xe4, 0x24, 0x3f, 0x20, 0xf6, 0xc8, 0x56, 0x45, 0x7f, 0x05, 0x89, 0xab, 0xf9, 0x02,
	0x9d, 0xee, 0xb2, 0xc8, 0xd9, 0xdf, 0xae, 0xd8, 0x23, 0xa1, 0xd7, 0x3b, 0x5e, 0xe8, 0x88, 0xfc,
	0x3e, 0x0b, 0xde, 0xdb, 0x1c, 0x6e, 0x9f, 0xe6, 0xb4, 0xf6, 0x18, 0x59, 0x22, 0x55, 0xe0, 0x0e,
	0xe3, 0xc4, 0xd6, 0x3e, 0xa1, 0x68, 0x7f, 0x0c, 0x36, 0x73, 0xde, 0x98, 0xd2, 0x26, 0x50, 0x73,
	0x42, 0xf2, 0x27, 0xc8, 0x94, 0x78, 0xc4, 0x35, 0xd8, 0xb5, 0xa1, 0x46, 0xda, 0x40, 0xda, 0xd2,
	0x0e, 0x1e, 0x04, 0xf3, 0x8f, 0x18, 0x11, 0x67, 0xbd, 0xb8, 0xae, 0xc7, 0xc3, 0x56, 0x51, 0x04,
	0x47, 0xac, 0xe2, 0x51, 0xbb, 0x3a, 0x44, 0x32, 0xbf, 0x4c, 0x53, 0x9e, 0x16, 0xe3, 0x64, 0xd0,
	0x49, 0xc9, 0x89, 0xc8, 0xd1, 0x4e, 0xa9, 0x21, 0x96, 0x0e, 0x6c, 0xa7, 0x65, 0xa9, 0xf4, 0xfe,
	0x72, 0x55, 0x6d, 0xdc, 0x1b, 0x52, 0xa2, 0x22, 0x64, 0x45, 0xfd, 0x92, 0xf8, 0x6b, 0x6a, 0x2d,
	0xb0, 0x7d, 0x9a, 0x93, 0xc3, 0x07, 0x3f, 0xab, 0xae, 0xb6, 0xe3, 0xd1, 0x21, 0x70, 0xa8, 0x69,
	0xf4, 0x75, 0x54, 0xb6, 0x75, 0x2f, 0xc8, 0x49, 0xfd, 0x6d, 0xea, 0x46, 0x97, 0x52, 0x9b, 0x70,
	0x6e, 0x65, 0xcf, 0x97, 0x4a, 0xfd, 0x9f, 0x9f, 0x9b, 0xfc, 0xa2, 0x75, 0x9a, 0x04, 0x3e, 0xaa,
	0x90, 0xd7, 0x50, 0xf8, 0xe7, 0x69, 0x6b, 0xea, 0xc6, 0x74, 0xac, 0xe2, 0x8b, 0x26, 0x11, 0x17,
	0x1f, 0xe6, 0x60, 0x23, 0x38, 0x6a, 0xdc, 0x9a, 0x18, 0xd1, 0x83, 0x5c, 0x76, 0xd7, 0x0b, 0xe2,
	0xc6, 0xb6, 0xd5, 0x15, 0x67, 0xe0, 0x92, 0xc2, 0x30, 0x17, 0x8e, 0xf2, 0x2b, 0x15, 0x4c, 0x35,
	0x70, 0x18, 0x64, 0x25, 0x69, 0x68, 0x29, 0x19, 0x29, 0x3e, 0x6e, 0x3a, 0x31, 0xf1, 0x97, 0x4c,
	0xc6, 0x4c, 0xe1, 0x61, 0xf4, 0xae, 0x89, 0xb7, 0xc6, 0xd3, 0x4f, 0xf9, 0x6a, 0xdd, 0x4c, 0x1f,
	0x0e, 0x54, 0x0b, 0x81, 0xf7, 0xc4, 0x66, 0x46, 0x29, 0xc7, 0x59, 0x93, 0x03, 0x52, 0x93, 0x3d,
	0xb3, 0x05, 0xb8, 0xff, 0xa6, 0xaa, 0xae, 0x16, 0xef, 0x84, 0x07, 0xff, 0x16, 0x50, 0x9b, 0x17,
	0x1d, 0xb3, 0x49, 0xe2, 0x25, 0xaa, 0xd9, 0x45, 0x8f, 0x24, 0x80, 0xa8, 0x5e, 0xaa, 0xb7, 0xa1,
	0xbc, 0xe5, 0xc2, 0x1d, 0xe6, 0xef, 0x4b, 0x6b, 0xb2, 0x87, 0x30, 0x20, 0x33, 0x53, 0xaf, 0xb2,
	0x35, 0xd9, 0x3f, 0x98, 0xd4, 0xdf, 0x42, 0x1e, 0x1c, 0xc7, 0xc5, 0x1c, 0x75, 0x30, 0xb5, 0x41,
	0xde, 0x1e, 0xf5, 0x87, 0xc4, 0x2f, 0xec, 0x51, 0x46, 0x28, 0x95, 0x67, 0xc1, 0xe6, 0x0b, 0xe9,
	0x2c, 0x0d, 0x6f, 0xc9, 0xb1, 0x02, 0xae, 0x2b, 0xfe, 0xa2, 0x84, 0xb1, 0x3e, 0x33, 0x86, 0x47,
	0x61, 0x1b, 0x76, 0x25, 0x02, 0x69, 0x0c, 0x9d, 0x92, 0xe9, 0x8e, 0x52, 0x44, 0x5b, 0xcc, 0x43,
	0x6d, 0xa3, 0xa1, 0xd5, 0xfb, 0x11, 0xde, 0x67, 0xa7, 0xa3, 0xf7, 0xd1, 0x5f, 0x10, 0x7a, 0x64,
	0xfb, 0x7e, 0x4f, 0x76, 0x66, 0x29, 0xc9, 0x88, 0x6a, 0xb3, 0xde, 0x5c, 0x7c, 0xa2, 0xff, 0x41,
	0x45, 0x8f, 0x5b, 0x62, 0xaf, 0xd5, 0x98, 0xdb, 0xb1, 0xd0, 0x56, 0xf3, 0x2c, 0x5a, 0xad, 0x40,
	0xea, 0x2f, 0x59, 0x8a, 0x6a, 0x59, 0x73, 0x4a, 0xb7, 0xe5, 0xf0, 0xb2, 0xd9, 0x16, 0x6d, 0x6a,
	0x44, 0xb0, 0x58, 0x84, 0x70, 0x82, 0x86, 0x9d, 0x8a, 0x2f, 0x58, 0x5a, 0x70, 0x99, 0xa7, 0xed,
	0xbf, 0x88, 0x98, 0x79, 0xef, 0x08, 0x03, 0x2b, 0x8d, 0x25, 0xd3, 0x77, 0x8c, 0x6a, 0xe5, 0x45,
	0xde, 0x82, 0x33, 0x0c, 0xdb, 0x30, 0x2e, 0xee, 0xe8, 0x11, 0xd9, 0x83, 0xe5, 0x53, 0x45, 0x11,
	0x83, 0xf2, 0x1b, 0xfb, 0xe8, 0xa4, 0x89, 0xb3, 0xf8, 0x66, 0x86, 0xb8, 0xfe, 0x16, 0x86, 0x7a,
	0x11, 0x87, 0x48, 0x56, 0x2b, 0x2f, 0xfa, 0x83, 0x6b, 0x5f, 0xa8, 0x9b, 0xc8, 0x69, 0x9c, 0x8c,
	0x35, 0x1e, 0xef, 0xa6, 0x35, 0x98, 0x4f, 0xb2, 0x4c, 0xbc, 0xa4, 0x16, 0x31, 0x42, 0x9e, 0xca,
	0x88, 0x85, 0x49, 0x76, 0x5e, 0x1a, 0x28, 0x79, 0x53, 0x3e, 0x32, 0x51, 0xe1, 0x44, 0xc1, 0xc1,
	0x5d, 0xaa, 0x96, 0x63, 0x62, 0xf5, 0x1b, 0x7f, 0xc7, 0xac, 0xc8, 0x9b, 0x9c, 0x35, 0x57, 0xf5,
	0xb1, 0xaa, 0x2b, 0xbe, 0x4a, 0x8c, 0xf1, 0xa8, 0xd7, 0xb3, 0x53, 0x2b, 0xd3, 0x38, 0x92, 0x94,
	0xd6, 0x4a, 0x6c, 0x47, 0x5b, 0x80, 0x56, 0x6c, 0xa1, 0x96, 0x4c, 0x5f, 0xa0, 0x32, 0x6b, 0xfc,
	0xfd, 0x0a, 0x26, 0x7f, 0xc7, 0xc9, 0xfa, 0xec, 0x43, 0xa8, 0xe6, 0xe7, 0xf5, 0x99, 0x8b, 0xa0,
	0x3d, 0x37, 0x6a, 0x4e, 0xb5, 0x2b, 0xde, 0x89, 0xba, 0x36, 0x84, 0x61, 0xad, 0xa9, 0x8c, 0x22,
	0x78, 0x78, 0x2b, 0x4a, 0xae, 0x44, 0x3e, 0x60, 0xb5, 0x0c, 0xc4, 0x0e, 0xcf, 0xca, 0x52, 0xce,
	0x0f, 0x68, 0x61, 0xd3, 0x7f, 0x17, 0xd0, 0x22, 0x8c, 0x2a, 0xac, 0x93, 0xc0, 0x90, 0xcc, 0x32,
	0x17, 0x22, 0xd3, 0xaf, 0x4c, 0x01, 0x0f, 0x58, 0x46, 0x4e, 0x15, 0x67, 0xb0, 0x64, 0x6f, 0xd1,
	0xdf, 0x35, 0xfb, 0x4b, 0x0a, 0x42, 0x6f, 0xc2, 0x7c, 0x82, 0x19, 0x6b, 0x15, 0x0d, 0xe4, 0xd0,
	0xf1, 0x9b, 0x1f, 0xa4, 0x26, 0xfa, 0xd7, 0xda, 0x69, 0x5e, 0xd2, 0xc5, 0x06, 0xb0, 0xd2, 0x00,
	0x4c, 0x23, 0x2d, 0x3b, 0xc1, 0x0d, 0x35, 0x7b, 0xe1, 0xe1, 0x7d, 0x05, 0x36, 0x81, 0x27, 0x6e,
	0xba, 0x4e, 0x97, 0xab, 0xaf, 0x6d, 0xbd, 0xce, 0x19, 0x41, 0xbe, 0x0a, 0x71, 0x92, 0x87, 0x58,
	0x62, 0xac, 0x2c, 0x87, 0x10, 0xda, 0x3a, 0x00, 0xe8, 0x71, 0x39, 0x48, 0x4f, 0x75, 0xbe, 0x36,
	0xc3, 0x47, 0xea, 0x08, 0xc8, 0x47, 0x1a, 0x6e, 0xdf, 0x4d, 0x8a, 0x99, 0x61, 0x49, 0x09, 0x10,
	0x09, 0x4c, 0xde, 0x72, 0xdc, 0x31, 0xa8, 0xaa, 0x9b, 0x79, 0xa1, 0x09, 0xac, 0x40, 0x19, 0x12,
	0x79, 0x1b, 0x7d, 0xec, 0x26, 0x0c, 0xfe, 0x2a, 0x52, 0xf5, 0xe2, 0x58, 0x25, 0x61, 0x54, 0x7f,
	0x50, 0x41, 0xb1, 0x8b, 0x14, 0x81, 0x3e, 0x4b, 0xd6, 0xeb, 0x6a, 0x83, 0x51, 0xf4, 0xfb, 0xc3,
	0x9d, 0x93, 0xbd, 0x30, 0x1b, 0x25, 0x83, 0x1d, 0x4d, 0x81, 0xfc, 0x55, 0x1c, 0xb8, 0x3b, 0xf3,
	0xc9, 0x65, 0x27, 0xed, 0xa6, 0x52, 0xdd, 0x30, 0xd0, 0x9d, 0xca, 0x33, 0x5c, 0x73, 0x71, 0x76,
	0xee, 0x55, 0x22, 0xe4, 0xbd, 0x80, 0x95, 0x0f, 0xf0, 0x98, 0x49, 0xb7, 0x12, 0xc6, 0xfc, 0x17,
	0xab, 0x6a, 0x01, 0x77, 0x79, 0xf7, 0x28, 0xce, 0x62, 0xaf, 0x66, 0x0d, 0x58, 0x33, 0x7c, 0x66,
	0x0f, 0xf0, 0x4d, 0xa9, 0x57, 0x00, 0x67, 0xea, 0x76, 0x29, 0x72, 0x72, 0x3a, 0xdd, 0x29, 0x2d,
	0x85, 0xe9, 0x74, 0xba, 0x5b, 0x7a, 0x88, 0x01, 0x3f, 0x0c, 0x81, 0xcf, 0x8f, 0x28, 0xe7, 0x4f,
	0xe9, 0xf9, 0xbd, 0x01, 0x84, 0x19, 0x93, 0x83, 0x97, 0x71, 0x49, 0xf2, 0xfc, 0x4e, 0x59, 0x41,
	0x40, 0x79, 0x7e, 0xb7, 0x4c, 0x64, 0xfc, 0x0f, 0x15, 0xd4, 0x1b, 0x06, 0xad, 0x23, 0x9d, 0xfd,
	0x68, 0x8c, 0xe8, 0x61, 0x90, 0x89, 0x96, 0x81, 0x75, 0x65, 0x9e, 0x79, 0xb9, 0x7e, 0x24, 0x8d,
	0xd7, 0x4a, 0xeb, 0x1a, 0x9a, 0xc2, 0x22, 0x75, 0x0d, 0x60, 0x4b, 0x73, 0xca, 0xc0, 0x32, 0x46,
	0xc1, 0xca, 0x20, 0x43, 0x99, 0x76, 0x71, 0x72, 0x4e, 0x1e, 0x99, 0x0d, 0x59, 0x8c, 0x76, 0xdb,
	0x61, 0xfe, 0xe2, 0xdf, 0x56, 0x64, 0x1d, 0x5e, 0x84, 0x46, 0xb2, 0x39, 0xbe, 0x53, 0xc0, 0x67,
	0xe8, 0x52, 0xcf, 0x45, 0x17, 0xff, 0x68, 0xa3, 0xb3, 0xdf, 0xd6, 0xab, 0x2b, 0xab, 0x8d, 0x58,
	0x28, 0xef, 0x42, 0x74, 0x14, 0xd7, 0xe5, 0xea, 0x5c, 0xbe, 0xa9, 0xeb, 0xb9, 0xc8, 0x8e, 0x35,
	0xbe, 0x08, 0x76, 0xc8, 0xee, 0xb1, 0x8d, 0x49, 0x76, 0x2d, 0x90, 0x7d, 0xf1, 0x1b, 0x33, 0xc7,
	0xd7, 0x95, 0x33, 0x54, 0x5e, 0xce, 0xd1, 0xf2, 0xe7, 0x2a, 0x6a, 0xf6, 0x28, 0x1e, 0xc4, 0xc9,
	0xe5, 0xb2, 0xf0, 0x52, 0x96, 0x0e, 0x1d, 0x6a, 0x64, 0x08, 0x01, 0x35, 0x39, 0xe9, 0x9e, 0x2f,
	0x99, 0xa9, 0x02, 0x08, 0xff, 0x50, 0x0a, 0x95, 0x1a, 0x9d, 0x3b, 0xcd, 0xc5, 0xe5, 0xb5, 0xfe,
	0x1b, 0xec, 0xed, 0x01, 0xca, 0x28, 0x54, 0x72, 0xce, 0x47, 0x53, 0x8c, 0xa6, 0xa4, 0x5a, 0x6c,
	0xba, 0x63, 0xd5, 0x69, 0xba, 0xe9, 0xae, 0xd5, 0xc0, 0xea, 0xa6, 0xcf, 0xdb, 0xb0, 0xc8, 0x0b,
	0x0b, 0x59, 0x3a, 0x7d, 0x4a, 0x8b, 0x57, 0x3a, 0x7d, 0xca, 0x0a, 0x56, 0xba, 0x7d, 0x3e, 0x5f,
	0x86, 0x97, 0x3e, 0x50, 0xcb, 0xb4, 0xf0, 0x12, 0xc7, 0x94, 0xf1, 0x74, 0x10, 0x97, 0xad, 0x70,
	0x55, 0x55, 0x4b, 0x0c, 0x51, 0x2f, 0x7b, 0xe5, 0xb0, 0x63, 0xc6, 0xe1, 0xa4, 0x8d, 0xac, 0xd6,
	0xe7, 0x6e, 0x8b, 0x98, 0x6c, 0x1a, 0xee, 0x88, 0xfe, 0xc8, 0x34, 0xdc, 0x15, 0x2d, 0x98, 0x69,
	0xf8, 0xbc, 0x68, 0xfa, 0x49, 0x67, 0x78, 0x56, 0xcc, 0xe4, 0xd2, 0x8e, 0xfb, 0x52, 0x53, 0x5e,
	0x24, 0x5b, 0x4c, 0xc3, 0xd0, 0x76, 0x6b, 0x5e, 0x52, 0x29, 0x95, 0xb3, 0x66, 0xae, 0x1a, 0xa6,
	0xc9, 0x03, 0x6f, 0x98, 0x6c, 0x98, 0xd9, 0xfc, 0x78, 0xe3, 0x1d, 0x9b, 0x99, 0x95, 0x52, 0x4b,
	0x92, 0x52, 0x9c, 0x64, 0xc9, 0x45, 0xad, 0x7c, 0xa5, 0x9c, 0x92, 0xb6, 0xdd, 0x24, 0xed, 0xe5,
	0xac, 0x35, 0xe8, 0x1f, 0x9c, 0x92, 0x93, 0x97, 0x38, 0x89, 0x72, 0xe2, 0x46, 0xfd, 0x80, 0x73,
	0xbc, 0xff, 0x14, 0x55, 0x41, 0x06, 0x68, 0xee, 0x86, 0xc1, 0xf1, 0x84, 0xe3, 0xf9, 0x86, 0xa9,
	0xaa, 0x6b, 0x76, 0xfe, 0x8d, 0x32, 0x81, 0xed, 0x86, 0x5b, 0x8b, 0xc0, 0x2f, 0x6a, 0xea, 0x0a,
	0xbf, 0x7c, 0x74, 0xe1, 0x9b, 0x3b, 0x1f, 0x88, 0xa6, 0xf0, 0x3f, 0x82, 0x04, 0xac, 0x8b, 0x12,
	0xa0, 0x81, 0x13, 0x79, 0x97, 0xe2, 0x06, 0x47, 0x5c, 0x89, 0xd0, 0x6a, 0x3e, 0xd9, 0xa3, 0x28,
	0xaf, 0x81, 0xa6, 0x36, 0xc7, 0x3d, 0x90, 0xb2, 0x4b, 0x24, 0x98, 0x2c, 0xcf, 0xcd, 0xdb, 0x6b,
	0x3a, 0xda, 0xd2, 0x40, 0xc5, 0xf4, 0x1a, 0xe4, 0x09, 0x64, 0x82, 0x34, 0x3b, 0xbd, 0xa0, 0x6b,
	0xa3, 0x85, 0x4d, 0x33, 0x5d, 0xf9, 0x39, 0x4d, 0xc2, 0x22, 0xcc, 0xaf, 0xd3, 0x3a, 0xa6, 0xda,
	0x42, 0xb2, 0xe1, 0xf9, 0xfa, 0x4a, 0xf3, 0xba, 0xbc, 0xd9, 0x55, 0xbd, 0xd6, 0x07, 0x27, 0x21,
	0x5a, 0xc1, 0xce, 0x1f, 0x90, 0xe6, 0xe6, 0xc9, 0x12, 0x96, 0xe5, 0x73, 0x14, 0x1b, 0xc1, 0xc7,
	0xac, 0xa2, 0x9e, 0xcb, 0x9b, 0xea, 0x67, 0xcb, 0x1a, 0xef, 0xa8, 0xe5, 0x5c, 0xcd, 0x8e, 0xf7,
	0x87, 0x93, 0xd4, 0x50, 0x17, 0x5e, 0xd3, 0x1f, 0x84, 0x83, 0x65, 0x0a, 0x5c, 0x44, 0xdd, 0xc1,
	0xd8, 0x1e, 0x0e, 0xa2, 0xac, 0x40, 0xd2, 0x06, 0x59, 0x34, 0xe0, 0xdc, 0x80, 0xb5, 0x31, 0x0a,
	0x61, 0x4a, 0xcd, 0xb5, 0x83, 0xf3, 0x4b, 0xa6, 0xa9, 0x6b, 0xfc, 0x64, 0xd5, 0x4e, 0xe1, 0xc3,
	0x30, 0x3c, 0x2e, 0x7a, 0xa5, 0x9d, 0x42, 0x9b, 0x0d, 0x41, 0xc7, 0x81, 0x4d, 0x05, 0x02, 0x4c,
	0x65, 0xf1, 0x68, 0x5b, 0x17, 0x8d, 0xb8, 0x50, 0x79, 0x52, 0x08, 0x49, 0x2f, 0xd3, 0x86, 0xe5,
	0x63, 0xcb, 0x67, 0xf4, 0xd8, 0x12, 0xa9, 0x3e, 0x5b, 0x9a, 0x09, 0xd4, 0x8c, 0x5d, 0x1a, 0x93,
	0x82, 0x29, 0xc7, 0xdd, 0xc1, 0x6f, 0x8b, 0x29, 0x1e, 0xd6, 0x35, 0x84, 0x75, 0x91, 0x2b, 0x69,
	0xe3, 0x54, 0xad, 0xbb, 0xe0, 0xd8, 0xe6, 0x6c, 0x0d, 0x45, 0x97, 0x33, 0x43, 0x36, 0x1f, 0x6d,
	0x1b, 0x07, 0x23, 0xb9, 0xcf, 0xb5, 0xd2, 0x60, 0xfb, 0xc9, 0x76, 0xae, 0x5d, 0xb5, 0xe6, 0x7e,
	0xd8, 0x23, 0xb7, 0x5d, 0xa6, 0xd4, 0x88, 0x76, 0xcc, 0xc0, 0xa5, 0x7c, 0xaf, 0x1d, 0xf1, 0x20,
	0x1e, 0xbe, 0x3f, 0x24, 0xcf, 0x80, 0xe2, 0xfe, 0xc2, 0x8e, 0xa6, 0x4f, 0x50, 0x7b, 0x4f, 0x92,
	0x0a, 0xb3, 0x80, 0xf9, 0x94, 0x1e, 0x7e, 0x6b, 0x84, 0xe6, 0x57, 0xac, 0x29, 0xb0, 0x1d, 0x92,
	0x74, 0x56, 0x74, 0xb7, 0x4b, 0xfa, 0x87, 0x97, 0xbd, 0x13, 0x7b, 0xf6, 0xba, 0xdf, 0x6b, 0xb5,
	0x78, 0xe0, 0x10, 0x2b, 0xaf, 0xfc, 0x21, 0xc6, 0x7c, 0x60, 0xc7, 0x7c, 0x77, 0x80, 0x54, 0xa6,
	0x0b, 0xe3, 0x8d, 0x21, 0xcd, 0x8b, 0xe0, 0x0b, 0x67, 0x63, 0x55, 0x0f, 0xf3, 0x0e, 0x66, 0x6d,
	0xde, 0x2a, 0x1a, 0x41, 0xe1, 0x18, 0x62, 0x69, 0xa0, 0xc9, 0xbb, 0x74, 0x13, 0x4b, 0x0c, 0x9e,
	0x37, 0x2f, 0x04, 0xb5, 0xc5, 0x4a, 0x8d, 0x3f, 0x57, 0xb1, 0x78, 0xe7, 0xe1, 0x68, 0xd0, 0xde,
	0x0d, 0xce, 0x27, 0x27, 0x0e, 0xba, 0x59, 0xcc, 0x15, 0xeb, 0xf3, 0x2e, 0xba, 0xd0, 0x97, 0xd5,
	0xc5, 0x2d, 0x53, 0xa2, 0x31, 0x5e, 0x71, 0xe7, 0x81, 0x5e, 0x21, 0x17, 0xf0, 0xab, 0x12, 0xf8,
	0x74, 0xc9, 0x7c, 0x75, 0xef, 0xd9, 0xdb, 0xa7, 0x3d, 0x88, 0x8a, 0x3b, 0xff, 0xa4, 0x38, 0xf6,
	0x6b, 0x76, 0xca, 0xa8, 0x1c, 0x1b, 0x1b, 0xcf, 0x86, 0x45, 0x94, 0x68, 0xc7, 0x2e, 0x9c, 0xf4,
	0xa1, 0xbd, 0x67, 0xef, 0xef, 0x7d, 0x8b, 0xbe, 0xf1, 0xa1, 0x05, 0x8c, 0x24, 0x1c, 0x19, 0xfb,
	0x08, 0x16, 0x07, 0x8d, 0x82, 0x7e, 0x2c, 0x55, 0xbf, 0x9f, 0xfc, 0xba, 0x6d, 0x31, 0x71, 0x89,
	0x47, 0xa9, 0xef, 0xba, 0x21, 0xea, 0xbf, 0xe4, 0x98, 0x7d, 0xb5, 0xa1, 0xc7, 0x7c, 0x1c, 0x9e,
	0x6e, 0xc5, 0xfd, 0x70, 0x1c, 0x24, 0x63, 0x98, 0xbe, 0x3a, 0x9e, 0xb7, 0xa4, 0xe4, 0x6e, 0x2c,
	0x19, 0x6a, 0xc0, 0xb7, 0x63, 0xa0, 0xae, 0x18, 0xa2, 0x8c, 0xe3, 0xa1, 0xa3, 0x1f, 0x0e, 0xf9,
	0xad, 0xfa, 0xde, 0x0f, 0xa8, 0x4d, 0xfd, 0xbd, 0x5d, 0x8e, 0x2a, 0x02, 0xb8, 0x05, 0xbd, 0xb1,
	0x25, 0xe6, 0x7d, 0xba, 0xc7, 0x26, 0x50, 0x1b, 0x9f, 0x40, 0xfd, 0xa2, 0x09, 0xf0, 0x2d, 0xfc,
	0xbb, 0x18, 0x1d, 0x15, 0xa4, 0xe9, 0x30, 0x4e, 0xb8, 0x2e, 0xf7, 0x58, 0x26, 0xb1, 0xe7, 0xc7,
	0x49, 0x94, 0x5f, 0xc9, 0xc4, 0x11, 0xe3, 0x93, 0x71, 0x11, 0x48, 0xcd, 0x41, 0xfb, 0x04, 0xe3,
	0xb0, 0xda, 0x93, 0xf1, 0x85, 0x4d, 0x2e, 0xc0, 0x89, 0xdd, 0x78, 0xb6, 0xbf, 0x54, 0x51, 0x6b,
	0x7a, 0xb6, 0x5c, 0xba, 0xee, 0x8f, 0xf4, 0x74, 0xe1, 0xf0, 0xea, 0xd9, 0xee, 0x4a, 0x2c, 0x88,
	0x2f, 0xbb, 0xe3, 0x50, 0xfa, 0x98, 0x0b, 0xad, 0x39, 0xc7, 0x5a, 0x29, 0xf3, 0x11, 0x0f, 0x25,
	0x23, 0x5c, 0xeb, 0x38, 0xe8, 0x4a, 0x99, 0x8c, 0x46, 0x68, 0x3f, 0xb7, 0x0d, 0xfc, 0xbe, 0x37,
	0x2f, 0x9c, 0x07, 0x7d, 0x98, 0xe4, 0x79, 0xe3, 0xf8, 0xc3, 0xcb, 0xb8, 0xfe, 0x6a, 0x95, 0x9c,
	0x3f, 0x8f, 0x82, 0xa4, 0x8b, 0xb5, 0x38, 0x3b, 0xe5, 0x28, 0x75, 0xce, 0x90, 0xf9, 0x5a, 0x91,
	0xb6, 0x18, 0x0b, 0x45, 0x07, 0x18, 0x1d, 0x60, 0x57, 0x29, 0xf5, 0x88, 0xf1, 0xe8, 0x97, 0xec,
	0x7d, 0x2d, 0xfa, 0xa0, 0x88, 0x09, 0xc8, 0x2a, 0x61, 0xf5, 0xd1, 0xd0, 0xa6, 0xf8, 0x9c, 0x43,
	0xc7, 0x93, 0x47, 0x69, 0xf3, 0x34, 0xca, 0x8e, 0xe2, 0x51, 0x86, 0xc5, 0x67, 0xfa, 0x3a, 0x27,
	0xdf, 0x2c, 0x19, 0xc1, 0xc4, 0xe4, 0x25, 0x92, 0x82, 0x2e, 0xf8, 0xcb, 0xd5, 0x41, 0x99, 0xd1,
	0x03, 0x61, 0x24, 0x45, 0x8d, 0xff, 0x7c, 0x69, 0xe5, 0x02, 0x99, 0x0c, 0xce, 0xda, 0x94, 0x68,
	0x18, 0xa5, 0xe2, 0x21, 0x88, 0xd6, 0xcf, 0x2a, 0xc5, 0xd0, 0xc1, 0x32, 0x6f, 0xdb, 0xca, 0x0c,
	0xf8, 0xf3, 0x8e, 0x38, 0x45, 0xca, 0xcf, 0xbb, 0x52, 0x94, 0xe1, 0x6b, 0x6a, 0x7d, 0x9b, 0x91,
	0x6b, 0xe9, 0xa1, 0x58, 0x72, 0xd8, 0x07, 0x9d, 0x1a, 0x01, 0x39, 0xae, 0xb6, 0xa0, 0x23, 0x9b,
	0x69, 0x8c, 0x4f, 0xb1, 0x69, 0x67, 0xac, 0xf2, 0x9e, 0x5a, 0xbc, 0x3f, 0x3a, 0x97, 0x12, 0xce,
	0x9e, 0x13, 0x20, 0x4f, 0x82, 0xa1, 0xf1, 0x46, 0x9e, 0x15, 0xd3, 0xcc, 0x9d, 0x32, 0x47, 0xdc,
	0x8e, 0xba, 0xc6, 0x6f, 0xa1, 0x3e, 0x86, 0x8a, 0x39, 0x6f, 0xc7, 0xa7, 0xe3, 0x89, 0x0e, 0x01,
	0xb9, 0xf7, 0xa3, 0x81, 0x64, 0x01, 0xc4, 0x1f, 0x62, 0x20, 0xad, 0xd1, 0x39, 0x1f, 0x61, 0x02,
	0xbd, 0x7e, 0xe8, 0x66, 0xce, 0x22, 0x7b, 0x32, 0xd9, 0x81, 0xa7, 0xa4, 0xf4, 0xf0, 0x2a, 0x7f,
	0xe7, 0x5d, 0x90, 0xcf, 0x82, 0x5e, 0xcf, 0x37, 0xfd, 0x40, 0x4f, 0x41, 0x4c, 0x8a, 0x70, 0x08,
	0xf8, 0x1d, 0xf6, 0x0a, 0x33, 0x85, 0x16, 0x31, 0xcd, 0xf8, 0x3f, 0x05, 0x8c, 0xb1, 0x7f, 0x7c,
	0xbe, 0x13, 0xb4, 0xdb, 0x61, 0xc2, 0xfa, 0x3e, 0xcf, 0x91, 0x75, 0x73, 0x2d, 0x91, 0x0b, 0xeb,
	0x80, 0x8a, 0x68, 0x59, 0x2e, 0x9c, 0x6c, 0xdf, 0xe4, 0x57, 0x90, 0x84, 0xed, 0x11, 0x16, 0xb8,
	0x75, 0x8a, 0xff, 0xe9, 0x63, 0x35, 0x55, 0x28, 0x8d, 0x59, 0x22, 0x98, 0xbc, 0xac, 0x96, 0x43,
	0x14, 0x3e, 0x1d, 0xf6, 0x6e, 0xa6, 0xb4, 0x74, 0xe1, 0x35, 0x33, 0x79, 0x2a, 0xee, 0x70, 0x8f,
	0x32, 0xfb, 0x15, 0x57, 0xf0, 0xc4, 0xb9, 0x9b, 0xbd, 0xd5, 0xb1, 0x4a, 0xd8, 0x85, 0x8f, 0xd4,
	0x55, 0x33, 0x87, 0xb7, 0xe3, 0x68, 0xe0, 0x9f, 0x02, 0xd5, 0x5a, 0xa2, 0x4c, 0x48, 0x4f, 0xe0,
	0xf4, 0xd1, 0xf8, 0x47, 0x15, 0xb5, 0x6e, 0x06, 0x2f, 0xc9, 0x9e, 0x2a, 0x16, 0x45, 0x47, 0xb8,
	0x40, 0xee, 0x84, 0x1d, 0x7e, 0x8c, 0xfc, 0x3d, 0x67, 0x6c, 0xc0, 0x8e, 0x00, 0xfe, 0x02, 0xe5,
	0x1c, 0x63, 0xe7, 0x9b, 0x51, 0x5a, 0x6a, 0x76, 0x44, 0x47, 0x53, 0x4a, 0xf9, 0x69, 0x14, 0x8b,
	0xb0, 0xa1, 0x7d, 0xa0, 0x85, 0x36, 0xf5, 0xad, 0x94, 0xed, 0x35, 0x3e, 0x15, 0x8d, 0xd7, 0xd4,
	0xe2, 0xae, 0xae, 0x4f, 0xef, 0xbb, 0xbd, 0xa4, 0x61, 0x13, 0x15, 0x23, 0x8a, 0xe6, 0x57, 0x4d,
	0x6f, 0xc3, 0xed, 0x8f, 0xbd, 0x96, 0xa7, 0xf1, 0x8e, 0x00, 0x96, 0x8f, 0x88, 0xaf, 0xe7, 0xc4,
	0xad, 0x4b, 0x8a, 0xe6, 0xdf, 0x4e, 0xa9, 0x42, 0xd3, 0xb8, 0xef, 0xa9, 0xee, 0xb8, 0xec, 0xc6,
	0x62, 0x54, 0xc6, 0x6a, 0xda, 0xee, 0xea, 0x57, 0x3d, 0x62, 0x24, 0x95, 0x17, 0xa4, 0xbd, 0xb1,
	0xda, 0x54, 0xf2, 0x74, 0xb1, 0x8e, 0xb1, 0x08, 0x5e, 0x94, 0x51, 0xa8, 0xa5, 0x2e, 0x25, 0x7f,
	0x57, 0x88, 0x77, 0xb9, 0x3f, 0xea, 0x52, 0x19, 0x4c, 0xcf, 0x59, 0x1a, 0x17, 0x8a, 0x2f, 0x94,
	0x28, 0xc9, 0xf9, 0x88, 0xa9, 0x12, 0x67, 0xc3, 0xb2, 0x64, 0x46, 0x4b, 0x40, 0x8c, 0x62, 0x7e,
	0x0e, 0x58, 0x1e, 0x4e, 0xa4, 0x11, 0x7d, 0x3d, 0xa4, 0xc0, 0x5a, 0xcf, 0x91, 0xd3, 0x86, 0x41,
	0x9b, 0x90, 0x40, 0x12, 0x00, 0x18, 0x4a, 0x06, 0xc2, 0xc9, 0x69, 0x53, 0x17, 0xdf, 0x74, 0xf6,
	0xc7, 0xf8, 0xe7, 0xf6, 0x4e, 0xa4, 0x1c, 0xbd, 0xd1, 0x56, 0x53, 0x74, 0x19, 0xb7, 0xcd, 0xd8,
	0xec, 0x25, 0xa4, 0xc4, 0xe7, 0xd6, 0x59, 0x61, 0x42, 0xed, 0xfc, 0xee, 0xfb, 0xc8, 0x03, 0xcd,
	0x2f, 0xc1, 0x84, 0x30, 0xda, 0x15, 0x09, 0x6b, 0xba, 0xc7, 0x6d, 0x1d, 0xb7, 0x80, 0x7e, 0x3a,
	0x52, 0xd3, 0x3d, 0x0a, 0x5b, 0x8e, 0x0b, 0xa8, 0x29, 0xaf, 0xe5, 0xce, 0xac, 0xf1, 0x3f, 0x2a,
	0x6a, 0xc5, 0x7c, 0x70, 0x37, 0x4e, 0x2f, 0x01, 0x0f, 0xfd, 0xbd, 0x9a, 0x49, 0xe4, 0x82, 0x91,
	0x9d, 0xb7, 0x9d, 0xc4, 0x2e, 0xf8, 0xfb, 0x8e, 0xf5, 0x72, 0xa4, 0xdf, 0x77, 0xad, 0x7a, 0x97,
	0x7e, 0x7f, 0x5e, 0x74, 0x32, 0x4e, 0xb0, 0xde, 0xac, 0xd1, 0xc1, 0x9a, 0x4c, 0x3c, 0x58, 0x12,
	0x51, 0xf4, 0xbb, 0xe8, 0x0e, 0xc9, 0x49, 0xa3, 0x45, 0xdf, 0xa2, 0x47, 0x7a, 0x43, 0xa2, 0x77,
	0x61, 0xa6, 0x32, 0x92, 0x56, 0xe7, 0xea, 0x1e, 0x5f, 0x10, 0x35, 0xae, 0xed, 0x71, 0x57, 0x6a,
	0x6a, 0x7d, 0xd1, 0x01, 0x37, 0xf9, 0x3c, 0x78, 0x2e, 0x66, 0x3e, 0x37, 0x85, 0x7b, 0x14, 0x1a,
	0x7f, 0x5c, 0x3d, 0xf5, 0x01, 0xea, 0x39, 0xe3, 0xc1, 0x43, 0x31, 0x70, 0xef, 0x03, 0x3f, 0xd2,
	0x3a, 0xf2, 0x71, 0x7a, 0x7c, 0x44, 0x9a, 0x2d, 0xa1, 0xbc, 0xb3, 0xe8, 0xa7, 0xb9, 0x61, 0x3e,
	0xfe, 0x90, 0x97, 0xf6, 0x89, 0x13, 0x80, 0xa3, 0xa3, 0x57, 0xcc, 0xf1, 0x44, 0xda, 0x73, 0x5c,
	0x8a, 0x6b, 0x4a, 0xe6, 0x86, 0x29, 0x8f, 0xb5, 0xa5, 0xcc, 0x0f, 0xe4, 0x17, 0x2a, 0x56, 0x14,
	0x2d, 0xc1, 0xcc, 0x37, 0xd4, 0x55, 0xa9, 0x38, 0x85, 0xfa, 0xe9, 0x74, 0x94, 0x0c, 0x61, 0xc7,
	0x1c, 0x64, 0xf0, 0x9c, 0x7a, 0xca, 0x7d, 0x8e, 0xea, 0x51, 0x44, 0xab, 0x8c, 0xca, 0x6b, 0xba,
	0x8c, 0xdb, 0x50, 0x63, 0xc6, 0xdc, 0x08, 0xa6, 0x1c, 0x8a, 0xf3, 0x38, 0x3f, 0x00, 0x57, 0x2a,
	0x6c, 0x3b, 0x9b, 0x47, 0x5e, 0x48, 0xc5, 0x49, 0xfa, 0x0d, 0x53, 0x97, 0xd1, 0x4f, 0xd9, 0x28,
	0xd9, 0xc6, 0x91, 0xba, 0xb6, 0x13, 0x51, 0xf9, 0x7d, 0xa0, 0xf3, 0xfb, 0x61, 0xb8, 0x1b, 0xb5,
	0x30, 0xf1, 0x94, 0x2f, 0xf2, 0xd6, 0x52, 0x3f, 0xd8, 0x8e, 0x8f, 0xa5, 0xc2, 0x89, 0x5e, 0xae,
	0xe3, 0x1e, 0x5f, 0x42, 0x6d, 0xbf, 0x57, 0xad, 0xda, 0x2f, 0x6d, 0x79, 0xd2, 0xf8, 0xe6, 0xbf,
	0x41, 0x47, 0x33, 0xf4, 0x54, 0x76, 0x2e, 0x19, 0xfe, 0xfb, 0xd4, 0x02, 0x0f, 0xbf, 0x35, 0x1a,
	0x7a, 0x62, 0xf2, 0xf4, 0xdb, 0xd5, 0x0b, 0x0c, 0x0d, 0x25, 0x8a, 0x49, 0x24, 0x4a, 0x61, 0xda,
	0x92, 0x74, 0x81, 0xbf, 0x81, 0x51, 0x20, 0xfa, 0x63, 0x1e, 0xe2, 0x81, 0x91, 0x4e, 0xc8, 0xf9,
	0x13, 0x7d, 0x26, 0x0a, 0x2c, 0xfc, 0x1c, 0xd6, 0x71, 0x31, 0x0f, 0xd8, 0x47, 0xa2, 0x96, 0xcb,
	0xcb, 0x6e, 0xdd, 0xdc, 0x31, 0x1b, 0x2b, 0x26, 0x23, 0xb6, 0xfe, 0x4d, 0xc6, 0xd5, 0xda, 0x92,
	0xec, 0x69, 0x57, 0x7b, 0x34, 0x63, 0x8b, 0xd9, 0x63, 0x4d, 0x31, 0xca, 0xea, 0x6e, 0x7d, 0x25,
	0x31, 0x99, 0x59, 0xdc, 0xc3, 0x6c, 0x01, 0xe6, 0xc1, 0x9c, 0xf0, 0xa5, 0x16, 0x70, 0x45, 0x47,
	0x6a, 0x98, 0xc4, 0x3b, 0xd1, 0x60, 0xc7, 0xd1, 0x24, 0x61, 0x4b, 0x70, 0xb6, 0xe3, 0x18, 0x48,
	0x10, 0x6b, 0x60, 0xbd, 0x41, 0x9d, 0x61, 0xee, 0x1f, 0x57, 0xac, 0x16, 0x66, 0xff, 0x28, 0x0e,
	0x53, 0x0f, 0x80, 0x1a, 0x92, 0x9a, 0x9f, 0xd0, 0x77, 0x79, 0x98, 0x24, 0x5a, 0x9f, 0xe0, 0x96,
	0x7c, 0x3d, 0x6c, 0x06, 0x36, 0xb1, 0x1f, 0x45, 0x3a, 0x4a, 0xf3, 0xa1, 0x75, 0xa7, 0x15, 0x97,
	0x59, 0x1b, 0x9f, 0x40, 0x86, 0xa1, 0xc0, 0x7a, 0x9f, 0xd3, 0xef, 0x43, 0x4b, 0x9e, 0x84, 0xa0,
	0x72, 0xd6, 0x66, 0x26, 0x4f, 0xdb, 0x39, 0x27, 0x65, 0x7f, 0xb2, 0xe9, 0x8b, 0xe3, 0x40, 0x3e,
	0xb2, 0x8a, 0x1d, 0x5a, 0xff, 0x65, 0x52, 0x63, 0x5f, 0x36, 0xc6, 0xe4, 0x3b, 0xd5, 0xf2, 0x43,
	0xbc, 0x78, 0x27, 0x41, 0x0f, 0x4d, 0x21, 0x4f, 0x3e, 0xb9, 0x6f, 0x54, 0xec, 0x08, 0xbe, 0x89,
	0xe5, 0x59, 0x35, 0x4f, 0x35, 0x2d, 0x51, 0x72, 0x5d, 0xb6, 0xa4, 0xbb, 0x11, 0x41, 0x4c, 0x90,
	0x03, 0x48, 0x44, 0x26, 0xc8, 0x01, 0xbf, 0x06, 0x47, 0x5a, 0x52, 0xcd, 0xff, 0x3a, 0x9c, 0x1c,
	0x3d, 0xb7, 0xb2, 0x40, 0xb8, 0x9c, 0x26, 0xa8, 0xe4, 0xe4, 0x5c, 0xa0, 0x64, 0xd0, 0x0c, 0x26,
	0xdd, 0x65, 0xb2, 0x1e, 0xeb, 0x6c, 0x16, 0x2c, 0x48, 0x4c, 0x99, 0x72, 0xec, 0x1c, 0xcc, 0x66,
	0xa7, 0xce, 0xf2, 0xbf, 0x89, 0x5f, 0x10, 0x45, 0xa2, 0x5c, 0x30, 0x2a, 0xed, 0x10, 0x9c, 0xca,
	0xad, 0xfa, 0x1d, 0x07, 0xce, 0xbe, 0x8a, 0xe8, 0x45, 0x39, 0x58, 0x4f, 0x8a, 0x59, 0x7e, 0x00,
	0x72, 0x16, 0x1c, 0x5a, 0x4c, 0x60, 0xa4, 0xfd, 0xa9, 0x3c, 0x07, 0x6d, 0xaa, 0xc4, 0x16, 0x96,
	0x30, 0x53, 0x5c, 0xc2, 0xac, 0xad, 0xc0, 0x98, 0xba, 0x85, 0x41, 0x4c, 0xa1, 0x75, 0x95, 0xcb,
	0x5d, 0x10, 0xc1, 0xae, 0x8b, 0x25, 0x19, 0x9b, 0x5a, 0xba, 0xc0, 0xd5, 0x02, 0xed, 0xd3, 0x8e,
	0x5d, 0xda, 0x36, 0xac, 0xf8, 0x89, 0xab, 0x22, 0x21, 0x05, 0x6a, 0xb7, 0xb5, 0xa2, 0xf0, 0x07,
	0xab, 0x6a, 0x51, 0x0f, 0xf7, 0xfe, 0x23, 0x8f, 0x11, 0x9e, 0x4a, 0xd4, 0x8e, 0x22, 0xd1, 0xbb,
	0x60, 0x9a, 0x04, 0x44, 0xa1, 0xd0, 0x50, 0xd3, 0xda, 0x13, 0x6a, 0x48, 0x89, 0x37, 0x91, 0x0a,
	0x21, 0x62, 0x78, 0xc3, 0x5e, 0x53, 0xba, 0x17, 0x27, 0xb1, 0xe7, 0x5e, 0xd3, 0xd4, 0x8b, 0x4a,
	0xcb, 0x8a, 0x76, 0x0b, 0x7a, 0xce, 0xe8, 0xa4, 0x7e, 0xa6, 0x51, 0x7a, 0xcf, 0xea, 0x31, 0xd1,
	0x22, 0x82, 0x3d, 0xe7, 0xf4, 0x98, 0xd4, 0x20, 0xbd, 0x94, 0xee, 0x85, 0xc7, 0x00, 0x7b, 0xcd,
	0xeb, 0x5e, 0xd4, 0x20, 0xbd, 0x16, 0xa8, 0x97, 0x3e, 0xf8, 0x9c, 0xd8, 0xf9, 0x5d, 0xb5, 0x88,
	0x67, 0xc4, 0x8f, 0x70, 0x2e, 0x04, 0x67, 0x6e, 0x87, 0x38, 0x17, 0xd2, 0x40, 0xdd, 0x78, 0x18,
	0xa4, 0x47, 0xe8, 0xac, 0x0e, 0xc2, 0xe4, 0x76, 0x42, 0x51, 0x59, 0xb6, 0x88, 0xc3, 0x93, 0xa7,
	0x2b, 0x90, 0xcc, 0x2c, 0x65, 0x3a, 0x94, 0x7f, 0x57, 0x51, 0xcf, 0x8c, 0x7f, 0x30, 0x0b, 0x07,
	0x69, 0xd4, 0x39, 0xf7, 0x1c, 0x7d, 0xc9, 0x00, 0x76, 0xe9, 0x1c, 0x2c, 0x92, 0x1b, 0x66, 0x82,
	0xb7, 0x60, 0x42, 0xee, 0x89, 0x13, 0x43, 0xc2, 0x72, 0x7e, 0x45, 0xd3, 0xbe, 0x84, 0x45, 0x33,
	0x25, 0x1c, 0x63, 0xa8, 0xae, 0xec, 0x0f, 0xc2, 0xe0, 0x38, 0x4c, 0xbe, 0xa5, 0x50, 0xfc, 0x12,
	0xe6, 0xe0, 0xee, 0x85, 0x8f, 0x3d, 0xa5, 0xfd, 0x30, 0x63, 0x56, 0xab, 0xe5, 0xe6, 0x14, 0xd1,
	0x65, 0x46, 0x9c, 0x5d, 0xff, 0xeb, 0xc0, 0x72, 0x23, 0x73, 0x95, 0xec, 0xf4, 0xdb, 0xfb, 0xed,
	0x63, 0xbf, 0x57, 0xcb, 0x67, 0xd4, 0xfa, 0x61, 0x04, 0xec, 0x26, 0x0c, 0x47, 0x35, 0x00, 0x27,
	0x9f, 0xad, 0x97, 0xd5, 0x32, 0xf5, 0xee, 0xf5, 0xdb, 0x17, 0xd8, 0xe2, 0x5e, 0x50, 0x0b, 0x54,
	0x62, 0xa5, 0x79, 0x91, 0xed, 0x6a, 0xe1, 0x21, 0x1c, 0xf5, 0x73, 0x1f, 0xe2, 0xf8, 0x64, 0x0c,
	0x2d, 0x56, 0x6e, 0x5c, 0x84, 0xe1, 0x3a, 0x99, 0xb7, 0x48, 0xa8, 0x97, 0x17, 0xab, 0xf8, 0x79,
	0xb1, 0x42, 0xfe, 0x86, 0x7a, 0x69, 0x7c, 0x03, 0xaa, 0xd1, 0x06, 0x6e, 0xc4, 0x6a, 0x2f, 0x4e,
	0x39, 0x2d, 0xce, 0xb4, 0x75, 0x7c, 0x47, 0x2e, 0xcd, 0xf0, 0x65, 0x8d, 0x07, 0x6a, 0xd5, 0x99,
	0xa4, 0xe7, 0x9e, 0x3f, 0x9f, 0x63, 0x02, 0xcb, 0x92, 0xa1, 0xfe, 0x2a, 0x88, 0xf8, 0x6f, 0x85,
	0x41, 0x7b, 0x0b, 0xdd, 0xe1, 0xf6, 0x51, 0xfc, 0x2b, 0xc3, 0x98, 0x6e, 0x59, 0x4a, 0xce, 0x4e,
	0x64, 0xc4, 0x29, 0xc7, 0xb3, 0x69, 0x6a, 0x2c, 0x3a, 0xce, 0xac, 0xa0, 0x17, 0x68, 0x07, 0x97,
	0x19, 0x1d, 0x0a, 0x69, 0x92, 0xb5, 0xda, 0x7c, 0x47, 0x46, 0xac, 0xd5, 0x01, 0x43, 0xe2, 0x6e,
	0x39, 0x57, 0x74, 0xb1, 0x51, 0x62, 0x1b, 0x5d, 0x33, 0xd3, 0x2f, 0x8d, 0xf0, 0xa0, 0x7c, 0xe9,
	0x58, 0x4b, 0xcb, 0x70, 0x21, 0xe2, 0x1d, 0xdb, 0x72, 0xe2, 0x11, 0x25, 0x91, 0x05, 0xcd, 0xc3,
	0xb0, 0xcd, 0x8d, 0xff, 0x52, 0x57, 0xd7, 0xef, 0x87, 0x47, 0xc1, 0x49, 0x14, 0x8f, 0x92, 0xad,
	0x24, 0x0c, 0xb2, 0x90, 0x20, 0xbe, 0xed, 0xcf, 0xce, 0x06, 0x9d, 0x9a, 0xae, 0x8a, 0x14, 0x73,
	0x73, 0x40, 0x53, 0x12, 0x1e, 0x3a, 0x65, 0x82, 0x29, 0xe3, 0x40, 0xd2, 0x0c, 0xa8, 0x3e, 0xa6,
	0xf5, 0x01, 0xc2, 0xb6, 0xec, 0x34, 0xc6, 0x7c, 0xba, 0x6e, 0x9e, 0x57, 0x69, 0x65, 0xbe, 0xd2,
	0x10, 0x68, 0x6a, 0xa6, 0x54, 0x7c, 0xd4, 0x7d, 0x46, 0xaf, 0xc2, 0xb6, 0x3b, 0x8c, 0xa8, 0x99,
	0x19, 0xdc, 0xf0, 0x9e, 0x40, 0x52, 0x86, 0x3e, 0x44, 0xe0, 0xd2, 0x10, 0x2a, 0x37, 0x0f, 0x40,
	0x7e, 0x58, 0x48, 0x5c, 0x88, 0x36, 0xa6, 0x39, 0x82, 0xd6, 0x4e, 0x3c, 0xea, 0x89, 0xb2, 0x40,
	0x16, 0xd6, 0xf9, 0x98, 0xbf, 0xbf, 0xe8, 0xbe, 0x0c, 0x8d, 0xfc, 0xf1, 0x25, 0x93, 0x24, 0x64,
	0x10, 0xf6, 0xcf, 0x05, 0x30, 0x26, 0xfd, 0x01, 0x37, 0x6a, 0xd0, 0xac, 0x98, 0x3c, 0x32, 0xd4,
	0x2c, 0xc0, 0x59, 0x35, 0x4a, 0x0e, 0x6a, 0x35, 0xe0, 0xb1, 0x55, 0xdb, 0x4d, 0x3b, 0x7f, 0x72,
	0xdd, 0x64, 0x2c, 0xe1, 0x07, 0x16, 0x44, 0x1b, 0x5a, 0x39, 0xed, 0x3e, 0xe1, 0x97, 0xae, 0x14,
	0xe6, 0x49, 0x60, 0xba, 0x9a, 0xff, 0x84, 0x05, 0xd4, 0xb5, 0xc2, 0x9c, 0x34, 0xa8, 0x36, 0x4d,
	0xc2, 0x4b, 0x6a, 0x27, 0x60, 0x3d, 0x95, 0x5f, 0xac, 0x06, 0xd7, 0xd3, 0xf9, 0x21, 0x0c, 0xc0,
	0xae, 0xd3, 0x99, 0xfb, 0x11, 0x0c, 0xb5, 0xd5, 0x67, 0x0e, 0x0f, 0xda, 0x9e, 0x8f, 0x73, 0x7d,
	0x46, 0x6d, 0xb0, 0x72, 0x02, 0x5d, 0x3d, 0xd1, 0x26, 0x06, 0x48, 0xae, 0x6f, 0xb0, 0x91, 0xf7,
	0xa9, 0x89, 0xc1, 0x32, 0x8a, 0x5a, 0x4a, 0x42, 0x55, 0x37, 0xde, 0x79, 0x88, 0xba, 0x92, 0x10,
	0xaf, 0xbb, 0x28, 0x0d, 0x3e, 0x52, 0x6b, 0x66, 0x26, 0xbb, 0x28, 0xc8, 0x8c, 0x45, 0xc6, 0x63,
	0x7e, 0x05, 0xdd, 0xa3, 0x49, 0xb2, 0x4e, 0xea, 0xa4, 0xc6, 0xa6, 0xac, 0xd3, 0x56, 0xf7, 0xc5,
	0x11, 0x10, 0x72, 0xb5, 0xbe, 0xea, 0x8c, 0x6d, 0x4b, 0x66, 0x15, 0xcb, 0xe0, 0x6b, 0xfd, 0xa4,
	0xa3, 0x70, 0x1d, 0x1c, 0x5b, 0x4b, 0x03, 0x27, 0x9f, 0x73, 0x56, 0x29, 0x83, 0xff, 0x44, 0x45,
	0x2d, 0xbc, 0x39, 0x02, 0xb6, 0x81, 0xca, 0xba, 0x7c, 0x02, 0xa6, 0xdf, 0x7a, 0x3f, 0xd5, 0x2e,
	0xe9, 0x35, 0x65, 0x73, 0xdf, 0xbb, 0xe5, 0x3b, 0x58, 0x93, 0x9a, 0xa9, 0x79, 0x9a, 0x8d, 0x27,
	0x86, 0xff, 0x55, 0xac, 0x13, 0x8c, 0xad, 0x0f, 0xe3, 0x84, 0xfa, 0x70, 0x01, 0x45, 0xef, 0x37,
	0x5f, 0x57, 0x1b, 0xa6, 0xef, 0xe3, 0x38, 0x33, 0xdd, 0x4b, 0x28, 0xd9, 0x77, 0x60, 0x81, 0x9e,
	0xec, 0xde, 0x27, 0xe1, 0x02, 0x1b, 0x9f, 0x55, 0xf3, 0x0f, 0xd0, 0xf3, 0xd8, 0x83, 0xe7, 0xbc,
	0x74, 0x15, 0xb6, 0x73, 0x69, 0x2f, 0x6a, 0x1d, 0xf5, 0x83, 0x81, 0x2f, 0x7b, 0x6e, 0x5e, 0x0e,
	0xbc, 0x50, 0xa9, 0x64, 0xf3, 0x64, 0xf0, 0x76, 0x7e, 0xc6, 0x0c, 0xbe, 0xed, 0x49, 0xe8, 0x69,
	0xab, 0xa0, 0xf0, 0x54, 0x5e, 0x37, 0xbd, 0x31, 0xc5, 0x83, 0x87, 0xa0, 0x81, 0xd4, 0x82, 0x7c,
	0xa5, 0xa8, 0x16, 0x7f, 0xa6, 0xa2, 0x56, 0xf4, 0xd4, 0xbd, 0x24, 0x04, 0xbd, 0x4d, 0xc9, 0x7a,
	0x68, 0x4b, 0xa1, 0x60, 0x0c, 0x62, 0xd8, 0x1a, 0xf5, 0x22, 0xac, 0x25, 0x7e, 0x66, 0x2b, 0x43,
	0x73, 0xbf, 0xdd, 0x49, 0xb5, 0xb1, 0x5f, 0x54, 0x8b, 0xfa, 0xd5, 0xdd, 0x09, 0xb9, 0x53, 0x1a,
	0xfb, 0x66, 0x15, 0x97, 0x91, 0xf8, 0xa7, 0x2e, 0x55, 0x5b, 0xf5, 0xd5, 0x87, 0xd6, 0x31, 0x07,
	0x73, 0xe0, 0x50, 0x79, 0xa5, 0x59, 0x55, 0xdf, 0x8a, 0xdb, 0xe1, 0xca, 0x1f, 0x03, 0x40, 0x2a,
	0xf4, 0x6c, 0xe5, 0x9a, 0x11, 0x2b, 0x15, 0x7c, 0x82, 0xf8, 0x67, 0xa5, 0x8a, 0x4f, 0x90, 0x97,
	0x64, 0x0a, 0xb8, 0x52, 0x7b, 0xf5, 0x2d, 0xeb, 0x95, 0x45, 0x25, 0x29, 0x68, 0xa0, 0x05, 0x35,
	0x7b, 0xef, 0xcd, 0x83, 0xe6, 0x47, 0xf1, 0x20, 0x84, 0x97, 0xd7, 0xd5, 0x32, 0xfe, 0x12, 0x25,
	0x1d, 0x76, 0x82, 0x71, 0x56, 0xd4, 0x02, 0x36, 0xde, 0x8f, 0xba, 0xdc, 0x52, 0x7b, 0xf5, 0x8b,
	0x6a, 0xd9, 0x39, 0x37, 0x34, 0x0e, 0x7e, 0x0c, 0x3a, 0x3d, 0x26, 0x58, 0xc2, 0x48, 0x30, 0x2e,
	0xfe, 0xc6, 0xcd, 0x84, 0x21, 0xe4, 0x17, 0x72, 0xa6, 0x2b, 0xb5, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xff, 0x57, 0x85, 0x5a, 0xfa, 0xc8, 0x00, 0x00,
}
