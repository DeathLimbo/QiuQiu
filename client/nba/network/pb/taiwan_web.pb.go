// Code generated by protoc-gen-go.
// source: taiwan_web.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 商品
type WebCommodity struct {
	// 商品id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 商品名稱
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 額外信息
	ExtraInfo *string `protobuf:"bytes,3,opt,name=extra_info" json:"extra_info,omitempty"`
	// 價格
	Price *int32 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	// 幣種
	Currency *string `protobuf:"bytes,5,opt,name=currency" json:"currency,omitempty"`
	// 商品類型
	CommodityType    *int32 `protobuf:"varint,6,opt,name=commodity_type" json:"commodity_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *WebCommodity) Reset()                    { *m = WebCommodity{} }
func (m *WebCommodity) String() string            { return proto.CompactTextString(m) }
func (*WebCommodity) ProtoMessage()               {}
func (*WebCommodity) Descriptor() ([]byte, []int) { return fileDescriptor73, []int{0} }

func (m *WebCommodity) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WebCommodity) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WebCommodity) GetExtraInfo() string {
	if m != nil && m.ExtraInfo != nil {
		return *m.ExtraInfo
	}
	return ""
}

func (m *WebCommodity) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WebCommodity) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *WebCommodity) GetCommodityType() int32 {
	if m != nil && m.CommodityType != nil {
		return *m.CommodityType
	}
	return 0
}

func init() {
	proto.RegisterType((*WebCommodity)(nil), "WebCommodity")
}

func init() { proto.RegisterFile("taiwan_web.proto", fileDescriptor73) }

var fileDescriptor73 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x49, 0xcc, 0x2c,
	0x4f, 0xcc, 0x8b, 0x2f, 0x4f, 0x4d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x2a, 0xe5, 0xe2,
	0x09, 0x4f, 0x4d, 0x72, 0xce, 0xcf, 0xcd, 0xcd, 0x4f, 0xc9, 0x2c, 0xa9, 0x14, 0xe2, 0xe2, 0x62,
	0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x15, 0xe2, 0xe1, 0x62, 0xc9, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x02, 0xf2, 0x38, 0x85, 0x80, 0x52, 0xa9, 0x15, 0x25, 0x45, 0x89, 0xf1, 0x99, 0x79,
	0x69, 0xf9, 0x12, 0xcc, 0x60, 0x31, 0x5e, 0x2e, 0xd6, 0x82, 0xa2, 0xcc, 0xe4, 0x54, 0x09, 0x16,
	0xb0, 0x06, 0x01, 0x2e, 0x8e, 0xe4, 0xd2, 0xa2, 0xa2, 0xd4, 0xbc, 0xe4, 0x4a, 0x09, 0x56, 0xb0,
	0x02, 0x31, 0x2e, 0xbe, 0x64, 0x98, 0xd9, 0xf1, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x6c, 0x20, 0x95,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x39, 0xc4, 0x8d, 0x89, 0x00, 0x00, 0x00,
}
