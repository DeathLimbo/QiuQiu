// Code generated by protoc-gen-go.
// source: fight.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 战力模块类型
type FightPowerModuleType int32

const (
	// 战力模块类型:球员等级
	FightPowerModuleType_FPMT_player_lv FightPowerModuleType = 1
	// 战力模块类型:球员星级
	FightPowerModuleType_FPMT_player_star FightPowerModuleType = 2
	// 战力模块类型:球员成长
	FightPowerModuleType_FPMT_player_glow FightPowerModuleType = 3
	// 战力模块类型:羁绊
	FightPowerModuleType_FPMT_player_relation FightPowerModuleType = 4
	// 战力模块类型:阶级
	FightPowerModuleType_FPMT_player_class FightPowerModuleType = 5
	// 战力模块类型:装备
	FightPowerModuleType_FPMT_player_equipment FightPowerModuleType = 6
	// 战力模块类型:绰号
	FightPowerModuleType_FPMT_player_nick_name FightPowerModuleType = 7
	// 战力模块类型:全局-最佳阵容总星数
	FightPowerModuleType_FPMT_global_best_squad_total_star FightPowerModuleType = 101
	// 战力模块类型:全局-最佳阵容光环
	FightPowerModuleType_FPMT_global_best_squad_halo FightPowerModuleType = 102
	// 战力模块类型:全局-阵容光环
	FightPowerModuleType_FPMT_global_squad_halo FightPowerModuleType = 103
	// 战力模块类型:全局-玩家图鉴
	FightPowerModuleType_FPMT_global_roster FightPowerModuleType = 104
	// 战力模块类型:全局-球员提供阵容全局属性
	FightPowerModuleType_FPMT_global_squad_global_attr FightPowerModuleType = 105
	// 战力模块类型:全局-荣誉
	FightPowerModuleType_FPMT_global_honor FightPowerModuleType = 106
	// 战力模块类型:全局-王朝掠影
	FightPowerModuleType_FPMT_global_team_photo FightPowerModuleType = 107
	// 战力模块类型:全局-助理教练
	FightPowerModuleType_FPMT_global_coach FightPowerModuleType = 108
	// 战力模块类型:全局-图鉴
	FightPowerModuleType_FPMT_global_book FightPowerModuleType = 109
	// 战力模块类型:全局-战术等级全局加成
	FightPowerModuleType_FPMT_global_tactic_lv FightPowerModuleType = 110
	// 战力模块类型:全局-名宿
	FightPowerModuleType_FPMT_global_legend FightPowerModuleType = 111
	// 战力模块类型:全局-时装
	FightPowerModuleType_FPMT_global_fashion FightPowerModuleType = 112
	// 战力模块类型:全局-球队光环
	FightPowerModuleType_FPMT_global_team_halo FightPowerModuleType = 113
	// 战力模块类型:全局-标签
	FightPowerModuleType_FPMT_global_tag FightPowerModuleType = 114
	// 战力模块类型:组合(首发组合+上阵组合)
	FightPowerModuleType_FPMT_global_combine FightPowerModuleType = 115
)

var FightPowerModuleType_name = map[int32]string{
	1:   "FPMT_player_lv",
	2:   "FPMT_player_star",
	3:   "FPMT_player_glow",
	4:   "FPMT_player_relation",
	5:   "FPMT_player_class",
	6:   "FPMT_player_equipment",
	7:   "FPMT_player_nick_name",
	101: "FPMT_global_best_squad_total_star",
	102: "FPMT_global_best_squad_halo",
	103: "FPMT_global_squad_halo",
	104: "FPMT_global_roster",
	105: "FPMT_global_squad_global_attr",
	106: "FPMT_global_honor",
	107: "FPMT_global_team_photo",
	108: "FPMT_global_coach",
	109: "FPMT_global_book",
	110: "FPMT_global_tactic_lv",
	111: "FPMT_global_legend",
	112: "FPMT_global_fashion",
	113: "FPMT_global_team_halo",
	114: "FPMT_global_tag",
	115: "FPMT_global_combine",
}
var FightPowerModuleType_value = map[string]int32{
	"FPMT_player_lv":                    1,
	"FPMT_player_star":                  2,
	"FPMT_player_glow":                  3,
	"FPMT_player_relation":              4,
	"FPMT_player_class":                 5,
	"FPMT_player_equipment":             6,
	"FPMT_player_nick_name":             7,
	"FPMT_global_best_squad_total_star": 101,
	"FPMT_global_best_squad_halo":       102,
	"FPMT_global_squad_halo":            103,
	"FPMT_global_roster":                104,
	"FPMT_global_squad_global_attr":     105,
	"FPMT_global_honor":                 106,
	"FPMT_global_team_photo":            107,
	"FPMT_global_coach":                 108,
	"FPMT_global_book":                  109,
	"FPMT_global_tactic_lv":             110,
	"FPMT_global_legend":                111,
	"FPMT_global_fashion":               112,
	"FPMT_global_team_halo":             113,
	"FPMT_global_tag":                   114,
	"FPMT_global_combine":               115,
}

func (x FightPowerModuleType) Enum() *FightPowerModuleType {
	p := new(FightPowerModuleType)
	*p = x
	return p
}
func (x FightPowerModuleType) String() string {
	return proto.EnumName(FightPowerModuleType_name, int32(x))
}
func (x *FightPowerModuleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightPowerModuleType_value, data, "FightPowerModuleType")
	if err != nil {
		return err
	}
	*x = FightPowerModuleType(value)
	return nil
}
func (FightPowerModuleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{0} }

type GamerGetMatchInfoC2S_MsgID int32

const (
	GamerGetMatchInfoC2S_eMsgID GamerGetMatchInfoC2S_MsgID = 526
)

var GamerGetMatchInfoC2S_MsgID_name = map[int32]string{
	526: "eMsgID",
}
var GamerGetMatchInfoC2S_MsgID_value = map[string]int32{
	"eMsgID": 526,
}

func (x GamerGetMatchInfoC2S_MsgID) Enum() *GamerGetMatchInfoC2S_MsgID {
	p := new(GamerGetMatchInfoC2S_MsgID)
	*p = x
	return p
}
func (x GamerGetMatchInfoC2S_MsgID) String() string {
	return proto.EnumName(GamerGetMatchInfoC2S_MsgID_name, int32(x))
}
func (x *GamerGetMatchInfoC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerGetMatchInfoC2S_MsgID_value, data, "GamerGetMatchInfoC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerGetMatchInfoC2S_MsgID(value)
	return nil
}
func (GamerGetMatchInfoC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{10, 0}
}

type GamerGetMatchInfoS2C_MsgID int32

const (
	GamerGetMatchInfoS2C_eMsgID GamerGetMatchInfoS2C_MsgID = 526
)

var GamerGetMatchInfoS2C_MsgID_name = map[int32]string{
	526: "eMsgID",
}
var GamerGetMatchInfoS2C_MsgID_value = map[string]int32{
	"eMsgID": 526,
}

func (x GamerGetMatchInfoS2C_MsgID) Enum() *GamerGetMatchInfoS2C_MsgID {
	p := new(GamerGetMatchInfoS2C_MsgID)
	*p = x
	return p
}
func (x GamerGetMatchInfoS2C_MsgID) String() string {
	return proto.EnumName(GamerGetMatchInfoS2C_MsgID_name, int32(x))
}
func (x *GamerGetMatchInfoS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerGetMatchInfoS2C_MsgID_value, data, "GamerGetMatchInfoS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerGetMatchInfoS2C_MsgID(value)
	return nil
}
func (GamerGetMatchInfoS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{15, 0}
}

type GamerMatchVerifyC2S_MsgID int32

const (
	GamerMatchVerifyC2S_eMsgID GamerMatchVerifyC2S_MsgID = 527
)

var GamerMatchVerifyC2S_MsgID_name = map[int32]string{
	527: "eMsgID",
}
var GamerMatchVerifyC2S_MsgID_value = map[string]int32{
	"eMsgID": 527,
}

func (x GamerMatchVerifyC2S_MsgID) Enum() *GamerMatchVerifyC2S_MsgID {
	p := new(GamerMatchVerifyC2S_MsgID)
	*p = x
	return p
}
func (x GamerMatchVerifyC2S_MsgID) String() string {
	return proto.EnumName(GamerMatchVerifyC2S_MsgID_name, int32(x))
}
func (x *GamerMatchVerifyC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchVerifyC2S_MsgID_value, data, "GamerMatchVerifyC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchVerifyC2S_MsgID(value)
	return nil
}
func (GamerMatchVerifyC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{19, 0}
}

type GamerMatchVerifyS2C_MsgID int32

const (
	GamerMatchVerifyS2C_eMsgID GamerMatchVerifyS2C_MsgID = 527
)

var GamerMatchVerifyS2C_MsgID_name = map[int32]string{
	527: "eMsgID",
}
var GamerMatchVerifyS2C_MsgID_value = map[string]int32{
	"eMsgID": 527,
}

func (x GamerMatchVerifyS2C_MsgID) Enum() *GamerMatchVerifyS2C_MsgID {
	p := new(GamerMatchVerifyS2C_MsgID)
	*p = x
	return p
}
func (x GamerMatchVerifyS2C_MsgID) String() string {
	return proto.EnumName(GamerMatchVerifyS2C_MsgID_name, int32(x))
}
func (x *GamerMatchVerifyS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchVerifyS2C_MsgID_value, data, "GamerMatchVerifyS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchVerifyS2C_MsgID(value)
	return nil
}
func (GamerMatchVerifyS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{21, 0}
}

type FightReconnectNotifyS2C_MsgID int32

const (
	// GAME_CMD_NOTIFY<<8+GAME_CMD_NOTIFY_FIGHT_RECONNECT
	FightReconnectNotifyS2C_eMsgID FightReconnectNotifyS2C_MsgID = 64779
)

var FightReconnectNotifyS2C_MsgID_name = map[int32]string{
	64779: "eMsgID",
}
var FightReconnectNotifyS2C_MsgID_value = map[string]int32{
	"eMsgID": 64779,
}

func (x FightReconnectNotifyS2C_MsgID) Enum() *FightReconnectNotifyS2C_MsgID {
	p := new(FightReconnectNotifyS2C_MsgID)
	*p = x
	return p
}
func (x FightReconnectNotifyS2C_MsgID) String() string {
	return proto.EnumName(FightReconnectNotifyS2C_MsgID_name, int32(x))
}
func (x *FightReconnectNotifyS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightReconnectNotifyS2C_MsgID_value, data, "FightReconnectNotifyS2C_MsgID")
	if err != nil {
		return err
	}
	*x = FightReconnectNotifyS2C_MsgID(value)
	return nil
}
func (FightReconnectNotifyS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{22, 0}
}

type GamerFightReconnectC2S_MsgID int32

const (
	// GAME_CMD_MAIN<<8+GAME_CMD_MAIN_FIGHT_RECONNECT
	GamerFightReconnectC2S_eMsgID GamerFightReconnectC2S_MsgID = 530
)

var GamerFightReconnectC2S_MsgID_name = map[int32]string{
	530: "eMsgID",
}
var GamerFightReconnectC2S_MsgID_value = map[string]int32{
	"eMsgID": 530,
}

func (x GamerFightReconnectC2S_MsgID) Enum() *GamerFightReconnectC2S_MsgID {
	p := new(GamerFightReconnectC2S_MsgID)
	*p = x
	return p
}
func (x GamerFightReconnectC2S_MsgID) String() string {
	return proto.EnumName(GamerFightReconnectC2S_MsgID_name, int32(x))
}
func (x *GamerFightReconnectC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerFightReconnectC2S_MsgID_value, data, "GamerFightReconnectC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerFightReconnectC2S_MsgID(value)
	return nil
}
func (GamerFightReconnectC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{23, 0}
}

type GamerFightReconnectS2C_MsgID int32

const (
	// GAME_CMD_MAIN<<8+GAME_CMD_MAIN_FIGHT_RECONNECT
	GamerFightReconnectS2C_eMsgID GamerFightReconnectS2C_MsgID = 530
)

var GamerFightReconnectS2C_MsgID_name = map[int32]string{
	530: "eMsgID",
}
var GamerFightReconnectS2C_MsgID_value = map[string]int32{
	"eMsgID": 530,
}

func (x GamerFightReconnectS2C_MsgID) Enum() *GamerFightReconnectS2C_MsgID {
	p := new(GamerFightReconnectS2C_MsgID)
	*p = x
	return p
}
func (x GamerFightReconnectS2C_MsgID) String() string {
	return proto.EnumName(GamerFightReconnectS2C_MsgID_name, int32(x))
}
func (x *GamerFightReconnectS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerFightReconnectS2C_MsgID_value, data, "GamerFightReconnectS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerFightReconnectS2C_MsgID(value)
	return nil
}
func (GamerFightReconnectS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{28, 0}
}

type GamerMatchShowRewardS2C_MsgID int32

const (
	GamerMatchShowRewardS2C_eMsgID GamerMatchShowRewardS2C_MsgID = 528
)

var GamerMatchShowRewardS2C_MsgID_name = map[int32]string{
	528: "eMsgID",
}
var GamerMatchShowRewardS2C_MsgID_value = map[string]int32{
	"eMsgID": 528,
}

func (x GamerMatchShowRewardS2C_MsgID) Enum() *GamerMatchShowRewardS2C_MsgID {
	p := new(GamerMatchShowRewardS2C_MsgID)
	*p = x
	return p
}
func (x GamerMatchShowRewardS2C_MsgID) String() string {
	return proto.EnumName(GamerMatchShowRewardS2C_MsgID_name, int32(x))
}
func (x *GamerMatchShowRewardS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchShowRewardS2C_MsgID_value, data, "GamerMatchShowRewardS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchShowRewardS2C_MsgID(value)
	return nil
}
func (GamerMatchShowRewardS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{29, 0}
}

type GamerMatchFlimInfosC2S_MsgID int32

const (
	GamerMatchFlimInfosC2S_eMsgID GamerMatchFlimInfosC2S_MsgID = 534
)

var GamerMatchFlimInfosC2S_MsgID_name = map[int32]string{
	534: "eMsgID",
}
var GamerMatchFlimInfosC2S_MsgID_value = map[string]int32{
	"eMsgID": 534,
}

func (x GamerMatchFlimInfosC2S_MsgID) Enum() *GamerMatchFlimInfosC2S_MsgID {
	p := new(GamerMatchFlimInfosC2S_MsgID)
	*p = x
	return p
}
func (x GamerMatchFlimInfosC2S_MsgID) String() string {
	return proto.EnumName(GamerMatchFlimInfosC2S_MsgID_name, int32(x))
}
func (x *GamerMatchFlimInfosC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchFlimInfosC2S_MsgID_value, data, "GamerMatchFlimInfosC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchFlimInfosC2S_MsgID(value)
	return nil
}
func (GamerMatchFlimInfosC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{30, 0}
}

type GamerMatchFlimInfosS2C_MsgID int32

const (
	GamerMatchFlimInfosS2C_eMsgID GamerMatchFlimInfosS2C_MsgID = 534
)

var GamerMatchFlimInfosS2C_MsgID_name = map[int32]string{
	534: "eMsgID",
}
var GamerMatchFlimInfosS2C_MsgID_value = map[string]int32{
	"eMsgID": 534,
}

func (x GamerMatchFlimInfosS2C_MsgID) Enum() *GamerMatchFlimInfosS2C_MsgID {
	p := new(GamerMatchFlimInfosS2C_MsgID)
	*p = x
	return p
}
func (x GamerMatchFlimInfosS2C_MsgID) String() string {
	return proto.EnumName(GamerMatchFlimInfosS2C_MsgID_name, int32(x))
}
func (x *GamerMatchFlimInfosS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchFlimInfosS2C_MsgID_value, data, "GamerMatchFlimInfosS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchFlimInfosS2C_MsgID(value)
	return nil
}
func (GamerMatchFlimInfosS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{36, 0}
}

type GamerUseExclusiveSkillsC2S_MsgID int32

const (
	GamerUseExclusiveSkillsC2S_eMsgID GamerUseExclusiveSkillsC2S_MsgID = 565
)

var GamerUseExclusiveSkillsC2S_MsgID_name = map[int32]string{
	565: "eMsgID",
}
var GamerUseExclusiveSkillsC2S_MsgID_value = map[string]int32{
	"eMsgID": 565,
}

func (x GamerUseExclusiveSkillsC2S_MsgID) Enum() *GamerUseExclusiveSkillsC2S_MsgID {
	p := new(GamerUseExclusiveSkillsC2S_MsgID)
	*p = x
	return p
}
func (x GamerUseExclusiveSkillsC2S_MsgID) String() string {
	return proto.EnumName(GamerUseExclusiveSkillsC2S_MsgID_name, int32(x))
}
func (x *GamerUseExclusiveSkillsC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerUseExclusiveSkillsC2S_MsgID_value, data, "GamerUseExclusiveSkillsC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerUseExclusiveSkillsC2S_MsgID(value)
	return nil
}
func (GamerUseExclusiveSkillsC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{37, 0}
}

type GamerUseExclusiveSkillsS2C_MsgID int32

const (
	GamerUseExclusiveSkillsS2C_eMsgID GamerUseExclusiveSkillsS2C_MsgID = 565
)

var GamerUseExclusiveSkillsS2C_MsgID_name = map[int32]string{
	565: "eMsgID",
}
var GamerUseExclusiveSkillsS2C_MsgID_value = map[string]int32{
	"eMsgID": 565,
}

func (x GamerUseExclusiveSkillsS2C_MsgID) Enum() *GamerUseExclusiveSkillsS2C_MsgID {
	p := new(GamerUseExclusiveSkillsS2C_MsgID)
	*p = x
	return p
}
func (x GamerUseExclusiveSkillsS2C_MsgID) String() string {
	return proto.EnumName(GamerUseExclusiveSkillsS2C_MsgID_name, int32(x))
}
func (x *GamerUseExclusiveSkillsS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerUseExclusiveSkillsS2C_MsgID_value, data, "GamerUseExclusiveSkillsS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerUseExclusiveSkillsS2C_MsgID(value)
	return nil
}
func (GamerUseExclusiveSkillsS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{38, 0}
}

type GamerMatchChangePlayerC2S_MsgID int32

const (
	GamerMatchChangePlayerC2S_eMsgID GamerMatchChangePlayerC2S_MsgID = 535
)

var GamerMatchChangePlayerC2S_MsgID_name = map[int32]string{
	535: "eMsgID",
}
var GamerMatchChangePlayerC2S_MsgID_value = map[string]int32{
	"eMsgID": 535,
}

func (x GamerMatchChangePlayerC2S_MsgID) Enum() *GamerMatchChangePlayerC2S_MsgID {
	p := new(GamerMatchChangePlayerC2S_MsgID)
	*p = x
	return p
}
func (x GamerMatchChangePlayerC2S_MsgID) String() string {
	return proto.EnumName(GamerMatchChangePlayerC2S_MsgID_name, int32(x))
}
func (x *GamerMatchChangePlayerC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchChangePlayerC2S_MsgID_value, data, "GamerMatchChangePlayerC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchChangePlayerC2S_MsgID(value)
	return nil
}
func (GamerMatchChangePlayerC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{39, 0}
}

type GamerMatchChangePlayerS2C_MsgID int32

const (
	GamerMatchChangePlayerS2C_eMsgID GamerMatchChangePlayerS2C_MsgID = 535
)

var GamerMatchChangePlayerS2C_MsgID_name = map[int32]string{
	535: "eMsgID",
}
var GamerMatchChangePlayerS2C_MsgID_value = map[string]int32{
	"eMsgID": 535,
}

func (x GamerMatchChangePlayerS2C_MsgID) Enum() *GamerMatchChangePlayerS2C_MsgID {
	p := new(GamerMatchChangePlayerS2C_MsgID)
	*p = x
	return p
}
func (x GamerMatchChangePlayerS2C_MsgID) String() string {
	return proto.EnumName(GamerMatchChangePlayerS2C_MsgID_name, int32(x))
}
func (x *GamerMatchChangePlayerS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerMatchChangePlayerS2C_MsgID_value, data, "GamerMatchChangePlayerS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerMatchChangePlayerS2C_MsgID(value)
	return nil
}
func (GamerMatchChangePlayerS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{40, 0}
}

type GamerScoreS2C_MsgID int32

const (
	GamerScoreS2C_eMsgID GamerScoreS2C_MsgID = 539
)

var GamerScoreS2C_MsgID_name = map[int32]string{
	539: "eMsgID",
}
var GamerScoreS2C_MsgID_value = map[string]int32{
	"eMsgID": 539,
}

func (x GamerScoreS2C_MsgID) Enum() *GamerScoreS2C_MsgID {
	p := new(GamerScoreS2C_MsgID)
	*p = x
	return p
}
func (x GamerScoreS2C_MsgID) String() string {
	return proto.EnumName(GamerScoreS2C_MsgID_name, int32(x))
}
func (x *GamerScoreS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerScoreS2C_MsgID_value, data, "GamerScoreS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerScoreS2C_MsgID(value)
	return nil
}
func (GamerScoreS2C_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{51, 0} }

type ChangeTacticsC2S_MsgID int32

const (
	ChangeTacticsC2S_eMsgID ChangeTacticsC2S_MsgID = 551
)

var ChangeTacticsC2S_MsgID_name = map[int32]string{
	551: "eMsgID",
}
var ChangeTacticsC2S_MsgID_value = map[string]int32{
	"eMsgID": 551,
}

func (x ChangeTacticsC2S_MsgID) Enum() *ChangeTacticsC2S_MsgID {
	p := new(ChangeTacticsC2S_MsgID)
	*p = x
	return p
}
func (x ChangeTacticsC2S_MsgID) String() string {
	return proto.EnumName(ChangeTacticsC2S_MsgID_name, int32(x))
}
func (x *ChangeTacticsC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChangeTacticsC2S_MsgID_value, data, "ChangeTacticsC2S_MsgID")
	if err != nil {
		return err
	}
	*x = ChangeTacticsC2S_MsgID(value)
	return nil
}
func (ChangeTacticsC2S_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{52, 0} }

type ChangeTacticsS2C_MsgID int32

const (
	ChangeTacticsS2C_eMsgID ChangeTacticsS2C_MsgID = 551
)

var ChangeTacticsS2C_MsgID_name = map[int32]string{
	551: "eMsgID",
}
var ChangeTacticsS2C_MsgID_value = map[string]int32{
	"eMsgID": 551,
}

func (x ChangeTacticsS2C_MsgID) Enum() *ChangeTacticsS2C_MsgID {
	p := new(ChangeTacticsS2C_MsgID)
	*p = x
	return p
}
func (x ChangeTacticsS2C_MsgID) String() string {
	return proto.EnumName(ChangeTacticsS2C_MsgID_name, int32(x))
}
func (x *ChangeTacticsS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChangeTacticsS2C_MsgID_value, data, "ChangeTacticsS2C_MsgID")
	if err != nil {
		return err
	}
	*x = ChangeTacticsS2C_MsgID(value)
	return nil
}
func (ChangeTacticsS2C_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{53, 0} }

type GamerSurrenderC2S_MsgID int32

const (
	GamerSurrenderC2S_eMsgID GamerSurrenderC2S_MsgID = 553
)

var GamerSurrenderC2S_MsgID_name = map[int32]string{
	553: "eMsgID",
}
var GamerSurrenderC2S_MsgID_value = map[string]int32{
	"eMsgID": 553,
}

func (x GamerSurrenderC2S_MsgID) Enum() *GamerSurrenderC2S_MsgID {
	p := new(GamerSurrenderC2S_MsgID)
	*p = x
	return p
}
func (x GamerSurrenderC2S_MsgID) String() string {
	return proto.EnumName(GamerSurrenderC2S_MsgID_name, int32(x))
}
func (x *GamerSurrenderC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerSurrenderC2S_MsgID_value, data, "GamerSurrenderC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerSurrenderC2S_MsgID(value)
	return nil
}
func (GamerSurrenderC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{59, 0}
}

type GamerSurrenderS2C_MsgID int32

const (
	GamerSurrenderS2C_eMsgID GamerSurrenderS2C_MsgID = 553
)

var GamerSurrenderS2C_MsgID_name = map[int32]string{
	553: "eMsgID",
}
var GamerSurrenderS2C_MsgID_value = map[string]int32{
	"eMsgID": 553,
}

func (x GamerSurrenderS2C_MsgID) Enum() *GamerSurrenderS2C_MsgID {
	p := new(GamerSurrenderS2C_MsgID)
	*p = x
	return p
}
func (x GamerSurrenderS2C_MsgID) String() string {
	return proto.EnumName(GamerSurrenderS2C_MsgID_name, int32(x))
}
func (x *GamerSurrenderS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerSurrenderS2C_MsgID_value, data, "GamerSurrenderS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerSurrenderS2C_MsgID(value)
	return nil
}
func (GamerSurrenderS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{60, 0}
}

type GamerGetSweepMatchInfoC2S_MsgID int32

const (
	GamerGetSweepMatchInfoC2S_eMsgID GamerGetSweepMatchInfoC2S_MsgID = 563
)

var GamerGetSweepMatchInfoC2S_MsgID_name = map[int32]string{
	563: "eMsgID",
}
var GamerGetSweepMatchInfoC2S_MsgID_value = map[string]int32{
	"eMsgID": 563,
}

func (x GamerGetSweepMatchInfoC2S_MsgID) Enum() *GamerGetSweepMatchInfoC2S_MsgID {
	p := new(GamerGetSweepMatchInfoC2S_MsgID)
	*p = x
	return p
}
func (x GamerGetSweepMatchInfoC2S_MsgID) String() string {
	return proto.EnumName(GamerGetSweepMatchInfoC2S_MsgID_name, int32(x))
}
func (x *GamerGetSweepMatchInfoC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerGetSweepMatchInfoC2S_MsgID_value, data, "GamerGetSweepMatchInfoC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerGetSweepMatchInfoC2S_MsgID(value)
	return nil
}
func (GamerGetSweepMatchInfoC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{62, 0}
}

type GamerGetSweepMatchInfoS2C_MsgID int32

const (
	GamerGetSweepMatchInfoS2C_eMsgID GamerGetSweepMatchInfoS2C_MsgID = 563
)

var GamerGetSweepMatchInfoS2C_MsgID_name = map[int32]string{
	563: "eMsgID",
}
var GamerGetSweepMatchInfoS2C_MsgID_value = map[string]int32{
	"eMsgID": 563,
}

func (x GamerGetSweepMatchInfoS2C_MsgID) Enum() *GamerGetSweepMatchInfoS2C_MsgID {
	p := new(GamerGetSweepMatchInfoS2C_MsgID)
	*p = x
	return p
}
func (x GamerGetSweepMatchInfoS2C_MsgID) String() string {
	return proto.EnumName(GamerGetSweepMatchInfoS2C_MsgID_name, int32(x))
}
func (x *GamerGetSweepMatchInfoS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerGetSweepMatchInfoS2C_MsgID_value, data, "GamerGetSweepMatchInfoS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerGetSweepMatchInfoS2C_MsgID(value)
	return nil
}
func (GamerGetSweepMatchInfoS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{63, 0}
}

type ThreeDunkSetColorBlockC2S_MsgID int32

const (
	ThreeDunkSetColorBlockC2S_eMsgID ThreeDunkSetColorBlockC2S_MsgID = 568
)

var ThreeDunkSetColorBlockC2S_MsgID_name = map[int32]string{
	568: "eMsgID",
}
var ThreeDunkSetColorBlockC2S_MsgID_value = map[string]int32{
	"eMsgID": 568,
}

func (x ThreeDunkSetColorBlockC2S_MsgID) Enum() *ThreeDunkSetColorBlockC2S_MsgID {
	p := new(ThreeDunkSetColorBlockC2S_MsgID)
	*p = x
	return p
}
func (x ThreeDunkSetColorBlockC2S_MsgID) String() string {
	return proto.EnumName(ThreeDunkSetColorBlockC2S_MsgID_name, int32(x))
}
func (x *ThreeDunkSetColorBlockC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ThreeDunkSetColorBlockC2S_MsgID_value, data, "ThreeDunkSetColorBlockC2S_MsgID")
	if err != nil {
		return err
	}
	*x = ThreeDunkSetColorBlockC2S_MsgID(value)
	return nil
}
func (ThreeDunkSetColorBlockC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{68, 0}
}

type DunkSetExtraCreditC2S_MsgID int32

const (
	DunkSetExtraCreditC2S_eMsgID DunkSetExtraCreditC2S_MsgID = 569
)

var DunkSetExtraCreditC2S_MsgID_name = map[int32]string{
	569: "eMsgID",
}
var DunkSetExtraCreditC2S_MsgID_value = map[string]int32{
	"eMsgID": 569,
}

func (x DunkSetExtraCreditC2S_MsgID) Enum() *DunkSetExtraCreditC2S_MsgID {
	p := new(DunkSetExtraCreditC2S_MsgID)
	*p = x
	return p
}
func (x DunkSetExtraCreditC2S_MsgID) String() string {
	return proto.EnumName(DunkSetExtraCreditC2S_MsgID_name, int32(x))
}
func (x *DunkSetExtraCreditC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DunkSetExtraCreditC2S_MsgID_value, data, "DunkSetExtraCreditC2S_MsgID")
	if err != nil {
		return err
	}
	*x = DunkSetExtraCreditC2S_MsgID(value)
	return nil
}
func (DunkSetExtraCreditC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{69, 0}
}

type GetBestTacticExecutorC2S_MsgID int32

const (
	GetBestTacticExecutorC2S_eMsgID GetBestTacticExecutorC2S_MsgID = 570
)

var GetBestTacticExecutorC2S_MsgID_name = map[int32]string{
	570: "eMsgID",
}
var GetBestTacticExecutorC2S_MsgID_value = map[string]int32{
	"eMsgID": 570,
}

func (x GetBestTacticExecutorC2S_MsgID) Enum() *GetBestTacticExecutorC2S_MsgID {
	p := new(GetBestTacticExecutorC2S_MsgID)
	*p = x
	return p
}
func (x GetBestTacticExecutorC2S_MsgID) String() string {
	return proto.EnumName(GetBestTacticExecutorC2S_MsgID_name, int32(x))
}
func (x *GetBestTacticExecutorC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GetBestTacticExecutorC2S_MsgID_value, data, "GetBestTacticExecutorC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GetBestTacticExecutorC2S_MsgID(value)
	return nil
}
func (GetBestTacticExecutorC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{70, 0}
}

type GetBestTacticExecutorS2C_MsgID int32

const (
	GetBestTacticExecutorS2C_eMsgID GetBestTacticExecutorS2C_MsgID = 570
)

var GetBestTacticExecutorS2C_MsgID_name = map[int32]string{
	570: "eMsgID",
}
var GetBestTacticExecutorS2C_MsgID_value = map[string]int32{
	"eMsgID": 570,
}

func (x GetBestTacticExecutorS2C_MsgID) Enum() *GetBestTacticExecutorS2C_MsgID {
	p := new(GetBestTacticExecutorS2C_MsgID)
	*p = x
	return p
}
func (x GetBestTacticExecutorS2C_MsgID) String() string {
	return proto.EnumName(GetBestTacticExecutorS2C_MsgID_name, int32(x))
}
func (x *GetBestTacticExecutorS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GetBestTacticExecutorS2C_MsgID_value, data, "GetBestTacticExecutorS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GetBestTacticExecutorS2C_MsgID(value)
	return nil
}
func (GetBestTacticExecutorS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{71, 0}
}

type ClientShowPlayerAttrsS2C_MsgID int32

const (
	ClientShowPlayerAttrsS2C_eMsgID ClientShowPlayerAttrsS2C_MsgID = 573
)

var ClientShowPlayerAttrsS2C_MsgID_name = map[int32]string{
	573: "eMsgID",
}
var ClientShowPlayerAttrsS2C_MsgID_value = map[string]int32{
	"eMsgID": 573,
}

func (x ClientShowPlayerAttrsS2C_MsgID) Enum() *ClientShowPlayerAttrsS2C_MsgID {
	p := new(ClientShowPlayerAttrsS2C_MsgID)
	*p = x
	return p
}
func (x ClientShowPlayerAttrsS2C_MsgID) String() string {
	return proto.EnumName(ClientShowPlayerAttrsS2C_MsgID_name, int32(x))
}
func (x *ClientShowPlayerAttrsS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientShowPlayerAttrsS2C_MsgID_value, data, "ClientShowPlayerAttrsS2C_MsgID")
	if err != nil {
		return err
	}
	*x = ClientShowPlayerAttrsS2C_MsgID(value)
	return nil
}
func (ClientShowPlayerAttrsS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{73, 0}
}

type SetExclTimePlayOrderC2S_MsgID int32

const (
	SetExclTimePlayOrderC2S_eMsgID SetExclTimePlayOrderC2S_MsgID = 574
)

var SetExclTimePlayOrderC2S_MsgID_name = map[int32]string{
	574: "eMsgID",
}
var SetExclTimePlayOrderC2S_MsgID_value = map[string]int32{
	"eMsgID": 574,
}

func (x SetExclTimePlayOrderC2S_MsgID) Enum() *SetExclTimePlayOrderC2S_MsgID {
	p := new(SetExclTimePlayOrderC2S_MsgID)
	*p = x
	return p
}
func (x SetExclTimePlayOrderC2S_MsgID) String() string {
	return proto.EnumName(SetExclTimePlayOrderC2S_MsgID_name, int32(x))
}
func (x *SetExclTimePlayOrderC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SetExclTimePlayOrderC2S_MsgID_value, data, "SetExclTimePlayOrderC2S_MsgID")
	if err != nil {
		return err
	}
	*x = SetExclTimePlayOrderC2S_MsgID(value)
	return nil
}
func (SetExclTimePlayOrderC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{74, 0}
}

type SetExclTimePlayOrderS2C_MsgID int32

const (
	SetExclTimePlayOrderS2C_eMsgID SetExclTimePlayOrderS2C_MsgID = 574
)

var SetExclTimePlayOrderS2C_MsgID_name = map[int32]string{
	574: "eMsgID",
}
var SetExclTimePlayOrderS2C_MsgID_value = map[string]int32{
	"eMsgID": 574,
}

func (x SetExclTimePlayOrderS2C_MsgID) Enum() *SetExclTimePlayOrderS2C_MsgID {
	p := new(SetExclTimePlayOrderS2C_MsgID)
	*p = x
	return p
}
func (x SetExclTimePlayOrderS2C_MsgID) String() string {
	return proto.EnumName(SetExclTimePlayOrderS2C_MsgID_name, int32(x))
}
func (x *SetExclTimePlayOrderS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SetExclTimePlayOrderS2C_MsgID_value, data, "SetExclTimePlayOrderS2C_MsgID")
	if err != nil {
		return err
	}
	*x = SetExclTimePlayOrderS2C_MsgID(value)
	return nil
}
func (SetExclTimePlayOrderS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{75, 0}
}

type FightSceneLoadedC2S_MsgID int32

const (
	FightSceneLoadedC2S_eMsgID FightSceneLoadedC2S_MsgID = 575
)

var FightSceneLoadedC2S_MsgID_name = map[int32]string{
	575: "eMsgID",
}
var FightSceneLoadedC2S_MsgID_value = map[string]int32{
	"eMsgID": 575,
}

func (x FightSceneLoadedC2S_MsgID) Enum() *FightSceneLoadedC2S_MsgID {
	p := new(FightSceneLoadedC2S_MsgID)
	*p = x
	return p
}
func (x FightSceneLoadedC2S_MsgID) String() string {
	return proto.EnumName(FightSceneLoadedC2S_MsgID_name, int32(x))
}
func (x *FightSceneLoadedC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightSceneLoadedC2S_MsgID_value, data, "FightSceneLoadedC2S_MsgID")
	if err != nil {
		return err
	}
	*x = FightSceneLoadedC2S_MsgID(value)
	return nil
}
func (FightSceneLoadedC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{76, 0}
}

type FightSceneLoadedS2C_MsgID int32

const (
	FightSceneLoadedS2C_eMsgID FightSceneLoadedS2C_MsgID = 575
)

var FightSceneLoadedS2C_MsgID_name = map[int32]string{
	575: "eMsgID",
}
var FightSceneLoadedS2C_MsgID_value = map[string]int32{
	"eMsgID": 575,
}

func (x FightSceneLoadedS2C_MsgID) Enum() *FightSceneLoadedS2C_MsgID {
	p := new(FightSceneLoadedS2C_MsgID)
	*p = x
	return p
}
func (x FightSceneLoadedS2C_MsgID) String() string {
	return proto.EnumName(FightSceneLoadedS2C_MsgID_name, int32(x))
}
func (x *FightSceneLoadedS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightSceneLoadedS2C_MsgID_value, data, "FightSceneLoadedS2C_MsgID")
	if err != nil {
		return err
	}
	*x = FightSceneLoadedS2C_MsgID(value)
	return nil
}
func (FightSceneLoadedS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{77, 0}
}

type PVPReconnectNotifyLatestDataS2C_MsgID int32

const (
	PVPReconnectNotifyLatestDataS2C_eMsgID PVPReconnectNotifyLatestDataS2C_MsgID = 576
)

var PVPReconnectNotifyLatestDataS2C_MsgID_name = map[int32]string{
	576: "eMsgID",
}
var PVPReconnectNotifyLatestDataS2C_MsgID_value = map[string]int32{
	"eMsgID": 576,
}

func (x PVPReconnectNotifyLatestDataS2C_MsgID) Enum() *PVPReconnectNotifyLatestDataS2C_MsgID {
	p := new(PVPReconnectNotifyLatestDataS2C_MsgID)
	*p = x
	return p
}
func (x PVPReconnectNotifyLatestDataS2C_MsgID) String() string {
	return proto.EnumName(PVPReconnectNotifyLatestDataS2C_MsgID_name, int32(x))
}
func (x *PVPReconnectNotifyLatestDataS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PVPReconnectNotifyLatestDataS2C_MsgID_value, data, "PVPReconnectNotifyLatestDataS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PVPReconnectNotifyLatestDataS2C_MsgID(value)
	return nil
}
func (PVPReconnectNotifyLatestDataS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{78, 0}
}

type FightOutC2S_MsgID int32

const (
	FightOutC2S_eMsgID FightOutC2S_MsgID = 555
)

var FightOutC2S_MsgID_name = map[int32]string{
	555: "eMsgID",
}
var FightOutC2S_MsgID_value = map[string]int32{
	"eMsgID": 555,
}

func (x FightOutC2S_MsgID) Enum() *FightOutC2S_MsgID {
	p := new(FightOutC2S_MsgID)
	*p = x
	return p
}
func (x FightOutC2S_MsgID) String() string {
	return proto.EnumName(FightOutC2S_MsgID_name, int32(x))
}
func (x *FightOutC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightOutC2S_MsgID_value, data, "FightOutC2S_MsgID")
	if err != nil {
		return err
	}
	*x = FightOutC2S_MsgID(value)
	return nil
}
func (FightOutC2S_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{79, 0} }

type FightOutS2C_MsgID int32

const (
	FightOutS2C_eMsgID FightOutS2C_MsgID = 555
)

var FightOutS2C_MsgID_name = map[int32]string{
	555: "eMsgID",
}
var FightOutS2C_MsgID_value = map[string]int32{
	"eMsgID": 555,
}

func (x FightOutS2C_MsgID) Enum() *FightOutS2C_MsgID {
	p := new(FightOutS2C_MsgID)
	*p = x
	return p
}
func (x FightOutS2C_MsgID) String() string {
	return proto.EnumName(FightOutS2C_MsgID_name, int32(x))
}
func (x *FightOutS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightOutS2C_MsgID_value, data, "FightOutS2C_MsgID")
	if err != nil {
		return err
	}
	*x = FightOutS2C_MsgID(value)
	return nil
}
func (FightOutS2C_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{80, 0} }

type FightTacticScoreOneC2S_MsgID int32

const (
	FightTacticScoreOneC2S_eMsgID FightTacticScoreOneC2S_MsgID = 577
)

var FightTacticScoreOneC2S_MsgID_name = map[int32]string{
	577: "eMsgID",
}
var FightTacticScoreOneC2S_MsgID_value = map[string]int32{
	"eMsgID": 577,
}

func (x FightTacticScoreOneC2S_MsgID) Enum() *FightTacticScoreOneC2S_MsgID {
	p := new(FightTacticScoreOneC2S_MsgID)
	*p = x
	return p
}
func (x FightTacticScoreOneC2S_MsgID) String() string {
	return proto.EnumName(FightTacticScoreOneC2S_MsgID_name, int32(x))
}
func (x *FightTacticScoreOneC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightTacticScoreOneC2S_MsgID_value, data, "FightTacticScoreOneC2S_MsgID")
	if err != nil {
		return err
	}
	*x = FightTacticScoreOneC2S_MsgID(value)
	return nil
}
func (FightTacticScoreOneC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{81, 0}
}

type FightTacticScoreOneS2C_MsgID int32

const (
	FightTacticScoreOneS2C_eMsgID FightTacticScoreOneS2C_MsgID = 577
)

var FightTacticScoreOneS2C_MsgID_name = map[int32]string{
	577: "eMsgID",
}
var FightTacticScoreOneS2C_MsgID_value = map[string]int32{
	"eMsgID": 577,
}

func (x FightTacticScoreOneS2C_MsgID) Enum() *FightTacticScoreOneS2C_MsgID {
	p := new(FightTacticScoreOneS2C_MsgID)
	*p = x
	return p
}
func (x FightTacticScoreOneS2C_MsgID) String() string {
	return proto.EnumName(FightTacticScoreOneS2C_MsgID_name, int32(x))
}
func (x *FightTacticScoreOneS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightTacticScoreOneS2C_MsgID_value, data, "FightTacticScoreOneS2C_MsgID")
	if err != nil {
		return err
	}
	*x = FightTacticScoreOneS2C_MsgID(value)
	return nil
}
func (FightTacticScoreOneS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{82, 0}
}

type FightTacticScoreTwoC2S_MsgID int32

const (
	FightTacticScoreTwoC2S_eMsgID FightTacticScoreTwoC2S_MsgID = 578
)

var FightTacticScoreTwoC2S_MsgID_name = map[int32]string{
	578: "eMsgID",
}
var FightTacticScoreTwoC2S_MsgID_value = map[string]int32{
	"eMsgID": 578,
}

func (x FightTacticScoreTwoC2S_MsgID) Enum() *FightTacticScoreTwoC2S_MsgID {
	p := new(FightTacticScoreTwoC2S_MsgID)
	*p = x
	return p
}
func (x FightTacticScoreTwoC2S_MsgID) String() string {
	return proto.EnumName(FightTacticScoreTwoC2S_MsgID_name, int32(x))
}
func (x *FightTacticScoreTwoC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightTacticScoreTwoC2S_MsgID_value, data, "FightTacticScoreTwoC2S_MsgID")
	if err != nil {
		return err
	}
	*x = FightTacticScoreTwoC2S_MsgID(value)
	return nil
}
func (FightTacticScoreTwoC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{83, 0}
}

type FightTacticScoreTwoS2C_MsgID int32

const (
	FightTacticScoreTwoS2C_eMsgID FightTacticScoreTwoS2C_MsgID = 578
)

var FightTacticScoreTwoS2C_MsgID_name = map[int32]string{
	578: "eMsgID",
}
var FightTacticScoreTwoS2C_MsgID_value = map[string]int32{
	"eMsgID": 578,
}

func (x FightTacticScoreTwoS2C_MsgID) Enum() *FightTacticScoreTwoS2C_MsgID {
	p := new(FightTacticScoreTwoS2C_MsgID)
	*p = x
	return p
}
func (x FightTacticScoreTwoS2C_MsgID) String() string {
	return proto.EnumName(FightTacticScoreTwoS2C_MsgID_name, int32(x))
}
func (x *FightTacticScoreTwoS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightTacticScoreTwoS2C_MsgID_value, data, "FightTacticScoreTwoS2C_MsgID")
	if err != nil {
		return err
	}
	*x = FightTacticScoreTwoS2C_MsgID(value)
	return nil
}
func (FightTacticScoreTwoS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{84, 0}
}

type FightAlreadyEndS2C_MsgID int32

const (
	FightAlreadyEndS2C_eMsgID FightAlreadyEndS2C_MsgID = 579
)

var FightAlreadyEndS2C_MsgID_name = map[int32]string{
	579: "eMsgID",
}
var FightAlreadyEndS2C_MsgID_value = map[string]int32{
	"eMsgID": 579,
}

func (x FightAlreadyEndS2C_MsgID) Enum() *FightAlreadyEndS2C_MsgID {
	p := new(FightAlreadyEndS2C_MsgID)
	*p = x
	return p
}
func (x FightAlreadyEndS2C_MsgID) String() string {
	return proto.EnumName(FightAlreadyEndS2C_MsgID_name, int32(x))
}
func (x *FightAlreadyEndS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightAlreadyEndS2C_MsgID_value, data, "FightAlreadyEndS2C_MsgID")
	if err != nil {
		return err
	}
	*x = FightAlreadyEndS2C_MsgID(value)
	return nil
}
func (FightAlreadyEndS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{85, 0}
}

type FightPowerCheckC2S_MsgID int32

const (
	FightPowerCheckC2S_eMsgID FightPowerCheckC2S_MsgID = 558
)

var FightPowerCheckC2S_MsgID_name = map[int32]string{
	558: "eMsgID",
}
var FightPowerCheckC2S_MsgID_value = map[string]int32{
	"eMsgID": 558,
}

func (x FightPowerCheckC2S_MsgID) Enum() *FightPowerCheckC2S_MsgID {
	p := new(FightPowerCheckC2S_MsgID)
	*p = x
	return p
}
func (x FightPowerCheckC2S_MsgID) String() string {
	return proto.EnumName(FightPowerCheckC2S_MsgID_name, int32(x))
}
func (x *FightPowerCheckC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightPowerCheckC2S_MsgID_value, data, "FightPowerCheckC2S_MsgID")
	if err != nil {
		return err
	}
	*x = FightPowerCheckC2S_MsgID(value)
	return nil
}
func (FightPowerCheckC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{92, 0}
}

type NotifyApplyFightBeginS2C_MsgID int32

const (
	NotifyApplyFightBeginS2C_eMsgID NotifyApplyFightBeginS2C_MsgID = 593
)

var NotifyApplyFightBeginS2C_MsgID_name = map[int32]string{
	593: "eMsgID",
}
var NotifyApplyFightBeginS2C_MsgID_value = map[string]int32{
	"eMsgID": 593,
}

func (x NotifyApplyFightBeginS2C_MsgID) Enum() *NotifyApplyFightBeginS2C_MsgID {
	p := new(NotifyApplyFightBeginS2C_MsgID)
	*p = x
	return p
}
func (x NotifyApplyFightBeginS2C_MsgID) String() string {
	return proto.EnumName(NotifyApplyFightBeginS2C_MsgID_name, int32(x))
}
func (x *NotifyApplyFightBeginS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NotifyApplyFightBeginS2C_MsgID_value, data, "NotifyApplyFightBeginS2C_MsgID")
	if err != nil {
		return err
	}
	*x = NotifyApplyFightBeginS2C_MsgID(value)
	return nil
}
func (NotifyApplyFightBeginS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{95, 0}
}

type UseHeadCoachSkillC2S_MsgID int32

const (
	UseHeadCoachSkillC2S_eMsgID UseHeadCoachSkillC2S_MsgID = 595
)

var UseHeadCoachSkillC2S_MsgID_name = map[int32]string{
	595: "eMsgID",
}
var UseHeadCoachSkillC2S_MsgID_value = map[string]int32{
	"eMsgID": 595,
}

func (x UseHeadCoachSkillC2S_MsgID) Enum() *UseHeadCoachSkillC2S_MsgID {
	p := new(UseHeadCoachSkillC2S_MsgID)
	*p = x
	return p
}
func (x UseHeadCoachSkillC2S_MsgID) String() string {
	return proto.EnumName(UseHeadCoachSkillC2S_MsgID_name, int32(x))
}
func (x *UseHeadCoachSkillC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UseHeadCoachSkillC2S_MsgID_value, data, "UseHeadCoachSkillC2S_MsgID")
	if err != nil {
		return err
	}
	*x = UseHeadCoachSkillC2S_MsgID(value)
	return nil
}
func (UseHeadCoachSkillC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{96, 0}
}

type UseHeadCoachSkillS2C_MsgID int32

const (
	UseHeadCoachSkillS2C_eMsgID UseHeadCoachSkillS2C_MsgID = 595
)

var UseHeadCoachSkillS2C_MsgID_name = map[int32]string{
	595: "eMsgID",
}
var UseHeadCoachSkillS2C_MsgID_value = map[string]int32{
	"eMsgID": 595,
}

func (x UseHeadCoachSkillS2C_MsgID) Enum() *UseHeadCoachSkillS2C_MsgID {
	p := new(UseHeadCoachSkillS2C_MsgID)
	*p = x
	return p
}
func (x UseHeadCoachSkillS2C_MsgID) String() string {
	return proto.EnumName(UseHeadCoachSkillS2C_MsgID_name, int32(x))
}
func (x *UseHeadCoachSkillS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UseHeadCoachSkillS2C_MsgID_value, data, "UseHeadCoachSkillS2C_MsgID")
	if err != nil {
		return err
	}
	*x = UseHeadCoachSkillS2C_MsgID(value)
	return nil
}
func (UseHeadCoachSkillS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{97, 0}
}

type NotifyHeadCoachSkillS2C_MsgID int32

const (
	NotifyHeadCoachSkillS2C_eMsgID NotifyHeadCoachSkillS2C_MsgID = 596
)

var NotifyHeadCoachSkillS2C_MsgID_name = map[int32]string{
	596: "eMsgID",
}
var NotifyHeadCoachSkillS2C_MsgID_value = map[string]int32{
	"eMsgID": 596,
}

func (x NotifyHeadCoachSkillS2C_MsgID) Enum() *NotifyHeadCoachSkillS2C_MsgID {
	p := new(NotifyHeadCoachSkillS2C_MsgID)
	*p = x
	return p
}
func (x NotifyHeadCoachSkillS2C_MsgID) String() string {
	return proto.EnumName(NotifyHeadCoachSkillS2C_MsgID_name, int32(x))
}
func (x *NotifyHeadCoachSkillS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NotifyHeadCoachSkillS2C_MsgID_value, data, "NotifyHeadCoachSkillS2C_MsgID")
	if err != nil {
		return err
	}
	*x = NotifyHeadCoachSkillS2C_MsgID(value)
	return nil
}
func (NotifyHeadCoachSkillS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor23, []int{98, 0}
}

// 战斗保存数据
type FightData struct {
	// 战斗id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 战斗服id
	FsId *int32 `protobuf:"varint,2,opt,name=fsId" json:"fsId,omitempty"`
	// 比赛类型
	MatchType        *MatchType `protobuf:"varint,3,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FightData) Reset()                    { *m = FightData{} }
func (m *FightData) String() string            { return proto.CompactTextString(m) }
func (*FightData) ProtoMessage()               {}
func (*FightData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{0} }

func (m *FightData) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *FightData) GetFsId() int32 {
	if m != nil && m.FsId != nil {
		return *m.FsId
	}
	return 0
}

func (m *FightData) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

type BuffInfo struct {
	//  buffId 每个buff生效时不处理添加buff效果
	BuffId *int32 `protobuf:"varint,1,opt,name=buffId" json:"buffId,omitempty"`
	// buff主id
	BuffMainId *int32 `protobuf:"varint,2,opt,name=buffMainId" json:"buffMainId,omitempty"`
	// buff等级
	BuffLv *int32 `protobuf:"varint,3,opt,name=buffLv" json:"buffLv,omitempty"`
	// buff层数（层数不是等级）
	BuffLayer        *int32 `protobuf:"varint,4,opt,name=buffLayer" json:"buffLayer,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BuffInfo) Reset()                    { *m = BuffInfo{} }
func (m *BuffInfo) String() string            { return proto.CompactTextString(m) }
func (*BuffInfo) ProtoMessage()               {}
func (*BuffInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{1} }

func (m *BuffInfo) GetBuffId() int32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *BuffInfo) GetBuffMainId() int32 {
	if m != nil && m.BuffMainId != nil {
		return *m.BuffMainId
	}
	return 0
}

func (m *BuffInfo) GetBuffLv() int32 {
	if m != nil && m.BuffLv != nil {
		return *m.BuffLv
	}
	return 0
}

func (m *BuffInfo) GetBuffLayer() int32 {
	if m != nil && m.BuffLayer != nil {
		return *m.BuffLayer
	}
	return 0
}

type FightBuffData struct {
	BuffInfo *BuffInfo `protobuf:"bytes,1,opt,name=buffInfo" json:"buffInfo,omitempty"`
	// 触发间隔
	GapRound *int32 `protobuf:"varint,2,opt,name=gapRound" json:"gapRound,omitempty"`
	// 触发类型次数
	TrigCount        *TypeValueConfig `protobuf:"bytes,3,opt,name=trigCount" json:"trigCount,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *FightBuffData) Reset()                    { *m = FightBuffData{} }
func (m *FightBuffData) String() string            { return proto.CompactTextString(m) }
func (*FightBuffData) ProtoMessage()               {}
func (*FightBuffData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{2} }

func (m *FightBuffData) GetBuffInfo() *BuffInfo {
	if m != nil {
		return m.BuffInfo
	}
	return nil
}

func (m *FightBuffData) GetGapRound() int32 {
	if m != nil && m.GapRound != nil {
		return *m.GapRound
	}
	return 0
}

func (m *FightBuffData) GetTrigCount() *TypeValueConfig {
	if m != nil {
		return m.TrigCount
	}
	return nil
}

// 衍生buff
type DeriveBuffData struct {
	BuffInfo *BuffInfo `protobuf:"bytes,1,opt,name=buffInfo" json:"buffInfo,omitempty"`
	// duration（持续时间）
	Duration         *TypeValueConfig `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DeriveBuffData) Reset()                    { *m = DeriveBuffData{} }
func (m *DeriveBuffData) String() string            { return proto.CompactTextString(m) }
func (*DeriveBuffData) ProtoMessage()               {}
func (*DeriveBuffData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{3} }

func (m *DeriveBuffData) GetBuffInfo() *BuffInfo {
	if m != nil {
		return m.BuffInfo
	}
	return nil
}

func (m *DeriveBuffData) GetDuration() *TypeValueConfig {
	if m != nil {
		return m.Duration
	}
	return nil
}

// 球员专属时刻
type ExclusiveTimeInfo struct {
	// id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// branchType
	BranchType *int32 `protobuf:"varint,2,opt,name=branchType" json:"branchType,omitempty"`
	// 冷却间隔
	GapRound *int32 `protobuf:"varint,3,opt,name=gapRound" json:"gapRound,omitempty"`
	// 专属点
	Point            *int32 `protobuf:"varint,4,opt,name=point" json:"point,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExclusiveTimeInfo) Reset()                    { *m = ExclusiveTimeInfo{} }
func (m *ExclusiveTimeInfo) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveTimeInfo) ProtoMessage()               {}
func (*ExclusiveTimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{4} }

func (m *ExclusiveTimeInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExclusiveTimeInfo) GetBranchType() int32 {
	if m != nil && m.BranchType != nil {
		return *m.BranchType
	}
	return 0
}

func (m *ExclusiveTimeInfo) GetGapRound() int32 {
	if m != nil && m.GapRound != nil {
		return *m.GapRound
	}
	return 0
}

func (m *ExclusiveTimeInfo) GetPoint() int32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

type ExclusiveTimeData struct {
	// 专属动作触发id
	ExclusiveTrig *int32 `protobuf:"varint,1,opt,name=exclusiveTrig" json:"exclusiveTrig,omitempty"`
	// 专属时刻
	ExclusiveInfos   []*ExclusiveTimeInfo `protobuf:"bytes,2,rep,name=exclusiveInfos" json:"exclusiveInfos,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ExclusiveTimeData) Reset()                    { *m = ExclusiveTimeData{} }
func (m *ExclusiveTimeData) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveTimeData) ProtoMessage()               {}
func (*ExclusiveTimeData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{5} }

func (m *ExclusiveTimeData) GetExclusiveTrig() int32 {
	if m != nil && m.ExclusiveTrig != nil {
		return *m.ExclusiveTrig
	}
	return 0
}

func (m *ExclusiveTimeData) GetExclusiveInfos() []*ExclusiveTimeInfo {
	if m != nil {
		return m.ExclusiveInfos
	}
	return nil
}

// 比赛上阵球员数据
type MatchPlayerData struct {
	InstanceID     *int64            `protobuf:"varint,1,opt,name=instanceID" json:"instanceID,omitempty"`
	PlayerID       *int32            `protobuf:"varint,2,opt,name=playerID" json:"playerID,omitempty"`
	Power          *int32            `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`
	IsNpc          *bool             `protobuf:"varint,4,opt,name=isNpc" json:"isNpc,omitempty"`
	FirstPlace     *int32            `protobuf:"varint,5,opt,name=firstPlace" json:"firstPlace,omitempty"`
	IsStarter      *bool             `protobuf:"varint,6,opt,name=isStarter" json:"isStarter,omitempty"`
	NpcParamID     *int32            `protobuf:"varint,7,opt,name=npcParamID" json:"npcParamID,omitempty"`
	Lv             *int32            `protobuf:"varint,8,opt,name=lv" json:"lv,omitempty"`
	Star           *int32            `protobuf:"varint,9,opt,name=star" json:"star,omitempty"`
	Attribute      []int32           `protobuf:"varint,10,rep,name=attribute" json:"attribute,omitempty"`
	Height         *int32            `protobuf:"varint,11,opt,name=height" json:"height,omitempty"`
	Vit            *int32            `protobuf:"varint,12,opt,name=vit" json:"vit,omitempty"`
	VitChange      *bool             `protobuf:"varint,13,opt,name=vitChange" json:"vitChange,omitempty"`
	Data           []int32           `protobuf:"varint,14,rep,name=data" json:"data,omitempty"`
	IsPlayed       *bool             `protobuf:"varint,15,opt,name=isPlayed" json:"isPlayed,omitempty"`
	BuffAttribute  []int32           `protobuf:"varint,16,rep,name=BuffAttribute" json:"BuffAttribute,omitempty"`
	BuffChange     *bool             `protobuf:"varint,17,opt,name=buffChange" json:"buffChange,omitempty"`
	PlayerExp      *int32            `protobuf:"varint,18,opt,name=playerExp" json:"playerExp,omitempty"`
	IsShouFa       *bool             `protobuf:"varint,19,opt,name=isShouFa" json:"isShouFa,omitempty"`
	OriPlace       *int32            `protobuf:"varint,20,opt,name=oriPlace" json:"oriPlace,omitempty"`
	FightBuffData  []*FightBuffData  `protobuf:"bytes,21,rep,name=fightBuffData" json:"fightBuffData,omitempty"`
	DeriveBuffData []*DeriveBuffData `protobuf:"bytes,22,rep,name=deriveBuffData" json:"deriveBuffData,omitempty"`
	VitSpeed       *int32            `protobuf:"varint,23,opt,name=vitSpeed" json:"vitSpeed,omitempty"`
	// 专属时刻
	ExclusiveTimeData *ExclusiveTimeData `protobuf:"bytes,24,opt,name=exclusiveTimeData" json:"exclusiveTimeData,omitempty"`
	// 自定义球员特征
	Customer *CustomPlayerTrait `protobuf:"bytes,25,opt,name=customer" json:"customer,omitempty"`
	// 绰号[是否激活，是否展示]
	NickActive []bool `protobuf:"varint,26,rep,name=nick_active" json:"nick_active,omitempty"`
	// 球鞋（未准备为0）
	SneakerId *int32 `protobuf:"varint,27,opt,name=sneakerId" json:"sneakerId,omitempty"`
	// 球员阶级(仅供npc或展示使用)
	Class            *int32 `protobuf:"varint,28,opt,name=class" json:"class,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchPlayerData) Reset()                    { *m = MatchPlayerData{} }
func (m *MatchPlayerData) String() string            { return proto.CompactTextString(m) }
func (*MatchPlayerData) ProtoMessage()               {}
func (*MatchPlayerData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{6} }

func (m *MatchPlayerData) GetInstanceID() int64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *MatchPlayerData) GetPlayerID() int32 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *MatchPlayerData) GetPower() int32 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *MatchPlayerData) GetIsNpc() bool {
	if m != nil && m.IsNpc != nil {
		return *m.IsNpc
	}
	return false
}

func (m *MatchPlayerData) GetFirstPlace() int32 {
	if m != nil && m.FirstPlace != nil {
		return *m.FirstPlace
	}
	return 0
}

func (m *MatchPlayerData) GetIsStarter() bool {
	if m != nil && m.IsStarter != nil {
		return *m.IsStarter
	}
	return false
}

func (m *MatchPlayerData) GetNpcParamID() int32 {
	if m != nil && m.NpcParamID != nil {
		return *m.NpcParamID
	}
	return 0
}

func (m *MatchPlayerData) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *MatchPlayerData) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *MatchPlayerData) GetAttribute() []int32 {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *MatchPlayerData) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *MatchPlayerData) GetVit() int32 {
	if m != nil && m.Vit != nil {
		return *m.Vit
	}
	return 0
}

func (m *MatchPlayerData) GetVitChange() bool {
	if m != nil && m.VitChange != nil {
		return *m.VitChange
	}
	return false
}

func (m *MatchPlayerData) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MatchPlayerData) GetIsPlayed() bool {
	if m != nil && m.IsPlayed != nil {
		return *m.IsPlayed
	}
	return false
}

func (m *MatchPlayerData) GetBuffAttribute() []int32 {
	if m != nil {
		return m.BuffAttribute
	}
	return nil
}

func (m *MatchPlayerData) GetBuffChange() bool {
	if m != nil && m.BuffChange != nil {
		return *m.BuffChange
	}
	return false
}

func (m *MatchPlayerData) GetPlayerExp() int32 {
	if m != nil && m.PlayerExp != nil {
		return *m.PlayerExp
	}
	return 0
}

func (m *MatchPlayerData) GetIsShouFa() bool {
	if m != nil && m.IsShouFa != nil {
		return *m.IsShouFa
	}
	return false
}

func (m *MatchPlayerData) GetOriPlace() int32 {
	if m != nil && m.OriPlace != nil {
		return *m.OriPlace
	}
	return 0
}

func (m *MatchPlayerData) GetFightBuffData() []*FightBuffData {
	if m != nil {
		return m.FightBuffData
	}
	return nil
}

func (m *MatchPlayerData) GetDeriveBuffData() []*DeriveBuffData {
	if m != nil {
		return m.DeriveBuffData
	}
	return nil
}

func (m *MatchPlayerData) GetVitSpeed() int32 {
	if m != nil && m.VitSpeed != nil {
		return *m.VitSpeed
	}
	return 0
}

func (m *MatchPlayerData) GetExclusiveTimeData() *ExclusiveTimeData {
	if m != nil {
		return m.ExclusiveTimeData
	}
	return nil
}

func (m *MatchPlayerData) GetCustomer() *CustomPlayerTrait {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *MatchPlayerData) GetNickActive() []bool {
	if m != nil {
		return m.NickActive
	}
	return nil
}

func (m *MatchPlayerData) GetSneakerId() int32 {
	if m != nil && m.SneakerId != nil {
		return *m.SneakerId
	}
	return 0
}

func (m *MatchPlayerData) GetClass() int32 {
	if m != nil && m.Class != nil {
		return *m.Class
	}
	return 0
}

// 战斗房间临时转换数据
type BattleTempConvertData struct {
	// buffID
	BuffID *int32 `protobuf:"varint,1,opt,name=buffID" json:"buffID,omitempty"`
	// 触发效果对象:(1.己方球员;2.对手球员)
	TakeEffectObj *int32 `protobuf:"varint,2,opt,name=takeEffectObj" json:"takeEffectObj,omitempty"`
	// 效果开始时机
	EffectStart *string `protobuf:"bytes,3,opt,name=effectStart" json:"effectStart,omitempty"`
	// 效果结束时机
	EffectEnd *string `protobuf:"bytes,4,opt,name=effectEnd" json:"effectEnd,omitempty"`
	// 效果参数
	EffectParam *string `protobuf:"bytes,5,opt,name=effectParam" json:"effectParam,omitempty"`
	// buff主ID
	MainID *int32 `protobuf:"varint,6,opt,name=mainID" json:"mainID,omitempty"`
	// BUFF叠加模式类型
	CompositionType *int32 `protobuf:"varint,7,opt,name=compositionType" json:"compositionType,omitempty"`
	// 效果类型:(1.球员属性修改;2.BUFF添加;3.BUFF清除;4.BUFF免疫;5.对位体能消耗)
	EffectType *int32 `protobuf:"varint,8,opt,name=effectType" json:"effectType,omitempty"`
	// 触发效果子对象:(0.当前球员自身;1.位置为1号位的球员;2.位置为2号位的球员...)
	TakeEffectSubObj *int32 `protobuf:"varint,9,opt,name=takeEffectSubObj" json:"takeEffectSubObj,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BattleTempConvertData) Reset()                    { *m = BattleTempConvertData{} }
func (m *BattleTempConvertData) String() string            { return proto.CompactTextString(m) }
func (*BattleTempConvertData) ProtoMessage()               {}
func (*BattleTempConvertData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{7} }

func (m *BattleTempConvertData) GetBuffID() int32 {
	if m != nil && m.BuffID != nil {
		return *m.BuffID
	}
	return 0
}

func (m *BattleTempConvertData) GetTakeEffectObj() int32 {
	if m != nil && m.TakeEffectObj != nil {
		return *m.TakeEffectObj
	}
	return 0
}

func (m *BattleTempConvertData) GetEffectStart() string {
	if m != nil && m.EffectStart != nil {
		return *m.EffectStart
	}
	return ""
}

func (m *BattleTempConvertData) GetEffectEnd() string {
	if m != nil && m.EffectEnd != nil {
		return *m.EffectEnd
	}
	return ""
}

func (m *BattleTempConvertData) GetEffectParam() string {
	if m != nil && m.EffectParam != nil {
		return *m.EffectParam
	}
	return ""
}

func (m *BattleTempConvertData) GetMainID() int32 {
	if m != nil && m.MainID != nil {
		return *m.MainID
	}
	return 0
}

func (m *BattleTempConvertData) GetCompositionType() int32 {
	if m != nil && m.CompositionType != nil {
		return *m.CompositionType
	}
	return 0
}

func (m *BattleTempConvertData) GetEffectType() int32 {
	if m != nil && m.EffectType != nil {
		return *m.EffectType
	}
	return 0
}

func (m *BattleTempConvertData) GetTakeEffectSubObj() int32 {
	if m != nil && m.TakeEffectSubObj != nil {
		return *m.TakeEffectSubObj
	}
	return 0
}

// 比赛内调整的阵容球员数据
type MacthChapterTeamChangePlayer struct {
	// 球员模型ID
	PlayerID *int32 `protobuf:"varint,1,opt,name=playerID" json:"playerID,omitempty"`
	// 是否上场
	IsStarter *bool `protobuf:"varint,2,opt,name=isStarter" json:"isStarter,omitempty"`
	// 位置
	Place *int32 `protobuf:"varint,3,opt,name=place" json:"place,omitempty"`
	// 是否NPC
	IsNpc            *bool  `protobuf:"varint,4,opt,name=isNpc" json:"isNpc,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MacthChapterTeamChangePlayer) Reset()                    { *m = MacthChapterTeamChangePlayer{} }
func (m *MacthChapterTeamChangePlayer) String() string            { return proto.CompactTextString(m) }
func (*MacthChapterTeamChangePlayer) ProtoMessage()               {}
func (*MacthChapterTeamChangePlayer) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{8} }

func (m *MacthChapterTeamChangePlayer) GetPlayerID() int32 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *MacthChapterTeamChangePlayer) GetIsStarter() bool {
	if m != nil && m.IsStarter != nil {
		return *m.IsStarter
	}
	return false
}

func (m *MacthChapterTeamChangePlayer) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

func (m *MacthChapterTeamChangePlayer) GetIsNpc() bool {
	if m != nil && m.IsNpc != nil {
		return *m.IsNpc
	}
	return false
}

// 比赛上阵队伍数据
type MatchTeamData struct {
	// 队伍ID
	TeamID *int32 `protobuf:"varint,1,opt,name=teamID" json:"teamID,omitempty"`
	// 上阵球员数据
	PlayerData []*MatchPlayerData `protobuf:"bytes,2,rep,name=playerData" json:"playerData,omitempty"`
	// 是否主场
	IsHomeCourt *bool `protobuf:"varint,3,opt,name=isHomeCourt" json:"isHomeCourt,omitempty"`
	// 队伍名
	TeamName *string `protobuf:"bytes,4,opt,name=teamName" json:"teamName,omitempty"`
	// 战斗力
	FightPower *uint64 `protobuf:"varint,6,opt,name=fightPower" json:"fightPower,omitempty"`
	// 球衣（时装）（没有时装id为0）
	TeamDress *int32 `protobuf:"varint,7,opt,name=teamDress" json:"teamDress,omitempty"`
	// 教练技能列表
	HeadCoachSkills []int32 `protobuf:"varint,8,rep,name=headCoachSkills" json:"headCoachSkills,omitempty"`
	// 队伍名文本id
	TeamNameT *int32 `protobuf:"varint,9,opt,name=teamNameT" json:"teamNameT,omitempty"`
	// 玩家等级(竞技场和无双竞技场使用，其他类型待新增)
	Level            *int32 `protobuf:"varint,10,opt,name=level" json:"level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchTeamData) Reset()                    { *m = MatchTeamData{} }
func (m *MatchTeamData) String() string            { return proto.CompactTextString(m) }
func (*MatchTeamData) ProtoMessage()               {}
func (*MatchTeamData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{9} }

func (m *MatchTeamData) GetTeamID() int32 {
	if m != nil && m.TeamID != nil {
		return *m.TeamID
	}
	return 0
}

func (m *MatchTeamData) GetPlayerData() []*MatchPlayerData {
	if m != nil {
		return m.PlayerData
	}
	return nil
}

func (m *MatchTeamData) GetIsHomeCourt() bool {
	if m != nil && m.IsHomeCourt != nil {
		return *m.IsHomeCourt
	}
	return false
}

func (m *MatchTeamData) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *MatchTeamData) GetFightPower() uint64 {
	if m != nil && m.FightPower != nil {
		return *m.FightPower
	}
	return 0
}

func (m *MatchTeamData) GetTeamDress() int32 {
	if m != nil && m.TeamDress != nil {
		return *m.TeamDress
	}
	return 0
}

func (m *MatchTeamData) GetHeadCoachSkills() []int32 {
	if m != nil {
		return m.HeadCoachSkills
	}
	return nil
}

func (m *MatchTeamData) GetTeamNameT() int32 {
	if m != nil && m.TeamNameT != nil {
		return *m.TeamNameT
	}
	return 0
}

func (m *MatchTeamData) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

// 获取比赛前信息
type GamerGetMatchInfoC2S struct {
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,1,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛ID
	MatchID *int32 `protobuf:"varint,2,opt,name=matchID" json:"matchID,omitempty"`
	// 普通关卡调整阵容信息
	PlayerInfo []*MacthChapterTeamChangePlayer `protobuf:"bytes,3,rep,name=playerInfo" json:"playerInfo,omitempty"`
	// pvp是否是机器人
	IsRobot *bool `protobuf:"varint,4,opt,name=isRobot" json:"isRobot,omitempty"`
	// 是否跳过前三节
	IsSkip3Quarter *bool `protobuf:"varint,5,opt,name=isSkip3Quarter" json:"isSkip3Quarter,omitempty"`
	// 比赛回放id
	Uuid *int64 `protobuf:"varint,6,opt,name=uuid" json:"uuid,omitempty"`
	// 扩展数据
	Extra *string `protobuf:"bytes,7,opt,name=extra" json:"extra,omitempty"`
	// 是否跳过比赛
	IsSkipFight *bool `protobuf:"varint,8,opt,name=isSkipFight" json:"isSkipFight,omitempty"`
	// 回放类型（0：不是回放， 1一般回放，2特殊回放）
	ReplayType *ReplayType `protobuf:"varint,9,opt,name=replayType,enum=ReplayType" json:"replayType,omitempty"`
	// gid
	Gid              *int32 `protobuf:"varint,10,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerGetMatchInfoC2S) Reset()                    { *m = GamerGetMatchInfoC2S{} }
func (m *GamerGetMatchInfoC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerGetMatchInfoC2S) ProtoMessage()               {}
func (*GamerGetMatchInfoC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{10} }

func (m *GamerGetMatchInfoC2S) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *GamerGetMatchInfoC2S) GetMatchID() int32 {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return 0
}

func (m *GamerGetMatchInfoC2S) GetPlayerInfo() []*MacthChapterTeamChangePlayer {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *GamerGetMatchInfoC2S) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *GamerGetMatchInfoC2S) GetIsSkip3Quarter() bool {
	if m != nil && m.IsSkip3Quarter != nil {
		return *m.IsSkip3Quarter
	}
	return false
}

func (m *GamerGetMatchInfoC2S) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *GamerGetMatchInfoC2S) GetExtra() string {
	if m != nil && m.Extra != nil {
		return *m.Extra
	}
	return ""
}

func (m *GamerGetMatchInfoC2S) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

func (m *GamerGetMatchInfoC2S) GetReplayType() ReplayType {
	if m != nil && m.ReplayType != nil {
		return *m.ReplayType
	}
	return ReplayType_RT_NO
}

func (m *GamerGetMatchInfoC2S) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

// 赛前一只队伍的基本信息
type BattleStartBaseInfo struct {
	// pid
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// 阵容信息
	TeamInfo *MatchTeamData `protobuf:"bytes,2,opt,name=TeamInfo" json:"TeamInfo,omitempty"`
	// 己方战术集合
	TacticsExecutors []*TacticsExecutor `protobuf:"bytes,3,rep,name=TacticsExecutors" json:"TacticsExecutors,omitempty"`
	// 进攻战术
	AtkTactic *TacticsInfo `protobuf:"bytes,4,opt,name=AtkTactic" json:"AtkTactic,omitempty"`
	// 防守战术
	DefTactic *TacticsInfo `protobuf:"bytes,5,opt,name=defTactic" json:"defTactic,omitempty"`
	// 得分
	Score *int32 `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
	// 方向 1:左 2:右
	Direction *int32 `protobuf:"varint,7,opt,name=direction" json:"direction,omitempty"`
	// 阵营
	Camp             *int32 `protobuf:"varint,8,opt,name=camp" json:"camp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BattleStartBaseInfo) Reset()                    { *m = BattleStartBaseInfo{} }
func (m *BattleStartBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*BattleStartBaseInfo) ProtoMessage()               {}
func (*BattleStartBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{11} }

func (m *BattleStartBaseInfo) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *BattleStartBaseInfo) GetTeamInfo() *MatchTeamData {
	if m != nil {
		return m.TeamInfo
	}
	return nil
}

func (m *BattleStartBaseInfo) GetTacticsExecutors() []*TacticsExecutor {
	if m != nil {
		return m.TacticsExecutors
	}
	return nil
}

func (m *BattleStartBaseInfo) GetAtkTactic() *TacticsInfo {
	if m != nil {
		return m.AtkTactic
	}
	return nil
}

func (m *BattleStartBaseInfo) GetDefTactic() *TacticsInfo {
	if m != nil {
		return m.DefTactic
	}
	return nil
}

func (m *BattleStartBaseInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *BattleStartBaseInfo) GetDirection() int32 {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return 0
}

func (m *BattleStartBaseInfo) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

// 战术执行人
type TacticsExecutor struct {
	TacticId         *int32  `protobuf:"varint,1,opt,name=tacticId" json:"tacticId,omitempty"`
	Executors        []int32 `protobuf:"varint,2,rep,name=executors" json:"executors,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TacticsExecutor) Reset()                    { *m = TacticsExecutor{} }
func (m *TacticsExecutor) String() string            { return proto.CompactTextString(m) }
func (*TacticsExecutor) ProtoMessage()               {}
func (*TacticsExecutor) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{12} }

func (m *TacticsExecutor) GetTacticId() int32 {
	if m != nil && m.TacticId != nil {
		return *m.TacticId
	}
	return 0
}

func (m *TacticsExecutor) GetExecutors() []int32 {
	if m != nil {
		return m.Executors
	}
	return nil
}

// 战术信息
type TacticsInfo struct {
	TacticId         *int32 `protobuf:"varint,1,opt,name=tacticId" json:"tacticId,omitempty"`
	ExecuteEffect    *int32 `protobuf:"varint,2,opt,name=executeEffect" json:"executeEffect,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TacticsInfo) Reset()                    { *m = TacticsInfo{} }
func (m *TacticsInfo) String() string            { return proto.CompactTextString(m) }
func (*TacticsInfo) ProtoMessage()               {}
func (*TacticsInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{13} }

func (m *TacticsInfo) GetTacticId() int32 {
	if m != nil && m.TacticId != nil {
		return *m.TacticId
	}
	return 0
}

func (m *TacticsInfo) GetExecuteEffect() int32 {
	if m != nil && m.ExecuteEffect != nil {
		return *m.ExecuteEffect
	}
	return 0
}

type FightRoomParam struct {
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,1,opt,name=MatchType,enum=MatchType" json:"MatchType,omitempty"`
	// 比赛id
	MatchID *int32 `protobuf:"varint,2,opt,name=matchID" json:"matchID,omitempty"`
	// 场地id
	FieldId *int32 `protobuf:"varint,3,opt,name=fieldId" json:"fieldId,omitempty"`
	// 对手是否机器人
	IsRobot *bool `protobuf:"varint,4,opt,name=isRobot" json:"isRobot,omitempty"`
	// 是否跳过前三节
	IsSkip3Quarter *bool `protobuf:"varint,5,opt,name=isSkip3Quarter" json:"isSkip3Quarter,omitempty"`
	// 跳过比赛
	IsSkipFight *bool `protobuf:"varint,6,opt,name=isSkipFight" json:"isSkipFight,omitempty"`
	// 是否可以跳过(0:不可跳过，1立即跳过，2,一分钟后跳过)
	CanJump *JumpFightStatus `protobuf:"varint,7,opt,name=canJump,enum=JumpFightStatus" json:"canJump,omitempty"`
	// 比赛场次
	FightNumber *int32 `protobuf:"varint,8,opt,name=fightNumber" json:"fightNumber,omitempty"`
	// 树名称（新手引导战斗用）
	TreeName *string `protobuf:"bytes,9,opt,name=treeName" json:"treeName,omitempty"`
	// 加速倍数
	FastMultiple *int32 `protobuf:"varint,10,opt,name=fastMultiple" json:"fastMultiple,omitempty"`
	// extraParam2
	Param2 *int32 `protobuf:"varint,11,opt,name=param2" json:"param2,omitempty"`
	// 回放id
	ReplayId *int64 `protobuf:"varint,12,opt,name=replayId" json:"replayId,omitempty"`
	// 显示日志
	ShowLogFlag      *bool  `protobuf:"varint,13,opt,name=showLogFlag" json:"showLogFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightRoomParam) Reset()                    { *m = FightRoomParam{} }
func (m *FightRoomParam) String() string            { return proto.CompactTextString(m) }
func (*FightRoomParam) ProtoMessage()               {}
func (*FightRoomParam) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{14} }

func (m *FightRoomParam) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *FightRoomParam) GetMatchID() int32 {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return 0
}

func (m *FightRoomParam) GetFieldId() int32 {
	if m != nil && m.FieldId != nil {
		return *m.FieldId
	}
	return 0
}

func (m *FightRoomParam) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *FightRoomParam) GetIsSkip3Quarter() bool {
	if m != nil && m.IsSkip3Quarter != nil {
		return *m.IsSkip3Quarter
	}
	return false
}

func (m *FightRoomParam) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

func (m *FightRoomParam) GetCanJump() JumpFightStatus {
	if m != nil && m.CanJump != nil {
		return *m.CanJump
	}
	return JumpFightStatus_JFS_NOTJUMP
}

func (m *FightRoomParam) GetFightNumber() int32 {
	if m != nil && m.FightNumber != nil {
		return *m.FightNumber
	}
	return 0
}

func (m *FightRoomParam) GetTreeName() string {
	if m != nil && m.TreeName != nil {
		return *m.TreeName
	}
	return ""
}

func (m *FightRoomParam) GetFastMultiple() int32 {
	if m != nil && m.FastMultiple != nil {
		return *m.FastMultiple
	}
	return 0
}

func (m *FightRoomParam) GetParam2() int32 {
	if m != nil && m.Param2 != nil {
		return *m.Param2
	}
	return 0
}

func (m *FightRoomParam) GetReplayId() int64 {
	if m != nil && m.ReplayId != nil {
		return *m.ReplayId
	}
	return 0
}

func (m *FightRoomParam) GetShowLogFlag() bool {
	if m != nil && m.ShowLogFlag != nil {
		return *m.ShowLogFlag
	}
	return false
}

// 获取比赛前信息
type GamerGetMatchInfoS2C struct {
	// 比赛参数
	FightParam *FightRoomParam `protobuf:"bytes,1,opt,name=fightParam" json:"fightParam,omitempty"`
	// 队伍基本信息
	BaseInfos []*BattleStartBaseInfo `protobuf:"bytes,2,rep,name=baseInfos" json:"baseInfos,omitempty"`
	// 当前第几节
	NowQuarter *int32 `protobuf:"varint,3,opt,name=nowQuarter" json:"nowQuarter,omitempty"`
	// 这一节还剩多少秒
	SurplusSecond *float64 `protobuf:"fixed64,4,opt,name=surplusSecond" json:"surplusSecond,omitempty"`
	// 我的id
	Pid *int64 `protobuf:"varint,5,opt,name=pid" json:"pid,omitempty"`
	// 比赛回放id
	Uuid *int64 `protobuf:"varint,6,opt,name=uuid" json:"uuid,omitempty"`
	// 当前玩家是否在场（0：不在，1主场，2客场）
	OnLine *int32 `protobuf:"varint,7,opt,name=onLine" json:"onLine,omitempty"`
	// 战斗控制台id
	ConsoleId *int64 `protobuf:"varint,8,opt,name=consoleId" json:"consoleId,omitempty"`
	// 是否重入战斗
	IsReenter *bool `protobuf:"varint,9,opt,name=isReenter" json:"isReenter,omitempty"`
	// 战斗服id
	FsId *int32 `protobuf:"varint,10,opt,name=fsId" json:"fsId,omitempty"`
	// 阵营得分
	CampScores []*CampScoreInfo `protobuf:"bytes,11,rep,name=campScores" json:"campScores,omitempty"`
	// 收视人数增量(传奇挑战赛专用)
	ViewershipIncr *int32 `protobuf:"varint,12,opt,name=viewershipIncr" json:"viewershipIncr,omitempty"`
	// 房间id
	RoomId *int64 `protobuf:"varint,13,opt,name=roomId" json:"roomId,omitempty"`
	// 上一次比赛结果
	LastRes []*LastFightRes `protobuf:"bytes,14,rep,name=lastRes" json:"lastRes,omitempty"`
	// bout 比赛回合（回放时使用）
	Bout *int32 `protobuf:"varint,15,opt,name=bout" json:"bout,omitempty"`
	// gid （回放时使用）
	Gid *int32 `protobuf:"varint,16,opt,name=gid" json:"gid,omitempty"`
	// behaviourId 常规赛最终时刻解说使用（配置id）
	BehaviourId      *int32 `protobuf:"varint,17,opt,name=behaviourId" json:"behaviourId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerGetMatchInfoS2C) Reset()                    { *m = GamerGetMatchInfoS2C{} }
func (m *GamerGetMatchInfoS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerGetMatchInfoS2C) ProtoMessage()               {}
func (*GamerGetMatchInfoS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{15} }

func (m *GamerGetMatchInfoS2C) GetFightParam() *FightRoomParam {
	if m != nil {
		return m.FightParam
	}
	return nil
}

func (m *GamerGetMatchInfoS2C) GetBaseInfos() []*BattleStartBaseInfo {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

func (m *GamerGetMatchInfoS2C) GetNowQuarter() int32 {
	if m != nil && m.NowQuarter != nil {
		return *m.NowQuarter
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetSurplusSecond() float64 {
	if m != nil && m.SurplusSecond != nil {
		return *m.SurplusSecond
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetOnLine() int32 {
	if m != nil && m.OnLine != nil {
		return *m.OnLine
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetIsReenter() bool {
	if m != nil && m.IsReenter != nil {
		return *m.IsReenter
	}
	return false
}

func (m *GamerGetMatchInfoS2C) GetFsId() int32 {
	if m != nil && m.FsId != nil {
		return *m.FsId
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetCampScores() []*CampScoreInfo {
	if m != nil {
		return m.CampScores
	}
	return nil
}

func (m *GamerGetMatchInfoS2C) GetViewershipIncr() int32 {
	if m != nil && m.ViewershipIncr != nil {
		return *m.ViewershipIncr
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetRoomId() int64 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetLastRes() []*LastFightRes {
	if m != nil {
		return m.LastRes
	}
	return nil
}

func (m *GamerGetMatchInfoS2C) GetBout() int32 {
	if m != nil && m.Bout != nil {
		return *m.Bout
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *GamerGetMatchInfoS2C) GetBehaviourId() int32 {
	if m != nil && m.BehaviourId != nil {
		return *m.BehaviourId
	}
	return 0
}

type LastFightRes struct {
	// 房间Id
	RoomId *int64 `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
	// 获胜pid
	Pid *int64 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	// 队伍基本信息
	LastBaseInfos    []*BattleStartBaseInfo `protobuf:"bytes,3,rep,name=lastBaseInfos" json:"lastBaseInfos,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *LastFightRes) Reset()                    { *m = LastFightRes{} }
func (m *LastFightRes) String() string            { return proto.CompactTextString(m) }
func (*LastFightRes) ProtoMessage()               {}
func (*LastFightRes) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{16} }

func (m *LastFightRes) GetRoomId() int64 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *LastFightRes) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *LastFightRes) GetLastBaseInfos() []*BattleStartBaseInfo {
	if m != nil {
		return m.LastBaseInfos
	}
	return nil
}

// 球员事件数据
type MatchPlayerEvent struct {
	// 球员实体ID
	InstanceID *int64 `protobuf:"varint,1,opt,name=instanceID" json:"instanceID,omitempty"`
	// 数据(详情参考macro.proto的枚举BatNodePlayerEv)
	Data             []int32 `protobuf:"varint,2,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MatchPlayerEvent) Reset()                    { *m = MatchPlayerEvent{} }
func (m *MatchPlayerEvent) String() string            { return proto.CompactTextString(m) }
func (*MatchPlayerEvent) ProtoMessage()               {}
func (*MatchPlayerEvent) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{17} }

func (m *MatchPlayerEvent) GetInstanceID() int64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *MatchPlayerEvent) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

// 详细数据
type MatchEventData struct {
	// 数据类型
	Key *int32 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	// 数据
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchEventData) Reset()                    { *m = MatchEventData{} }
func (m *MatchEventData) String() string            { return proto.CompactTextString(m) }
func (*MatchEventData) ProtoMessage()               {}
func (*MatchEventData) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{18} }

func (m *MatchEventData) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *MatchEventData) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 比赛结束后数据校验
type GamerMatchVerifyC2S struct {
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,1,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛ID
	MatchID *int32 `protobuf:"varint,2,opt,name=matchID" json:"matchID,omitempty"`
	// 比赛回放id
	Uuid *int64 `protobuf:"varint,5,opt,name=uuid" json:"uuid,omitempty"`
	// 跳过(下节step)
	JumpStep *int32 `protobuf:"varint,6,opt,name=jumpStep" json:"jumpStep,omitempty"`
	// pvp是否是机器人
	IsRobot *bool `protobuf:"varint,7,opt,name=isRobot" json:"isRobot,omitempty"`
	// 是否提前结束
	IsSkipFight *bool `protobuf:"varint,8,opt,name=isSkipFight" json:"isSkipFight,omitempty"`
	// gid
	Gid              *int32 `protobuf:"varint,9,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerMatchVerifyC2S) Reset()                    { *m = GamerMatchVerifyC2S{} }
func (m *GamerMatchVerifyC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchVerifyC2S) ProtoMessage()               {}
func (*GamerMatchVerifyC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{19} }

func (m *GamerMatchVerifyC2S) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *GamerMatchVerifyC2S) GetMatchID() int32 {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return 0
}

func (m *GamerMatchVerifyC2S) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *GamerMatchVerifyC2S) GetJumpStep() int32 {
	if m != nil && m.JumpStep != nil {
		return *m.JumpStep
	}
	return 0
}

func (m *GamerMatchVerifyC2S) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *GamerMatchVerifyC2S) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

func (m *GamerMatchVerifyC2S) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

type FightVerifyResult struct {
	// 校验结果
	VerifyResult *bool `protobuf:"varint,1,opt,name=verifyResult" json:"verifyResult,omitempty"`
	// 己方球员数据
	MyPlayerData []*MatchPlayerEvent `protobuf:"bytes,2,rep,name=myPlayerData" json:"myPlayerData,omitempty"`
	// 己方得分
	MyScore *int32 `protobuf:"varint,3,opt,name=myScore" json:"myScore,omitempty"`
	// 对方球员数据
	OppPlayerData []*MatchPlayerEvent `protobuf:"bytes,4,rep,name=oppPlayerData" json:"oppPlayerData,omitempty"`
	// 对方得分
	OppScore *int32 `protobuf:"varint,5,opt,name=oppScore" json:"oppScore,omitempty"`
	// 比赛星级(普通关卡为大于等于0值，其他为-1)
	Star *int32 `protobuf:"varint,6,opt,name=star" json:"star,omitempty"`
	// 是否提前结束
	IsSkipFight *bool `protobuf:"varint,7,opt,name=isSkipFight" json:"isSkipFight,omitempty"`
	// 比赛回放id
	Uuid *int64 `protobuf:"varint,8,opt,name=uuid" json:"uuid,omitempty"`
	// 投降者id
	SurrenderPid *int64 `protobuf:"varint,9,opt,name=surrenderPid" json:"surrenderPid,omitempty"`
	// 收视人数
	Viewership *int32 `protobuf:"varint,10,opt,name=viewership" json:"viewership,omitempty"`
	// 跳过比赛时 下发队伍1信息
	MyTeamData *MatchTeamData `protobuf:"bytes,11,opt,name=myTeamData" json:"myTeamData,omitempty"`
	// 跳过比赛时 下发队伍2信息
	OppTeamData *MatchTeamData `protobuf:"bytes,12,opt,name=oppTeamData" json:"oppTeamData,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,13,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛id
	MatchId          *int32 `protobuf:"varint,14,opt,name=matchId" json:"matchId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightVerifyResult) Reset()                    { *m = FightVerifyResult{} }
func (m *FightVerifyResult) String() string            { return proto.CompactTextString(m) }
func (*FightVerifyResult) ProtoMessage()               {}
func (*FightVerifyResult) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{20} }

func (m *FightVerifyResult) GetVerifyResult() bool {
	if m != nil && m.VerifyResult != nil {
		return *m.VerifyResult
	}
	return false
}

func (m *FightVerifyResult) GetMyPlayerData() []*MatchPlayerEvent {
	if m != nil {
		return m.MyPlayerData
	}
	return nil
}

func (m *FightVerifyResult) GetMyScore() int32 {
	if m != nil && m.MyScore != nil {
		return *m.MyScore
	}
	return 0
}

func (m *FightVerifyResult) GetOppPlayerData() []*MatchPlayerEvent {
	if m != nil {
		return m.OppPlayerData
	}
	return nil
}

func (m *FightVerifyResult) GetOppScore() int32 {
	if m != nil && m.OppScore != nil {
		return *m.OppScore
	}
	return 0
}

func (m *FightVerifyResult) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *FightVerifyResult) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

func (m *FightVerifyResult) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *FightVerifyResult) GetSurrenderPid() int64 {
	if m != nil && m.SurrenderPid != nil {
		return *m.SurrenderPid
	}
	return 0
}

func (m *FightVerifyResult) GetViewership() int32 {
	if m != nil && m.Viewership != nil {
		return *m.Viewership
	}
	return 0
}

func (m *FightVerifyResult) GetMyTeamData() *MatchTeamData {
	if m != nil {
		return m.MyTeamData
	}
	return nil
}

func (m *FightVerifyResult) GetOppTeamData() *MatchTeamData {
	if m != nil {
		return m.OppTeamData
	}
	return nil
}

func (m *FightVerifyResult) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *FightVerifyResult) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

// 比赛结束后数据校验
type GamerMatchVerifyS2C struct {
	// 可能存在多场比赛结果
	Res              []*FightVerifyResult `protobuf:"bytes,1,rep,name=res" json:"res,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *GamerMatchVerifyS2C) Reset()                    { *m = GamerMatchVerifyS2C{} }
func (m *GamerMatchVerifyS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchVerifyS2C) ProtoMessage()               {}
func (*GamerMatchVerifyS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{21} }

func (m *GamerMatchVerifyS2C) GetRes() []*FightVerifyResult {
	if m != nil {
		return m.Res
	}
	return nil
}

// 战斗重连提示
type FightReconnectNotifyS2C struct {
	// 战斗id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,2,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 是否重连
	IsExist *bool `protobuf:"varint,3,opt,name=IsExist" json:"IsExist,omitempty"`
	// FightStage
	StageInfo        *FightStage `protobuf:"bytes,4,opt,name=stageInfo" json:"stageInfo,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FightReconnectNotifyS2C) Reset()                    { *m = FightReconnectNotifyS2C{} }
func (m *FightReconnectNotifyS2C) String() string            { return proto.CompactTextString(m) }
func (*FightReconnectNotifyS2C) ProtoMessage()               {}
func (*FightReconnectNotifyS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{22} }

func (m *FightReconnectNotifyS2C) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *FightReconnectNotifyS2C) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *FightReconnectNotifyS2C) GetIsExist() bool {
	if m != nil && m.IsExist != nil {
		return *m.IsExist
	}
	return false
}

func (m *FightReconnectNotifyS2C) GetStageInfo() *FightStage {
	if m != nil {
		return m.StageInfo
	}
	return nil
}

// 战斗重连
type GamerFightReconnectC2S struct {
	// 战斗id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 是否重连
	IsReconnect      *bool  `protobuf:"varint,2,opt,name=isReconnect" json:"isReconnect,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerFightReconnectC2S) Reset()                    { *m = GamerFightReconnectC2S{} }
func (m *GamerFightReconnectC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerFightReconnectC2S) ProtoMessage()               {}
func (*GamerFightReconnectC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{23} }

func (m *GamerFightReconnectC2S) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *GamerFightReconnectC2S) GetIsReconnect() bool {
	if m != nil && m.IsReconnect != nil {
		return *m.IsReconnect
	}
	return false
}

// 匹配对象信息
type MatchPoolPlayerInfo struct {
	// 玩家gid
	Gid *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// 区服id
	LsId *int32 `protobuf:"varint,2,opt,name=lsId" json:"lsId,omitempty"`
	// 进程id
	PsId *int32 `protobuf:"varint,3,opt,name=psId" json:"psId,omitempty"`
	// 玩家icon
	Icon *int32 `protobuf:"varint,4,opt,name=icon" json:"icon,omitempty"`
	// 是机器人 (或当成机器人的玩家)
	IsRobot *bool `protobuf:"varint,5,opt,name=isRobot" json:"isRobot,omitempty"`
	// 玩家名称
	Name             *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MatchPoolPlayerInfo) Reset()                    { *m = MatchPoolPlayerInfo{} }
func (m *MatchPoolPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchPoolPlayerInfo) ProtoMessage()               {}
func (*MatchPoolPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{24} }

func (m *MatchPoolPlayerInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *MatchPoolPlayerInfo) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

func (m *MatchPoolPlayerInfo) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

func (m *MatchPoolPlayerInfo) GetIcon() int32 {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return 0
}

func (m *MatchPoolPlayerInfo) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *MatchPoolPlayerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type DraftGamer struct {
	//  玩家信息
	// 玩家信息
	BaseInfo *MatchPoolPlayerInfo `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	// 球员列表
	PlayerList []int32 `protobuf:"varint,2,rep,name=playerList" json:"playerList,omitempty"`
	// 猜拳选择
	Finger *int32 `protobuf:"varint,3,opt,name=finger" json:"finger,omitempty"`
	// 预选球员
	BeforehandPlayerList []int32 `protobuf:"varint,4,rep,name=beforehandPlayerList" json:"beforehandPlayerList,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *DraftGamer) Reset()                    { *m = DraftGamer{} }
func (m *DraftGamer) String() string            { return proto.CompactTextString(m) }
func (*DraftGamer) ProtoMessage()               {}
func (*DraftGamer) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{25} }

func (m *DraftGamer) GetBaseInfo() *MatchPoolPlayerInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *DraftGamer) GetPlayerList() []int32 {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *DraftGamer) GetFinger() int32 {
	if m != nil && m.Finger != nil {
		return *m.Finger
	}
	return 0
}

func (m *DraftGamer) GetBeforehandPlayerList() []int32 {
	if m != nil {
		return m.BeforehandPlayerList
	}
	return nil
}

type FightStage struct {
	// 当前状态
	Status *FightStatus `protobuf:"varint,1,opt,name=status,enum=FightStatus" json:"status,omitempty"`
	// 当前状态结束时间搓（秒）
	StatusEndTime    *int64 `protobuf:"varint,2,opt,name=statusEndTime" json:"statusEndTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightStage) Reset()                    { *m = FightStage{} }
func (m *FightStage) String() string            { return proto.CompactTextString(m) }
func (*FightStage) ProtoMessage()               {}
func (*FightStage) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{26} }

func (m *FightStage) GetStatus() FightStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return FightStatus_FS_Unknown
}

func (m *FightStage) GetStatusEndTime() int64 {
	if m != nil && m.StatusEndTime != nil {
		return *m.StatusEndTime
	}
	return 0
}

type DraftInfo struct {
	// 猜拳回合（从0开始）
	GuessRound *int32 `protobuf:"varint,1,opt,name=guessRound" json:"guessRound,omitempty"`
	// 选人回合（从0开始）
	SelectRound *int32 `protobuf:"varint,2,opt,name=selectRound" json:"selectRound,omitempty"`
	// 选人gid
	SelectGid *int32 `protobuf:"varint,3,opt,name=selectGid" json:"selectGid,omitempty"`
	// 成员
	Gamers []*DraftGamer `protobuf:"bytes,4,rep,name=gamers" json:"gamers,omitempty"`
	// 可选球员列表
	OptionalList     []int32 `protobuf:"varint,5,rep,name=optionalList" json:"optionalList,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DraftInfo) Reset()                    { *m = DraftInfo{} }
func (m *DraftInfo) String() string            { return proto.CompactTextString(m) }
func (*DraftInfo) ProtoMessage()               {}
func (*DraftInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{27} }

func (m *DraftInfo) GetGuessRound() int32 {
	if m != nil && m.GuessRound != nil {
		return *m.GuessRound
	}
	return 0
}

func (m *DraftInfo) GetSelectRound() int32 {
	if m != nil && m.SelectRound != nil {
		return *m.SelectRound
	}
	return 0
}

func (m *DraftInfo) GetSelectGid() int32 {
	if m != nil && m.SelectGid != nil {
		return *m.SelectGid
	}
	return 0
}

func (m *DraftInfo) GetGamers() []*DraftGamer {
	if m != nil {
		return m.Gamers
	}
	return nil
}

func (m *DraftInfo) GetOptionalList() []int32 {
	if m != nil {
		return m.OptionalList
	}
	return nil
}

// 战斗重连结果
type GamerFightReconnectS2C struct {
	// 战斗id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 是否重连成功
	IsReconnectOK *bool `protobuf:"varint,2,opt,name=isReconnectOK" json:"isReconnectOK,omitempty"`
	// 比赛参数
	FightParam *FightRoomParam `protobuf:"bytes,3,opt,name=fightParam" json:"fightParam,omitempty"`
	// 队伍基本信息
	BaseInfos []*BattleStartBaseInfo `protobuf:"bytes,4,rep,name=baseInfos" json:"baseInfos,omitempty"`
	// 当前第几节
	NowQuarter *int32 `protobuf:"varint,5,opt,name=nowQuarter" json:"nowQuarter,omitempty"`
	// 这一节还剩多少秒
	SurplusSecond *float64 `protobuf:"fixed64,6,opt,name=surplusSecond" json:"surplusSecond,omitempty"`
	// 我的id
	Pid *int64 `protobuf:"varint,7,opt,name=pid" json:"pid,omitempty"`
	// 阵营得分
	CampScores []*CampScoreInfo `protobuf:"bytes,8,rep,name=campScores" json:"campScores,omitempty"`
	// 之前比赛结果
	LastRes []*LastFightRes `protobuf:"bytes,9,rep,name=lastRes" json:"lastRes,omitempty"`
	// 收视人数总量(传奇挑战赛专用)
	Viewership *int32 `protobuf:"varint,10,opt,name=viewership" json:"viewership,omitempty"`
	// 收视人数增量(传奇挑战赛专用)
	ViewershipIncr *int32 `protobuf:"varint,11,opt,name=viewershipIncr" json:"viewershipIncr,omitempty"`
	// RoomId
	RoomId *int64 `protobuf:"varint,13,opt,name=roomId" json:"roomId,omitempty"`
	// FightStage
	StageInfo *FightStage `protobuf:"bytes,14,opt,name=stageInfo" json:"stageInfo,omitempty"`
	// 选秀赛信息
	DraftInfo        *DraftInfo `protobuf:"bytes,15,opt,name=draftInfo" json:"draftInfo,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *GamerFightReconnectS2C) Reset()                    { *m = GamerFightReconnectS2C{} }
func (m *GamerFightReconnectS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerFightReconnectS2C) ProtoMessage()               {}
func (*GamerFightReconnectS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{28} }

func (m *GamerFightReconnectS2C) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetIsReconnectOK() bool {
	if m != nil && m.IsReconnectOK != nil {
		return *m.IsReconnectOK
	}
	return false
}

func (m *GamerFightReconnectS2C) GetFightParam() *FightRoomParam {
	if m != nil {
		return m.FightParam
	}
	return nil
}

func (m *GamerFightReconnectS2C) GetBaseInfos() []*BattleStartBaseInfo {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

func (m *GamerFightReconnectS2C) GetNowQuarter() int32 {
	if m != nil && m.NowQuarter != nil {
		return *m.NowQuarter
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetSurplusSecond() float64 {
	if m != nil && m.SurplusSecond != nil {
		return *m.SurplusSecond
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetCampScores() []*CampScoreInfo {
	if m != nil {
		return m.CampScores
	}
	return nil
}

func (m *GamerFightReconnectS2C) GetLastRes() []*LastFightRes {
	if m != nil {
		return m.LastRes
	}
	return nil
}

func (m *GamerFightReconnectS2C) GetViewership() int32 {
	if m != nil && m.Viewership != nil {
		return *m.Viewership
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetViewershipIncr() int32 {
	if m != nil && m.ViewershipIncr != nil {
		return *m.ViewershipIncr
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetRoomId() int64 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *GamerFightReconnectS2C) GetStageInfo() *FightStage {
	if m != nil {
		return m.StageInfo
	}
	return nil
}

func (m *GamerFightReconnectS2C) GetDraftInfo() *DraftInfo {
	if m != nil {
		return m.DraftInfo
	}
	return nil
}

// 比赛专用展示奖励
type GamerMatchShowRewardS2C struct {
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,1,rep,name=reward" json:"reward,omitempty"`
	// 加倍的奖励
	DoubleRewards    []*ItemVaryConfig `protobuf:"bytes,2,rep,name=doubleRewards" json:"doubleRewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GamerMatchShowRewardS2C) Reset()                    { *m = GamerMatchShowRewardS2C{} }
func (m *GamerMatchShowRewardS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchShowRewardS2C) ProtoMessage()               {}
func (*GamerMatchShowRewardS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{29} }

func (m *GamerMatchShowRewardS2C) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *GamerMatchShowRewardS2C) GetDoubleRewards() []*ItemVaryConfig {
	if m != nil {
		return m.DoubleRewards
	}
	return nil
}

// 获取比赛剧本
type GamerMatchFlimInfosC2S struct {
	// 节点类型(0:跳球;1:战术)
	NodeType *int32 `protobuf:"varint,1,opt,name=nodeType" json:"nodeType,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,2,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛ID
	Uuid *int64 `protobuf:"varint,3,opt,name=uuid" json:"uuid,omitempty"`
	// 回合数（0，1，2）
	Bout *int32 `protobuf:"varint,4,opt,name=bout" json:"bout,omitempty"`
	// 快速战斗标记
	QuickFight *bool `protobuf:"varint,5,opt,name=quickFight" json:"quickFight,omitempty"`
	// gid
	Gid              *int32 `protobuf:"varint,6,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerMatchFlimInfosC2S) Reset()                    { *m = GamerMatchFlimInfosC2S{} }
func (m *GamerMatchFlimInfosC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchFlimInfosC2S) ProtoMessage()               {}
func (*GamerMatchFlimInfosC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{30} }

func (m *GamerMatchFlimInfosC2S) GetNodeType() int32 {
	if m != nil && m.NodeType != nil {
		return *m.NodeType
	}
	return 0
}

func (m *GamerMatchFlimInfosC2S) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *GamerMatchFlimInfosC2S) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *GamerMatchFlimInfosC2S) GetBout() int32 {
	if m != nil && m.Bout != nil {
		return *m.Bout
	}
	return 0
}

func (m *GamerMatchFlimInfosC2S) GetQuickFight() bool {
	if m != nil && m.QuickFight != nil {
		return *m.QuickFight
	}
	return false
}

func (m *GamerMatchFlimInfosC2S) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

// 实时战力结构
type PowerInTime struct {
	Camp             *int32 `protobuf:"varint,1,opt,name=camp" json:"camp,omitempty"`
	CurPower         *int64 `protobuf:"varint,2,opt,name=curPower" json:"curPower,omitempty"`
	AfterPower       *int64 `protobuf:"varint,3,opt,name=afterPower" json:"afterPower,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PowerInTime) Reset()                    { *m = PowerInTime{} }
func (m *PowerInTime) String() string            { return proto.CompactTextString(m) }
func (*PowerInTime) ProtoMessage()               {}
func (*PowerInTime) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{31} }

func (m *PowerInTime) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

func (m *PowerInTime) GetCurPower() int64 {
	if m != nil && m.CurPower != nil {
		return *m.CurPower
	}
	return 0
}

func (m *PowerInTime) GetAfterPower() int64 {
	if m != nil && m.AfterPower != nil {
		return *m.AfterPower
	}
	return 0
}

// 球员专属技能
type ExclusiveSkills struct {
	// 球员id
	PlayerId *int32 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	// 充能进度(待删除)
	Process *int32 `protobuf:"varint,2,opt,name=process" json:"process,omitempty"`
	// 0:普通，1:高亮（待删除）
	Status *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// 专属时刻
	ExclusiveTimeData *ExclusiveTimeData `protobuf:"bytes,4,opt,name=exclusiveTimeData" json:"exclusiveTimeData,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *ExclusiveSkills) Reset()                    { *m = ExclusiveSkills{} }
func (m *ExclusiveSkills) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveSkills) ProtoMessage()               {}
func (*ExclusiveSkills) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{32} }

func (m *ExclusiveSkills) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ExclusiveSkills) GetProcess() int32 {
	if m != nil && m.Process != nil {
		return *m.Process
	}
	return 0
}

func (m *ExclusiveSkills) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ExclusiveSkills) GetExclusiveTimeData() *ExclusiveTimeData {
	if m != nil {
		return m.ExclusiveTimeData
	}
	return nil
}

// 队伍专属技能
type ExclusiveTeamSkill struct {
	// 成员id
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// 球员专属技能
	Exclusives       []*ExclusiveSkills `protobuf:"bytes,2,rep,name=exclusives" json:"exclusives,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ExclusiveTeamSkill) Reset()                    { *m = ExclusiveTeamSkill{} }
func (m *ExclusiveTeamSkill) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveTeamSkill) ProtoMessage()               {}
func (*ExclusiveTeamSkill) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{33} }

func (m *ExclusiveTeamSkill) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *ExclusiveTeamSkill) GetExclusives() []*ExclusiveSkills {
	if m != nil {
		return m.Exclusives
	}
	return nil
}

// 主教练技能冷却cd
type HeadCoachSkillCD struct {
	// 成员id
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// 冷却CD
	Cd               *int32 `protobuf:"varint,2,opt,name=cd" json:"cd,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HeadCoachSkillCD) Reset()                    { *m = HeadCoachSkillCD{} }
func (m *HeadCoachSkillCD) String() string            { return proto.CompactTextString(m) }
func (*HeadCoachSkillCD) ProtoMessage()               {}
func (*HeadCoachSkillCD) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{34} }

func (m *HeadCoachSkillCD) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *HeadCoachSkillCD) GetCd() int32 {
	if m != nil && m.Cd != nil {
		return *m.Cd
	}
	return 0
}

// 剧本信息
type FilmInfo struct {
	// 节点类型(0:跳球;1:战术)
	NodeType *int32 `protobuf:"varint,1,opt,name=nodeType" json:"nodeType,omitempty"`
	// 进攻阵营
	AtkCamp *int32 `protobuf:"varint,2,opt,name=atkCamp" json:"atkCamp,omitempty"`
	// 节点名字
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 10个位置
	Placers []int32 `protobuf:"varint,4,rep,name=placers" json:"placers,omitempty"`
	// 实时战力
	Powers []*PowerInTime `protobuf:"bytes,5,rep,name=powers" json:"powers,omitempty"`
	// 事件
	Eves []*BattleEvent `protobuf:"bytes,6,rep,name=eves" json:"eves,omitempty"`
	// 球员专属技能
	TeamSkill []*ExclusiveTeamSkill `protobuf:"bytes,7,rep,name=teamSkill" json:"teamSkill,omitempty"`
	// 剧本生成相对时间（毫秒）（相对本节第一个剧本的时间，且罚球时间有效）
	BirthTime *int32 `protobuf:"varint,8,opt,name=birthTime" json:"birthTime,omitempty"`
	// 回合数（从0开始）
	Round *int32 `protobuf:"varint,9,opt,name=round" json:"round,omitempty"`
	// 释放专属技能的球员id
	ZsInstId *int64 `protobuf:"varint,10,opt,name=zsInstId" json:"zsInstId,omitempty"`
	// 主教练技能冷却cd
	HeadCoachSkillCds []*HeadCoachSkillCD `protobuf:"bytes,11,rep,name=headCoachSkillCds" json:"headCoachSkillCds,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *FilmInfo) Reset()                    { *m = FilmInfo{} }
func (m *FilmInfo) String() string            { return proto.CompactTextString(m) }
func (*FilmInfo) ProtoMessage()               {}
func (*FilmInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{35} }

func (m *FilmInfo) GetNodeType() int32 {
	if m != nil && m.NodeType != nil {
		return *m.NodeType
	}
	return 0
}

func (m *FilmInfo) GetAtkCamp() int32 {
	if m != nil && m.AtkCamp != nil {
		return *m.AtkCamp
	}
	return 0
}

func (m *FilmInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FilmInfo) GetPlacers() []int32 {
	if m != nil {
		return m.Placers
	}
	return nil
}

func (m *FilmInfo) GetPowers() []*PowerInTime {
	if m != nil {
		return m.Powers
	}
	return nil
}

func (m *FilmInfo) GetEves() []*BattleEvent {
	if m != nil {
		return m.Eves
	}
	return nil
}

func (m *FilmInfo) GetTeamSkill() []*ExclusiveTeamSkill {
	if m != nil {
		return m.TeamSkill
	}
	return nil
}

func (m *FilmInfo) GetBirthTime() int32 {
	if m != nil && m.BirthTime != nil {
		return *m.BirthTime
	}
	return 0
}

func (m *FilmInfo) GetRound() int32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *FilmInfo) GetZsInstId() int64 {
	if m != nil && m.ZsInstId != nil {
		return *m.ZsInstId
	}
	return 0
}

func (m *FilmInfo) GetHeadCoachSkillCds() []*HeadCoachSkillCD {
	if m != nil {
		return m.HeadCoachSkillCds
	}
	return nil
}

// 比赛返回剧本
type GamerMatchFlimInfosS2C struct {
	// 剧本
	Film *FilmInfo `protobuf:"bytes,1,opt,name=film" json:"film,omitempty"`
	// 回放使用:当前回合数
	Bout *int32 `protobuf:"varint,2,opt,name=bout" json:"bout,omitempty"`
	// 回放跳过使用:两队球员信息
	GamerBattleDatas []*GamerBattleInfo `protobuf:"bytes,3,rep,name=gamerBattleDatas" json:"gamerBattleDatas,omitempty"`
	// todo 当前剧本时间 压测时控制请求剧本频率
	FilmTime         *int32 `protobuf:"varint,4,opt,name=filmTime" json:"filmTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerMatchFlimInfosS2C) Reset()                    { *m = GamerMatchFlimInfosS2C{} }
func (m *GamerMatchFlimInfosS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchFlimInfosS2C) ProtoMessage()               {}
func (*GamerMatchFlimInfosS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{36} }

func (m *GamerMatchFlimInfosS2C) GetFilm() *FilmInfo {
	if m != nil {
		return m.Film
	}
	return nil
}

func (m *GamerMatchFlimInfosS2C) GetBout() int32 {
	if m != nil && m.Bout != nil {
		return *m.Bout
	}
	return 0
}

func (m *GamerMatchFlimInfosS2C) GetGamerBattleDatas() []*GamerBattleInfo {
	if m != nil {
		return m.GamerBattleDatas
	}
	return nil
}

func (m *GamerMatchFlimInfosS2C) GetFilmTime() int32 {
	if m != nil && m.FilmTime != nil {
		return *m.FilmTime
	}
	return 0
}

// 请求使用球员专属技能
type GamerUseExclusiveSkillsC2S struct {
	Camp             *int32 `protobuf:"varint,1,opt,name=camp" json:"camp,omitempty"`
	InstId           *int64 `protobuf:"varint,2,opt,name=instId" json:"instId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerUseExclusiveSkillsC2S) Reset()                    { *m = GamerUseExclusiveSkillsC2S{} }
func (m *GamerUseExclusiveSkillsC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerUseExclusiveSkillsC2S) ProtoMessage()               {}
func (*GamerUseExclusiveSkillsC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{37} }

func (m *GamerUseExclusiveSkillsC2S) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

func (m *GamerUseExclusiveSkillsC2S) GetInstId() int64 {
	if m != nil && m.InstId != nil {
		return *m.InstId
	}
	return 0
}

// 请求使用球员专属技能
type GamerUseExclusiveSkillsS2C struct {
	InstId           *int64 `protobuf:"varint,1,opt,name=instId" json:"instId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerUseExclusiveSkillsS2C) Reset()                    { *m = GamerUseExclusiveSkillsS2C{} }
func (m *GamerUseExclusiveSkillsS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerUseExclusiveSkillsS2C) ProtoMessage()               {}
func (*GamerUseExclusiveSkillsS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{38} }

func (m *GamerUseExclusiveSkillsS2C) GetInstId() int64 {
	if m != nil && m.InstId != nil {
		return *m.InstId
	}
	return 0
}

// 换人
type GamerMatchChangePlayerC2S struct {
	ChangePlayerInfo []*EvChangePlayer `protobuf:"bytes,1,rep,name=changePlayerInfo" json:"changePlayerInfo,omitempty"`
	MatchType        *MatchType        `protobuf:"varint,2,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 当前回合动画已执行时长（ms）
	ExecutedTime     *int32 `protobuf:"varint,3,opt,name=executedTime" json:"executedTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerMatchChangePlayerC2S) Reset()                    { *m = GamerMatchChangePlayerC2S{} }
func (m *GamerMatchChangePlayerC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchChangePlayerC2S) ProtoMessage()               {}
func (*GamerMatchChangePlayerC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{39} }

func (m *GamerMatchChangePlayerC2S) GetChangePlayerInfo() []*EvChangePlayer {
	if m != nil {
		return m.ChangePlayerInfo
	}
	return nil
}

func (m *GamerMatchChangePlayerC2S) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *GamerMatchChangePlayerC2S) GetExecutedTime() int32 {
	if m != nil && m.ExecutedTime != nil {
		return *m.ExecutedTime
	}
	return 0
}

// 换人
type GamerMatchChangePlayerS2C struct {
	Pid              *int64            `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	ChangePlayerInfo []*EvChangePlayer `protobuf:"bytes,2,rep,name=changePlayerInfo" json:"changePlayerInfo,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GamerMatchChangePlayerS2C) Reset()                    { *m = GamerMatchChangePlayerS2C{} }
func (m *GamerMatchChangePlayerS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerMatchChangePlayerS2C) ProtoMessage()               {}
func (*GamerMatchChangePlayerS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{40} }

func (m *GamerMatchChangePlayerS2C) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *GamerMatchChangePlayerS2C) GetChangePlayerInfo() []*EvChangePlayer {
	if m != nil {
		return m.ChangePlayerInfo
	}
	return nil
}

// 比赛节数变化
type EvQuarterChange struct {
	// 当前节
	NowQuarter *int32 `protobuf:"varint,1,opt,name=nowQuarter" json:"nowQuarter,omitempty"`
	// 比赛时间
	SurplusSecond    *float64 `protobuf:"fixed64,2,opt,name=surplusSecond" json:"surplusSecond,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EvQuarterChange) Reset()                    { *m = EvQuarterChange{} }
func (m *EvQuarterChange) String() string            { return proto.CompactTextString(m) }
func (*EvQuarterChange) ProtoMessage()               {}
func (*EvQuarterChange) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{41} }

func (m *EvQuarterChange) GetNowQuarter() int32 {
	if m != nil && m.NowQuarter != nil {
		return *m.NowQuarter
	}
	return 0
}

func (m *EvQuarterChange) GetSurplusSecond() float64 {
	if m != nil && m.SurplusSecond != nil {
		return *m.SurplusSecond
	}
	return 0
}

// 体能变化
type EvPlayerVitChange struct {
	// 球员ID
	PlayerID *int64 `protobuf:"varint,1,opt,name=playerID" json:"playerID,omitempty"`
	// 当前体能
	Vit              *int32 `protobuf:"varint,2,opt,name=vit" json:"vit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvPlayerVitChange) Reset()                    { *m = EvPlayerVitChange{} }
func (m *EvPlayerVitChange) String() string            { return proto.CompactTextString(m) }
func (*EvPlayerVitChange) ProtoMessage()               {}
func (*EvPlayerVitChange) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{42} }

func (m *EvPlayerVitChange) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *EvPlayerVitChange) GetVit() int32 {
	if m != nil && m.Vit != nil {
		return *m.Vit
	}
	return 0
}

// 战术改变通知
type EvChangeTacticNotify struct {
	// 战术改变类型
	ChangeType       *int32 `protobuf:"varint,1,opt,name=changeType" json:"changeType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvChangeTacticNotify) Reset()                    { *m = EvChangeTacticNotify{} }
func (m *EvChangeTacticNotify) String() string            { return proto.CompactTextString(m) }
func (*EvChangeTacticNotify) ProtoMessage()               {}
func (*EvChangeTacticNotify) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{43} }

func (m *EvChangeTacticNotify) GetChangeType() int32 {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return 0
}

// 改变战术
type EvChangeTactic struct {
	// 战术改变类型
	ChangeType       *int32       `protobuf:"varint,1,opt,name=changeType" json:"changeType,omitempty"`
	OwnTacticsInfo   *TacticsInfo `protobuf:"bytes,2,opt,name=ownTacticsInfo" json:"ownTacticsInfo,omitempty"`
	OtherTacticsInfo *TacticsInfo `protobuf:"bytes,3,opt,name=otherTacticsInfo" json:"otherTacticsInfo,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *EvChangeTactic) Reset()                    { *m = EvChangeTactic{} }
func (m *EvChangeTactic) String() string            { return proto.CompactTextString(m) }
func (*EvChangeTactic) ProtoMessage()               {}
func (*EvChangeTactic) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{44} }

func (m *EvChangeTactic) GetChangeType() int32 {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return 0
}

func (m *EvChangeTactic) GetOwnTacticsInfo() *TacticsInfo {
	if m != nil {
		return m.OwnTacticsInfo
	}
	return nil
}

func (m *EvChangeTactic) GetOtherTacticsInfo() *TacticsInfo {
	if m != nil {
		return m.OtherTacticsInfo
	}
	return nil
}

// 换人
type EvChangePlayer struct {
	// 球员ID
	PlayerID *int64 `protobuf:"varint,1,opt,name=playerID" json:"playerID,omitempty"`
	// 换上场的位置
	Place            *int32 `protobuf:"varint,2,opt,name=place" json:"place,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvChangePlayer) Reset()                    { *m = EvChangePlayer{} }
func (m *EvChangePlayer) String() string            { return proto.CompactTextString(m) }
func (*EvChangePlayer) ProtoMessage()               {}
func (*EvChangePlayer) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{45} }

func (m *EvChangePlayer) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *EvChangePlayer) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

// 球员buff
type EvPlayerBuffChange struct {
	// 球员ID
	PlayerID *int64 `protobuf:"varint,1,opt,name=playerID" json:"playerID,omitempty"`
	// 当前的buff
	Buff             []int32 `protobuf:"varint,2,rep,name=buff" json:"buff,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EvPlayerBuffChange) Reset()                    { *m = EvPlayerBuffChange{} }
func (m *EvPlayerBuffChange) String() string            { return proto.CompactTextString(m) }
func (*EvPlayerBuffChange) ProtoMessage()               {}
func (*EvPlayerBuffChange) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{46} }

func (m *EvPlayerBuffChange) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *EvPlayerBuffChange) GetBuff() []int32 {
	if m != nil {
		return m.Buff
	}
	return nil
}

// 教练buff
type EvCoachBuffChange struct {
	// 教练id
	CoachID *int32 `protobuf:"varint,1,opt,name=coachID" json:"coachID,omitempty"`
	// 当前buff
	Buff             []int32 `protobuf:"varint,2,rep,name=buff" json:"buff,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EvCoachBuffChange) Reset()                    { *m = EvCoachBuffChange{} }
func (m *EvCoachBuffChange) String() string            { return proto.CompactTextString(m) }
func (*EvCoachBuffChange) ProtoMessage()               {}
func (*EvCoachBuffChange) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{47} }

func (m *EvCoachBuffChange) GetCoachID() int32 {
	if m != nil && m.CoachID != nil {
		return *m.CoachID
	}
	return 0
}

func (m *EvCoachBuffChange) GetBuff() []int32 {
	if m != nil {
		return m.Buff
	}
	return nil
}

// 表演赛得分事件
type EvPerformanceScore struct {
	// 球员id
	PlayerId *int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	// 分数列表
	Scores           []int32 `protobuf:"varint,2,rep,name=scores" json:"scores,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EvPerformanceScore) Reset()                    { *m = EvPerformanceScore{} }
func (m *EvPerformanceScore) String() string            { return proto.CompactTextString(m) }
func (*EvPerformanceScore) ProtoMessage()               {}
func (*EvPerformanceScore) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{48} }

func (m *EvPerformanceScore) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *EvPerformanceScore) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

// 专属节点-执行人位置和配置位置不一致，交换位置执行节点事件
type EvZsPlayerSwapPlace struct {
	// 球员id
	InstId *int64 `protobuf:"varint,1,opt,name=instId" json:"instId,omitempty"`
	// 交换的位置
	Place            *int32 `protobuf:"varint,2,opt,name=place" json:"place,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvZsPlayerSwapPlace) Reset()                    { *m = EvZsPlayerSwapPlace{} }
func (m *EvZsPlayerSwapPlace) String() string            { return proto.CompactTextString(m) }
func (*EvZsPlayerSwapPlace) ProtoMessage()               {}
func (*EvZsPlayerSwapPlace) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{49} }

func (m *EvZsPlayerSwapPlace) GetInstId() int64 {
	if m != nil && m.InstId != nil {
		return *m.InstId
	}
	return 0
}

func (m *EvZsPlayerSwapPlace) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

// 战斗事件
type BattleEvent struct {
	Camp *int32 `protobuf:"varint,1,opt,name=camp" json:"camp,omitempty"`
	// 变化的事件类型(1:比赛节数变化,2:球员体能变化,3:换人事件,4:战术变化 5:战术变化通知消息,6:球员buff变化,7:教练buff变化,8:表演赛得分事件)
	EventType          *int32                `protobuf:"varint,2,opt,name=eventType" json:"eventType,omitempty"`
	ExecTime           *int32                `protobuf:"varint,3,opt,name=execTime" json:"execTime,omitempty"`
	ChangePlayer       []*EvChangePlayer     `protobuf:"bytes,4,rep,name=changePlayer" json:"changePlayer,omitempty"`
	VitChange          []*EvPlayerVitChange  `protobuf:"bytes,5,rep,name=vitChange" json:"vitChange,omitempty"`
	QuarterChange      *EvQuarterChange      `protobuf:"bytes,6,opt,name=quarterChange" json:"quarterChange,omitempty"`
	TacticChange       *EvChangeTactic       `protobuf:"bytes,7,opt,name=tacticChange" json:"tacticChange,omitempty"`
	TacticChangeNotify *EvChangeTacticNotify `protobuf:"bytes,8,opt,name=tacticChangeNotify" json:"tacticChangeNotify,omitempty"`
	BuffChange         []*EvPlayerBuffChange `protobuf:"bytes,9,rep,name=buffChange" json:"buffChange,omitempty"`
	CoachBuffChange    *EvCoachBuffChange    `protobuf:"bytes,10,opt,name=coachBuffChange" json:"coachBuffChange,omitempty"`
	PerformanceScore   *EvPerformanceScore   `protobuf:"bytes,11,opt,name=performanceScore" json:"performanceScore,omitempty"`
	XXX_unrecognized   []byte                `json:"-"`
}

func (m *BattleEvent) Reset()                    { *m = BattleEvent{} }
func (m *BattleEvent) String() string            { return proto.CompactTextString(m) }
func (*BattleEvent) ProtoMessage()               {}
func (*BattleEvent) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{50} }

func (m *BattleEvent) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

func (m *BattleEvent) GetEventType() int32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *BattleEvent) GetExecTime() int32 {
	if m != nil && m.ExecTime != nil {
		return *m.ExecTime
	}
	return 0
}

func (m *BattleEvent) GetChangePlayer() []*EvChangePlayer {
	if m != nil {
		return m.ChangePlayer
	}
	return nil
}

func (m *BattleEvent) GetVitChange() []*EvPlayerVitChange {
	if m != nil {
		return m.VitChange
	}
	return nil
}

func (m *BattleEvent) GetQuarterChange() *EvQuarterChange {
	if m != nil {
		return m.QuarterChange
	}
	return nil
}

func (m *BattleEvent) GetTacticChange() *EvChangeTactic {
	if m != nil {
		return m.TacticChange
	}
	return nil
}

func (m *BattleEvent) GetTacticChangeNotify() *EvChangeTacticNotify {
	if m != nil {
		return m.TacticChangeNotify
	}
	return nil
}

func (m *BattleEvent) GetBuffChange() []*EvPlayerBuffChange {
	if m != nil {
		return m.BuffChange
	}
	return nil
}

func (m *BattleEvent) GetCoachBuffChange() *EvCoachBuffChange {
	if m != nil {
		return m.CoachBuffChange
	}
	return nil
}

func (m *BattleEvent) GetPerformanceScore() *EvPerformanceScore {
	if m != nil {
		return m.PerformanceScore
	}
	return nil
}

// 比分
type GamerScoreS2C struct {
	// 己方得分
	MyScore *int32 `protobuf:"varint,1,opt,name=myScore" json:"myScore,omitempty"`
	// 对方得分
	OppScore         *int32 `protobuf:"varint,2,opt,name=oppScore" json:"oppScore,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerScoreS2C) Reset()                    { *m = GamerScoreS2C{} }
func (m *GamerScoreS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerScoreS2C) ProtoMessage()               {}
func (*GamerScoreS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{51} }

func (m *GamerScoreS2C) GetMyScore() int32 {
	if m != nil && m.MyScore != nil {
		return *m.MyScore
	}
	return 0
}

func (m *GamerScoreS2C) GetOppScore() int32 {
	if m != nil && m.OppScore != nil {
		return *m.OppScore
	}
	return 0
}

// 改变战术
type ChangeTacticsC2S struct {
	// 战术选择
	TacticsInfo *TacticsInfo `protobuf:"bytes,1,opt,name=tacticsInfo" json:"tacticsInfo,omitempty"`
	// 战术执行人集合
	TacticsExecutors []*TacticsExecutor `protobuf:"bytes,2,rep,name=TacticsExecutors" json:"TacticsExecutors,omitempty"`
	// 当前回合动画已执行时长（ms）
	ExecutedTime     *int32 `protobuf:"varint,3,opt,name=executedTime" json:"executedTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangeTacticsC2S) Reset()                    { *m = ChangeTacticsC2S{} }
func (m *ChangeTacticsC2S) String() string            { return proto.CompactTextString(m) }
func (*ChangeTacticsC2S) ProtoMessage()               {}
func (*ChangeTacticsC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{52} }

func (m *ChangeTacticsC2S) GetTacticsInfo() *TacticsInfo {
	if m != nil {
		return m.TacticsInfo
	}
	return nil
}

func (m *ChangeTacticsC2S) GetTacticsExecutors() []*TacticsExecutor {
	if m != nil {
		return m.TacticsExecutors
	}
	return nil
}

func (m *ChangeTacticsC2S) GetExecutedTime() int32 {
	if m != nil && m.ExecutedTime != nil {
		return *m.ExecutedTime
	}
	return 0
}

// 改变战术
type ChangeTacticsS2C struct {
	// 战术选择
	TacticsInfo *TacticsInfo `protobuf:"bytes,1,opt,name=tacticsInfo" json:"tacticsInfo,omitempty"`
	// 战术执行人集合
	TacticsExecutors []*TacticsExecutor `protobuf:"bytes,2,rep,name=TacticsExecutors" json:"TacticsExecutors,omitempty"`
	// pid
	Pid              *int64 `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangeTacticsS2C) Reset()                    { *m = ChangeTacticsS2C{} }
func (m *ChangeTacticsS2C) String() string            { return proto.CompactTextString(m) }
func (*ChangeTacticsS2C) ProtoMessage()               {}
func (*ChangeTacticsS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{53} }

func (m *ChangeTacticsS2C) GetTacticsInfo() *TacticsInfo {
	if m != nil {
		return m.TacticsInfo
	}
	return nil
}

func (m *ChangeTacticsS2C) GetTacticsExecutors() []*TacticsExecutor {
	if m != nil {
		return m.TacticsExecutors
	}
	return nil
}

func (m *ChangeTacticsS2C) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

// 成员战斗结果
type MemberFightResult struct {
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Gid *int32 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	// 分数
	Score *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	// 队伍数据
	TeamData         *MatchTeamData `protobuf:"bytes,4,opt,name=teamData" json:"teamData,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *MemberFightResult) Reset()                    { *m = MemberFightResult{} }
func (m *MemberFightResult) String() string            { return proto.CompactTextString(m) }
func (*MemberFightResult) ProtoMessage()               {}
func (*MemberFightResult) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{54} }

func (m *MemberFightResult) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *MemberFightResult) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *MemberFightResult) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *MemberFightResult) GetTeamData() *MatchTeamData {
	if m != nil {
		return m.TeamData
	}
	return nil
}

// 战斗结果
type FightResult struct {
	//
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,2,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛ID
	MatchID *int32 `protobuf:"varint,3,opt,name=matchID" json:"matchID,omitempty"`
	// pvp是否是机器人
	IsRobot *bool `protobuf:"varint,4,opt,name=isRobot" json:"isRobot,omitempty"`
	// 己方比赛结果
	My *MemberFightResult `protobuf:"bytes,5,opt,name=my" json:"my,omitempty"`
	// 地方比赛结果
	Opp *MemberFightResult `protobuf:"bytes,6,opt,name=opp" json:"opp,omitempty"`
	// 投降者pid，-1则非投降
	SurrenderPid *int64 `protobuf:"varint,7,opt,name=surrenderPid" json:"surrenderPid,omitempty"`
	// 4节中每节的最高得分
	NodeMaxScore *int32 `protobuf:"varint,9,opt,name=nodeMaxScore" json:"nodeMaxScore,omitempty"`
	// 是否跳过比赛
	IsJumpBattle *bool `protobuf:"varint,10,opt,name=isJumpBattle" json:"isJumpBattle,omitempty"`
	// 收益人数（传奇挑战赛专用）
	Viewership *int32 `protobuf:"varint,11,opt,name=viewership" json:"viewership,omitempty"`
	// 比赛回放id
	ReplayID         *int64 `protobuf:"varint,12,opt,name=replayID" json:"replayID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightResult) Reset()                    { *m = FightResult{} }
func (m *FightResult) String() string            { return proto.CompactTextString(m) }
func (*FightResult) ProtoMessage()               {}
func (*FightResult) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{55} }

func (m *FightResult) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *FightResult) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *FightResult) GetMatchID() int32 {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return 0
}

func (m *FightResult) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *FightResult) GetMy() *MemberFightResult {
	if m != nil {
		return m.My
	}
	return nil
}

func (m *FightResult) GetOpp() *MemberFightResult {
	if m != nil {
		return m.Opp
	}
	return nil
}

func (m *FightResult) GetSurrenderPid() int64 {
	if m != nil && m.SurrenderPid != nil {
		return *m.SurrenderPid
	}
	return 0
}

func (m *FightResult) GetNodeMaxScore() int32 {
	if m != nil && m.NodeMaxScore != nil {
		return *m.NodeMaxScore
	}
	return 0
}

func (m *FightResult) GetIsJumpBattle() bool {
	if m != nil && m.IsJumpBattle != nil {
		return *m.IsJumpBattle
	}
	return false
}

func (m *FightResult) GetViewership() int32 {
	if m != nil && m.Viewership != nil {
		return *m.Viewership
	}
	return 0
}

func (m *FightResult) GetReplayID() int64 {
	if m != nil && m.ReplayID != nil {
		return *m.ReplayID
	}
	return 0
}

// 战斗结果
type FightResultList struct {
	// 战斗id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 战斗结果列表
	Results        []*FightResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	IsSkip3Quarter *bool          `protobuf:"varint,3,opt,name=IsSkip3Quarter" json:"IsSkip3Quarter,omitempty"`
	FastMultiple   *int32         `protobuf:"varint,4,opt,name=FastMultiple" json:"FastMultiple,omitempty"`
	// 通关星级(三分大赛、扣篮大赛统计用)
	LevelStar *int32 `protobuf:"varint,5,opt,name=levelStar" json:"levelStar,omitempty"`
	// 哪一层(巅峰挑战和分区赛)
	TowerLevel *int32 `protobuf:"varint,6,opt,name=TowerLevel" json:"TowerLevel,omitempty"`
	// 战斗使用时间(秒)
	UseTimeSec       *int32 `protobuf:"varint,7,opt,name=useTimeSec" json:"useTimeSec,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightResultList) Reset()                    { *m = FightResultList{} }
func (m *FightResultList) String() string            { return proto.CompactTextString(m) }
func (*FightResultList) ProtoMessage()               {}
func (*FightResultList) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{56} }

func (m *FightResultList) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *FightResultList) GetResults() []*FightResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *FightResultList) GetIsSkip3Quarter() bool {
	if m != nil && m.IsSkip3Quarter != nil {
		return *m.IsSkip3Quarter
	}
	return false
}

func (m *FightResultList) GetFastMultiple() int32 {
	if m != nil && m.FastMultiple != nil {
		return *m.FastMultiple
	}
	return 0
}

func (m *FightResultList) GetLevelStar() int32 {
	if m != nil && m.LevelStar != nil {
		return *m.LevelStar
	}
	return 0
}

func (m *FightResultList) GetTowerLevel() int32 {
	if m != nil && m.TowerLevel != nil {
		return *m.TowerLevel
	}
	return 0
}

func (m *FightResultList) GetUseTimeSec() int32 {
	if m != nil && m.UseTimeSec != nil {
		return *m.UseTimeSec
	}
	return 0
}

// 战斗结算奖励结构
type FightResultReward struct {
	Err              *ErrorCode        `protobuf:"varint,1,opt,name=err,enum=ErrorCode" json:"err,omitempty"`
	Star             *int32            `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	Rewards          []*ItemVaryConfig `protobuf:"bytes,3,rep,name=rewards" json:"rewards,omitempty"`
	DoubleRewards    []*ItemVaryConfig `protobuf:"bytes,4,rep,name=doubleRewards" json:"doubleRewards,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FightResultReward) Reset()                    { *m = FightResultReward{} }
func (m *FightResultReward) String() string            { return proto.CompactTextString(m) }
func (*FightResultReward) ProtoMessage()               {}
func (*FightResultReward) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{57} }

func (m *FightResultReward) GetErr() ErrorCode {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ErrorCode_ErrOk
}

func (m *FightResultReward) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *FightResultReward) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *FightResultReward) GetDoubleRewards() []*ItemVaryConfig {
	if m != nil {
		return m.DoubleRewards
	}
	return nil
}

// 比赛数据记录
type FightDataRecord struct {
	// 比赛时间
	FightTime *int64 `protobuf:"varint,1,opt,name=fightTime" json:"fightTime,omitempty"`
	// 回放id
	ReplayId *int64 `protobuf:"varint,2,opt,name=replayId" json:"replayId,omitempty"`
	// 比赛结果
	FightRes         *FightResult `protobuf:"bytes,3,opt,name=fightRes" json:"fightRes,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *FightDataRecord) Reset()                    { *m = FightDataRecord{} }
func (m *FightDataRecord) String() string            { return proto.CompactTextString(m) }
func (*FightDataRecord) ProtoMessage()               {}
func (*FightDataRecord) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{58} }

func (m *FightDataRecord) GetFightTime() int64 {
	if m != nil && m.FightTime != nil {
		return *m.FightTime
	}
	return 0
}

func (m *FightDataRecord) GetReplayId() int64 {
	if m != nil && m.ReplayId != nil {
		return *m.ReplayId
	}
	return 0
}

func (m *FightDataRecord) GetFightRes() *FightResult {
	if m != nil {
		return m.FightRes
	}
	return nil
}

// 玩家投降
type GamerSurrenderC2S struct {
	Pid              *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerSurrenderC2S) Reset()                    { *m = GamerSurrenderC2S{} }
func (m *GamerSurrenderC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerSurrenderC2S) ProtoMessage()               {}
func (*GamerSurrenderC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{59} }

func (m *GamerSurrenderC2S) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

// 玩家投降
type GamerSurrenderS2C struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerSurrenderS2C) Reset()                    { *m = GamerSurrenderS2C{} }
func (m *GamerSurrenderS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerSurrenderS2C) ProtoMessage()               {}
func (*GamerSurrenderS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{60} }

type GamerBattleInfo struct {
	Pid              *int64              `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	PlayerDatas      []*PlayerBattleInfo `protobuf:"bytes,2,rep,name=playerDatas" json:"playerDatas,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GamerBattleInfo) Reset()                    { *m = GamerBattleInfo{} }
func (m *GamerBattleInfo) String() string            { return proto.CompactTextString(m) }
func (*GamerBattleInfo) ProtoMessage()               {}
func (*GamerBattleInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{61} }

func (m *GamerBattleInfo) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *GamerBattleInfo) GetPlayerDatas() []*PlayerBattleInfo {
	if m != nil {
		return m.PlayerDatas
	}
	return nil
}

// 扫荡比赛
type GamerGetSweepMatchInfoC2S struct {
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,1,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛ID
	MatchID *int32 `protobuf:"varint,2,opt,name=matchID" json:"matchID,omitempty"`
	// 普通关卡调整阵容信息
	PlayerInfo       []*MacthChapterTeamChangePlayer `protobuf:"bytes,3,rep,name=playerInfo" json:"playerInfo,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *GamerGetSweepMatchInfoC2S) Reset()                    { *m = GamerGetSweepMatchInfoC2S{} }
func (m *GamerGetSweepMatchInfoC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerGetSweepMatchInfoC2S) ProtoMessage()               {}
func (*GamerGetSweepMatchInfoC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{62} }

func (m *GamerGetSweepMatchInfoC2S) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *GamerGetSweepMatchInfoC2S) GetMatchID() int32 {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return 0
}

func (m *GamerGetSweepMatchInfoC2S) GetPlayerInfo() []*MacthChapterTeamChangePlayer {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

// 扫荡比赛
type GamerGetSweepMatchInfoS2C struct {
	// 奖励
	Reward []*ItemVaryConfig `protobuf:"bytes,1,rep,name=reward" json:"reward,omitempty"`
	// 加倍的奖励
	DoubleRewards []*ItemVaryConfig `protobuf:"bytes,2,rep,name=doubleRewards" json:"doubleRewards,omitempty"`
	// 球员信息
	PlayerInfos []*SweepPlayerInfo `protobuf:"bytes,4,rep,name=playerInfos" json:"playerInfos,omitempty"`
	// 我队伍信息
	Mine *SweepTeamInfo `protobuf:"bytes,5,opt,name=mine" json:"mine,omitempty"`
	// 对手队伍信息
	Opp              *SweepTeamInfo `protobuf:"bytes,6,opt,name=opp" json:"opp,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GamerGetSweepMatchInfoS2C) Reset()                    { *m = GamerGetSweepMatchInfoS2C{} }
func (m *GamerGetSweepMatchInfoS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerGetSweepMatchInfoS2C) ProtoMessage()               {}
func (*GamerGetSweepMatchInfoS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{63} }

func (m *GamerGetSweepMatchInfoS2C) GetReward() []*ItemVaryConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *GamerGetSweepMatchInfoS2C) GetDoubleRewards() []*ItemVaryConfig {
	if m != nil {
		return m.DoubleRewards
	}
	return nil
}

func (m *GamerGetSweepMatchInfoS2C) GetPlayerInfos() []*SweepPlayerInfo {
	if m != nil {
		return m.PlayerInfos
	}
	return nil
}

func (m *GamerGetSweepMatchInfoS2C) GetMine() *SweepTeamInfo {
	if m != nil {
		return m.Mine
	}
	return nil
}

func (m *GamerGetSweepMatchInfoS2C) GetOpp() *SweepTeamInfo {
	if m != nil {
		return m.Opp
	}
	return nil
}

// 扫荡用的球员信息
type SweepPlayerInfo struct {
	// 球员id
	InstId *int64 `protobuf:"varint,1,opt,name=instId" json:"instId,omitempty"`
	// 之前等级
	Prevlevel *int32 `protobuf:"varint,2,opt,name=prevlevel" json:"prevlevel,omitempty"`
	// 之前经验
	PrevExp *int32 `protobuf:"varint,3,opt,name=prevExp" json:"prevExp,omitempty"`
	// 当前等级
	Curlevel *int32 `protobuf:"varint,4,opt,name=curlevel" json:"curlevel,omitempty"`
	// 当前经验
	CurExp           *int32 `protobuf:"varint,5,opt,name=curExp" json:"curExp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SweepPlayerInfo) Reset()                    { *m = SweepPlayerInfo{} }
func (m *SweepPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*SweepPlayerInfo) ProtoMessage()               {}
func (*SweepPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{64} }

func (m *SweepPlayerInfo) GetInstId() int64 {
	if m != nil && m.InstId != nil {
		return *m.InstId
	}
	return 0
}

func (m *SweepPlayerInfo) GetPrevlevel() int32 {
	if m != nil && m.Prevlevel != nil {
		return *m.Prevlevel
	}
	return 0
}

func (m *SweepPlayerInfo) GetPrevExp() int32 {
	if m != nil && m.PrevExp != nil {
		return *m.PrevExp
	}
	return 0
}

func (m *SweepPlayerInfo) GetCurlevel() int32 {
	if m != nil && m.Curlevel != nil {
		return *m.Curlevel
	}
	return 0
}

func (m *SweepPlayerInfo) GetCurExp() int32 {
	if m != nil && m.CurExp != nil {
		return *m.CurExp
	}
	return 0
}

// 扫荡用的队伍信息
type SweepTeamInfo struct {
	// 队伍id
	TeamId *int32 `protobuf:"varint,1,opt,name=teamId" json:"teamId,omitempty"`
	// 分数
	Score *int32 `protobuf:"varint,2,opt,name=Score" json:"Score,omitempty"`
	// 名称
	Name             *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SweepTeamInfo) Reset()                    { *m = SweepTeamInfo{} }
func (m *SweepTeamInfo) String() string            { return proto.CompactTextString(m) }
func (*SweepTeamInfo) ProtoMessage()               {}
func (*SweepTeamInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{65} }

func (m *SweepTeamInfo) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *SweepTeamInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *SweepTeamInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// seasonNpcBaseInfo
type SeasonNpcBaseInfo struct {
	NpcTeamId        *int32 `protobuf:"varint,1,opt,name=NpcTeamId" json:"NpcTeamId,omitempty"`
	NpcBaseValueId   *int32 `protobuf:"varint,2,opt,name=NpcBaseValueId" json:"NpcBaseValueId,omitempty"`
	NpcLv            *int32 `protobuf:"varint,3,opt,name=NpcLv" json:"NpcLv,omitempty"`
	NpcStar          *int32 `protobuf:"varint,4,opt,name=NpcStar" json:"NpcStar,omitempty"`
	NpcQuality       *int32 `protobuf:"varint,5,opt,name=NpcQuality" json:"NpcQuality,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SeasonNpcBaseInfo) Reset()                    { *m = SeasonNpcBaseInfo{} }
func (m *SeasonNpcBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*SeasonNpcBaseInfo) ProtoMessage()               {}
func (*SeasonNpcBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{66} }

func (m *SeasonNpcBaseInfo) GetNpcTeamId() int32 {
	if m != nil && m.NpcTeamId != nil {
		return *m.NpcTeamId
	}
	return 0
}

func (m *SeasonNpcBaseInfo) GetNpcBaseValueId() int32 {
	if m != nil && m.NpcBaseValueId != nil {
		return *m.NpcBaseValueId
	}
	return 0
}

func (m *SeasonNpcBaseInfo) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *SeasonNpcBaseInfo) GetNpcStar() int32 {
	if m != nil && m.NpcStar != nil {
		return *m.NpcStar
	}
	return 0
}

func (m *SeasonNpcBaseInfo) GetNpcQuality() int32 {
	if m != nil && m.NpcQuality != nil {
		return *m.NpcQuality
	}
	return 0
}

// 得分时间
type CampScoreInfo struct {
	Camp             *int32 `protobuf:"varint,1,opt,name=camp" json:"camp,omitempty"`
	AnimTime         *int32 `protobuf:"varint,2,opt,name=animTime" json:"animTime,omitempty"`
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CampScoreInfo) Reset()                    { *m = CampScoreInfo{} }
func (m *CampScoreInfo) String() string            { return proto.CompactTextString(m) }
func (*CampScoreInfo) ProtoMessage()               {}
func (*CampScoreInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{67} }

func (m *CampScoreInfo) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

func (m *CampScoreInfo) GetAnimTime() int32 {
	if m != nil && m.AnimTime != nil {
		return *m.AnimTime
	}
	return 0
}

func (m *CampScoreInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 设置表演赛之三分球大赛命中率加成色块
type ThreeDunkSetColorBlockC2S struct {
	// 色块类型（绿1,橙2,红3)
	ColorBlock       *int32 `protobuf:"varint,1,opt,name=colorBlock" json:"colorBlock,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ThreeDunkSetColorBlockC2S) Reset()                    { *m = ThreeDunkSetColorBlockC2S{} }
func (m *ThreeDunkSetColorBlockC2S) String() string            { return proto.CompactTextString(m) }
func (*ThreeDunkSetColorBlockC2S) ProtoMessage()               {}
func (*ThreeDunkSetColorBlockC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{68} }

func (m *ThreeDunkSetColorBlockC2S) GetColorBlock() int32 {
	if m != nil && m.ColorBlock != nil {
		return *m.ColorBlock
	}
	return 0
}

// 设置表演赛之扣篮大赛额外加分类型
type DunkSetExtraCreditC2S struct {
	// 加分阵营
	Camp *int32 `protobuf:"varint,1,opt,name=camp" json:"camp,omitempty"`
	// 加分球员位置
	Place *int32 `protobuf:"varint,2,opt,name=place" json:"place,omitempty"`
	// 类型（1:不加分,2：加1分,3：加3分)
	ExtraCredit      *int32 `protobuf:"varint,3,opt,name=extraCredit" json:"extraCredit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DunkSetExtraCreditC2S) Reset()                    { *m = DunkSetExtraCreditC2S{} }
func (m *DunkSetExtraCreditC2S) String() string            { return proto.CompactTextString(m) }
func (*DunkSetExtraCreditC2S) ProtoMessage()               {}
func (*DunkSetExtraCreditC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{69} }

func (m *DunkSetExtraCreditC2S) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

func (m *DunkSetExtraCreditC2S) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

func (m *DunkSetExtraCreditC2S) GetExtraCredit() int32 {
	if m != nil && m.ExtraCredit != nil {
		return *m.ExtraCredit
	}
	return 0
}

// 获取最近战术执行人集合
type GetBestTacticExecutorC2S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetBestTacticExecutorC2S) Reset()                    { *m = GetBestTacticExecutorC2S{} }
func (m *GetBestTacticExecutorC2S) String() string            { return proto.CompactTextString(m) }
func (*GetBestTacticExecutorC2S) ProtoMessage()               {}
func (*GetBestTacticExecutorC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{70} }

type GetBestTacticExecutorS2C struct {
	// 战术执行人集合
	Executors        []*TacticsExecutor `protobuf:"bytes,1,rep,name=executors" json:"executors,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *GetBestTacticExecutorS2C) Reset()                    { *m = GetBestTacticExecutorS2C{} }
func (m *GetBestTacticExecutorS2C) String() string            { return proto.CompactTextString(m) }
func (*GetBestTacticExecutorS2C) ProtoMessage()               {}
func (*GetBestTacticExecutorS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{71} }

func (m *GetBestTacticExecutorS2C) GetExecutors() []*TacticsExecutor {
	if m != nil {
		return m.Executors
	}
	return nil
}

// 球员和球员属性集合
type InstIdAttrs struct {
	PlayerInstId     *int64  `protobuf:"varint,1,opt,name=playerInstId" json:"playerInstId,omitempty"`
	PlayerAttrs      []int32 `protobuf:"varint,2,rep,name=playerAttrs" json:"playerAttrs,omitempty"`
	Vit              *int32  `protobuf:"varint,3,opt,name=vit" json:"vit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InstIdAttrs) Reset()                    { *m = InstIdAttrs{} }
func (m *InstIdAttrs) String() string            { return proto.CompactTextString(m) }
func (*InstIdAttrs) ProtoMessage()               {}
func (*InstIdAttrs) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{72} }

func (m *InstIdAttrs) GetPlayerInstId() int64 {
	if m != nil && m.PlayerInstId != nil {
		return *m.PlayerInstId
	}
	return 0
}

func (m *InstIdAttrs) GetPlayerAttrs() []int32 {
	if m != nil {
		return m.PlayerAttrs
	}
	return nil
}

func (m *InstIdAttrs) GetVit() int32 {
	if m != nil && m.Vit != nil {
		return *m.Vit
	}
	return 0
}

// 给客户端显示球员属性，用于策划测试
type ClientShowPlayerAttrsS2C struct {
	Pid1             *int64         `protobuf:"varint,1,opt,name=pid1" json:"pid1,omitempty"`
	Players1         []*InstIdAttrs `protobuf:"bytes,2,rep,name=players1" json:"players1,omitempty"`
	Pid2             *int64         `protobuf:"varint,3,opt,name=pid2" json:"pid2,omitempty"`
	Players2         []*InstIdAttrs `protobuf:"bytes,4,rep,name=players2" json:"players2,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ClientShowPlayerAttrsS2C) Reset()                    { *m = ClientShowPlayerAttrsS2C{} }
func (m *ClientShowPlayerAttrsS2C) String() string            { return proto.CompactTextString(m) }
func (*ClientShowPlayerAttrsS2C) ProtoMessage()               {}
func (*ClientShowPlayerAttrsS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{73} }

func (m *ClientShowPlayerAttrsS2C) GetPid1() int64 {
	if m != nil && m.Pid1 != nil {
		return *m.Pid1
	}
	return 0
}

func (m *ClientShowPlayerAttrsS2C) GetPlayers1() []*InstIdAttrs {
	if m != nil {
		return m.Players1
	}
	return nil
}

func (m *ClientShowPlayerAttrsS2C) GetPid2() int64 {
	if m != nil && m.Pid2 != nil {
		return *m.Pid2
	}
	return 0
}

func (m *ClientShowPlayerAttrsS2C) GetPlayers2() []*InstIdAttrs {
	if m != nil {
		return m.Players2
	}
	return nil
}

// 调整球员专属时刻播放顺序
type SetExclTimePlayOrderC2S struct {
	// 播放顺序长度为5的数组（1号位、2号位...5号位的专属时刻播放顺序）
	Places           []int32 `protobuf:"varint,1,rep,name=places" json:"places,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetExclTimePlayOrderC2S) Reset()                    { *m = SetExclTimePlayOrderC2S{} }
func (m *SetExclTimePlayOrderC2S) String() string            { return proto.CompactTextString(m) }
func (*SetExclTimePlayOrderC2S) ProtoMessage()               {}
func (*SetExclTimePlayOrderC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{74} }

func (m *SetExclTimePlayOrderC2S) GetPlaces() []int32 {
	if m != nil {
		return m.Places
	}
	return nil
}

type SetExclTimePlayOrderS2C struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetExclTimePlayOrderS2C) Reset()                    { *m = SetExclTimePlayOrderS2C{} }
func (m *SetExclTimePlayOrderS2C) String() string            { return proto.CompactTextString(m) }
func (*SetExclTimePlayOrderS2C) ProtoMessage()               {}
func (*SetExclTimePlayOrderS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{75} }

// 比赛界面加载完成c2s
type FightSceneLoadedC2S struct {
	// 是否重连
	IsReconnect      *bool  `protobuf:"varint,1,opt,name=isReconnect" json:"isReconnect,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightSceneLoadedC2S) Reset()                    { *m = FightSceneLoadedC2S{} }
func (m *FightSceneLoadedC2S) String() string            { return proto.CompactTextString(m) }
func (*FightSceneLoadedC2S) ProtoMessage()               {}
func (*FightSceneLoadedC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{76} }

func (m *FightSceneLoadedC2S) GetIsReconnect() bool {
	if m != nil && m.IsReconnect != nil {
		return *m.IsReconnect
	}
	return false
}

// 比赛界面加载完成s2c
type FightSceneLoadedS2C struct {
	// 第一个剧本生成时间戳（秒）
	FirstFilmBirthTime *int64 `protobuf:"varint,1,opt,name=firstFilmBirthTime" json:"firstFilmBirthTime,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *FightSceneLoadedS2C) Reset()                    { *m = FightSceneLoadedS2C{} }
func (m *FightSceneLoadedS2C) String() string            { return proto.CompactTextString(m) }
func (*FightSceneLoadedS2C) ProtoMessage()               {}
func (*FightSceneLoadedS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{77} }

func (m *FightSceneLoadedS2C) GetFirstFilmBirthTime() int64 {
	if m != nil && m.FirstFilmBirthTime != nil {
		return *m.FirstFilmBirthTime
	}
	return 0
}

// pvp比赛重连时比赛加载完成后需要同步最新统计数据
type PVPReconnectNotifyLatestDataS2C struct {
	// 队伍基本信息
	BaseInfos []*BattleStartBaseInfo `protobuf:"bytes,1,rep,name=baseInfos" json:"baseInfos,omitempty"`
	// 当前第几节
	NowQuarter *int32 `protobuf:"varint,2,opt,name=nowQuarter" json:"nowQuarter,omitempty"`
	// 这一节还剩多少秒
	SurplusSecond *float64 `protobuf:"fixed64,3,opt,name=surplusSecond" json:"surplusSecond,omitempty"`
	// 剧本信息
	Film             *FilmInfo `protobuf:"bytes,4,opt,name=film" json:"film,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PVPReconnectNotifyLatestDataS2C) Reset()         { *m = PVPReconnectNotifyLatestDataS2C{} }
func (m *PVPReconnectNotifyLatestDataS2C) String() string { return proto.CompactTextString(m) }
func (*PVPReconnectNotifyLatestDataS2C) ProtoMessage()    {}
func (*PVPReconnectNotifyLatestDataS2C) Descriptor() ([]byte, []int) {
	return fileDescriptor23, []int{78}
}

func (m *PVPReconnectNotifyLatestDataS2C) GetBaseInfos() []*BattleStartBaseInfo {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

func (m *PVPReconnectNotifyLatestDataS2C) GetNowQuarter() int32 {
	if m != nil && m.NowQuarter != nil {
		return *m.NowQuarter
	}
	return 0
}

func (m *PVPReconnectNotifyLatestDataS2C) GetSurplusSecond() float64 {
	if m != nil && m.SurplusSecond != nil {
		return *m.SurplusSecond
	}
	return 0
}

func (m *PVPReconnectNotifyLatestDataS2C) GetFilm() *FilmInfo {
	if m != nil {
		return m.Film
	}
	return nil
}

// 比赛退出
type FightOutC2S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightOutC2S) Reset()                    { *m = FightOutC2S{} }
func (m *FightOutC2S) String() string            { return proto.CompactTextString(m) }
func (*FightOutC2S) ProtoMessage()               {}
func (*FightOutC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{79} }

// 比赛退出
type FightOutS2C struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightOutS2C) Reset()                    { *m = FightOutS2C{} }
func (m *FightOutS2C) String() string            { return proto.CompactTextString(m) }
func (*FightOutS2C) ProtoMessage()               {}
func (*FightOutS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{80} }

// 战斗ui评分-换战术、执行人
type FightTacticScoreOneC2S struct {
	// 战术id
	TacticId *int32 `protobuf:"varint,1,opt,name=tacticId" json:"tacticId,omitempty"`
	// 执行位置对应球员id(1,2,3,4,5)
	InstIds          []int64 `protobuf:"varint,2,rep,name=InstIds" json:"InstIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FightTacticScoreOneC2S) Reset()                    { *m = FightTacticScoreOneC2S{} }
func (m *FightTacticScoreOneC2S) String() string            { return proto.CompactTextString(m) }
func (*FightTacticScoreOneC2S) ProtoMessage()               {}
func (*FightTacticScoreOneC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{81} }

func (m *FightTacticScoreOneC2S) GetTacticId() int32 {
	if m != nil && m.TacticId != nil {
		return *m.TacticId
	}
	return 0
}

func (m *FightTacticScoreOneC2S) GetInstIds() []int64 {
	if m != nil {
		return m.InstIds
	}
	return nil
}

type FightTacticScoreOneS2C struct {
	// 对应战术的积分
	Score            *int64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightTacticScoreOneS2C) Reset()                    { *m = FightTacticScoreOneS2C{} }
func (m *FightTacticScoreOneS2C) String() string            { return proto.CompactTextString(m) }
func (*FightTacticScoreOneS2C) ProtoMessage()               {}
func (*FightTacticScoreOneS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{82} }

func (m *FightTacticScoreOneS2C) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 战斗ui评分-换人
type FightTacticScoreTwoC2S struct {
	// 执行位置对应球员id(1,2,3,4,5)
	InstIds          []int64 `protobuf:"varint,2,rep,name=InstIds" json:"InstIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FightTacticScoreTwoC2S) Reset()                    { *m = FightTacticScoreTwoC2S{} }
func (m *FightTacticScoreTwoC2S) String() string            { return proto.CompactTextString(m) }
func (*FightTacticScoreTwoC2S) ProtoMessage()               {}
func (*FightTacticScoreTwoC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{83} }

func (m *FightTacticScoreTwoC2S) GetInstIds() []int64 {
	if m != nil {
		return m.InstIds
	}
	return nil
}

type FightTacticScoreTwoS2C struct {
	// 进攻战术评分
	AtkScore *int64 `protobuf:"varint,1,opt,name=atkScore" json:"atkScore,omitempty"`
	// 防守战术评分
	DefScore         *int64 `protobuf:"varint,2,opt,name=defScore" json:"defScore,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightTacticScoreTwoS2C) Reset()                    { *m = FightTacticScoreTwoS2C{} }
func (m *FightTacticScoreTwoS2C) String() string            { return proto.CompactTextString(m) }
func (*FightTacticScoreTwoS2C) ProtoMessage()               {}
func (*FightTacticScoreTwoS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{84} }

func (m *FightTacticScoreTwoS2C) GetAtkScore() int64 {
	if m != nil && m.AtkScore != nil {
		return *m.AtkScore
	}
	return 0
}

func (m *FightTacticScoreTwoS2C) GetDefScore() int64 {
	if m != nil && m.DefScore != nil {
		return *m.DefScore
	}
	return 0
}

// 比赛已结束的消息（错误码）
// @Gamer
type FightAlreadyEndS2C struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightAlreadyEndS2C) Reset()                    { *m = FightAlreadyEndS2C{} }
func (m *FightAlreadyEndS2C) String() string            { return proto.CompactTextString(m) }
func (*FightAlreadyEndS2C) ProtoMessage()               {}
func (*FightAlreadyEndS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{85} }

// 玩家操作
type FightOperation struct {
	// 节点序号
	Bout             *int32                     `protobuf:"varint,1,opt,name=bout" json:"bout,omitempty"`
	OperaPlayer      []*RecordOperaChangePlayer `protobuf:"bytes,2,rep,name=operaPlayer" json:"operaPlayer,omitempty"`
	OperaTactic      []*RecordOperaChangeTactic `protobuf:"bytes,3,rep,name=operaTactic" json:"operaTactic,omitempty"`
	OperaZs          []*RecordOperaChangeZs     `protobuf:"bytes,4,rep,name=operaZs" json:"operaZs,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *FightOperation) Reset()                    { *m = FightOperation{} }
func (m *FightOperation) String() string            { return proto.CompactTextString(m) }
func (*FightOperation) ProtoMessage()               {}
func (*FightOperation) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{86} }

func (m *FightOperation) GetBout() int32 {
	if m != nil && m.Bout != nil {
		return *m.Bout
	}
	return 0
}

func (m *FightOperation) GetOperaPlayer() []*RecordOperaChangePlayer {
	if m != nil {
		return m.OperaPlayer
	}
	return nil
}

func (m *FightOperation) GetOperaTactic() []*RecordOperaChangeTactic {
	if m != nil {
		return m.OperaTactic
	}
	return nil
}

func (m *FightOperation) GetOperaZs() []*RecordOperaChangeZs {
	if m != nil {
		return m.OperaZs
	}
	return nil
}

type RecordOperaChangePlayer struct {
	MemId            *int64            `protobuf:"varint,1,opt,name=memId" json:"memId,omitempty"`
	EvChangePlayers  []*EvChangePlayer `protobuf:"bytes,2,rep,name=evChangePlayers" json:"evChangePlayers,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RecordOperaChangePlayer) Reset()                    { *m = RecordOperaChangePlayer{} }
func (m *RecordOperaChangePlayer) String() string            { return proto.CompactTextString(m) }
func (*RecordOperaChangePlayer) ProtoMessage()               {}
func (*RecordOperaChangePlayer) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{87} }

func (m *RecordOperaChangePlayer) GetMemId() int64 {
	if m != nil && m.MemId != nil {
		return *m.MemId
	}
	return 0
}

func (m *RecordOperaChangePlayer) GetEvChangePlayers() []*EvChangePlayer {
	if m != nil {
		return m.EvChangePlayers
	}
	return nil
}

type RecordOperaChangeTactic struct {
	MemId            *int64             `protobuf:"varint,1,opt,name=memId" json:"memId,omitempty"`
	TacticInfo       *TacticsInfo       `protobuf:"bytes,2,opt,name=tacticInfo" json:"tacticInfo,omitempty"`
	TacticsExecutors []*TacticsExecutor `protobuf:"bytes,3,rep,name=tacticsExecutors" json:"tacticsExecutors,omitempty"`
	ExecutedTime     *int32             `protobuf:"varint,4,opt,name=executedTime" json:"executedTime,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RecordOperaChangeTactic) Reset()                    { *m = RecordOperaChangeTactic{} }
func (m *RecordOperaChangeTactic) String() string            { return proto.CompactTextString(m) }
func (*RecordOperaChangeTactic) ProtoMessage()               {}
func (*RecordOperaChangeTactic) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{88} }

func (m *RecordOperaChangeTactic) GetMemId() int64 {
	if m != nil && m.MemId != nil {
		return *m.MemId
	}
	return 0
}

func (m *RecordOperaChangeTactic) GetTacticInfo() *TacticsInfo {
	if m != nil {
		return m.TacticInfo
	}
	return nil
}

func (m *RecordOperaChangeTactic) GetTacticsExecutors() []*TacticsExecutor {
	if m != nil {
		return m.TacticsExecutors
	}
	return nil
}

func (m *RecordOperaChangeTactic) GetExecutedTime() int32 {
	if m != nil && m.ExecutedTime != nil {
		return *m.ExecutedTime
	}
	return 0
}

type RecordOperaChangeZs struct {
	MemId            *int64  `protobuf:"varint,1,opt,name=memId" json:"memId,omitempty"`
	PlayerInstIds    []int64 `protobuf:"varint,7,rep,name=playerInstIds" json:"playerInstIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RecordOperaChangeZs) Reset()                    { *m = RecordOperaChangeZs{} }
func (m *RecordOperaChangeZs) String() string            { return proto.CompactTextString(m) }
func (*RecordOperaChangeZs) ProtoMessage()               {}
func (*RecordOperaChangeZs) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{89} }

func (m *RecordOperaChangeZs) GetMemId() int64 {
	if m != nil && m.MemId != nil {
		return *m.MemId
	}
	return 0
}

func (m *RecordOperaChangeZs) GetPlayerInstIds() []int64 {
	if m != nil {
		return m.PlayerInstIds
	}
	return nil
}

type FightReplayEndF2L struct {
	MatchType        *MatchType `protobuf:"varint,1,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	Gid              *int32     `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	RoomId           *int64     `protobuf:"varint,3,opt,name=roomId" json:"roomId,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FightReplayEndF2L) Reset()                    { *m = FightReplayEndF2L{} }
func (m *FightReplayEndF2L) String() string            { return proto.CompactTextString(m) }
func (*FightReplayEndF2L) ProtoMessage()               {}
func (*FightReplayEndF2L) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{90} }

func (m *FightReplayEndF2L) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *FightReplayEndF2L) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FightReplayEndF2L) GetRoomId() int64 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

// 比赛回放数据
type ReplayInfo struct {
	// 房间id
	RoomId *int64 `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,2,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 创建房间参数列表
	CreateRoomParam *string `protobuf:"bytes,3,opt,name=createRoomParam" json:"createRoomParam,omitempty"`
	// 玩家操作列表
	Operas []*FightOperation `protobuf:"bytes,4,rep,name=operas" json:"operas,omitempty"`
	// 比赛结果
	Results []*GamerBattleInfo `protobuf:"bytes,5,rep,name=results" json:"results,omitempty"`
	// 额外值（传奇挑战赛收益人数）
	ExtraParam *int32 `protobuf:"varint,6,opt,name=extraParam" json:"extraParam,omitempty"`
	// 前3节比赛是否压缩
	NodeCompression *bool `protobuf:"varint,7,opt,name=nodeCompression" json:"nodeCompression,omitempty"`
	// 存在多场比赛时，播放回放时、确定播放的比赛对应的参数序号 0, 1, 2
	ParamIdx         *int32 `protobuf:"varint,8,opt,name=paramIdx" json:"paramIdx,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReplayInfo) Reset()                    { *m = ReplayInfo{} }
func (m *ReplayInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplayInfo) ProtoMessage()               {}
func (*ReplayInfo) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{91} }

func (m *ReplayInfo) GetRoomId() int64 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *ReplayInfo) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *ReplayInfo) GetCreateRoomParam() string {
	if m != nil && m.CreateRoomParam != nil {
		return *m.CreateRoomParam
	}
	return ""
}

func (m *ReplayInfo) GetOperas() []*FightOperation {
	if m != nil {
		return m.Operas
	}
	return nil
}

func (m *ReplayInfo) GetResults() []*GamerBattleInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ReplayInfo) GetExtraParam() int32 {
	if m != nil && m.ExtraParam != nil {
		return *m.ExtraParam
	}
	return 0
}

func (m *ReplayInfo) GetNodeCompression() bool {
	if m != nil && m.NodeCompression != nil {
		return *m.NodeCompression
	}
	return false
}

func (m *ReplayInfo) GetParamIdx() int32 {
	if m != nil && m.ParamIdx != nil {
		return *m.ParamIdx
	}
	return 0
}

// 战力校验
type FightPowerCheckC2S struct {
	// 全局模块战力
	GlobalModuleFightPowerList []*TypeValueConfig `protobuf:"bytes,1,rep,name=global_module_fight_power_list" json:"global_module_fight_power_list,omitempty"`
	// 球员模块战力
	PlayerModuleFightPowerList *PlayerModuleFightPower `protobuf:"bytes,2,opt,name=player_module_fight_power_list" json:"player_module_fight_power_list,omitempty"`
	// 总战力
	TotalFightPower *uint32 `protobuf:"varint,3,opt,name=totalFightPower" json:"totalFightPower,omitempty"`
	// 所有总战力
	TotalAllFightPower *uint32 `protobuf:"varint,4,opt,name=totalAllFightPower" json:"totalAllFightPower,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *FightPowerCheckC2S) Reset()                    { *m = FightPowerCheckC2S{} }
func (m *FightPowerCheckC2S) String() string            { return proto.CompactTextString(m) }
func (*FightPowerCheckC2S) ProtoMessage()               {}
func (*FightPowerCheckC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{92} }

func (m *FightPowerCheckC2S) GetGlobalModuleFightPowerList() []*TypeValueConfig {
	if m != nil {
		return m.GlobalModuleFightPowerList
	}
	return nil
}

func (m *FightPowerCheckC2S) GetPlayerModuleFightPowerList() *PlayerModuleFightPower {
	if m != nil {
		return m.PlayerModuleFightPowerList
	}
	return nil
}

func (m *FightPowerCheckC2S) GetTotalFightPower() uint32 {
	if m != nil && m.TotalFightPower != nil {
		return *m.TotalFightPower
	}
	return 0
}

func (m *FightPowerCheckC2S) GetTotalAllFightPower() uint32 {
	if m != nil && m.TotalAllFightPower != nil {
		return *m.TotalAllFightPower
	}
	return 0
}

// 球员分模块战力
type PlayerModuleFightPower struct {
	// 球员id
	PlayerId *int32 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	// 模块战力列表
	FightPowerList   []*TypeValueConfig `protobuf:"bytes,2,rep,name=fight_power_list" json:"fight_power_list,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerModuleFightPower) Reset()                    { *m = PlayerModuleFightPower{} }
func (m *PlayerModuleFightPower) String() string            { return proto.CompactTextString(m) }
func (*PlayerModuleFightPower) ProtoMessage()               {}
func (*PlayerModuleFightPower) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{93} }

func (m *PlayerModuleFightPower) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerModuleFightPower) GetFightPowerList() []*TypeValueConfig {
	if m != nil {
		return m.FightPowerList
	}
	return nil
}

// 通知logic, 新比赛信息
type NotifyFightBeginF2L struct {
	// 战斗控制id(id=0,比赛已结束)
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 战斗服id
	FsId *int32 `protobuf:"varint,2,opt,name=fsId" json:"fsId,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,3,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛状态
	FightStage       *FightStage `protobuf:"bytes,4,opt,name=fightStage" json:"fightStage,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *NotifyFightBeginF2L) Reset()                    { *m = NotifyFightBeginF2L{} }
func (m *NotifyFightBeginF2L) String() string            { return proto.CompactTextString(m) }
func (*NotifyFightBeginF2L) ProtoMessage()               {}
func (*NotifyFightBeginF2L) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{94} }

func (m *NotifyFightBeginF2L) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *NotifyFightBeginF2L) GetFsId() int32 {
	if m != nil && m.FsId != nil {
		return *m.FsId
	}
	return 0
}

func (m *NotifyFightBeginF2L) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *NotifyFightBeginF2L) GetFightStage() *FightStage {
	if m != nil {
		return m.FightStage
	}
	return nil
}

// 通知客户端 新比赛信息
// 进比赛, 走重连
// @Gamer
type NotifyApplyFightBeginS2C struct {
	// 战斗控制id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,2,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛状态
	FightStage       *FightStage `protobuf:"bytes,3,opt,name=fightStage" json:"fightStage,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *NotifyApplyFightBeginS2C) Reset()                    { *m = NotifyApplyFightBeginS2C{} }
func (m *NotifyApplyFightBeginS2C) String() string            { return proto.CompactTextString(m) }
func (*NotifyApplyFightBeginS2C) ProtoMessage()               {}
func (*NotifyApplyFightBeginS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{95} }

func (m *NotifyApplyFightBeginS2C) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *NotifyApplyFightBeginS2C) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *NotifyApplyFightBeginS2C) GetFightStage() *FightStage {
	if m != nil {
		return m.FightStage
	}
	return nil
}

// 使用主教练技能c2s
type UseHeadCoachSkillC2S struct {
	// 主教练技能id
	SkillId          *int32 `protobuf:"varint,1,opt,name=skillId" json:"skillId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UseHeadCoachSkillC2S) Reset()                    { *m = UseHeadCoachSkillC2S{} }
func (m *UseHeadCoachSkillC2S) String() string            { return proto.CompactTextString(m) }
func (*UseHeadCoachSkillC2S) ProtoMessage()               {}
func (*UseHeadCoachSkillC2S) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{96} }

func (m *UseHeadCoachSkillC2S) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

// 使用主教练技能s2c
type UseHeadCoachSkillS2C struct {
	// 主教练技能id
	SkillId *int32 `protobuf:"varint,1,opt,name=skillId" json:"skillId,omitempty"`
	// 结果(1:使用技能成功 2.技能被对方克制)
	State            *int32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UseHeadCoachSkillS2C) Reset()                    { *m = UseHeadCoachSkillS2C{} }
func (m *UseHeadCoachSkillS2C) String() string            { return proto.CompactTextString(m) }
func (*UseHeadCoachSkillS2C) ProtoMessage()               {}
func (*UseHeadCoachSkillS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{97} }

func (m *UseHeadCoachSkillS2C) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *UseHeadCoachSkillS2C) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

// 通知对手, 己方使用主教练技能s2c
type NotifyHeadCoachSkillS2C struct {
	// 主教练技能id
	SkillId *int32 `protobuf:"varint,1,opt,name=skillId" json:"skillId,omitempty"`
	// 结果(1:对手使用技能成功 2:克制对手技能)
	State            *int32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NotifyHeadCoachSkillS2C) Reset()                    { *m = NotifyHeadCoachSkillS2C{} }
func (m *NotifyHeadCoachSkillS2C) String() string            { return proto.CompactTextString(m) }
func (*NotifyHeadCoachSkillS2C) ProtoMessage()               {}
func (*NotifyHeadCoachSkillS2C) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{98} }

func (m *NotifyHeadCoachSkillS2C) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *NotifyHeadCoachSkillS2C) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

// pve比赛超时通知logic
type NotifyFightTimeOutF2L struct {
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,1,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// 比赛id
	MatchId *int32 `protobuf:"varint,2,opt,name=matchId" json:"matchId,omitempty"`
	// 额外参数
	Param2           *int32 `protobuf:"varint,3,opt,name=param2" json:"param2,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NotifyFightTimeOutF2L) Reset()                    { *m = NotifyFightTimeOutF2L{} }
func (m *NotifyFightTimeOutF2L) String() string            { return proto.CompactTextString(m) }
func (*NotifyFightTimeOutF2L) ProtoMessage()               {}
func (*NotifyFightTimeOutF2L) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{99} }

func (m *NotifyFightTimeOutF2L) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *NotifyFightTimeOutF2L) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *NotifyFightTimeOutF2L) GetParam2() int32 {
	if m != nil && m.Param2 != nil {
		return *m.Param2
	}
	return 0
}

func init() {
	proto.RegisterType((*FightData)(nil), "FightData")
	proto.RegisterType((*BuffInfo)(nil), "BuffInfo")
	proto.RegisterType((*FightBuffData)(nil), "FightBuffData")
	proto.RegisterType((*DeriveBuffData)(nil), "DeriveBuffData")
	proto.RegisterType((*ExclusiveTimeInfo)(nil), "ExclusiveTimeInfo")
	proto.RegisterType((*ExclusiveTimeData)(nil), "ExclusiveTimeData")
	proto.RegisterType((*MatchPlayerData)(nil), "MatchPlayerData")
	proto.RegisterType((*BattleTempConvertData)(nil), "BattleTempConvertData")
	proto.RegisterType((*MacthChapterTeamChangePlayer)(nil), "MacthChapterTeamChangePlayer")
	proto.RegisterType((*MatchTeamData)(nil), "MatchTeamData")
	proto.RegisterType((*GamerGetMatchInfoC2S)(nil), "GamerGetMatchInfoC2S")
	proto.RegisterType((*BattleStartBaseInfo)(nil), "BattleStartBaseInfo")
	proto.RegisterType((*TacticsExecutor)(nil), "TacticsExecutor")
	proto.RegisterType((*TacticsInfo)(nil), "TacticsInfo")
	proto.RegisterType((*FightRoomParam)(nil), "FightRoomParam")
	proto.RegisterType((*GamerGetMatchInfoS2C)(nil), "GamerGetMatchInfoS2C")
	proto.RegisterType((*LastFightRes)(nil), "LastFightRes")
	proto.RegisterType((*MatchPlayerEvent)(nil), "MatchPlayerEvent")
	proto.RegisterType((*MatchEventData)(nil), "MatchEventData")
	proto.RegisterType((*GamerMatchVerifyC2S)(nil), "GamerMatchVerifyC2S")
	proto.RegisterType((*FightVerifyResult)(nil), "FightVerifyResult")
	proto.RegisterType((*GamerMatchVerifyS2C)(nil), "GamerMatchVerifyS2C")
	proto.RegisterType((*FightReconnectNotifyS2C)(nil), "FightReconnectNotifyS2C")
	proto.RegisterType((*GamerFightReconnectC2S)(nil), "GamerFightReconnectC2S")
	proto.RegisterType((*MatchPoolPlayerInfo)(nil), "matchPoolPlayerInfo")
	proto.RegisterType((*DraftGamer)(nil), "DraftGamer")
	proto.RegisterType((*FightStage)(nil), "FightStage")
	proto.RegisterType((*DraftInfo)(nil), "DraftInfo")
	proto.RegisterType((*GamerFightReconnectS2C)(nil), "GamerFightReconnectS2C")
	proto.RegisterType((*GamerMatchShowRewardS2C)(nil), "GamerMatchShowRewardS2C")
	proto.RegisterType((*GamerMatchFlimInfosC2S)(nil), "GamerMatchFlimInfosC2S")
	proto.RegisterType((*PowerInTime)(nil), "PowerInTime")
	proto.RegisterType((*ExclusiveSkills)(nil), "ExclusiveSkills")
	proto.RegisterType((*ExclusiveTeamSkill)(nil), "ExclusiveTeamSkill")
	proto.RegisterType((*HeadCoachSkillCD)(nil), "HeadCoachSkillCD")
	proto.RegisterType((*FilmInfo)(nil), "FilmInfo")
	proto.RegisterType((*GamerMatchFlimInfosS2C)(nil), "GamerMatchFlimInfosS2C")
	proto.RegisterType((*GamerUseExclusiveSkillsC2S)(nil), "GamerUseExclusiveSkillsC2S")
	proto.RegisterType((*GamerUseExclusiveSkillsS2C)(nil), "GamerUseExclusiveSkillsS2C")
	proto.RegisterType((*GamerMatchChangePlayerC2S)(nil), "GamerMatchChangePlayerC2S")
	proto.RegisterType((*GamerMatchChangePlayerS2C)(nil), "GamerMatchChangePlayerS2C")
	proto.RegisterType((*EvQuarterChange)(nil), "EvQuarterChange")
	proto.RegisterType((*EvPlayerVitChange)(nil), "EvPlayerVitChange")
	proto.RegisterType((*EvChangeTacticNotify)(nil), "EvChangeTacticNotify")
	proto.RegisterType((*EvChangeTactic)(nil), "EvChangeTactic")
	proto.RegisterType((*EvChangePlayer)(nil), "EvChangePlayer")
	proto.RegisterType((*EvPlayerBuffChange)(nil), "EvPlayerBuffChange")
	proto.RegisterType((*EvCoachBuffChange)(nil), "EvCoachBuffChange")
	proto.RegisterType((*EvPerformanceScore)(nil), "EvPerformanceScore")
	proto.RegisterType((*EvZsPlayerSwapPlace)(nil), "EvZsPlayerSwapPlace")
	proto.RegisterType((*BattleEvent)(nil), "BattleEvent")
	proto.RegisterType((*GamerScoreS2C)(nil), "GamerScoreS2C")
	proto.RegisterType((*ChangeTacticsC2S)(nil), "ChangeTacticsC2S")
	proto.RegisterType((*ChangeTacticsS2C)(nil), "ChangeTacticsS2C")
	proto.RegisterType((*MemberFightResult)(nil), "MemberFightResult")
	proto.RegisterType((*FightResult)(nil), "FightResult")
	proto.RegisterType((*FightResultList)(nil), "FightResultList")
	proto.RegisterType((*FightResultReward)(nil), "FightResultReward")
	proto.RegisterType((*FightDataRecord)(nil), "FightDataRecord")
	proto.RegisterType((*GamerSurrenderC2S)(nil), "GamerSurrenderC2S")
	proto.RegisterType((*GamerSurrenderS2C)(nil), "GamerSurrenderS2C")
	proto.RegisterType((*GamerBattleInfo)(nil), "GamerBattleInfo")
	proto.RegisterType((*GamerGetSweepMatchInfoC2S)(nil), "GamerGetSweepMatchInfoC2S")
	proto.RegisterType((*GamerGetSweepMatchInfoS2C)(nil), "GamerGetSweepMatchInfoS2C")
	proto.RegisterType((*SweepPlayerInfo)(nil), "SweepPlayerInfo")
	proto.RegisterType((*SweepTeamInfo)(nil), "SweepTeamInfo")
	proto.RegisterType((*SeasonNpcBaseInfo)(nil), "SeasonNpcBaseInfo")
	proto.RegisterType((*CampScoreInfo)(nil), "campScoreInfo")
	proto.RegisterType((*ThreeDunkSetColorBlockC2S)(nil), "ThreeDunkSetColorBlockC2S")
	proto.RegisterType((*DunkSetExtraCreditC2S)(nil), "DunkSetExtraCreditC2S")
	proto.RegisterType((*GetBestTacticExecutorC2S)(nil), "GetBestTacticExecutorC2S")
	proto.RegisterType((*GetBestTacticExecutorS2C)(nil), "GetBestTacticExecutorS2C")
	proto.RegisterType((*InstIdAttrs)(nil), "InstIdAttrs")
	proto.RegisterType((*ClientShowPlayerAttrsS2C)(nil), "ClientShowPlayerAttrsS2C")
	proto.RegisterType((*SetExclTimePlayOrderC2S)(nil), "SetExclTimePlayOrderC2S")
	proto.RegisterType((*SetExclTimePlayOrderS2C)(nil), "SetExclTimePlayOrderS2C")
	proto.RegisterType((*FightSceneLoadedC2S)(nil), "FightSceneLoadedC2S")
	proto.RegisterType((*FightSceneLoadedS2C)(nil), "FightSceneLoadedS2C")
	proto.RegisterType((*PVPReconnectNotifyLatestDataS2C)(nil), "PVPReconnectNotifyLatestDataS2C")
	proto.RegisterType((*FightOutC2S)(nil), "FightOutC2S")
	proto.RegisterType((*FightOutS2C)(nil), "FightOutS2C")
	proto.RegisterType((*FightTacticScoreOneC2S)(nil), "FightTacticScoreOneC2S")
	proto.RegisterType((*FightTacticScoreOneS2C)(nil), "FightTacticScoreOneS2C")
	proto.RegisterType((*FightTacticScoreTwoC2S)(nil), "FightTacticScoreTwoC2S")
	proto.RegisterType((*FightTacticScoreTwoS2C)(nil), "FightTacticScoreTwoS2C")
	proto.RegisterType((*FightAlreadyEndS2C)(nil), "FightAlreadyEndS2C")
	proto.RegisterType((*FightOperation)(nil), "FightOperation")
	proto.RegisterType((*RecordOperaChangePlayer)(nil), "recordOperaChangePlayer")
	proto.RegisterType((*RecordOperaChangeTactic)(nil), "recordOperaChangeTactic")
	proto.RegisterType((*RecordOperaChangeZs)(nil), "recordOperaChangeZs")
	proto.RegisterType((*FightReplayEndF2L)(nil), "FightReplayEndF2L")
	proto.RegisterType((*ReplayInfo)(nil), "ReplayInfo")
	proto.RegisterType((*FightPowerCheckC2S)(nil), "FightPowerCheckC2S")
	proto.RegisterType((*PlayerModuleFightPower)(nil), "PlayerModuleFightPower")
	proto.RegisterType((*NotifyFightBeginF2L)(nil), "NotifyFightBeginF2L")
	proto.RegisterType((*NotifyApplyFightBeginS2C)(nil), "NotifyApplyFightBeginS2C")
	proto.RegisterType((*UseHeadCoachSkillC2S)(nil), "UseHeadCoachSkillC2S")
	proto.RegisterType((*UseHeadCoachSkillS2C)(nil), "UseHeadCoachSkillS2C")
	proto.RegisterType((*NotifyHeadCoachSkillS2C)(nil), "NotifyHeadCoachSkillS2C")
	proto.RegisterType((*NotifyFightTimeOutF2L)(nil), "NotifyFightTimeOutF2L")
	proto.RegisterEnum("FightPowerModuleType", FightPowerModuleType_name, FightPowerModuleType_value)
	proto.RegisterEnum("GamerGetMatchInfoC2S_MsgID", GamerGetMatchInfoC2S_MsgID_name, GamerGetMatchInfoC2S_MsgID_value)
	proto.RegisterEnum("GamerGetMatchInfoS2C_MsgID", GamerGetMatchInfoS2C_MsgID_name, GamerGetMatchInfoS2C_MsgID_value)
	proto.RegisterEnum("GamerMatchVerifyC2S_MsgID", GamerMatchVerifyC2S_MsgID_name, GamerMatchVerifyC2S_MsgID_value)
	proto.RegisterEnum("GamerMatchVerifyS2C_MsgID", GamerMatchVerifyS2C_MsgID_name, GamerMatchVerifyS2C_MsgID_value)
	proto.RegisterEnum("FightReconnectNotifyS2C_MsgID", FightReconnectNotifyS2C_MsgID_name, FightReconnectNotifyS2C_MsgID_value)
	proto.RegisterEnum("GamerFightReconnectC2S_MsgID", GamerFightReconnectC2S_MsgID_name, GamerFightReconnectC2S_MsgID_value)
	proto.RegisterEnum("GamerFightReconnectS2C_MsgID", GamerFightReconnectS2C_MsgID_name, GamerFightReconnectS2C_MsgID_value)
	proto.RegisterEnum("GamerMatchShowRewardS2C_MsgID", GamerMatchShowRewardS2C_MsgID_name, GamerMatchShowRewardS2C_MsgID_value)
	proto.RegisterEnum("GamerMatchFlimInfosC2S_MsgID", GamerMatchFlimInfosC2S_MsgID_name, GamerMatchFlimInfosC2S_MsgID_value)
	proto.RegisterEnum("GamerMatchFlimInfosS2C_MsgID", GamerMatchFlimInfosS2C_MsgID_name, GamerMatchFlimInfosS2C_MsgID_value)
	proto.RegisterEnum("GamerUseExclusiveSkillsC2S_MsgID", GamerUseExclusiveSkillsC2S_MsgID_name, GamerUseExclusiveSkillsC2S_MsgID_value)
	proto.RegisterEnum("GamerUseExclusiveSkillsS2C_MsgID", GamerUseExclusiveSkillsS2C_MsgID_name, GamerUseExclusiveSkillsS2C_MsgID_value)
	proto.RegisterEnum("GamerMatchChangePlayerC2S_MsgID", GamerMatchChangePlayerC2S_MsgID_name, GamerMatchChangePlayerC2S_MsgID_value)
	proto.RegisterEnum("GamerMatchChangePlayerS2C_MsgID", GamerMatchChangePlayerS2C_MsgID_name, GamerMatchChangePlayerS2C_MsgID_value)
	proto.RegisterEnum("GamerScoreS2C_MsgID", GamerScoreS2C_MsgID_name, GamerScoreS2C_MsgID_value)
	proto.RegisterEnum("ChangeTacticsC2S_MsgID", ChangeTacticsC2S_MsgID_name, ChangeTacticsC2S_MsgID_value)
	proto.RegisterEnum("ChangeTacticsS2C_MsgID", ChangeTacticsS2C_MsgID_name, ChangeTacticsS2C_MsgID_value)
	proto.RegisterEnum("GamerSurrenderC2S_MsgID", GamerSurrenderC2S_MsgID_name, GamerSurrenderC2S_MsgID_value)
	proto.RegisterEnum("GamerSurrenderS2C_MsgID", GamerSurrenderS2C_MsgID_name, GamerSurrenderS2C_MsgID_value)
	proto.RegisterEnum("GamerGetSweepMatchInfoC2S_MsgID", GamerGetSweepMatchInfoC2S_MsgID_name, GamerGetSweepMatchInfoC2S_MsgID_value)
	proto.RegisterEnum("GamerGetSweepMatchInfoS2C_MsgID", GamerGetSweepMatchInfoS2C_MsgID_name, GamerGetSweepMatchInfoS2C_MsgID_value)
	proto.RegisterEnum("ThreeDunkSetColorBlockC2S_MsgID", ThreeDunkSetColorBlockC2S_MsgID_name, ThreeDunkSetColorBlockC2S_MsgID_value)
	proto.RegisterEnum("DunkSetExtraCreditC2S_MsgID", DunkSetExtraCreditC2S_MsgID_name, DunkSetExtraCreditC2S_MsgID_value)
	proto.RegisterEnum("GetBestTacticExecutorC2S_MsgID", GetBestTacticExecutorC2S_MsgID_name, GetBestTacticExecutorC2S_MsgID_value)
	proto.RegisterEnum("GetBestTacticExecutorS2C_MsgID", GetBestTacticExecutorS2C_MsgID_name, GetBestTacticExecutorS2C_MsgID_value)
	proto.RegisterEnum("ClientShowPlayerAttrsS2C_MsgID", ClientShowPlayerAttrsS2C_MsgID_name, ClientShowPlayerAttrsS2C_MsgID_value)
	proto.RegisterEnum("SetExclTimePlayOrderC2S_MsgID", SetExclTimePlayOrderC2S_MsgID_name, SetExclTimePlayOrderC2S_MsgID_value)
	proto.RegisterEnum("SetExclTimePlayOrderS2C_MsgID", SetExclTimePlayOrderS2C_MsgID_name, SetExclTimePlayOrderS2C_MsgID_value)
	proto.RegisterEnum("FightSceneLoadedC2S_MsgID", FightSceneLoadedC2S_MsgID_name, FightSceneLoadedC2S_MsgID_value)
	proto.RegisterEnum("FightSceneLoadedS2C_MsgID", FightSceneLoadedS2C_MsgID_name, FightSceneLoadedS2C_MsgID_value)
	proto.RegisterEnum("PVPReconnectNotifyLatestDataS2C_MsgID", PVPReconnectNotifyLatestDataS2C_MsgID_name, PVPReconnectNotifyLatestDataS2C_MsgID_value)
	proto.RegisterEnum("FightOutC2S_MsgID", FightOutC2S_MsgID_name, FightOutC2S_MsgID_value)
	proto.RegisterEnum("FightOutS2C_MsgID", FightOutS2C_MsgID_name, FightOutS2C_MsgID_value)
	proto.RegisterEnum("FightTacticScoreOneC2S_MsgID", FightTacticScoreOneC2S_MsgID_name, FightTacticScoreOneC2S_MsgID_value)
	proto.RegisterEnum("FightTacticScoreOneS2C_MsgID", FightTacticScoreOneS2C_MsgID_name, FightTacticScoreOneS2C_MsgID_value)
	proto.RegisterEnum("FightTacticScoreTwoC2S_MsgID", FightTacticScoreTwoC2S_MsgID_name, FightTacticScoreTwoC2S_MsgID_value)
	proto.RegisterEnum("FightTacticScoreTwoS2C_MsgID", FightTacticScoreTwoS2C_MsgID_name, FightTacticScoreTwoS2C_MsgID_value)
	proto.RegisterEnum("FightAlreadyEndS2C_MsgID", FightAlreadyEndS2C_MsgID_name, FightAlreadyEndS2C_MsgID_value)
	proto.RegisterEnum("FightPowerCheckC2S_MsgID", FightPowerCheckC2S_MsgID_name, FightPowerCheckC2S_MsgID_value)
	proto.RegisterEnum("NotifyApplyFightBeginS2C_MsgID", NotifyApplyFightBeginS2C_MsgID_name, NotifyApplyFightBeginS2C_MsgID_value)
	proto.RegisterEnum("UseHeadCoachSkillC2S_MsgID", UseHeadCoachSkillC2S_MsgID_name, UseHeadCoachSkillC2S_MsgID_value)
	proto.RegisterEnum("UseHeadCoachSkillS2C_MsgID", UseHeadCoachSkillS2C_MsgID_name, UseHeadCoachSkillS2C_MsgID_value)
	proto.RegisterEnum("NotifyHeadCoachSkillS2C_MsgID", NotifyHeadCoachSkillS2C_MsgID_name, NotifyHeadCoachSkillS2C_MsgID_value)
}

func init() { proto.RegisterFile("fight.proto", fileDescriptor23) }

var fileDescriptor23 = []byte{
	// 4408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x5a, 0xdd, 0x6f, 0x23, 0xc9,
	0x56, 0x97, 0xed, 0x76, 0x6c, 0x97, 0xe3, 0xa4, 0xe3, 0x24, 0x13, 0xcf, 0xc7, 0xce, 0xce, 0xf4,
	0xde, 0x99, 0xd9, 0x3b, 0x7b, 0xaf, 0x61, 0xc2, 0xea, 0x0a, 0x89, 0x8f, 0xcb, 0xc4, 0x49, 0x66,
	0xc3, 0x4d, 0x26, 0xd9, 0x24, 0x3b, 0xa0, 0x7d, 0x20, 0xea, 0xd8, 0x65, 0xbb, 0x37, 0xed, 0xee,
	0x9e, 0xee, 0xb6, 0x33, 0xb9, 0xaf, 0xdc, 0x37, 0xbe, 0x96, 0x0f, 0x2d, 0x48, 0x80, 0x84, 0x04,
	0x02, 0x21, 0xd0, 0xbe, 0x20, 0x24, 0x40, 0xe2, 0x63, 0xe1, 0x1d, 0x69, 0x01, 0x09, 0x09, 0xc1,
	0x0b, 0xff, 0x02, 0x6f, 0x3c, 0x71, 0xce, 0xa9, 0xaa, 0xfe, 0x72, 0xf7, 0x4c, 0x58, 0x56, 0xbc,
	0xd9, 0xd5, 0xa7, 0x4e, 0x9d, 0x3a, 0xf5, 0x3b, 0x9f, 0x55, 0xac, 0x39, 0xb4, 0x46, 0xe3, 0xb0,
	0xeb, 0xf9, 0x6e, 0xe8, 0xde, 0x62, 0x7d, 0xd7, 0x19, 0xca, 0xdf, 0xcd, 0x89, 0xd9, 0xf7, 0x5d,
	0xf9, 0x67, 0xb1, 0xef, 0x4e, 0x26, 0xae, 0xa3, 0xfe, 0x39, 0x6e, 0x68, 0x0d, 0xaf, 0xc4, 0x3f,
	0xe3, 0x7b, 0xac, 0xb1, 0x8b, 0x3c, 0xb6, 0xcd, 0xd0, 0x6c, 0xaf, 0xb0, 0x06, 0xf0, 0x08, 0x5c,
	0x9b, 0xef, 0x0d, 0x3a, 0xa5, 0x7b, 0xa5, 0x77, 0x2b, 0xed, 0x45, 0xa6, 0x0d, 0x03, 0xf8, 0x57,
	0x86, 0x7f, 0xd5, 0xf6, 0x5b, 0xac, 0x31, 0x31, 0xc3, 0xfe, 0xf8, 0xf4, 0xca, 0xe3, 0x9d, 0x0a,
	0x0c, 0x2d, 0x6d, 0xb2, 0xee, 0x81, 0x1a, 0x31, 0x3e, 0x64, 0xf5, 0xad, 0xe9, 0x70, 0xb8, 0xe7,
	0x0c, 0xdd, 0xf6, 0x12, 0x5b, 0x38, 0xc7, 0xdf, 0x82, 0x51, 0xb5, 0xdd, 0x66, 0x0c, 0xff, 0x1f,
	0x98, 0x96, 0x13, 0xb1, 0x93, 0x34, 0xfb, 0x33, 0xe2, 0x55, 0xc5, 0xf5, 0xe9, 0xbf, 0x79, 0xc5,
	0xfd, 0x8e, 0x86, 0x43, 0x46, 0x9f, 0xb5, 0x48, 0x3e, 0xe4, 0x4b, 0x32, 0xde, 0x66, 0xf5, 0x73,
	0xb9, 0x06, 0x71, 0x6e, 0x6e, 0x36, 0xba, 0xd1, 0xa2, 0x3a, 0xab, 0x8f, 0x4c, 0xef, 0xd8, 0x9d,
	0x3a, 0x6a, 0x89, 0x77, 0x58, 0x23, 0xf4, 0xad, 0x51, 0x0f, 0x86, 0x42, 0x5a, 0xa5, 0xb9, 0xa9,
	0x77, 0x51, 0xd8, 0x17, 0xa6, 0x3d, 0xe5, 0x3d, 0xd0, 0x98, 0x35, 0x02, 0xb9, 0x97, 0xb6, 0xb9,
	0x6f, 0xcd, 0xf8, 0xf5, 0x56, 0x31, 0x58, 0x7d, 0x30, 0xf5, 0xcd, 0xd0, 0x72, 0x1d, 0x5a, 0x25,
	0x8f, 0xe5, 0x29, 0x5b, 0xd9, 0x79, 0xd5, 0xb7, 0xa7, 0x01, 0x70, 0x3d, 0xb5, 0x26, 0x9c, 0x26,
	0x32, 0x56, 0xb6, 0x92, 0xfa, 0xf0, 0x4d, 0x47, 0xea, 0x52, 0x08, 0x9b, 0x14, 0x5f, 0x68, 0xa4,
	0xc5, 0xaa, 0x9e, 0x6b, 0x81, 0xe8, 0x42, 0x1b, 0x2f, 0x32, 0x5c, 0x49, 0xd6, 0x75, 0xd6, 0xe2,
	0xd1, 0x20, 0xec, 0x55, 0x2e, 0xf0, 0x98, 0x2d, 0x45, 0xc3, 0xb8, 0x7a, 0x00, 0x8b, 0x54, 0x40,
	0xd6, 0x76, 0x77, 0x4e, 0x30, 0xe3, 0x3f, 0x34, 0xb6, 0x4c, 0xc7, 0x78, 0x64, 0xa3, 0xee, 0x89,
	0x2d, 0x08, 0x68, 0x39, 0x41, 0x08, 0x22, 0xf2, 0xbd, 0x6d, 0x89, 0x06, 0x10, 0xd0, 0x23, 0x0a,
	0x18, 0x29, 0xc7, 0x02, 0x5e, 0xc2, 0x71, 0x45, 0xf2, 0x5a, 0xc1, 0x73, 0xaf, 0x4f, 0xf2, 0xd6,
	0x91, 0xc7, 0xd0, 0xf2, 0x83, 0x10, 0xd8, 0xf6, 0x79, 0xa7, 0xaa, 0x0e, 0xd9, 0x0a, 0x4e, 0x42,
	0xd3, 0x0f, 0x61, 0xd6, 0x82, 0x22, 0x73, 0xbc, 0xfe, 0x91, 0xe9, 0x9b, 0x13, 0x60, 0x5c, 0x23,
	0x32, 0xd0, 0x95, 0x3d, 0xeb, 0xd4, 0xe9, 0x37, 0x80, 0x10, 0x04, 0xf1, 0x3b, 0x0d, 0xc5, 0xc0,
	0x0c, 0xe1, 0x50, 0xcf, 0xa7, 0x21, 0xef, 0x30, 0xd8, 0x13, 0x01, 0x69, 0xcc, 0x11, 0x26, 0x9d,
	0x26, 0x91, 0x34, 0x59, 0x65, 0x66, 0x85, 0x9d, 0x45, 0x45, 0x0f, 0x7f, 0x7a, 0x63, 0xd3, 0x19,
	0xf1, 0x4e, 0x8b, 0x16, 0x04, 0x86, 0x03, 0xd8, 0x63, 0x67, 0x89, 0x66, 0xc3, 0xae, 0xac, 0x80,
	0x76, 0x3e, 0xe8, 0x2c, 0xd3, 0x77, 0x50, 0x29, 0x9e, 0xf6, 0xd3, 0x68, 0x19, 0x9d, 0x08, 0x25,
	0x86, 0x25, 0xab, 0x15, 0x22, 0x05, 0xee, 0x42, 0x25, 0x3b, 0xaf, 0xbc, 0x4e, 0x5b, 0x1d, 0x23,
	0xec, 0x70, 0xec, 0x4e, 0x77, 0xcd, 0xce, 0x2a, 0x11, 0xc1, 0x88, 0xeb, 0x5b, 0x42, 0x0b, 0x6b,
	0x44, 0xf3, 0x80, 0xb5, 0x86, 0x49, 0x5c, 0x77, 0xd6, 0xe9, 0x70, 0x96, 0xba, 0x69, 0xb4, 0x3f,
	0x62, 0x4b, 0x83, 0x14, 0x32, 0x3b, 0x37, 0x88, 0x6e, 0xb9, 0x9b, 0x01, 0x2c, 0xac, 0x00, 0x9b,
	0x3c, 0xf1, 0x38, 0xec, 0x61, 0x83, 0x56, 0xf8, 0x36, 0x5b, 0xe1, 0x59, 0xac, 0x74, 0x3a, 0x04,
	0xd7, 0x0c, 0x04, 0x88, 0xc1, 0x37, 0x58, 0xbd, 0x3f, 0x0d, 0x42, 0x77, 0x02, 0xa7, 0x72, 0x53,
	0x52, 0xf5, 0x68, 0x40, 0x60, 0xe2, 0xd4, 0x37, 0xad, 0xb0, 0xbd, 0xca, 0x9a, 0x8e, 0xd5, 0xbf,
	0x38, 0x33, 0xfb, 0x21, 0x4c, 0xee, 0xdc, 0x02, 0x61, 0x48, 0x05, 0x81, 0xc3, 0xcd, 0x0b, 0x80,
	0xc5, 0xa0, 0x73, 0x5b, 0xe1, 0xa0, 0x6f, 0x9b, 0x41, 0xd0, 0xb9, 0x43, 0xb8, 0xfd, 0xa7, 0x12,
	0x5b, 0xdf, 0x82, 0x43, 0xb3, 0xf9, 0x29, 0x9f, 0x78, 0x60, 0x22, 0x33, 0xee, 0x0b, 0x97, 0xa3,
	0xdc, 0xc4, 0xb6, 0x44, 0x2d, 0x68, 0x3e, 0x04, 0x4e, 0x3b, 0xc3, 0x21, 0xef, 0x87, 0x87, 0xe7,
	0x9f, 0x48, 0x98, 0xc1, 0xba, 0x9c, 0x86, 0x08, 0x38, 0x04, 0xb6, 0x06, 0xae, 0x2b, 0x06, 0x77,
	0xc0, 0x5e, 0x34, 0x1a, 0x8a, 0xe8, 0x08, 0x4c, 0x84, 0xb8, 0x06, 0xae, 0x31, 0x41, 0xb7, 0xb3,
	0x4d, 0x70, 0xab, 0xb6, 0x37, 0xd8, 0x32, 0x78, 0x44, 0xcf, 0x0d, 0x2c, 0x34, 0x61, 0xb2, 0xbf,
	0x9a, 0xb2, 0x49, 0x31, 0x9b, 0xc6, 0x04, 0xf6, 0x3a, 0x4c, 0x8f, 0x05, 0x3a, 0x99, 0x9e, 0xa3,
	0x4c, 0x84, 0x43, 0xc3, 0x64, 0x77, 0x0e, 0x40, 0x0f, 0x63, 0x80, 0x83, 0x07, 0x58, 0x3e, 0xe5,
	0xe6, 0x44, 0x20, 0x43, 0x28, 0x2c, 0x65, 0x2c, 0xa5, 0x79, 0xe8, 0x97, 0x09, 0x19, 0x68, 0x3f,
	0x04, 0x8b, 0x3c, 0xfb, 0x31, 0xfe, 0xb1, 0xc4, 0x5a, 0xc2, 0xbd, 0x02, 0x73, 0xa5, 0xaf, 0x90,
	0x93, 0x99, 0x08, 0x96, 0xdf, 0x60, 0xcc, 0x8b, 0x6c, 0x56, 0x5a, 0xb8, 0xde, 0xcd, 0xda, 0x32,
	0xa8, 0xc5, 0x0a, 0x3e, 0x80, 0xb3, 0x05, 0x3f, 0x28, 0xd5, 0x47, 0xa0, 0x44, 0x56, 0xcf, 0xcd,
	0x09, 0x97, 0xda, 0x23, 0x73, 0x05, 0xf8, 0x1d, 0x91, 0x45, 0xa3, 0xb2, 0x34, 0x94, 0x19, 0xa9,
	0xb6, 0x7d, 0x0e, 0xa7, 0x59, 0x53, 0xfa, 0x1b, 0x73, 0x73, 0xd0, 0x73, 0xcd, 0xfe, 0xf8, 0xe4,
	0xc2, 0xb2, 0xed, 0x00, 0x74, 0x55, 0x11, 0xfb, 0x53, 0x1c, 0x4f, 0xa5, 0xb1, 0xc2, 0x86, 0x6c,
	0x3e, 0xe3, 0x36, 0x18, 0x2a, 0xea, 0xec, 0xb7, 0xca, 0x6c, 0xed, 0x19, 0x7c, 0xf6, 0x9f, 0xf1,
	0x90, 0x84, 0x44, 0xf7, 0xd3, 0xdb, 0x3c, 0x49, 0x47, 0x96, 0x52, 0x36, 0xb2, 0xb4, 0x97, 0x59,
	0x8d, 0x3e, 0x47, 0x7e, 0xe7, 0x89, 0xda, 0x37, 0xb9, 0xe8, 0x0a, 0xed, 0xfb, 0xad, 0xee, 0x6b,
	0xcf, 0x03, 0x78, 0x58, 0xc1, 0xb1, 0x7b, 0xee, 0x86, 0xd2, 0x3b, 0xdd, 0x60, 0x4b, 0x70, 0x1c,
	0x17, 0x96, 0xf7, 0x23, 0x1f, 0x4e, 0xc5, 0x99, 0x54, 0x95, 0x77, 0x98, 0x4e, 0xc1, 0x51, 0x2f,
	0x90, 0xcf, 0x83, 0x1d, 0xf0, 0x57, 0xa1, 0x6f, 0xd2, 0xe6, 0x1b, 0x42, 0x95, 0x38, 0x89, 0x0c,
	0x95, 0x40, 0x52, 0x6f, 0xbf, 0xcd, 0x98, 0xcf, 0x51, 0x1e, 0x12, 0xbf, 0x41, 0xe2, 0x37, 0xbb,
	0xc7, 0xd1, 0x10, 0x3a, 0xa4, 0x11, 0x70, 0x14, 0x4a, 0x58, 0x63, 0xd5, 0x83, 0x60, 0xb4, 0xb7,
	0x0d, 0xa3, 0x0b, 0x9c, 0x7e, 0xe9, 0xbf, 0xac, 0x19, 0xff, 0x59, 0x62, 0xab, 0xc2, 0x46, 0x08,
	0x21, 0x5b, 0x66, 0x20, 0x82, 0x06, 0x4c, 0xf5, 0x2c, 0x15, 0x8e, 0xef, 0xb1, 0x3a, 0xee, 0x8b,
	0x36, 0x2d, 0x42, 0xcf, 0x52, 0x37, 0x0d, 0x90, 0xc7, 0x4c, 0x3f, 0x45, 0xeb, 0xec, 0x07, 0x3b,
	0xaf, 0x78, 0x7f, 0x1a, 0xba, 0x7e, 0x20, 0xd5, 0x03, 0x41, 0x2a, 0xfd, 0x01, 0xc4, 0x6e, 0x3c,
	0x0d, 0x2f, 0xc4, 0x28, 0xe9, 0xa4, 0xb9, 0xb9, 0xa8, 0x88, 0x68, 0x6d, 0x20, 0x18, 0xf0, 0xa1,
	0x24, 0xa8, 0xe6, 0x10, 0x80, 0x72, 0x82, 0xbe, 0xeb, 0x73, 0x69, 0x59, 0x00, 0x80, 0x81, 0xe5,
	0x83, 0xa1, 0x60, 0x68, 0xac, 0x29, 0xdf, 0xdd, 0x37, 0x27, 0x9e, 0xb0, 0x26, 0xe3, 0x3b, 0x6c,
	0x39, 0x2b, 0x04, 0xc2, 0x90, 0x86, 0xa2, 0x54, 0x01, 0xed, 0x3a, 0x92, 0x1d, 0x21, 0x8d, 0xf3,
	0x9a, 0xc9, 0x65, 0xe7, 0xe7, 0x50, 0x10, 0xc4, 0x39, 0xd2, 0x52, 0x05, 0x4c, 0x8c, 0x3f, 0x2c,
	0xb3, 0x25, 0x3a, 0xa8, 0x63, 0x17, 0x1c, 0x19, 0xfa, 0x04, 0x44, 0xda, 0xc1, 0xff, 0x06, 0x69,
	0x30, 0x30, 0xb4, 0xb8, 0x3d, 0xd8, 0x53, 0x31, 0xf9, 0xda, 0x38, 0xca, 0x40, 0x45, 0xc4, 0xba,
	0xfb, 0xac, 0xd6, 0x37, 0x9d, 0x9f, 0x9e, 0x82, 0x4a, 0x6a, 0xb4, 0xb8, 0xde, 0xc5, 0x3f, 0x44,
	0x02, 0x07, 0x1f, 0x4e, 0x03, 0x9c, 0x47, 0x66, 0xf8, 0x7c, 0x3a, 0x39, 0x07, 0x66, 0x75, 0x15,
	0x54, 0x42, 0x9f, 0x73, 0xb2, 0xd6, 0x06, 0x21, 0x71, 0x8d, 0x2d, 0x0e, 0xcd, 0x20, 0x3c, 0x98,
	0xda, 0xa1, 0xe5, 0xd9, 0x5c, 0x80, 0x0b, 0x1d, 0x84, 0x87, 0xfb, 0xdc, 0x94, 0xa1, 0x10, 0xe6,
	0x09, 0x68, 0x82, 0xfc, 0x8b, 0x84, 0x21, 0x60, 0x1f, 0x8c, 0xdd, 0xcb, 0x7d, 0x77, 0xb4, 0x6b,
	0x9b, 0x23, 0x11, 0x11, 0x8d, 0xdf, 0xab, 0xe4, 0x18, 0xe6, 0xc9, 0x66, 0x0f, 0x12, 0x28, 0xe9,
	0x13, 0xc8, 0xa1, 0x8a, 0x5c, 0x68, 0xb9, 0x9b, 0xd1, 0xe9, 0x23, 0x48, 0xdc, 0x24, 0x5e, 0x55,
	0x9a, 0xb1, 0xd6, 0xcd, 0x03, 0x33, 0x46, 0x7a, 0xf7, 0x52, 0xa9, 0xa9, 0xa2, 0x8e, 0x2e, 0x98,
	0xfa, 0x1e, 0xc4, 0xa3, 0x13, 0x0e, 0xe9, 0xa7, 0x70, 0xe5, 0x25, 0x85, 0xfb, 0xaa, 0x4a, 0x43,
	0x13, 0x26, 0x09, 0x7b, 0x74, 0x9d, 0x7d, 0xcb, 0x51, 0x7e, 0x3b, 0x95, 0xb7, 0xd6, 0x89, 0x84,
	0x5c, 0xed, 0x31, 0xe7, 0x0e, 0xae, 0xd3, 0x50, 0x66, 0x4d, 0xa9, 0xac, 0xd0, 0x93, 0xc1, 0x18,
	0xe2, 0xf2, 0x04, 0xd1, 0x1b, 0x80, 0xae, 0x44, 0xf4, 0x8d, 0x86, 0x48, 0x5a, 0x38, 0xd8, 0x99,
	0xc5, 0xc1, 0x17, 0x06, 0x63, 0xcb, 0xdb, 0x73, 0xfa, 0xbe, 0xcc, 0x28, 0x60, 0x7d, 0x1f, 0xf6,
	0x0e, 0xbc, 0x5a, 0xb4, 0xd8, 0x5d, 0x56, 0x83, 0x60, 0x17, 0x1e, 0x03, 0xa3, 0x25, 0x62, 0xd4,
	0xea, 0xee, 0xc3, 0x7f, 0xa1, 0x24, 0x1e, 0xe0, 0xca, 0xe7, 0xee, 0x34, 0xa4, 0xe4, 0xa2, 0xaa,
	0x7c, 0x81, 0xae, 0x02, 0xdb, 0x39, 0x1f, 0x9b, 0x33, 0x0b, 0x1c, 0x33, 0xf0, 0x5b, 0x79, 0x8d,
	0x83, 0xf8, 0x59, 0xb6, 0x98, 0xe2, 0x1a, 0x4b, 0x21, 0x7c, 0x83, 0x54, 0x58, 0x99, 0xfe, 0xbc,
	0xc7, 0x5a, 0x28, 0xd2, 0x56, 0x74, 0x2a, 0x95, 0xe2, 0x53, 0x31, 0xde, 0x67, 0x7a, 0x22, 0x62,
	0xec, 0xcc, 0x40, 0x6b, 0xb9, 0xe9, 0x9f, 0x4a, 0x9b, 0x84, 0x4d, 0x7e, 0x8b, 0x2d, 0xd1, 0x2c,
	0xa2, 0x27, 0xdf, 0x03, 0x12, 0x5c, 0xf0, 0x2b, 0x69, 0x91, 0xe0, 0x1a, 0x66, 0x98, 0x10, 0x4b,
	0x4b, 0xfc, 0x1c, 0xdc, 0x1b, 0x01, 0x8c, 0xe6, 0xbc, 0x80, 0xec, 0x65, 0x78, 0xf5, 0x55, 0x1c,
	0xbf, 0x42, 0x42, 0x55, 0x25, 0xa4, 0x9f, 0x80, 0xf5, 0x9c, 0x84, 0xdc, 0x93, 0x2e, 0x28, 0x61,
	0x9d, 0xb5, 0x3c, 0x2b, 0x14, 0x0e, 0x5b, 0x9e, 0x41, 0xa3, 0x48, 0xdd, 0xbf, 0xa2, 0x19, 0xff,
	0x55, 0x66, 0x2b, 0x34, 0x45, 0xc8, 0x0a, 0x1a, 0x07, 0x43, 0x43, 0xa3, 0x9b, 0x25, 0xfe, 0x93,
	0xc4, 0x75, 0xc0, 0xff, 0xe2, 0xe4, 0xea, 0x28, 0x1b, 0x87, 0x57, 0xba, 0x73, 0x5a, 0xc5, 0xed,
	0x5c, 0x11, 0xc0, 0x24, 0xf8, 0xdf, 0x65, 0x2d, 0xd7, 0xf3, 0x12, 0x53, 0xb5, 0xa2, 0xa9, 0x98,
	0x43, 0x7a, 0x02, 0x9c, 0x32, 0x93, 0x56, 0x69, 0xf1, 0x82, 0x42, 0x52, 0x72, 0x9f, 0xb5, 0x54,
	0x28, 0x13, 0x46, 0x01, 0xc2, 0x83, 0xa5, 0xf9, 0xdc, 0x81, 0x9c, 0xf2, 0x48, 0x6e, 0xbf, 0x82,
	0x27, 0x1d, 0xa3, 0x3c, 0xb6, 0x8e, 0xc9, 0x95, 0x8a, 0x29, 0xe4, 0x49, 0xe6, 0x23, 0xcd, 0x3b,
	0xac, 0x09, 0x02, 0x45, 0x44, 0x8b, 0xb9, 0x44, 0xa9, 0xe3, 0x6d, 0x15, 0x1f, 0xef, 0x00, 0x2c,
	0x07, 0xcf, 0x62, 0x7f, 0x1e, 0x25, 0xe8, 0x85, 0xde, 0x66, 0x15, 0x34, 0xd3, 0x92, 0xac, 0x60,
	0xe6, 0xce, 0xa5, 0xe0, 0x0c, 0x7f, 0xbd, 0xc4, 0x36, 0xa4, 0xbd, 0x80, 0x83, 0x70, 0x20, 0x2e,
	0x3c, 0xa7, 0xe2, 0x17, 0x59, 0xe6, 0x14, 0xbb, 0x29, 0x61, 0xcb, 0x79, 0xc2, 0xee, 0x41, 0xdc,
	0xb2, 0x02, 0x95, 0x41, 0xdd, 0x85, 0xc4, 0x37, 0x34, 0x47, 0x64, 0x44, 0x32, 0x7e, 0x36, 0xbb,
	0xca, 0x93, 0x8f, 0xb8, 0xb1, 0xae, 0x84, 0x5a, 0x8c, 0x84, 0xfa, 0x85, 0xff, 0xae, 0x40, 0x15,
	0x77, 0x83, 0xf6, 0x98, 0x96, 0x0c, 0x8d, 0x21, 0x47, 0x26, 0x3a, 0xd6, 0x88, 0x48, 0x64, 0x8d,
	0x79, 0xbb, 0xfd, 0x35, 0xcd, 0xb8, 0x60, 0xab, 0x24, 0xfe, 0x91, 0xeb, 0xda, 0x47, 0x51, 0x72,
	0xa4, 0xb0, 0x5e, 0x52, 0x98, 0xb1, 0xe3, 0x7a, 0x1e, 0xfe, 0x79, 0x41, 0x14, 0xd8, 0xe0, 0x9f,
	0x05, 0xeb, 0x88, 0x5a, 0x33, 0x69, 0x48, 0x51, 0x5a, 0xe4, 0x60, 0xf4, 0x41, 0xb8, 0x35, 0x8c,
	0x19, 0x63, 0xdb, 0xbe, 0x39, 0x0c, 0x69, 0x27, 0xed, 0x87, 0x50, 0x2f, 0x4b, 0x6f, 0x22, 0x63,
	0xc4, 0x5a, 0x37, 0x4f, 0x96, 0xb6, 0x4a, 0xdb, 0xf6, 0x51, 0x8b, 0x65, 0x55, 0xbc, 0x0d, 0x2d,
	0x48, 0xd3, 0x54, 0x3c, 0xb8, 0xc3, 0xd6, 0xce, 0xf9, 0x10, 0x60, 0x0e, 0xc9, 0xdb, 0xe0, 0x28,
	0xa6, 0xd6, 0xc8, 0xeb, 0x3c, 0x65, 0x2c, 0xd6, 0x30, 0xd0, 0x2e, 0x04, 0x14, 0x34, 0xa5, 0xeb,
	0x58, 0xec, 0x26, 0x03, 0x29, 0x46, 0x16, 0xfa, 0x05, 0x05, 0x02, 0x16, 0x3a, 0xc2, 0x37, 0x1a,
	0xdf, 0x67, 0x0d, 0x12, 0x5d, 0x49, 0x34, 0x9a, 0x42, 0x6e, 0x2b, 0xaa, 0xee, 0x92, 0x32, 0xa5,
	0x80, 0xdb, 0xa0, 0xee, 0x64, 0x27, 0x01, 0xab, 0x1c, 0x1a, 0x7c, 0x66, 0x29, 0x85, 0xdd, 0x66,
	0x0b, 0x23, 0xdc, 0x7e, 0x20, 0xad, 0xb6, 0xd9, 0x4d, 0xa8, 0x04, 0x8c, 0xcd, 0xf5, 0x30, 0x11,
	0x32, 0x6d, 0x12, 0xbf, 0x4a, 0xe2, 0xff, 0x6e, 0x25, 0xf7, 0xf0, 0x0b, 0x00, 0x09, 0x1b, 0x48,
	0x1c, 0xfe, 0xe1, 0xf7, 0x64, 0xd1, 0x90, 0x8e, 0xc9, 0x95, 0x6b, 0xc4, 0x64, 0xed, 0xda, 0x31,
	0xb9, 0x9a, 0x1f, 0x93, 0x17, 0x92, 0x31, 0xb9, 0x46, 0xc2, 0xa5, 0x23, 0x68, 0x3d, 0x37, 0x82,
	0x26, 0x22, 0x63, 0x23, 0x2f, 0x32, 0xe6, 0xf9, 0x9e, 0xf9, 0xa8, 0xdb, 0x2c, 0x88, 0xba, 0x09,
	0xeb, 0x5b, 0x9a, 0xb3, 0x3e, 0xb4, 0xe6, 0x81, 0x3a, 0x66, 0x0a, 0xbd, 0x4d, 0xb0, 0xe6, 0xe8,
	0xe0, 0x0b, 0x6c, 0xe8, 0x15, 0xdb, 0x88, 0xfd, 0x0f, 0xd4, 0xf0, 0x97, 0xc7, 0xfc, 0xd2, 0xf4,
	0x07, 0xc2, 0x07, 0x2d, 0xf8, 0xf4, 0x47, 0xba, 0xa1, 0xe5, 0xee, 0x5e, 0xc8, 0x27, 0x2f, 0x4c,
	0xff, 0x4a, 0xf4, 0x7c, 0xc0, 0x08, 0x5a, 0x03, 0x77, 0x7a, 0x6e, 0x73, 0x31, 0x47, 0x65, 0x42,
	0x59, 0xba, 0xbc, 0x95, 0x3f, 0xd5, 0x8c, 0xdf, 0x29, 0x49, 0x64, 0xd0, 0xd2, 0xbb, 0xb6, 0x45,
	0x59, 0x7e, 0x80, 0x6e, 0x01, 0x5c, 0xbf, 0xe3, 0x0e, 0x78, 0x14, 0x22, 0xab, 0x6f, 0xf2, 0x54,
	0xca, 0xed, 0x57, 0x54, 0xd8, 0xa6, 0xf4, 0x43, 0x53, 0x45, 0xee, 0xcb, 0x29, 0xd4, 0xf0, 0x22,
	0x4c, 0x54, 0x93, 0xe1, 0x70, 0xa1, 0x28, 0x1c, 0x7e, 0xa6, 0x81, 0xdd, 0x35, 0xa9, 0x2c, 0xdc,
	0x73, 0xd0, 0x92, 0xa2, 0xb4, 0xbe, 0xa4, 0x92, 0xcc, 0xfe, 0xd4, 0x17, 0x65, 0x63, 0x59, 0x05,
	0x15, 0x50, 0x34, 0x97, 0x63, 0x24, 0x87, 0x11, 0xb0, 0xe5, 0xa8, 0xef, 0x20, 0xea, 0xc6, 0x44,
	0x8d, 0xac, 0x6c, 0x0f, 0xdc, 0x8e, 0xe7, 0xbb, 0x7d, 0xac, 0x36, 0xa3, 0x26, 0xa1, 0x34, 0xf1,
	0x4a, 0x71, 0x5f, 0x43, 0x2b, 0xea, 0x6b, 0x18, 0xcf, 0x58, 0x3b, 0x1e, 0x84, 0xa8, 0x44, 0x0b,
	0xa7, 0x8b, 0x2a, 0xa8, 0xa1, 0x23, 0x8e, 0x41, 0x54, 0x43, 0x67, 0x44, 0x35, 0xde, 0x63, 0xfa,
	0x07, 0xa9, 0xaa, 0xb7, 0xb7, 0x9d, 0x66, 0xc3, 0x58, 0xb9, 0x2f, 0x9d, 0x85, 0xf1, 0x69, 0x99,
	0xd5, 0x77, 0x2d, 0x7b, 0xa2, 0xaa, 0x95, 0xcc, 0xf1, 0xc1, 0x26, 0xcd, 0xf0, 0xa2, 0x87, 0x0a,
	0x8c, 0x1c, 0x31, 0xf9, 0x56, 0xd1, 0xd8, 0x40, 0x1d, 0x60, 0x53, 0x40, 0x3a, 0x16, 0x74, 0x89,
	0x0b, 0xd4, 0x65, 0x0b, 0xc8, 0x8b, 0x60, 0x11, 0x96, 0x3c, 0x8b, 0x5b, 0x4c, 0xe3, 0x28, 0xf9,
	0x82, 0xfc, 0x26, 0x8c, 0x5c, 0x64, 0x0d, 0x0f, 0x45, 0x49, 0x4e, 0x02, 0x83, 0xdd, 0x22, 0xc1,
	0x6a, 0x37, 0x47, 0x21, 0xd8, 0x7a, 0xb5, 0xfc, 0x70, 0x4c, 0x6e, 0xb2, 0xae, 0x12, 0x38, 0x9f,
	0xfc, 0x5f, 0x43, 0x9d, 0xf1, 0xf7, 0xa1, 0xfa, 0x0a, 0x42, 0x99, 0x42, 0x57, 0xda, 0xdf, 0x62,
	0x2b, 0xe9, 0x3e, 0x40, 0x6f, 0xa0, 0x32, 0xe9, 0x95, 0x6e, 0x56, 0x57, 0x18, 0x8b, 0xf3, 0xf0,
	0x8d, 0x96, 0xb5, 0x01, 0x99, 0x39, 0x28, 0x2b, 0xea, 0xb4, 0x46, 0x9a, 0x53, 0xc8, 0x2d, 0xcb,
	0x8e, 0xa6, 0x4e, 0xee, 0x56, 0xec, 0x0f, 0x4f, 0x37, 0x2e, 0x6d, 0x9f, 0xc5, 0x1f, 0x94, 0xce,
	0x91, 0x25, 0x6d, 0x47, 0x7b, 0x0d, 0xac, 0x8f, 0xd8, 0x2d, 0x9a, 0xfa, 0x51, 0xc0, 0x33, 0x07,
	0x8e, 0x86, 0x97, 0x46, 0x39, 0x20, 0xd1, 0x12, 0xfb, 0x17, 0x71, 0x24, 0x87, 0xe3, 0x9f, 0x6b,
	0xc6, 0x56, 0x21, 0x47, 0xdc, 0x6a, 0xcc, 0xa3, 0xf4, 0x1a, 0x1e, 0xbf, 0x5a, 0x62, 0x37, 0x63,
	0x5d, 0x25, 0xbb, 0x18, 0x28, 0xd5, 0x37, 0x99, 0xde, 0x4f, 0x0c, 0xc9, 0xa0, 0x2b, 0x5c, 0xcd,
	0xce, 0x2c, 0xd5, 0xf3, 0x78, 0x83, 0x9f, 0x80, 0x18, 0x25, 0xab, 0x66, 0x11, 0x1f, 0x2b, 0x45,
	0x9a, 0xfa, 0x4d, 0xcd, 0xb0, 0x8a, 0x44, 0xc2, 0x6d, 0xa5, 0x0c, 0x21, 0x4f, 0xbe, 0x72, 0xae,
	0x7c, 0x05, 0x4b, 0xfd, 0x38, 0x38, 0x8a, 0x99, 0x0c, 0x48, 0x82, 0x3c, 0x13, 0xa4, 0x4a, 0xf9,
	0x41, 0x0a, 0x37, 0x58, 0x32, 0x36, 0xd9, 0xca, 0xce, 0x4c, 0xf0, 0x7f, 0xa1, 0xfa, 0xbe, 0x73,
	0xcd, 0xb8, 0x8a, 0xea, 0x11, 0x0b, 0x7b, 0x7d, 0xcc, 0xd6, 0x94, 0x64, 0xa2, 0xcf, 0x20, 0xf2,
	0x44, 0x5c, 0x56, 0x6c, 0x25, 0x36, 0x5e, 0xc3, 0x67, 0x4b, 0x69, 0xda, 0x3c, 0x2a, 0x70, 0x2a,
	0x4b, 0xee, 0xa5, 0x93, 0x68, 0x5a, 0xc8, 0x7e, 0x4d, 0xba, 0x7f, 0xf2, 0x90, 0xe9, 0x6e, 0x38,
	0xe6, 0x7e, 0x92, 0xae, 0x32, 0x4f, 0x67, 0x3c, 0x89, 0xd7, 0x2c, 0xe8, 0x2e, 0x56, 0xe2, 0x56,
	0xa2, 0xd8, 0xd2, 0xfb, 0xe0, 0xf8, 0xa4, 0x1a, 0xb6, 0xa2, 0xa6, 0x75, 0xce, 0x34, 0xb4, 0x31,
	0xf8, 0x2e, 0x8b, 0x3a, 0x52, 0x1e, 0xd9, 0x6d, 0x62, 0x12, 0xf8, 0xa3, 0x3e, 0x0e, 0x45, 0x5d,
	0xc7, 0xf4, 0x9c, 0xef, 0xd0, 0x4a, 0xdc, 0x87, 0x9c, 0x6d, 0x82, 0xf5, 0x22, 0x85, 0xff, 0x39,
	0xd7, 0x4e, 0x65, 0x7b, 0x20, 0x92, 0x05, 0x31, 0xef, 0x7d, 0xb6, 0xba, 0x33, 0xfb, 0x38, 0x90,
	0x28, 0xba, 0x34, 0x3d, 0x6a, 0x90, 0x67, 0x4d, 0x24, 0xbb, 0xaf, 0xcf, 0x2a, 0xac, 0x99, 0xf4,
	0x70, 0x69, 0x1b, 0xc5, 0xde, 0x11, 0x0e, 0xa7, 0x6f, 0x55, 0x10, 0xe4, 0x31, 0xc0, 0xdb, 0x0f,
	0xd8, 0x62, 0x12, 0xa0, 0x32, 0x3b, 0x9a, 0x33, 0x9e, 0x07, 0xc9, 0x8b, 0x83, 0xaa, 0xba, 0x3c,
	0x99, 0x83, 0xd6, 0x23, 0xd6, 0x7a, 0x99, 0xc4, 0x2a, 0x85, 0x51, 0x8a, 0x20, 0x19, 0x0c, 0xc3,
	0xb2, 0xa2, 0x6b, 0x25, 0xe9, 0x6a, 0x32, 0x71, 0xcb, 0xa0, 0xe9, 0x09, 0x6b, 0x27, 0xc9, 0x04,
	0x12, 0xc9, 0x27, 0x37, 0x37, 0xd7, 0xbb, 0xb9, 0x30, 0x7d, 0x94, 0xba, 0x98, 0x68, 0x28, 0x37,
	0x3f, 0x7f, 0xfc, 0xef, 0x61, 0xeb, 0x3b, 0x75, 0xb8, 0xe4, 0xcb, 0xc5, 0xc6, 0xb2, 0xc7, 0xfe,
	0x6d, 0xa6, 0x7b, 0x99, 0x53, 0x95, 0xa5, 0x20, 0xf1, 0xce, 0x7c, 0x32, 0x3e, 0x60, 0x2d, 0x72,
	0x10, 0xf4, 0x0f, 0x9d, 0x42, 0xa2, 0xd8, 0x8d, 0xd2, 0x84, 0xa8, 0x84, 0x2d, 0x17, 0xb9, 0x9a,
	0xdf, 0xd6, 0x8c, 0x5f, 0x2a, 0x31, 0x3d, 0xb9, 0x4b, 0xf2, 0xc5, 0xf7, 0x59, 0x33, 0x4c, 0x58,
	0x49, 0x29, 0xc7, 0x9a, 0xf2, 0x7a, 0x9f, 0xe5, 0x82, 0xde, 0xe7, 0xb5, 0x5d, 0xdf, 0x1f, 0x69,
	0xc6, 0x0f, 0xb2, 0xf2, 0xe0, 0xee, 0xbe, 0x66, 0x79, 0xa4, 0x07, 0xad, 0x14, 0x45, 0x05, 0x10,
	0xe3, 0xe7, 0xd8, 0xca, 0x01, 0xc7, 0x96, 0xa0, 0x4a, 0x9f, 0xb1, 0x21, 0x91, 0xf2, 0xbc, 0x32,
	0x8f, 0x8b, 0xae, 0xe6, 0x82, 0x44, 0xa7, 0xe1, 0x9e, 0x68, 0xf7, 0x27, 0xd2, 0xa5, 0x4c, 0xad,
	0x6e, 0xfc, 0xa0, 0xcc, 0x9a, 0x85, 0xac, 0xdf, 0x5c, 0x1b, 0xab, 0x3e, 0x4d, 0x41, 0x97, 0xf4,
	0x2e, 0x2b, 0x4f, 0xae, 0x64, 0x13, 0xb9, 0xdd, 0x9d, 0xdf, 0x08, 0x94, 0xf8, 0x00, 0x0e, 0x69,
	0x3c, 0x79, 0x04, 0xd9, 0xee, 0x45, 0x4d, 0xf5, 0x34, 0x30, 0xb9, 0x3a, 0x30, 0x5f, 0x09, 0x5c,
	0x89, 0x64, 0x05, 0x46, 0xad, 0x00, 0xfb, 0xaa, 0xc2, 0x53, 0x10, 0xc8, 0xeb, 0x99, 0x6a, 0x23,
	0xdb, 0x1f, 0xdd, 0x16, 0xfd, 0x51, 0xe3, 0x4f, 0x4b, 0x6c, 0x39, 0xb1, 0x2e, 0x16, 0x6f, 0xf9,
	0xcd, 0x82, 0x9a, 0x4f, 0x04, 0xea, 0x4c, 0x65, 0xed, 0x29, 0xa5, 0x85, 0x2a, 0x66, 0x2f, 0xdd,
	0x14, 0x16, 0x3d, 0x03, 0x90, 0x6c, 0x37, 0xd9, 0xb5, 0xd5, 0x94, 0xdb, 0xa2, 0x6b, 0x12, 0xac,
	0xcc, 0x64, 0x09, 0x06, 0xc2, 0x9e, 0x62, 0x92, 0xb7, 0x4f, 0xd7, 0x27, 0x0b, 0x6a, 0x6c, 0x1a,
	0x50, 0x6e, 0x0b, 0x11, 0x4f, 0x34, 0x3f, 0x11, 0x9c, 0x2b, 0x89, 0x85, 0x45, 0xed, 0x01, 0x29,
	0x55, 0x85, 0xfb, 0x7e, 0xd4, 0x50, 0xdb, 0xf1, 0x7d, 0xd7, 0xef, 0x81, 0x9e, 0xa2, 0xa6, 0x51,
	0x59, 0x82, 0xa2, 0xe6, 0xcb, 0x62, 0xa5, 0x72, 0xcd, 0xa2, 0x46, 0xcb, 0x2f, 0x6a, 0x5e, 0x48,
	0xa5, 0x21, 0x92, 0xb0, 0x62, 0x05, 0x19, 0x60, 0x53, 0x54, 0xa6, 0x92, 0x7d, 0x45, 0x17, 0xc8,
	0x51, 0x37, 0xba, 0x2c, 0xab, 0xb8, 0xfa, 0x50, 0x4a, 0x1f, 0x45, 0xbe, 0xc4, 0x76, 0x20, 0xb8,
	0xac, 0x08, 0xaf, 0xa2, 0x8e, 0x1e, 0x7d, 0x41, 0x12, 0x99, 0x79, 0xc6, 0xf2, 0xc7, 0x9a, 0xf1,
	0xcd, 0xec, 0x3c, 0xb0, 0xd9, 0x02, 0xd2, 0x5d, 0xb6, 0x9c, 0x4d, 0x1f, 0x53, 0xd0, 0x7f, 0xc8,
	0x9a, 0xf1, 0x1d, 0x5b, 0x10, 0x35, 0xf7, 0xa4, 0x73, 0x8d, 0x26, 0x19, 0xbf, 0xa1, 0xb2, 0xb6,
	0x67, 0x3c, 0x3c, 0xb9, 0xe4, 0xdc, 0xfb, 0x7f, 0xbe, 0xe1, 0xca, 0xdb, 0xde, 0x9f, 0x69, 0xc6,
	0xbf, 0x17, 0x8a, 0xf5, 0x75, 0x56, 0xb5, 0x10, 0xdd, 0x9a, 0xb1, 0xbc, 0x0a, 0x26, 0x7a, 0x97,
	0x56, 0x4c, 0x74, 0x80, 0xee, 0x30, 0x6d, 0x82, 0x9d, 0xfb, 0xaa, 0x74, 0x41, 0xf4, 0x5d, 0xdd,
	0x69, 0xb5, 0x6f, 0x27, 0x9d, 0x40, 0xe6, 0x63, 0xc1, 0xf6, 0x46, 0x6c, 0x39, 0xbb, 0x46, 0x36,
	0x83, 0xc0, 0x3b, 0x7a, 0x9f, 0xcf, 0xc4, 0x45, 0x64, 0x39, 0x2e, 0x33, 0xf9, 0x0c, 0x2f, 0xed,
	0x2b, 0x89, 0x12, 0x56, 0x90, 0x68, 0x2a, 0xdd, 0x87, 0x11, 0xa4, 0x20, 0x83, 0x84, 0xac, 0xb4,
	0x95, 0x16, 0x56, 0xdd, 0xc5, 0x0e, 0xe2, 0x8e, 0x77, 0x22, 0xb6, 0xa5, 0x6b, 0x3a, 0xc8, 0x1a,
	0x57, 0x4e, 0xb8, 0x19, 0xb8, 0xce, 0x73, 0xaf, 0x1f, 0xb5, 0x5e, 0x40, 0x30, 0xf8, 0x7b, 0x9a,
	0x64, 0x02, 0x7e, 0x43, 0x52, 0xd0, 0x73, 0x92, 0xbd, 0x84, 0x37, 0x87, 0xf1, 0xe8, 0xa9, 0x0c,
	0xc8, 0x0f, 0x7f, 0xc9, 0x5d, 0x44, 0x65, 0x3d, 0x0c, 0x80, 0xaf, 0xb1, 0xad, 0xf0, 0x4a, 0x4a,
	0xfc, 0x93, 0xac, 0x95, 0x6e, 0xc7, 0xcc, 0x55, 0xed, 0xa6, 0x63, 0x4d, 0xa2, 0xce, 0x58, 0x36,
	0x64, 0x18, 0x3b, 0xec, 0xe6, 0xe9, 0xd8, 0xe7, 0x7c, 0x7b, 0xea, 0x5c, 0x9c, 0xf0, 0xb0, 0xe7,
	0xda, 0xae, 0xbf, 0x65, 0xbb, 0xfd, 0x0b, 0xc4, 0x33, 0x26, 0xbd, 0xd1, 0x80, 0x4c, 0x8d, 0x73,
	0x4e, 0xe8, 0x2f, 0x34, 0xe3, 0x8c, 0xad, 0x4b, 0x0e, 0x3b, 0x78, 0x91, 0xda, 0xf3, 0xf9, 0xc0,
	0x0a, 0xe7, 0xcb, 0xab, 0x74, 0x9e, 0x47, 0x57, 0xf9, 0x31, 0x79, 0x71, 0x7c, 0xfe, 0x4b, 0xcd,
	0xf8, 0x61, 0xd6, 0x01, 0x6c, 0x6f, 0xf1, 0x20, 0x14, 0x51, 0x55, 0x05, 0x55, 0x58, 0x23, 0x6f,
	0xc6, 0x5f, 0x69, 0xc6, 0x47, 0x05, 0x33, 0xc4, 0x8d, 0x57, 0xe2, 0xfa, 0xb1, 0x94, 0x1f, 0xae,
	0x0b, 0xd8, 0xee, 0xb0, 0xa6, 0xa8, 0x90, 0xf1, 0xe5, 0x48, 0x80, 0xbe, 0x5e, 0x99, 0x44, 0x02,
	0x8d, 0xab, 0xca, 0x50, 0x88, 0x48, 0x36, 0x41, 0x65, 0x35, 0x22, 0x76, 0xf9, 0x8b, 0x25, 0xd6,
	0xe9, 0xd9, 0x16, 0xa4, 0xb1, 0xd8, 0x81, 0x3a, 0x8a, 0x89, 0x51, 0x3c, 0xec, 0xd9, 0x5a, 0x83,
	0x27, 0x92, 0xd9, 0x5d, 0x95, 0x65, 0x07, 0x4f, 0xa2, 0x30, 0x94, 0x14, 0x41, 0x50, 0x6f, 0xca,
	0x4e, 0x50, 0x4c, 0xbd, 0x29, 0x0d, 0x34, 0x45, 0x9d, 0xb7, 0xab, 0xbf, 0xd6, 0x8c, 0xef, 0xb2,
	0x0d, 0x3a, 0xbb, 0xbe, 0x8d, 0x50, 0x41, 0x71, 0x0e, 0x7d, 0xe9, 0x88, 0xf1, 0xb6, 0x11, 0xcf,
	0x4c, 0x28, 0x2a, 0xf7, 0x7c, 0xfe, 0x46, 0x33, 0x7e, 0x28, 0x9f, 0x41, 0x81, 0x47, 0x86, 0x09,
	0x3f, 0xc5, 0x56, 0x45, 0x23, 0xaf, 0xcf, 0x1d, 0xbe, 0xef, 0x9a, 0x03, 0x3e, 0xc0, 0xd5, 0x32,
	0xbd, 0xf0, 0x52, 0x51, 0x2f, 0xfc, 0x6f, 0x35, 0xe3, 0xd9, 0x3c, 0x07, 0x54, 0xde, 0x2d, 0xd6,
	0xa6, 0x07, 0x49, 0xd8, 0x61, 0xd8, 0x8a, 0xfa, 0x1d, 0x85, 0x71, 0x04, 0x18, 0xfd, 0x41, 0x89,
	0xbd, 0x7d, 0xf4, 0xe2, 0x28, 0x73, 0x81, 0xb0, 0x6f, 0x86, 0x80, 0x1d, 0x8c, 0x07, 0xc8, 0x35,
	0xd5, 0x6a, 0x2d, 0x5d, 0xbb, 0xd5, 0x5a, 0xce, 0xaf, 0x62, 0x2b, 0xd4, 0x6a, 0x55, 0x3d, 0x11,
	0x2d, 0xd3, 0x13, 0xc9, 0x13, 0xf3, 0xef, 0x34, 0xe3, 0x1d, 0x99, 0xba, 0x1d, 0x4e, 0xc3, 0x02,
	0xd4, 0xff, 0x49, 0x8a, 0xa8, 0x40, 0xf7, 0x40, 0xf4, 0x21, 0xbb, 0x41, 0x44, 0x02, 0xf1, 0xe4,
	0x3b, 0x0e, 0x1d, 0x2e, 0xdb, 0x90, 0x99, 0x5b, 0x77, 0xbc, 0x11, 0x21, 0xf8, 0x08, 0x18, 0xe7,
	0xea, 0xf0, 0x0b, 0xcd, 0xf8, 0x89, 0x5c, 0x96, 0xa8, 0xb9, 0xc8, 0xe1, 0x14, 0x1e, 0xc1, 0x17,
	0x88, 0xbf, 0xb9, 0xe9, 0xa7, 0x97, 0x14, 0x53, 0xaf, 0xb3, 0xfe, 0xdf, 0x6b, 0xc6, 0x71, 0x2e,
	0x03, 0x5c, 0x1f, 0x5d, 0x60, 0x78, 0x11, 0xd7, 0x28, 0x94, 0xa1, 0x0c, 0xf8, 0x30, 0xf6, 0xe3,
	0x45, 0x3c, 0x1f, 0xb3, 0x36, 0xf1, 0x7c, 0x6a, 0xfb, 0xdc, 0x1c, 0x5c, 0xed, 0x38, 0x83, 0x02,
	0x95, 0xfe, 0x83, 0x66, 0xfc, 0x7e, 0x49, 0xbe, 0x42, 0x38, 0x84, 0x7a, 0x8a, 0xde, 0x0d, 0x46,
	0x9d, 0xad, 0x92, 0xec, 0x69, 0x36, 0x5d, 0xfc, 0x24, 0xeb, 0x51, 0x61, 0xc8, 0x9d, 0xae, 0x4f,
	0x79, 0x14, 0x4d, 0x4a, 0x15, 0xa6, 0x8a, 0x5c, 0x3e, 0xcc, 0xa8, 0x14, 0x91, 0xcb, 0x82, 0xf2,
	0x01, 0xab, 0x11, 0xf9, 0xc7, 0xf1, 0x3d, 0xc0, 0x1c, 0xe9, 0xc7, 0x01, 0x68, 0x69, 0xa3, 0x68,
	0x41, 0x38, 0xa6, 0x09, 0x8f, 0x6f, 0x9a, 0xdf, 0x65, 0xcb, 0x3c, 0x55, 0x2a, 0x07, 0x45, 0xfd,
	0x1d, 0xf0, 0x64, 0x1b, 0x45, 0x62, 0x65, 0x98, 0xde, 0x63, 0x4c, 0xa2, 0xab, 0xa8, 0x59, 0xf2,
	0x18, 0x9f, 0x62, 0x5d, 0xf3, 0x69, 0x4b, 0xb6, 0xbc, 0x13, 0x3d, 0xc0, 0x1f, 0x63, 0xab, 0x39,
	0x3b, 0xcf, 0x4a, 0x02, 0x16, 0x99, 0x74, 0xdb, 0x01, 0xf5, 0x4d, 0x2b, 0xc6, 0x61, 0x94, 0x67,
	0xe3, 0x57, 0x38, 0xf0, 0xdd, 0xcd, 0xfd, 0x37, 0x65, 0x75, 0xa9, 0x82, 0x2c, 0xbe, 0xc0, 0x10,
	0x55, 0xde, 0xbf, 0x96, 0x18, 0x13, 0xcc, 0x54, 0x3a, 0x91, 0xba, 0xcf, 0x7f, 0x43, 0xc5, 0x85,
	0xaf, 0xd8, 0x00, 0x7a, 0x21, 0x8f, 0xae, 0x7c, 0x64, 0xf7, 0x18, 0x32, 0x3a, 0x3a, 0xee, 0x38,
	0x55, 0xcf, 0x60, 0xef, 0x7e, 0x5c, 0xb9, 0x54, 0x0b, 0xda, 0xa7, 0xf8, 0x12, 0x0e, 0x83, 0xaf,
	0xe0, 0x1b, 0x3d, 0x9b, 0xc3, 0x4a, 0xab, 0xe7, 0x4e, 0x3c, 0x7c, 0x0c, 0xa6, 0x9e, 0xf8, 0xd0,
	0x43, 0x32, 0x7a, 0x72, 0xb2, 0x37, 0x78, 0x25, 0x9f, 0xf9, 0xfc, 0x5b, 0x49, 0x5a, 0x07, 0xb5,
	0xa9, 0x7b, 0x63, 0x2e, 0x52, 0x86, 0x1f, 0x65, 0x77, 0x47, 0xb6, 0x7b, 0x6e, 0xda, 0x67, 0x13,
	0x77, 0x30, 0xb5, 0xf9, 0x19, 0x65, 0xfe, 0x67, 0xd4, 0xda, 0x3e, 0xb3, 0xf1, 0x92, 0x2c, 0x0a,
	0xb7, 0xe9, 0xe7, 0xb4, 0xed, 0xef, 0xb2, 0xbb, 0xe2, 0x48, 0x0a, 0x67, 0x0a, 0xc0, 0x6c, 0xc8,
	0xac, 0xfc, 0x80, 0xa8, 0x62, 0x11, 0x50, 0xf8, 0xd0, 0x0d, 0x4d, 0x3b, 0x1e, 0x22, 0x6d, 0xb5,
	0x30, 0x22, 0xd0, 0x87, 0xa7, 0x76, 0xf2, 0x1b, 0xc2, 0xa5, 0x95, 0x67, 0xcd, 0x9f, 0x6b, 0x78,
	0x7d, 0x5b, 0xb0, 0xc8, 0xfc, 0x6d, 0x06, 0x40, 0x36, 0x47, 0xd2, 0xdc, 0x3d, 0x1a, 0x33, 0xb6,
	0x2a, 0x82, 0x8b, 0x78, 0x02, 0xca, 0x47, 0x96, 0x83, 0x08, 0xfb, 0x3f, 0x3e, 0xca, 0xc6, 0xb7,
	0x69, 0xc3, 0xe8, 0x52, 0x2c, 0xef, 0x96, 0xfa, 0xe7, 0x21, 0xdb, 0x10, 0x0b, 0x3f, 0xf5, 0x3c,
	0x3b, 0xb1, 0xfa, 0x57, 0xbb, 0x25, 0x4f, 0xaf, 0x57, 0x99, 0x5f, 0x2f, 0x47, 0xab, 0x5f, 0x62,
	0x8c, 0x58, 0xfb, 0x28, 0xe0, 0x99, 0x5b, 0x03, 0xe1, 0xe2, 0x03, 0xfc, 0xad, 0x54, 0x9a, 0x37,
	0xfd, 0x9f, 0x35, 0x63, 0x3f, 0x67, 0xba, 0xec, 0x41, 0xa5, 0xa6, 0x53, 0xc4, 0x09, 0xc1, 0x6a,
	0x8a, 0x1b, 0x50, 0xc0, 0xed, 0x90, 0x6d, 0x08, 0x8d, 0x7c, 0x2d, 0x0c, 0xff, 0x45, 0x33, 0x7e,
	0x86, 0xad, 0x27, 0xce, 0x16, 0x3d, 0x12, 0xc4, 0xe0, 0x6b, 0xf8, 0x8f, 0xc4, 0xfb, 0x88, 0x72,
	0xe6, 0x79, 0x17, 0xa5, 0x8a, 0x8f, 0xbf, 0xd4, 0xd8, 0x5a, 0x8c, 0x40, 0x81, 0x48, 0x9a, 0xd9,
	0x86, 0x90, 0x73, 0x74, 0x70, 0x7a, 0x26, 0xcd, 0xc6, 0x9e, 0xe9, 0x25, 0x70, 0x8a, 0x7a, 0x72,
	0x0c, 0xfb, 0x00, 0x7a, 0x39, 0x3b, 0x0a, 0x16, 0x7a, 0xa9, 0x57, 0xda, 0x1d, 0xe0, 0x9b, 0x18,
	0xf5, 0xb9, 0x4d, 0xce, 0x43, 0xd7, 0xc0, 0x3d, 0xae, 0x24, 0xbf, 0xd0, 0x3b, 0x5f, 0xbd, 0xda,
	0xbe, 0xc9, 0xd6, 0x93, 0xc3, 0xfc, 0xe5, 0xd4, 0xf2, 0x26, 0x90, 0xc2, 0xea, 0x0b, 0xd9, 0x4f,
	0xf4, 0x82, 0x18, 0x4b, 0x23, 0xbd, 0x06, 0xb1, 0xe9, 0x3e, 0x7d, 0x92, 0x7e, 0xe1, 0x1c, 0xb2,
	0xaa, 0xb3, 0xe0, 0xe5, 0xd4, 0x1c, 0x9c, 0x91, 0x55, 0x0a, 0x19, 0x11, 0x54, 0xb7, 0x0b, 0xc8,
	0xc6, 0xa6, 0xed, 0xea, 0x43, 0x30, 0xe3, 0x1b, 0x49, 0x82, 0xc4, 0xb7, 0x11, 0x94, 0x54, 0xed,
	0xe4, 0x37, 0xdf, 0x0d, 0x20, 0xfb, 0xd2, 0xc7, 0xe0, 0x07, 0xdf, 0x9a, 0x9f, 0x23, 0xff, 0xe0,
	0x0b, 0x73, 0xdd, 0x8a, 0xf6, 0x2a, 0x47, 0xc7, 0xae, 0xe3, 0xfa, 0xfa, 0x27, 0xd9, 0xd5, 0xb0,
	0x0a, 0x3c, 0xf3, 0xc6, 0x6e, 0xe8, 0xea, 0x17, 0xd9, 0x29, 0xd4, 0x6e, 0xd5, 0xed, 0x48, 0xcb,
	0x6a, 0x07, 0xae, 0x7b, 0xa1, 0x4f, 0x22, 0xcd, 0x28, 0x46, 0x14, 0xc5, 0xf0, 0xb0, 0x9c, 0xac,
	0xd4, 0x36, 0x1f, 0x71, 0x67, 0xa0, 0xbb, 0xe0, 0xc9, 0x56, 0x93, 0xe3, 0x43, 0x33, 0x18, 0xe3,
	0xb9, 0x78, 0x73, 0xbc, 0x50, 0x28, 0xd2, 0xc0, 0x4b, 0x48, 0x9c, 0x97, 0xd3, 0xcb, 0x8c, 0x74,
	0x3f, 0xcb, 0xa8, 0xef, 0x4e, 0xce, 0xa1, 0x30, 0xd7, 0x83, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xd6, 0x44, 0x00, 0x9c, 0x56, 0x32, 0x00, 0x00,
}
