// Code generated by protoc-gen-go.
// source: macro.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家状态
type GamerStatus int32

const (
	GamerStatus_offline  GamerStatus = 1
	GamerStatus_online   GamerStatus = 2
	GamerStatus_teaming  GamerStatus = 3
	GamerStatus_matching GamerStatus = 4
	GamerStatus_fighting GamerStatus = 5
)

var GamerStatus_name = map[int32]string{
	1: "offline",
	2: "online",
	3: "teaming",
	4: "matching",
	5: "fighting",
}
var GamerStatus_value = map[string]int32{
	"offline":  1,
	"online":   2,
	"teaming":  3,
	"matching": 4,
	"fighting": 5,
}

func (x GamerStatus) Enum() *GamerStatus {
	p := new(GamerStatus)
	*p = x
	return p
}
func (x GamerStatus) String() string {
	return proto.EnumName(GamerStatus_name, int32(x))
}
func (x *GamerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerStatus_value, data, "GamerStatus")
	if err != nil {
		return err
	}
	*x = GamerStatus(value)
	return nil
}
func (GamerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{0} }

// 玩家角色状态
type GamerIsNewStatus int32

const (
	GamerIsNewStatus_newGamer GamerIsNewStatus = 1
	GamerIsNewStatus_oldGamer GamerIsNewStatus = 2
)

var GamerIsNewStatus_name = map[int32]string{
	1: "newGamer",
	2: "oldGamer",
}
var GamerIsNewStatus_value = map[string]int32{
	"newGamer": 1,
	"oldGamer": 2,
}

func (x GamerIsNewStatus) Enum() *GamerIsNewStatus {
	p := new(GamerIsNewStatus)
	*p = x
	return p
}
func (x GamerIsNewStatus) String() string {
	return proto.EnumName(GamerIsNewStatus_name, int32(x))
}
func (x *GamerIsNewStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerIsNewStatus_value, data, "GamerIsNewStatus")
	if err != nil {
		return err
	}
	*x = GamerIsNewStatus(value)
	return nil
}
func (GamerIsNewStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{1} }

// 球员上阵目标位置的类型
type SquadState int32

const (
	SquadState_Starter    SquadState = 0
	SquadState_Bench      SquadState = 1
	SquadState_PlayerPool SquadState = 2
)

var SquadState_name = map[int32]string{
	0: "Starter",
	1: "Bench",
	2: "PlayerPool",
}
var SquadState_value = map[string]int32{
	"Starter":    0,
	"Bench":      1,
	"PlayerPool": 2,
}

func (x SquadState) Enum() *SquadState {
	p := new(SquadState)
	*p = x
	return p
}
func (x SquadState) String() string {
	return proto.EnumName(SquadState_name, int32(x))
}
func (x *SquadState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SquadState_value, data, "SquadState")
	if err != nil {
		return err
	}
	*x = SquadState(value)
	return nil
}
func (SquadState) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{2} }

// 联盟职务
type AllianceJobType int32

const (
	AllianceJobType_LBoss    AllianceJobType = 1
	AllianceJobType_LManager AllianceJobType = 2
	AllianceJobType_LElite   AllianceJobType = 3
	AllianceJobType_LCasual  AllianceJobType = 4
)

var AllianceJobType_name = map[int32]string{
	1: "LBoss",
	2: "LManager",
	3: "LElite",
	4: "LCasual",
}
var AllianceJobType_value = map[string]int32{
	"LBoss":    1,
	"LManager": 2,
	"LElite":   3,
	"LCasual":  4,
}

func (x AllianceJobType) Enum() *AllianceJobType {
	p := new(AllianceJobType)
	*p = x
	return p
}
func (x AllianceJobType) String() string {
	return proto.EnumName(AllianceJobType_name, int32(x))
}
func (x *AllianceJobType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllianceJobType_value, data, "AllianceJobType")
	if err != nil {
		return err
	}
	*x = AllianceJobType(value)
	return nil
}
func (AllianceJobType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{3} }

// 职务操作功能
type AllianceOpFunType int32

const (
	AllianceOpFunType_LOpSetJob   AllianceOpFunType = 1
	AllianceOpFunType_LOpKick     AllianceOpFunType = 2
	AllianceOpFunType_LOpSet      AllianceOpFunType = 3
	AllianceOpFunType_LOpApply    AllianceOpFunType = 4
	AllianceOpFunType_LOpTurnover AllianceOpFunType = 5
	AllianceOpFunType_LOpDisband  AllianceOpFunType = 6
	AllianceOpFunType_LOpInvite   AllianceOpFunType = 7
	AllianceOpFunType_LOpBuyGift  AllianceOpFunType = 8
	AllianceOpFunType_LOpMail     AllianceOpFunType = 9
	AllianceOpFunType_LOpImpeach  AllianceOpFunType = 10
)

var AllianceOpFunType_name = map[int32]string{
	1:  "LOpSetJob",
	2:  "LOpKick",
	3:  "LOpSet",
	4:  "LOpApply",
	5:  "LOpTurnover",
	6:  "LOpDisband",
	7:  "LOpInvite",
	8:  "LOpBuyGift",
	9:  "LOpMail",
	10: "LOpImpeach",
}
var AllianceOpFunType_value = map[string]int32{
	"LOpSetJob":   1,
	"LOpKick":     2,
	"LOpSet":      3,
	"LOpApply":    4,
	"LOpTurnover": 5,
	"LOpDisband":  6,
	"LOpInvite":   7,
	"LOpBuyGift":  8,
	"LOpMail":     9,
	"LOpImpeach":  10,
}

func (x AllianceOpFunType) Enum() *AllianceOpFunType {
	p := new(AllianceOpFunType)
	*p = x
	return p
}
func (x AllianceOpFunType) String() string {
	return proto.EnumName(AllianceOpFunType_name, int32(x))
}
func (x *AllianceOpFunType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllianceOpFunType_value, data, "AllianceOpFunType")
	if err != nil {
		return err
	}
	*x = AllianceOpFunType(value)
	return nil
}
func (AllianceOpFunType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{4} }

// 联盟设置
type AllianceSetType int32

const (
	AllianceSetType_LNeedAudit AllianceSetType = 1
	AllianceSetType_LOpen      AllianceSetType = 2
	AllianceSetType_LClose     AllianceSetType = 3
)

var AllianceSetType_name = map[int32]string{
	1: "LNeedAudit",
	2: "LOpen",
	3: "LClose",
}
var AllianceSetType_value = map[string]int32{
	"LNeedAudit": 1,
	"LOpen":      2,
	"LClose":     3,
}

func (x AllianceSetType) Enum() *AllianceSetType {
	p := new(AllianceSetType)
	*p = x
	return p
}
func (x AllianceSetType) String() string {
	return proto.EnumName(AllianceSetType_name, int32(x))
}
func (x *AllianceSetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllianceSetType_value, data, "AllianceSetType")
	if err != nil {
		return err
	}
	*x = AllianceSetType(value)
	return nil
}
func (AllianceSetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{5} }

// 联盟投票
type AllianceVote int32

const (
	AllianceVote_LCommon AllianceVote = 0
	AllianceVote_LAgree  AllianceVote = 1
	AllianceVote_LWaiver AllianceVote = 2
	AllianceVote_LReject AllianceVote = 3
)

var AllianceVote_name = map[int32]string{
	0: "LCommon",
	1: "LAgree",
	2: "LWaiver",
	3: "LReject",
}
var AllianceVote_value = map[string]int32{
	"LCommon": 0,
	"LAgree":  1,
	"LWaiver": 2,
	"LReject": 3,
}

func (x AllianceVote) Enum() *AllianceVote {
	p := new(AllianceVote)
	*p = x
	return p
}
func (x AllianceVote) String() string {
	return proto.EnumName(AllianceVote_name, int32(x))
}
func (x *AllianceVote) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllianceVote_value, data, "AllianceVote")
	if err != nil {
		return err
	}
	*x = AllianceVote(value)
	return nil
}
func (AllianceVote) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{6} }

// 战斗力计算枚举
type Battle int32

const (
	// 未知
	Battle_battleunknown Battle = 0
	// 进攻
	Battle_attack Battle = 1
	// 防守
	Battle_defende Battle = 2
	// 敏捷
	Battle_agility Battle = 3
	// 弹跳
	Battle_bounce Battle = 4
	// 移动
	Battle_move Battle = 5
	// 强壮
	Battle_strong Battle = 6
	// 反应
	Battle_reaction Battle = 7
	// 体能上限
	Battle_staminatoplimit Battle = 8
	// 韧性
	Battle_ductility Battle = 9
	// 近距离投篮
	Battle_nearrangeshoot Battle = 10
	// 中距离投篮
	Battle_mediumrangeshoot Battle = 11
	// 远距离投篮
	Battle_longrangeshoot Battle = 12
	// 扣篮
	Battle_dunks Battle = 13
	// 上篮
	Battle_layup Battle = 14
	// 篮板
	Battle_rebounds Battle = 15
	// 控球
	Battle_ballcontrol Battle = 16
	// 传球
	Battle_pass Battle = 17
	// 封盖
	Battle_blockshot Battle = 18
	// 突破
	Battle_breakthrough Battle = 19
	// 技巧
	Battle_technique Battle = 20
	// 背打
	Battle_postup Battle = 21
	// 干扰
	Battle_disturb Battle = 22
	// 掩护
	Battle_cover Battle = 23
	// 抢断
	Battle_steal Battle = 24
	// 高位进攻执行效率
	Battle_GWZSX Battle = 25
	// 挡拆执行效率
	Battle_DCZSX Battle = 26
	// 突分执行效率
	Battle_TFZSX Battle = 27
	// 空切执行效率
	Battle_KQZSX Battle = 28
	// 低位进攻执行效率
	Battle_DWZSX Battle = 29
	// 进攻效率
	Battle_attack_effect Battle = 30
	// 高位进攻防守效率
	Battle_GWZSD Battle = 31
	// 挡拆防守效率
	Battle_DCZSD Battle = 32
	// 突分防守效率
	Battle_TFZSD Battle = 33
	// 空切防守效率
	Battle_KQZSD Battle = 34
	// 低位进攻防守效率
	Battle_DWZSD Battle = 35
	// 防守效率
	Battle_defense_effect Battle = 36
	// Max
	Battle_battleMax Battle = 37
)

var Battle_name = map[int32]string{
	0:  "battleunknown",
	1:  "attack",
	2:  "defende",
	3:  "agility",
	4:  "bounce",
	5:  "move",
	6:  "strong",
	7:  "reaction",
	8:  "staminatoplimit",
	9:  "ductility",
	10: "nearrangeshoot",
	11: "mediumrangeshoot",
	12: "longrangeshoot",
	13: "dunks",
	14: "layup",
	15: "rebounds",
	16: "ballcontrol",
	17: "pass",
	18: "blockshot",
	19: "breakthrough",
	20: "technique",
	21: "postup",
	22: "disturb",
	23: "cover",
	24: "steal",
	25: "GWZSX",
	26: "DCZSX",
	27: "TFZSX",
	28: "KQZSX",
	29: "DWZSX",
	30: "attack_effect",
	31: "GWZSD",
	32: "DCZSD",
	33: "TFZSD",
	34: "KQZSD",
	35: "DWZSD",
	36: "defense_effect",
	37: "battleMax",
}
var Battle_value = map[string]int32{
	"battleunknown":    0,
	"attack":           1,
	"defende":          2,
	"agility":          3,
	"bounce":           4,
	"move":             5,
	"strong":           6,
	"reaction":         7,
	"staminatoplimit":  8,
	"ductility":        9,
	"nearrangeshoot":   10,
	"mediumrangeshoot": 11,
	"longrangeshoot":   12,
	"dunks":            13,
	"layup":            14,
	"rebounds":         15,
	"ballcontrol":      16,
	"pass":             17,
	"blockshot":        18,
	"breakthrough":     19,
	"technique":        20,
	"postup":           21,
	"disturb":          22,
	"cover":            23,
	"steal":            24,
	"GWZSX":            25,
	"DCZSX":            26,
	"TFZSX":            27,
	"KQZSX":            28,
	"DWZSX":            29,
	"attack_effect":    30,
	"GWZSD":            31,
	"DCZSD":            32,
	"TFZSD":            33,
	"KQZSD":            34,
	"DWZSD":            35,
	"defense_effect":   36,
	"battleMax":        37,
}

func (x Battle) Enum() *Battle {
	p := new(Battle)
	*p = x
	return p
}
func (x Battle) String() string {
	return proto.EnumName(Battle_name, int32(x))
}
func (x *Battle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Battle_value, data, "Battle")
	if err != nil {
		return err
	}
	*x = Battle(value)
	return nil
}
func (Battle) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{7} }

// 副属性
type DeputyAttrType int32

const (
	// 未知
	DeputyAttrType_deputyunknown DeputyAttrType = 0
	// 基础属性
	DeputyAttrType_primaryAttr DeputyAttrType = 1
	// 百分比
	DeputyAttrType_percent DeputyAttrType = 2
	// 额外属性
	DeputyAttrType_otherAttr DeputyAttrType = 3
	// 成长系数
	DeputyAttrType_growthFactor DeputyAttrType = 4
	// 战斗百分比
	DeputyAttrType_battlePercent DeputyAttrType = 5
	// 战斗额外属性
	DeputyAttrType_battleOtherPercent DeputyAttrType = 6
	// 最大值
	DeputyAttrType_deputyMax DeputyAttrType = 7
)

var DeputyAttrType_name = map[int32]string{
	0: "deputyunknown",
	1: "primaryAttr",
	2: "percent",
	3: "otherAttr",
	4: "growthFactor",
	5: "battlePercent",
	6: "battleOtherPercent",
	7: "deputyMax",
}
var DeputyAttrType_value = map[string]int32{
	"deputyunknown":      0,
	"primaryAttr":        1,
	"percent":            2,
	"otherAttr":          3,
	"growthFactor":       4,
	"battlePercent":      5,
	"battleOtherPercent": 6,
	"deputyMax":          7,
}

func (x DeputyAttrType) Enum() *DeputyAttrType {
	p := new(DeputyAttrType)
	*p = x
	return p
}
func (x DeputyAttrType) String() string {
	return proto.EnumName(DeputyAttrType_name, int32(x))
}
func (x *DeputyAttrType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeputyAttrType_value, data, "DeputyAttrType")
	if err != nil {
		return err
	}
	*x = DeputyAttrType(value)
	return nil
}
func (DeputyAttrType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{8} }

// 消息频道枚举
type ChatChannel int32

const (
	ChatChannel_world   ChatChannel = 1
	ChatChannel_club    ChatChannel = 2
	ChatChannel_private ChatChannel = 3
	ChatChannel_system  ChatChannel = 4
)

var ChatChannel_name = map[int32]string{
	1: "world",
	2: "club",
	3: "private",
	4: "system",
}
var ChatChannel_value = map[string]int32{
	"world":   1,
	"club":    2,
	"private": 3,
	"system":  4,
}

func (x ChatChannel) Enum() *ChatChannel {
	p := new(ChatChannel)
	*p = x
	return p
}
func (x ChatChannel) String() string {
	return proto.EnumName(ChatChannel_name, int32(x))
}
func (x *ChatChannel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChatChannel_value, data, "ChatChannel")
	if err != nil {
		return err
	}
	*x = ChatChannel(value)
	return nil
}
func (ChatChannel) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{9} }

// 上阵类型
type SquadType int32

const (
	// 起始值
	SquadType_SquadNo SquadType = 0
	// 主界面阵容
	SquadType_SquadCommonType SquadType = 1
	// 表演赛之三分球
	SquadType_SquadPerformanceThreeDunk SquadType = 6
	// 表演赛之扣篮
	SquadType_SquadPerformanceDunk SquadType = 7
	// 巡演赛
	SquadType_SquadTourMatch SquadType = 9
	// 巡演赛分支
	SquadType_SquadTourMatchBranch SquadType = 10
	// 无双进攻阵型1
	SquadType_SquadPeerlessAttack_1 SquadType = 11
	// 无双进攻阵型2
	SquadType_SquadPeerlessAttack_2 SquadType = 12
	// 无双进攻阵型3
	SquadType_SquadPeerlessAttack_3 SquadType = 13
	// 商业邀请赛阵容1
	SquadType_SquadInvite1 SquadType = 17
	// 商业邀请赛阵容2
	SquadType_SquadInvite2 SquadType = 18
	// SquadTowerNormal = 19;// 篮球之巅
	// 东部爬塔（分区赛）
	SquadType_SquadTowerEast SquadType = 20
	// 西部爬塔（分区赛）
	SquadType_SquadTowerWest SquadType = 21
	// 巅峰爬塔（分区赛）
	SquadType_SquadTowerTop SquadType = 22
	// 常规爬塔（分区赛）
	SquadType_SquadTowerCommon SquadType = 23
	// 联盟战1
	SquadType_SquadLeagueBattle1 SquadType = 24
	// 联盟战2
	SquadType_SquadLeagueBattle2 SquadType = 25
	// 联盟战3
	SquadType_SquadLeagueBattle3 SquadType = 26
	// 最大阵容id
	SquadType_SquadMax SquadType = 27
)

var SquadType_name = map[int32]string{
	0:  "SquadNo",
	1:  "SquadCommonType",
	6:  "SquadPerformanceThreeDunk",
	7:  "SquadPerformanceDunk",
	9:  "SquadTourMatch",
	10: "SquadTourMatchBranch",
	11: "SquadPeerlessAttack_1",
	12: "SquadPeerlessAttack_2",
	13: "SquadPeerlessAttack_3",
	17: "SquadInvite1",
	18: "SquadInvite2",
	20: "SquadTowerEast",
	21: "SquadTowerWest",
	22: "SquadTowerTop",
	23: "SquadTowerCommon",
	24: "SquadLeagueBattle1",
	25: "SquadLeagueBattle2",
	26: "SquadLeagueBattle3",
	27: "SquadMax",
}
var SquadType_value = map[string]int32{
	"SquadNo":                   0,
	"SquadCommonType":           1,
	"SquadPerformanceThreeDunk": 6,
	"SquadPerformanceDunk":      7,
	"SquadTourMatch":            9,
	"SquadTourMatchBranch":      10,
	"SquadPeerlessAttack_1":     11,
	"SquadPeerlessAttack_2":     12,
	"SquadPeerlessAttack_3":     13,
	"SquadInvite1":              17,
	"SquadInvite2":              18,
	"SquadTowerEast":            20,
	"SquadTowerWest":            21,
	"SquadTowerTop":             22,
	"SquadTowerCommon":          23,
	"SquadLeagueBattle1":        24,
	"SquadLeagueBattle2":        25,
	"SquadLeagueBattle3":        26,
	"SquadMax":                  27,
}

func (x SquadType) Enum() *SquadType {
	p := new(SquadType)
	*p = x
	return p
}
func (x SquadType) String() string {
	return proto.EnumName(SquadType_name, int32(x))
}
func (x *SquadType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SquadType_value, data, "SquadType")
	if err != nil {
		return err
	}
	*x = SquadType(value)
	return nil
}
func (SquadType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{10} }

// 好友状态枚举
type FriendStatusEnum int32

const (
	FriendStatusEnum_Friends  FriendStatusEnum = 1
	FriendStatusEnum_Stranger FriendStatusEnum = 2
	FriendStatusEnum_Apply    FriendStatusEnum = 3
	FriendStatusEnum_Accept   FriendStatusEnum = 4
)

var FriendStatusEnum_name = map[int32]string{
	1: "Friends",
	2: "Stranger",
	3: "Apply",
	4: "Accept",
}
var FriendStatusEnum_value = map[string]int32{
	"Friends":  1,
	"Stranger": 2,
	"Apply":    3,
	"Accept":   4,
}

func (x FriendStatusEnum) Enum() *FriendStatusEnum {
	p := new(FriendStatusEnum)
	*p = x
	return p
}
func (x FriendStatusEnum) String() string {
	return proto.EnumName(FriendStatusEnum_name, int32(x))
}
func (x *FriendStatusEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FriendStatusEnum_value, data, "FriendStatusEnum")
	if err != nil {
		return err
	}
	*x = FriendStatusEnum(value)
	return nil
}
func (FriendStatusEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{11} }

// 资源类型枚举
type ResourceType int32

const (
	// 道具
	ResourceType_GoodsResource ResourceType = 1
	// 玩家属性资源
	ResourceType_AttResource ResourceType = 2
	// 球员
	ResourceType_PlayerResource ResourceType = 3
	// 装备
	ResourceType_EquipmentResource ResourceType = 5
)

var ResourceType_name = map[int32]string{
	1: "GoodsResource",
	2: "AttResource",
	3: "PlayerResource",
	5: "EquipmentResource",
}
var ResourceType_value = map[string]int32{
	"GoodsResource":     1,
	"AttResource":       2,
	"PlayerResource":    3,
	"EquipmentResource": 5,
}

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}
func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}
func (x *ResourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResourceType_value, data, "ResourceType")
	if err != nil {
		return err
	}
	*x = ResourceType(value)
	return nil
}
func (ResourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{12} }

// 比赛类型
type MatchType int32

const (
	// 无实义
	MatchType_UnKnowMatch MatchType = 0
	// 联盟挑战赛
	MatchType_AllianceChallengeMatch MatchType = 4
	// 联盟boss
	MatchType_LeagueBossMatch MatchType = 5
	// 新手引导
	MatchType_NoviceGuideMatch MatchType = 6
	// 天梯赛
	MatchType_Ladder MatchType = 12
	// 剧情引导
	MatchType_PlotGuideMatch MatchType = 14
	// 表演赛之三分球大赛
	MatchType_PerformanceThreeDunk MatchType = 16
	// 表演赛之扣篮大赛
	MatchType_PerformanceDunk MatchType = 17
	// 传奇挑战赛(王朝挑战)
	MatchType_LegendaryMatch MatchType = 18
	// 常规赛挑战赛
	MatchType_RegularMatchChallenge MatchType = 20
	// 常规赛
	MatchType_RegularMatch MatchType = 21
	// 冒险(城市赛)
	MatchType_Adventure MatchType = 22
	// 巡演赛
	MatchType_TourMatch MatchType = 23
	// 巡演赛分支
	MatchType_TourMatchBranch MatchType = 24
	// 季后赛
	MatchType_Playoff MatchType = 25
	// 竞技场回放
	MatchType_ArenaReplay MatchType = 26
	// 商业邀请赛
	MatchType_InviteMatch MatchType = 27
	// 爬塔(巅峰挑战+分区挑战)
	MatchType_TowerMatch MatchType = 28
	// 巅峰竞技
	MatchType_PeerlessMatch MatchType = 29
	// 名宿赛
	MatchType_MascotMatch MatchType = 30
	// 联盟战
	MatchType_LeagueBattleMatch MatchType = 31
	// 小型杯赛
	MatchType_LittleCup MatchType = 32
	// 公平竞技
	MatchType_FairMatch MatchType = 33
	// 选秀赛
	MatchType_ShowMatch MatchType = 34
	// 切磋赛
	MatchType_DuelMatch MatchType = 35
)

var MatchType_name = map[int32]string{
	0:  "UnKnowMatch",
	4:  "AllianceChallengeMatch",
	5:  "LeagueBossMatch",
	6:  "NoviceGuideMatch",
	12: "Ladder",
	14: "PlotGuideMatch",
	16: "PerformanceThreeDunk",
	17: "PerformanceDunk",
	18: "LegendaryMatch",
	20: "RegularMatchChallenge",
	21: "RegularMatch",
	22: "Adventure",
	23: "TourMatch",
	24: "TourMatchBranch",
	25: "Playoff",
	26: "ArenaReplay",
	27: "InviteMatch",
	28: "TowerMatch",
	29: "PeerlessMatch",
	30: "MascotMatch",
	31: "LeagueBattleMatch",
	32: "LittleCup",
	33: "FairMatch",
	34: "ShowMatch",
	35: "DuelMatch",
}
var MatchType_value = map[string]int32{
	"UnKnowMatch":            0,
	"AllianceChallengeMatch": 4,
	"LeagueBossMatch":        5,
	"NoviceGuideMatch":       6,
	"Ladder":                 12,
	"PlotGuideMatch":         14,
	"PerformanceThreeDunk":   16,
	"PerformanceDunk":        17,
	"LegendaryMatch":         18,
	"RegularMatchChallenge":  20,
	"RegularMatch":           21,
	"Adventure":              22,
	"TourMatch":              23,
	"TourMatchBranch":        24,
	"Playoff":                25,
	"ArenaReplay":            26,
	"InviteMatch":            27,
	"TowerMatch":             28,
	"PeerlessMatch":          29,
	"MascotMatch":            30,
	"LeagueBattleMatch":      31,
	"LittleCup":              32,
	"FairMatch":              33,
	"ShowMatch":              34,
	"DuelMatch":              35,
}

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}
func (x MatchType) String() string {
	return proto.EnumName(MatchType_name, int32(x))
}
func (x *MatchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchType_value, data, "MatchType")
	if err != nil {
		return err
	}
	*x = MatchType(value)
	return nil
}
func (MatchType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{13} }

// 联盟挑战赛难度
type AllianceChallengeMonster int32

const (
	// 简单
	AllianceChallengeMonster_Easy AllianceChallengeMonster = 1
	// 中等
	AllianceChallengeMonster_Medium AllianceChallengeMonster = 2
	// 高
	AllianceChallengeMonster_High AllianceChallengeMonster = 3
)

var AllianceChallengeMonster_name = map[int32]string{
	1: "Easy",
	2: "Medium",
	3: "High",
}
var AllianceChallengeMonster_value = map[string]int32{
	"Easy":   1,
	"Medium": 2,
	"High":   3,
}

func (x AllianceChallengeMonster) Enum() *AllianceChallengeMonster {
	p := new(AllianceChallengeMonster)
	*p = x
	return p
}
func (x AllianceChallengeMonster) String() string {
	return proto.EnumName(AllianceChallengeMonster_name, int32(x))
}
func (x *AllianceChallengeMonster) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllianceChallengeMonster_value, data, "AllianceChallengeMonster")
	if err != nil {
		return err
	}
	*x = AllianceChallengeMonster(value)
	return nil
}
func (AllianceChallengeMonster) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{14} }

// 联盟交易任务状态
type AllianceDealTaskStatus int32

const (
	// 未开始
	AllianceDealTaskStatus_DealNotStart AllianceDealTaskStatus = 0
	// 等待中
	AllianceDealTaskStatus_DealWaiting AllianceDealTaskStatus = 1
	// 交易中
	AllianceDealTaskStatus_DealInHand AllianceDealTaskStatus = 2
	// 已完成
	AllianceDealTaskStatus_DealFinish AllianceDealTaskStatus = 3
	// 已领取
	AllianceDealTaskStatus_DealDraw AllianceDealTaskStatus = 4
)

var AllianceDealTaskStatus_name = map[int32]string{
	0: "DealNotStart",
	1: "DealWaiting",
	2: "DealInHand",
	3: "DealFinish",
	4: "DealDraw",
}
var AllianceDealTaskStatus_value = map[string]int32{
	"DealNotStart": 0,
	"DealWaiting":  1,
	"DealInHand":   2,
	"DealFinish":   3,
	"DealDraw":     4,
}

func (x AllianceDealTaskStatus) Enum() *AllianceDealTaskStatus {
	p := new(AllianceDealTaskStatus)
	*p = x
	return p
}
func (x AllianceDealTaskStatus) String() string {
	return proto.EnumName(AllianceDealTaskStatus_name, int32(x))
}
func (x *AllianceDealTaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllianceDealTaskStatus_value, data, "AllianceDealTaskStatus")
	if err != nil {
		return err
	}
	*x = AllianceDealTaskStatus(value)
	return nil
}
func (AllianceDealTaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{15} }

// 玩家生涯数据类型
type GamerCareerDataType int32

const (
	// 已获得球员
	GamerCareerDataType_GetPlayer GamerCareerDataType = 1
	// 完成比赛场次
	GamerCareerDataType_AccomplishFightCount GamerCareerDataType = 2
	// 获得传奇球员数量(UR)
	GamerCareerDataType_GetURPlayer GamerCareerDataType = 3
	// 比赛胜利场次
	GamerCareerDataType_WinFightCount GamerCareerDataType = 4
	// 获取巨星球员数量(SSR)
	GamerCareerDataType_GetSSRPlayer GamerCareerDataType = 5
	// 生涯得分总计
	GamerCareerDataType_GamerGetScore GamerCareerDataType = 6
	// 历史球员最高等级
	GamerCareerDataType_PlayerMaxLv GamerCareerDataType = 7
	// 生涯单场最高得分
	GamerCareerDataType_GamerSingerFieldMaxScore GamerCareerDataType = 8
	// 历史球员最高星级
	GamerCareerDataType_PlayerMaxStar GamerCareerDataType = 9
	// 生涯单节最高得分
	GamerCareerDataType_GamerSingerLinkMaxScore GamerCareerDataType = 10
	// 球队历史最高战力
	GamerCareerDataType_GamerMaxFAP GamerCareerDataType = 11
	// 赢取赛季总冠军次数
	GamerCareerDataType_GamerWinSeasonChampion GamerCareerDataType = 12
)

var GamerCareerDataType_name = map[int32]string{
	1:  "GetPlayer",
	2:  "AccomplishFightCount",
	3:  "GetURPlayer",
	4:  "WinFightCount",
	5:  "GetSSRPlayer",
	6:  "GamerGetScore",
	7:  "PlayerMaxLv",
	8:  "GamerSingerFieldMaxScore",
	9:  "PlayerMaxStar",
	10: "GamerSingerLinkMaxScore",
	11: "GamerMaxFAP",
	12: "GamerWinSeasonChampion",
}
var GamerCareerDataType_value = map[string]int32{
	"GetPlayer":                1,
	"AccomplishFightCount":     2,
	"GetURPlayer":              3,
	"WinFightCount":            4,
	"GetSSRPlayer":             5,
	"GamerGetScore":            6,
	"PlayerMaxLv":              7,
	"GamerSingerFieldMaxScore": 8,
	"PlayerMaxStar":            9,
	"GamerSingerLinkMaxScore":  10,
	"GamerMaxFAP":              11,
	"GamerWinSeasonChampion":   12,
}

func (x GamerCareerDataType) Enum() *GamerCareerDataType {
	p := new(GamerCareerDataType)
	*p = x
	return p
}
func (x GamerCareerDataType) String() string {
	return proto.EnumName(GamerCareerDataType_name, int32(x))
}
func (x *GamerCareerDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerCareerDataType_value, data, "GamerCareerDataType")
	if err != nil {
		return err
	}
	*x = GamerCareerDataType(value)
	return nil
}
func (GamerCareerDataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{16} }

// 任务类型
type TaskType int32

const (
	// 日常任务
	TaskType_tt_DailyTask TaskType = 1
	// 日常任务
	TaskType_tt_Achievement TaskType = 2
	// 日常任务宝箱
	TaskType_tt_DailyTaskBox TaskType = 3
	// 周常任务
	TaskType_tt_WeekTask TaskType = 4
	// 周常任务宝箱
	TaskType_tt_WeekTaskBox TaskType = 5
)

var TaskType_name = map[int32]string{
	1: "tt_DailyTask",
	2: "tt_Achievement",
	3: "tt_DailyTaskBox",
	4: "tt_WeekTask",
	5: "tt_WeekTaskBox",
}
var TaskType_value = map[string]int32{
	"tt_DailyTask":    1,
	"tt_Achievement":  2,
	"tt_DailyTaskBox": 3,
	"tt_WeekTask":     4,
	"tt_WeekTaskBox":  5,
}

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}
func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (x *TaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskType_value, data, "TaskType")
	if err != nil {
		return err
	}
	*x = TaskType(value)
	return nil
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{17} }

// 剧情任务类型
type StoryTaskType int32

const (
	// 主线
	StoryTaskType_StoryMainTask StoryTaskType = 1
	// 支线
	StoryTaskType_StorySideTask StoryTaskType = 2
	// 对话UR球员
	StoryTaskType_StoryDialogueTask StoryTaskType = 3
	// 对话首选球员
	StoryTaskType_StoryFistPlayerTask StoryTaskType = 4
)

var StoryTaskType_name = map[int32]string{
	1: "StoryMainTask",
	2: "StorySideTask",
	3: "StoryDialogueTask",
	4: "StoryFistPlayerTask",
}
var StoryTaskType_value = map[string]int32{
	"StoryMainTask":       1,
	"StorySideTask":       2,
	"StoryDialogueTask":   3,
	"StoryFistPlayerTask": 4,
}

func (x StoryTaskType) Enum() *StoryTaskType {
	p := new(StoryTaskType)
	*p = x
	return p
}
func (x StoryTaskType) String() string {
	return proto.EnumName(StoryTaskType_name, int32(x))
}
func (x *StoryTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoryTaskType_value, data, "StoryTaskType")
	if err != nil {
		return err
	}
	*x = StoryTaskType(value)
	return nil
}
func (StoryTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{18} }

// 限时类型
type TimeOutType int32

const (
	// 不限时
	TimeOutType_No TimeOutType = 0
	// 限时时长:秒
	TimeOutType_Seconds TimeOutType = 1
	// 截止日期(精确到秒)
	TimeOutType_EndDateTime TimeOutType = 2
)

var TimeOutType_name = map[int32]string{
	0: "No",
	1: "Seconds",
	2: "EndDateTime",
}
var TimeOutType_value = map[string]int32{
	"No":          0,
	"Seconds":     1,
	"EndDateTime": 2,
}

func (x TimeOutType) Enum() *TimeOutType {
	p := new(TimeOutType)
	*p = x
	return p
}
func (x TimeOutType) String() string {
	return proto.EnumName(TimeOutType_name, int32(x))
}
func (x *TimeOutType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TimeOutType_value, data, "TimeOutType")
	if err != nil {
		return err
	}
	*x = TimeOutType(value)
	return nil
}
func (TimeOutType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{19} }

// 账户状态
type AccountStatus int32

const (
	// 正常
	AccountStatus_AccountStatusNormal AccountStatus = 0
	// 停封
	AccountStatus_AccountStatusClosure AccountStatus = 1
	// 禁言
	AccountStatus_AccountStatusShutup AccountStatus = 2
)

var AccountStatus_name = map[int32]string{
	0: "AccountStatusNormal",
	1: "AccountStatusClosure",
	2: "AccountStatusShutup",
}
var AccountStatus_value = map[string]int32{
	"AccountStatusNormal":  0,
	"AccountStatusClosure": 1,
	"AccountStatusShutup":  2,
}

func (x AccountStatus) Enum() *AccountStatus {
	p := new(AccountStatus)
	*p = x
	return p
}
func (x AccountStatus) String() string {
	return proto.EnumName(AccountStatus_name, int32(x))
}
func (x *AccountStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccountStatus_value, data, "AccountStatus")
	if err != nil {
		return err
	}
	*x = AccountStatus(value)
	return nil
}
func (AccountStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{20} }

// 公告类型
type NoticeType int32

const (
	// 未知
	NoticeType_UnKown NoticeType = 0
	// 游戏公告
	NoticeType_Game NoticeType = 1
	// 活动公告
	NoticeType_Activity NoticeType = 2
)

var NoticeType_name = map[int32]string{
	0: "UnKown",
	1: "Game",
	2: "Activity",
}
var NoticeType_value = map[string]int32{
	"UnKown":   0,
	"Game":     1,
	"Activity": 2,
}

func (x NoticeType) Enum() *NoticeType {
	p := new(NoticeType)
	*p = x
	return p
}
func (x NoticeType) String() string {
	return proto.EnumName(NoticeType_name, int32(x))
}
func (x *NoticeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NoticeType_value, data, "NoticeType")
	if err != nil {
		return err
	}
	*x = NoticeType(value)
	return nil
}
func (NoticeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{21} }

// 小助手类型
type AssistantType int32

const (
	// 球员升级
	AssistantType_AssType_PlayerUpLv AssistantType = 1
	// 球员突破
	AssistantType_AssType_PlayerUpQuality AssistantType = 2
	// 球员潜力
	AssistantType_AssType_PlayerUpStar AssistantType = 3
	// 球员技能
	AssistantType_AssType_PlayerUpSkill AssistantType = 4
	// 球员训练
	AssistantType_AssType_PlayerPractice AssistantType = 5
	// 卡包开启
	AssistantType_AssType_OpenBox AssistantType = 7
	// 广告商
	AssistantType_AssType_Advertiser AssistantType = 8
	// 球探
	AssistantType_AssType_Scout AssistantType = 9
)

var AssistantType_name = map[int32]string{
	1: "AssType_PlayerUpLv",
	2: "AssType_PlayerUpQuality",
	3: "AssType_PlayerUpStar",
	4: "AssType_PlayerUpSkill",
	5: "AssType_PlayerPractice",
	7: "AssType_OpenBox",
	8: "AssType_Advertiser",
	9: "AssType_Scout",
}
var AssistantType_value = map[string]int32{
	"AssType_PlayerUpLv":      1,
	"AssType_PlayerUpQuality": 2,
	"AssType_PlayerUpStar":    3,
	"AssType_PlayerUpSkill":   4,
	"AssType_PlayerPractice":  5,
	"AssType_OpenBox":         7,
	"AssType_Advertiser":      8,
	"AssType_Scout":           9,
}

func (x AssistantType) Enum() *AssistantType {
	p := new(AssistantType)
	*p = x
	return p
}
func (x AssistantType) String() string {
	return proto.EnumName(AssistantType_name, int32(x))
}
func (x *AssistantType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AssistantType_value, data, "AssistantType")
	if err != nil {
		return err
	}
	*x = AssistantType(value)
	return nil
}
func (AssistantType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{22} }

// 节点类型
type BranchType int32

const (
	// 成功
	BranchType_BT_Success BranchType = 1
	// 反击
	BranchType_BT_NewRetorted BranchType = 2
)

var BranchType_name = map[int32]string{
	1: "BT_Success",
	2: "BT_NewRetorted",
}
var BranchType_value = map[string]int32{
	"BT_Success":     1,
	"BT_NewRetorted": 2,
}

func (x BranchType) Enum() *BranchType {
	p := new(BranchType)
	*p = x
	return p
}
func (x BranchType) String() string {
	return proto.EnumName(BranchType_name, int32(x))
}
func (x *BranchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BranchType_value, data, "BranchType")
	if err != nil {
		return err
	}
	*x = BranchType(value)
	return nil
}
func (BranchType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{23} }

// 首充状态
type FirstRechargeState int32

const (
	// 未充值
	FirstRechargeState_FRS_NoRecharge FirstRechargeState = 0
	// 已充值
	FirstRechargeState_FRS_Recharge FirstRechargeState = 1
	// 已领奖
	FirstRechargeState_FRS_HaveAward FirstRechargeState = 2
)

var FirstRechargeState_name = map[int32]string{
	0: "FRS_NoRecharge",
	1: "FRS_Recharge",
	2: "FRS_HaveAward",
}
var FirstRechargeState_value = map[string]int32{
	"FRS_NoRecharge": 0,
	"FRS_Recharge":   1,
	"FRS_HaveAward":  2,
}

func (x FirstRechargeState) Enum() *FirstRechargeState {
	p := new(FirstRechargeState)
	*p = x
	return p
}
func (x FirstRechargeState) String() string {
	return proto.EnumName(FirstRechargeState_name, int32(x))
}
func (x *FirstRechargeState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FirstRechargeState_value, data, "FirstRechargeState")
	if err != nil {
		return err
	}
	*x = FirstRechargeState(value)
	return nil
}
func (FirstRechargeState) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{24} }

// 条件类型
type ConditionType int32

const (
	// 比赛次数 前置参数(比赛类型;比赛结果(1:赢 2:输 3:无论输赢))
	ConditionType_CT_MatchNum ConditionType = 101
	// 球员使用经验道具
	ConditionType_CT_UseExpItem ConditionType = 102
	// 购买资源 前置参数(资源类型)
	ConditionType_CT_BuyResource ConditionType = 103
	// 每日登录
	ConditionType_CT_DailyLogin ConditionType = 104
	// 招募 前置参数(招募类型)
	ConditionType_CT_Recruit ConditionType = 105
	// 玩家达到X级
	ConditionType_CT_GamerLv ConditionType = 106
	// 球员总星级
	ConditionType_CT_TotalStar ConditionType = 107
	// 常规赛首通次数 前置参数(赛季id)
	ConditionType_CT_RegularFirstPassNum ConditionType = 108
	// 玩家战力
	ConditionType_CT_GamerFightPower ConditionType = 109
	// 球员数量 前置参数(球员稀有度，0为所有)
	ConditionType_CT_PlayerNum ConditionType = 110
	// 达到指定活跃值
	ConditionType_CT_SpecifiedDailyTaskActivation ConditionType = 111
	// 指定常规赛分支任务完成数量 前置参数(赛季id)
	ConditionType_CT_SpecifiedRegularSeasonBranchNum ConditionType = 112
	// 指定竞技场名次
	ConditionType_CT_SpecifiedArenaRanking ConditionType = 113
	// 指定无双段位
	ConditionType_CT_SpecifiedPeerlessDan ConditionType = 114
	// 爬塔四个赛区通关条件
	ConditionType_CT_SpecifiedTwoer ConditionType = 115
	// 七日目标-点赞
	ConditionType_CT_TaskHof ConditionType = 116
	// 七日目标-激活王朝掠影多少次
	ConditionType_CT_TaskTeamPhoto ConditionType = 117
	// 七日目标-激活图鉴多少次
	ConditionType_CT_TaskBook ConditionType = 118
	// 七日目标-竞技场参与多少次
	ConditionType_CT_TaskArena ConditionType = 119
	// 七日目标-完成多少次日常任务
	ConditionType_CT_TaskDaily ConditionType = 120
	// 七日目标-完成多少次成就任务
	ConditionType_CT_TaskAchieve ConditionType = 121
	// 七日目标-传奇参与次数
	ConditionType_CT_TaskLegend ConditionType = 122
	// 七日目标-激活N位助理教练
	ConditionType_CT_TaskCoach ConditionType = 123
	// 七日目标-任意一位教练达到多少级
	ConditionType_CT_TaskCoachLv ConditionType = 124
	// 七日目标-任意教练装备达到多少级
	ConditionType_CT_TaskCoachEquipLv ConditionType = 125
	// 七日目标-加入一个联盟
	ConditionType_CT_TaskAlliance ConditionType = 126
	// 七日目标-参与多少次商业比赛
	ConditionType_CT_TaskAdventureBegin ConditionType = 127
	// 七日目标-完成多少次商业比赛
	ConditionType_CT_TaskAdventureEnd ConditionType = 128
	// 七日目标-篮球之巅累计获得胜利多少次
	ConditionType_CT_TaskAdventureTowerNormal ConditionType = 129
	// 七日目标-三分球大赛累计参与多少次
	ConditionType_CT_TaskThreeDunk ConditionType = 130
	// 七日目标-三分球大赛累计获得多少星
	ConditionType_CT_TaskThreeDunkStar ConditionType = 131
	// 七日目标-灌篮大赛累计参与多少次
	ConditionType_CT_TaskDunk ConditionType = 132
	// 七日目标-灌篮大赛累计获得多少星
	ConditionType_CT_TaskDunkStar ConditionType = 133
	// 七日目标-在世界频道发言多少次
	ConditionType_CT_TaskWorldChat ConditionType = 134
	// 七日目标-最佳阵容上阵球员多少位
	ConditionType_CT_TaskBestSquad ConditionType = 135
	// 七日目标-无双竞技场参与多少次
	ConditionType_CT_TaskPeerlessBegin ConditionType = 136
	// 七日目标-无双竞技场胜利多少次
	ConditionType_CT_TaskPeerlessWin ConditionType = 137
	// 七日目标-参与试练之地多少次
	ConditionType_CT_TaskTowerBegin ConditionType = 138
	// 七日目标-参与名宿副本多少次
	ConditionType_CT_TaskMascotFight ConditionType = 139
	// 七日目标-名宿等级达到多少级
	ConditionType_CT_TaskLegendLv ConditionType = 140
	// 七日目标-拥有多少位名宿
	ConditionType_CT_TaskLegendNum ConditionType = 141
	// 拥有n阶球员多少个
	ConditionType_CT_PlayerNumWithQuality ConditionType = 142
	// 拥有n级球员多少个
	ConditionType_CT_PlayerNumWithLevel ConditionType = 143
	// 拥有n星球员多少个
	ConditionType_CT_PlayerNumWithStar ConditionType = 144
	// 拥有穿戴n件服饰的球员多少个
	ConditionType_CT_PlayerNumWithDressCostume ConditionType = 145
	// 拥有穿戴n件护具的球员多少个
	ConditionType_CT_PlayerNumWithDressGear ConditionType = 146
	// 拥有强化n级的服饰多少件
	ConditionType_CT_CostumeNumWithIntensifyLevel ConditionType = 147
	// 拥有强化n级的护具多少件
	ConditionType_CT_GearNumWithIntensifyLevel ConditionType = 148
	// 拥有精炼n阶的服饰多少件
	ConditionType_CT_CostumeNumWithRefineLevel ConditionType = 149
	// 拥有精炼n阶的护具多少件
	ConditionType_CT_GearNumWithRefineLevel ConditionType = 150
	// 拥有n色的装备多少件
	ConditionType_CT_EquipmentNumWithColor ConditionType = 151
	// 图鉴值达到多少值
	ConditionType_CT_RosterScore ConditionType = 152
	// 达到指定周活跃值
	ConditionType_CT_SpecifiedWeeklyTaskActivation ConditionType = 153
	// 参与天梯多少次
	ConditionType_CT_JoinSkyLadderTimes ConditionType = 154
	// 参与篮球之巅多少次
	ConditionType_CT_JoinNormalTowerTimes ConditionType = 155
	// 累计充值多少 单位:分
	ConditionType_CT_RechargeSum ConditionType = 156
	// 终身累计充值多少 单位:分
	ConditionType_CT_AllRechargeSum ConditionType = 157
	// 购买多少次小月卡
	ConditionType_CT_SmallMonthCardBuyNum ConditionType = 158
	// 购买多少次大月卡
	ConditionType_CT_BigMonthCardBuyNum ConditionType = 159
	// 三分球大赛终身累计参与多少次
	ConditionType_CT_AllThreeDunkJoinSum ConditionType = 160
	// 三分球大赛终身累计获得多少星
	ConditionType_CT_AllThreeDunkGetStarSum ConditionType = 161
	// 灌篮大赛终身累计参与多少次
	ConditionType_CT_AllDunkJoinSum ConditionType = 162
	// 灌篮大赛终身累计获得多少星
	ConditionType_CT_AllDunkGetStarSum ConditionType = 163
	// 球鞋活动分享
	ConditionType_CT_ActivityShoesShare ConditionType = 164
	// 十连抽抽中品质X的球员Y个
	ConditionType_CT_TenRecruitPlayerRarityNum ConditionType = 165
	// 联盟捐献X次
	ConditionType_CT_LeagueDonate ConditionType = 177
	// 创建自定义球员
	ConditionType_CT_CreateCustomerPlayer ConditionType = 178
	// 购买球员合同
	ConditionType_CT_BuyPlayerContract ConditionType = 179
	// 上阵xx稀有度球员x个
	ConditionType_CT_SquadPlayerRarity ConditionType = 180
	// 上阵队形有x个羁绊
	ConditionType_CT_SquadPlayerFetter ConditionType = 181
	// 季后赛首通x次
	ConditionType_CT_SquadPlayeoffFirstPass ConditionType = 182
	// 爬塔-巅峰赛 通关x层
	ConditionType_CT_TowerLevel ConditionType = 183
	// 名宿副本通关x层
	ConditionType_CT_MascotLevel ConditionType = 184
	// 在商店中购买指定商品
	ConditionType_CT_BuySpecialGoodsInShop ConditionType = 185
	// 常规赛分支玩法(小任务)计数
	ConditionType_CT_RegularLittleTask ConditionType = 186
	// 拥有多少个n阶球员（阶数为进度）
	ConditionType_CT_PlayerQualityWithNum ConditionType = 187
	// 激活羁绊x次
	ConditionType_CT_FetterActive ConditionType = 188
	// 传奇挑战赛达到指定积分
	ConditionType_CT_LegendaryAchieveScore ConditionType = 189
	// 联盟投资达到指定次数
	ConditionType_CT_LeagueInvest ConditionType = 190
	// 城市赛完成地图个数
	ConditionType_CT_AdventureFinishMapCount ConditionType = 191
	// 城市赛赢得指定难度的比赛目标次数
	ConditionType_CT_AdventureWinSpecialDiffCount ConditionType = 192
	// 城市赛援助次数
	ConditionType_CT_AdventureHelpCount ConditionType = 193
	// 非酋
	ConditionType_CT_FeiQiuAchieve ConditionType = 194
	// 欧皇
	ConditionType_CT_OuHuanAchieve ConditionType = 195
	// N个球员穿戴N件>=N色的护具
	ConditionType_CT_PlayerNumWithDressGearWithColor ConditionType = 196
	// N个球员穿戴N件>=N色的服饰
	ConditionType_CT_PlayerNumWithDressCostumeWithColor ConditionType = 197
	// 联盟交易赠送
	ConditionType_CT_LeagueDealGive ConditionType = 198
	// 好友赠送体力
	ConditionType_CT_SendFriendEnergy ConditionType = 199
	// X年度季后赛胜利次数
	ConditionType_CT_PlayOffMatchNum ConditionType = 200
	// 选秀赛参加X次
	ConditionType_CT_DraftJoinNum ConditionType = 201
	// 小型杯赛报名X次
	ConditionType_CT_LittleCupApplyNum ConditionType = 202
	// 点击界面次数
	ConditionType_CT_ClickPageNum ConditionType = 203
	// 节日任务积分达到x分
	ConditionType_CT_FestivalTaskScore ConditionType = 204
	// 单球员战力达到X
	ConditionType_CT_OnePlyerPower ConditionType = 205
)

var ConditionType_name = map[int32]string{
	101: "CT_MatchNum",
	102: "CT_UseExpItem",
	103: "CT_BuyResource",
	104: "CT_DailyLogin",
	105: "CT_Recruit",
	106: "CT_GamerLv",
	107: "CT_TotalStar",
	108: "CT_RegularFirstPassNum",
	109: "CT_GamerFightPower",
	110: "CT_PlayerNum",
	111: "CT_SpecifiedDailyTaskActivation",
	112: "CT_SpecifiedRegularSeasonBranchNum",
	113: "CT_SpecifiedArenaRanking",
	114: "CT_SpecifiedPeerlessDan",
	115: "CT_SpecifiedTwoer",
	116: "CT_TaskHof",
	117: "CT_TaskTeamPhoto",
	118: "CT_TaskBook",
	119: "CT_TaskArena",
	120: "CT_TaskDaily",
	121: "CT_TaskAchieve",
	122: "CT_TaskLegend",
	123: "CT_TaskCoach",
	124: "CT_TaskCoachLv",
	125: "CT_TaskCoachEquipLv",
	126: "CT_TaskAlliance",
	127: "CT_TaskAdventureBegin",
	128: "CT_TaskAdventureEnd",
	129: "CT_TaskAdventureTowerNormal",
	130: "CT_TaskThreeDunk",
	131: "CT_TaskThreeDunkStar",
	132: "CT_TaskDunk",
	133: "CT_TaskDunkStar",
	134: "CT_TaskWorldChat",
	135: "CT_TaskBestSquad",
	136: "CT_TaskPeerlessBegin",
	137: "CT_TaskPeerlessWin",
	138: "CT_TaskTowerBegin",
	139: "CT_TaskMascotFight",
	140: "CT_TaskLegendLv",
	141: "CT_TaskLegendNum",
	142: "CT_PlayerNumWithQuality",
	143: "CT_PlayerNumWithLevel",
	144: "CT_PlayerNumWithStar",
	145: "CT_PlayerNumWithDressCostume",
	146: "CT_PlayerNumWithDressGear",
	147: "CT_CostumeNumWithIntensifyLevel",
	148: "CT_GearNumWithIntensifyLevel",
	149: "CT_CostumeNumWithRefineLevel",
	150: "CT_GearNumWithRefineLevel",
	151: "CT_EquipmentNumWithColor",
	152: "CT_RosterScore",
	153: "CT_SpecifiedWeeklyTaskActivation",
	154: "CT_JoinSkyLadderTimes",
	155: "CT_JoinNormalTowerTimes",
	156: "CT_RechargeSum",
	157: "CT_AllRechargeSum",
	158: "CT_SmallMonthCardBuyNum",
	159: "CT_BigMonthCardBuyNum",
	160: "CT_AllThreeDunkJoinSum",
	161: "CT_AllThreeDunkGetStarSum",
	162: "CT_AllDunkJoinSum",
	163: "CT_AllDunkGetStarSum",
	164: "CT_ActivityShoesShare",
	165: "CT_TenRecruitPlayerRarityNum",
	177: "CT_LeagueDonate",
	178: "CT_CreateCustomerPlayer",
	179: "CT_BuyPlayerContract",
	180: "CT_SquadPlayerRarity",
	181: "CT_SquadPlayerFetter",
	182: "CT_SquadPlayeoffFirstPass",
	183: "CT_TowerLevel",
	184: "CT_MascotLevel",
	185: "CT_BuySpecialGoodsInShop",
	186: "CT_RegularLittleTask",
	187: "CT_PlayerQualityWithNum",
	188: "CT_FetterActive",
	189: "CT_LegendaryAchieveScore",
	190: "CT_LeagueInvest",
	191: "CT_AdventureFinishMapCount",
	192: "CT_AdventureWinSpecialDiffCount",
	193: "CT_AdventureHelpCount",
	194: "CT_FeiQiuAchieve",
	195: "CT_OuHuanAchieve",
	196: "CT_PlayerNumWithDressGearWithColor",
	197: "CT_PlayerNumWithDressCostumeWithColor",
	198: "CT_LeagueDealGive",
	199: "CT_SendFriendEnergy",
	200: "CT_PlayOffMatchNum",
	201: "CT_DraftJoinNum",
	202: "CT_LittleCupApplyNum",
	203: "CT_ClickPageNum",
	204: "CT_FestivalTaskScore",
	205: "CT_OnePlyerPower",
}
var ConditionType_value = map[string]int32{
	"CT_MatchNum":                           101,
	"CT_UseExpItem":                         102,
	"CT_BuyResource":                        103,
	"CT_DailyLogin":                         104,
	"CT_Recruit":                            105,
	"CT_GamerLv":                            106,
	"CT_TotalStar":                          107,
	"CT_RegularFirstPassNum":                108,
	"CT_GamerFightPower":                    109,
	"CT_PlayerNum":                          110,
	"CT_SpecifiedDailyTaskActivation":       111,
	"CT_SpecifiedRegularSeasonBranchNum":    112,
	"CT_SpecifiedArenaRanking":              113,
	"CT_SpecifiedPeerlessDan":               114,
	"CT_SpecifiedTwoer":                     115,
	"CT_TaskHof":                            116,
	"CT_TaskTeamPhoto":                      117,
	"CT_TaskBook":                           118,
	"CT_TaskArena":                          119,
	"CT_TaskDaily":                          120,
	"CT_TaskAchieve":                        121,
	"CT_TaskLegend":                         122,
	"CT_TaskCoach":                          123,
	"CT_TaskCoachLv":                        124,
	"CT_TaskCoachEquipLv":                   125,
	"CT_TaskAlliance":                       126,
	"CT_TaskAdventureBegin":                 127,
	"CT_TaskAdventureEnd":                   128,
	"CT_TaskAdventureTowerNormal":           129,
	"CT_TaskThreeDunk":                      130,
	"CT_TaskThreeDunkStar":                  131,
	"CT_TaskDunk":                           132,
	"CT_TaskDunkStar":                       133,
	"CT_TaskWorldChat":                      134,
	"CT_TaskBestSquad":                      135,
	"CT_TaskPeerlessBegin":                  136,
	"CT_TaskPeerlessWin":                    137,
	"CT_TaskTowerBegin":                     138,
	"CT_TaskMascotFight":                    139,
	"CT_TaskLegendLv":                       140,
	"CT_TaskLegendNum":                      141,
	"CT_PlayerNumWithQuality":               142,
	"CT_PlayerNumWithLevel":                 143,
	"CT_PlayerNumWithStar":                  144,
	"CT_PlayerNumWithDressCostume":          145,
	"CT_PlayerNumWithDressGear":             146,
	"CT_CostumeNumWithIntensifyLevel":       147,
	"CT_GearNumWithIntensifyLevel":          148,
	"CT_CostumeNumWithRefineLevel":          149,
	"CT_GearNumWithRefineLevel":             150,
	"CT_EquipmentNumWithColor":              151,
	"CT_RosterScore":                        152,
	"CT_SpecifiedWeeklyTaskActivation":      153,
	"CT_JoinSkyLadderTimes":                 154,
	"CT_JoinNormalTowerTimes":               155,
	"CT_RechargeSum":                        156,
	"CT_AllRechargeSum":                     157,
	"CT_SmallMonthCardBuyNum":               158,
	"CT_BigMonthCardBuyNum":                 159,
	"CT_AllThreeDunkJoinSum":                160,
	"CT_AllThreeDunkGetStarSum":             161,
	"CT_AllDunkJoinSum":                     162,
	"CT_AllDunkGetStarSum":                  163,
	"CT_ActivityShoesShare":                 164,
	"CT_TenRecruitPlayerRarityNum":          165,
	"CT_LeagueDonate":                       177,
	"CT_CreateCustomerPlayer":               178,
	"CT_BuyPlayerContract":                  179,
	"CT_SquadPlayerRarity":                  180,
	"CT_SquadPlayerFetter":                  181,
	"CT_SquadPlayeoffFirstPass":             182,
	"CT_TowerLevel":                         183,
	"CT_MascotLevel":                        184,
	"CT_BuySpecialGoodsInShop":              185,
	"CT_RegularLittleTask":                  186,
	"CT_PlayerQualityWithNum":               187,
	"CT_FetterActive":                       188,
	"CT_LegendaryAchieveScore":              189,
	"CT_LeagueInvest":                       190,
	"CT_AdventureFinishMapCount":            191,
	"CT_AdventureWinSpecialDiffCount":       192,
	"CT_AdventureHelpCount":                 193,
	"CT_FeiQiuAchieve":                      194,
	"CT_OuHuanAchieve":                      195,
	"CT_PlayerNumWithDressGearWithColor":    196,
	"CT_PlayerNumWithDressCostumeWithColor": 197,
	"CT_LeagueDealGive":                     198,
	"CT_SendFriendEnergy":                   199,
	"CT_PlayOffMatchNum":                    200,
	"CT_DraftJoinNum":                       201,
	"CT_LittleCupApplyNum":                  202,
	"CT_ClickPageNum":                       203,
	"CT_FestivalTaskScore":                  204,
	"CT_OnePlyerPower":                      205,
}

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}
func (x ConditionType) String() string {
	return proto.EnumName(ConditionType_name, int32(x))
}
func (x *ConditionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConditionType_value, data, "ConditionType")
	if err != nil {
		return err
	}
	*x = ConditionType(value)
	return nil
}
func (ConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{25} }

// 条件状态
type ConditionState int32

const (
	// 进行中
	ConditionState_CS_Processing ConditionState = 1
	// 完成
	ConditionState_CS_Complete ConditionState = 2
)

var ConditionState_name = map[int32]string{
	1: "CS_Processing",
	2: "CS_Complete",
}
var ConditionState_value = map[string]int32{
	"CS_Processing": 1,
	"CS_Complete":   2,
}

func (x ConditionState) Enum() *ConditionState {
	p := new(ConditionState)
	*p = x
	return p
}
func (x ConditionState) String() string {
	return proto.EnumName(ConditionState_name, int32(x))
}
func (x *ConditionState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConditionState_value, data, "ConditionState")
	if err != nil {
		return err
	}
	*x = ConditionState(value)
	return nil
}
func (ConditionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{26} }

type ClickPageId int32

const (
	// 1:王朝掠影界面
	ClickPageId_TeamPhotoPage ClickPageId = 1
	// 2:图鉴界面
	ClickPageId_RosterPage ClickPageId = 2
	// 3:竞技场界面
	ClickPageId_ArenaPage ClickPageId = 3
)

var ClickPageId_name = map[int32]string{
	1: "TeamPhotoPage",
	2: "RosterPage",
	3: "ArenaPage",
}
var ClickPageId_value = map[string]int32{
	"TeamPhotoPage": 1,
	"RosterPage":    2,
	"ArenaPage":     3,
}

func (x ClickPageId) Enum() *ClickPageId {
	p := new(ClickPageId)
	*p = x
	return p
}
func (x ClickPageId) String() string {
	return proto.EnumName(ClickPageId_name, int32(x))
}
func (x *ClickPageId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClickPageId_value, data, "ClickPageId")
	if err != nil {
		return err
	}
	*x = ClickPageId(value)
	return nil
}
func (ClickPageId) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{27} }

// 服务器类型枚举
type ServerType int32

const (
	// 逻辑服
	ServerType_ST_Logic ServerType = 0
	// 天梯服
	ServerType_ST_Ladder ServerType = 1
	// 战斗服
	ServerType_ST_Fight ServerType = 2
	// 中心服
	ServerType_ST_Center ServerType = 3
	// 匹配服
	ServerType_ST_Match ServerType = 4
	// 排行服
	ServerType_ST_Rank ServerType = 5
	// 无双
	ServerType_ST_Peerless ServerType = 6
	// 竞技场
	ServerType_ST_Arena ServerType = 7
)

var ServerType_name = map[int32]string{
	0: "ST_Logic",
	1: "ST_Ladder",
	2: "ST_Fight",
	3: "ST_Center",
	4: "ST_Match",
	5: "ST_Rank",
	6: "ST_Peerless",
	7: "ST_Arena",
}
var ServerType_value = map[string]int32{
	"ST_Logic":    0,
	"ST_Ladder":   1,
	"ST_Fight":    2,
	"ST_Center":   3,
	"ST_Match":    4,
	"ST_Rank":     5,
	"ST_Peerless": 6,
	"ST_Arena":    7,
}

func (x ServerType) Enum() *ServerType {
	p := new(ServerType)
	*p = x
	return p
}
func (x ServerType) String() string {
	return proto.EnumName(ServerType_name, int32(x))
}
func (x *ServerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerType_value, data, "ServerType")
	if err != nil {
		return err
	}
	*x = ServerType(value)
	return nil
}
func (ServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{28} }

// 获取比赛回放剧本的时候的状态
type ReplaysBoutStatus int32

const (
	// 比赛不存在
	ReplaysBoutStatus_RBS_NOTEXIST ReplaysBoutStatus = 0
	// 比赛新剧本
	ReplaysBoutStatus_RBS_NEWBOUT ReplaysBoutStatus = 1
	// 比赛结束
	ReplaysBoutStatus_RBS_BATTLEEND ReplaysBoutStatus = 2
)

var ReplaysBoutStatus_name = map[int32]string{
	0: "RBS_NOTEXIST",
	1: "RBS_NEWBOUT",
	2: "RBS_BATTLEEND",
}
var ReplaysBoutStatus_value = map[string]int32{
	"RBS_NOTEXIST":  0,
	"RBS_NEWBOUT":   1,
	"RBS_BATTLEEND": 2,
}

func (x ReplaysBoutStatus) Enum() *ReplaysBoutStatus {
	p := new(ReplaysBoutStatus)
	*p = x
	return p
}
func (x ReplaysBoutStatus) String() string {
	return proto.EnumName(ReplaysBoutStatus_name, int32(x))
}
func (x *ReplaysBoutStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplaysBoutStatus_value, data, "ReplaysBoutStatus")
	if err != nil {
		return err
	}
	*x = ReplaysBoutStatus(value)
	return nil
}
func (ReplaysBoutStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{29} }

// 比赛是否能够跳过状态
type JumpFightStatus int32

const (
	// 0:不可跳过
	JumpFightStatus_JFS_NOTJUMP JumpFightStatus = 0
	// 1:立即跳过
	JumpFightStatus_JFS_JUMP JumpFightStatus = 1
	// 2:一分钟后跳过
	JumpFightStatus_JFS_MINUTEJUMP JumpFightStatus = 2
)

var JumpFightStatus_name = map[int32]string{
	0: "JFS_NOTJUMP",
	1: "JFS_JUMP",
	2: "JFS_MINUTEJUMP",
}
var JumpFightStatus_value = map[string]int32{
	"JFS_NOTJUMP":    0,
	"JFS_JUMP":       1,
	"JFS_MINUTEJUMP": 2,
}

func (x JumpFightStatus) Enum() *JumpFightStatus {
	p := new(JumpFightStatus)
	*p = x
	return p
}
func (x JumpFightStatus) String() string {
	return proto.EnumName(JumpFightStatus_name, int32(x))
}
func (x *JumpFightStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JumpFightStatus_value, data, "JumpFightStatus")
	if err != nil {
		return err
	}
	*x = JumpFightStatus(value)
	return nil
}
func (JumpFightStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{30} }

type ReplayType int32

const (
	// 0:不是回放
	ReplayType_RT_NO ReplayType = 0
	// 1:普通回放
	ReplayType_RT_COMMON ReplayType = 1
	// 2:特殊回放（通过回放来完成比赛）
	ReplayType_RT_SPECIAL ReplayType = 2
)

var ReplayType_name = map[int32]string{
	0: "RT_NO",
	1: "RT_COMMON",
	2: "RT_SPECIAL",
}
var ReplayType_value = map[string]int32{
	"RT_NO":      0,
	"RT_COMMON":  1,
	"RT_SPECIAL": 2,
}

func (x ReplayType) Enum() *ReplayType {
	p := new(ReplayType)
	*p = x
	return p
}
func (x ReplayType) String() string {
	return proto.EnumName(ReplayType_name, int32(x))
}
func (x *ReplayType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplayType_value, data, "ReplayType")
	if err != nil {
		return err
	}
	*x = ReplayType(value)
	return nil
}
func (ReplayType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{31} }

// 今日不再提醒的模块
type ShouldShowNoticeModule int32

const (
	// 0:无
	ShouldShowNoticeModule_SSNM_NONE ShouldShowNoticeModule = 0
	// 1:全国直播
	ShouldShowNoticeModule_SSNM_NATIONAL_LIVE ShouldShowNoticeModule = 1
)

var ShouldShowNoticeModule_name = map[int32]string{
	0: "SSNM_NONE",
	1: "SSNM_NATIONAL_LIVE",
}
var ShouldShowNoticeModule_value = map[string]int32{
	"SSNM_NONE":          0,
	"SSNM_NATIONAL_LIVE": 1,
}

func (x ShouldShowNoticeModule) Enum() *ShouldShowNoticeModule {
	p := new(ShouldShowNoticeModule)
	*p = x
	return p
}
func (x ShouldShowNoticeModule) String() string {
	return proto.EnumName(ShouldShowNoticeModule_name, int32(x))
}
func (x *ShouldShowNoticeModule) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ShouldShowNoticeModule_value, data, "ShouldShowNoticeModule")
	if err != nil {
		return err
	}
	*x = ShouldShowNoticeModule(value)
	return nil
}
func (ShouldShowNoticeModule) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{32} }

// 货币类型
// TODO:需要清理已经不再使用的类型!
type ReserveType int32

const (
	// 金币
	ReserveType__Gold ReserveType = 1
	// 钻石
	ReserveType__Diamond ReserveType = 2
	// 玩家经验
	ReserveType__Exp ReserveType = 3
	// 球探币
	ReserveType__Scout ReserveType = 4
	// 球员经验
	ReserveType__PlayerExpPool ReserveType = 5
	// 体力
	ReserveType__Energy ReserveType = 6
	// pvp荣誉
	ReserveType__PvpHonor ReserveType = 7
	// 联盟币
	ReserveType__AllianceCoin ReserveType = 8
	// 训练点
	ReserveType__TrainingPoint ReserveType = 9
	// 赛季币
	ReserveType__SeasonCoin ReserveType = 10
	// 治疗点
	ReserveType__repairPoint ReserveType = 11
	// 影响力
	ReserveType__Fluence ReserveType = 12
	// 联盟资金
	ReserveType__AllianceFund ReserveType = 13
	// 锦标劵
	ReserveType__ChampionshipsFund ReserveType = 14
	// 金钻
	ReserveType__GoldDiamond ReserveType = 15
	// 日常通行证积分
	ReserveType__PassportDaily ReserveType = 16
	// 战力品钥匙
	ReserveType__SpoilsKey ReserveType = 17
	// 荣耀币
	ReserveType__ReserveTypeHonor ReserveType = 18
	// 巡演通行证积分
	ReserveType__PassportBattle ReserveType = 19
	// 精力值（商业比赛）
	ReserveType__CommercialEnergyPoints ReserveType = 20
	// 成就点
	ReserveType__ReserveTypeAchievementPoint ReserveType = 21
	// 离线积分(蓝球之巅)
	ReserveType__TowerScore ReserveType = 22
	// 联盟投资券
	ReserveType__LeagueInvestCount ReserveType = 23
	// 交易代币
	ReserveType__TradingCurrency ReserveType = 24
	// 联盟活动积分
	ReserveType__LeagueActivityScore ReserveType = 25
	// 竞猜币
	ReserveType__GuessCurrency ReserveType = 27
	// 节日活动代币
	ReserveType__FestivalCurrency ReserveType = 28
	// MAX
	ReserveType__ReserveTypeMax ReserveType = 29
	// 联盟活跃度（gm升级联盟专用，其他无实义）
	ReserveType__AllianceActive ReserveType = 999
)

var ReserveType_name = map[int32]string{
	1:   "_Gold",
	2:   "_Diamond",
	3:   "_Exp",
	4:   "_Scout",
	5:   "_PlayerExpPool",
	6:   "_Energy",
	7:   "_PvpHonor",
	8:   "_AllianceCoin",
	9:   "_TrainingPoint",
	10:  "_SeasonCoin",
	11:  "_repairPoint",
	12:  "_Fluence",
	13:  "_AllianceFund",
	14:  "_ChampionshipsFund",
	15:  "_GoldDiamond",
	16:  "_PassportDaily",
	17:  "_SpoilsKey",
	18:  "_ReserveTypeHonor",
	19:  "_PassportBattle",
	20:  "_CommercialEnergyPoints",
	21:  "_ReserveTypeAchievementPoint",
	22:  "_TowerScore",
	23:  "_LeagueInvestCount",
	24:  "_TradingCurrency",
	25:  "_LeagueActivityScore",
	27:  "_GuessCurrency",
	28:  "_FestivalCurrency",
	29:  "_ReserveTypeMax",
	999: "_AllianceActive",
}
var ReserveType_value = map[string]int32{
	"_Gold":                        1,
	"_Diamond":                     2,
	"_Exp":                         3,
	"_Scout":                       4,
	"_PlayerExpPool":               5,
	"_Energy":                      6,
	"_PvpHonor":                    7,
	"_AllianceCoin":                8,
	"_TrainingPoint":               9,
	"_SeasonCoin":                  10,
	"_repairPoint":                 11,
	"_Fluence":                     12,
	"_AllianceFund":                13,
	"_ChampionshipsFund":           14,
	"_GoldDiamond":                 15,
	"_PassportDaily":               16,
	"_SpoilsKey":                   17,
	"_ReserveTypeHonor":            18,
	"_PassportBattle":              19,
	"_CommercialEnergyPoints":      20,
	"_ReserveTypeAchievementPoint": 21,
	"_TowerScore":                  22,
	"_LeagueInvestCount":           23,
	"_TradingCurrency":             24,
	"_LeagueActivityScore":         25,
	"_GuessCurrency":               27,
	"_FestivalCurrency":            28,
	"_ReserveTypeMax":              29,
	"_AllianceActive":              999,
}

func (x ReserveType) Enum() *ReserveType {
	p := new(ReserveType)
	*p = x
	return p
}
func (x ReserveType) String() string {
	return proto.EnumName(ReserveType_name, int32(x))
}
func (x *ReserveType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReserveType_value, data, "ReserveType")
	if err != nil {
		return err
	}
	*x = ReserveType(value)
	return nil
}
func (ReserveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{33} }

type SourceOfReward int32

const (
	// 默认
	SourceOfReward_SOR_Default SourceOfReward = 0
	// 首充奖励
	SourceOfReward_SOR_FirstRecharge SourceOfReward = 1
	// 名宿赛章节通关奖励
	SourceOfReward_SOR_MascotSectionPass SourceOfReward = 2
	// 剧情任务
	SourceOfReward_SOR_StoryTask SourceOfReward = 3
	// 日常通行证领奖
	SourceOfReward_SOR_PassportDirty SourceOfReward = 4
	// 巡演通行证领奖
	SourceOfReward_SOR_PassportBattle SourceOfReward = 5
)

var SourceOfReward_name = map[int32]string{
	0: "SOR_Default",
	1: "SOR_FirstRecharge",
	2: "SOR_MascotSectionPass",
	3: "SOR_StoryTask",
	4: "SOR_PassportDirty",
	5: "SOR_PassportBattle",
}
var SourceOfReward_value = map[string]int32{
	"SOR_Default":           0,
	"SOR_FirstRecharge":     1,
	"SOR_MascotSectionPass": 2,
	"SOR_StoryTask":         3,
	"SOR_PassportDirty":     4,
	"SOR_PassportBattle":    5,
}

func (x SourceOfReward) Enum() *SourceOfReward {
	p := new(SourceOfReward)
	*p = x
	return p
}
func (x SourceOfReward) String() string {
	return proto.EnumName(SourceOfReward_name, int32(x))
}
func (x *SourceOfReward) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SourceOfReward_value, data, "SourceOfReward")
	if err != nil {
		return err
	}
	*x = SourceOfReward(value)
	return nil
}
func (SourceOfReward) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{34} }

type ZSExclusiveCondition int32

const (
	// 默认
	ZSExclusiveCondition_ZSEC_Default ZSExclusiveCondition = 0
	// 球员等级
	ZSExclusiveCondition_ZSEC_Level ZSExclusiveCondition = 1
	// 球员星级
	ZSExclusiveCondition_ZSEC_Star ZSExclusiveCondition = 2
)

var ZSExclusiveCondition_name = map[int32]string{
	0: "ZSEC_Default",
	1: "ZSEC_Level",
	2: "ZSEC_Star",
}
var ZSExclusiveCondition_value = map[string]int32{
	"ZSEC_Default": 0,
	"ZSEC_Level":   1,
	"ZSEC_Star":    2,
}

func (x ZSExclusiveCondition) Enum() *ZSExclusiveCondition {
	p := new(ZSExclusiveCondition)
	*p = x
	return p
}
func (x ZSExclusiveCondition) String() string {
	return proto.EnumName(ZSExclusiveCondition_name, int32(x))
}
func (x *ZSExclusiveCondition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZSExclusiveCondition_value, data, "ZSExclusiveCondition")
	if err != nil {
		return err
	}
	*x = ZSExclusiveCondition(value)
	return nil
}
func (ZSExclusiveCondition) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{35} }

type PerformanceType int32

const (
	// 三分球大赛
	PerformanceType_PFT_ThreeDunk PerformanceType = 1
	// 扣篮大赛
	PerformanceType_PFT_Dunk PerformanceType = 2
	// MAX
	PerformanceType_PFT_MAX PerformanceType = 3
)

var PerformanceType_name = map[int32]string{
	1: "PFT_ThreeDunk",
	2: "PFT_Dunk",
	3: "PFT_MAX",
}
var PerformanceType_value = map[string]int32{
	"PFT_ThreeDunk": 1,
	"PFT_Dunk":      2,
	"PFT_MAX":       3,
}

func (x PerformanceType) Enum() *PerformanceType {
	p := new(PerformanceType)
	*p = x
	return p
}
func (x PerformanceType) String() string {
	return proto.EnumName(PerformanceType_name, int32(x))
}
func (x *PerformanceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PerformanceType_value, data, "PerformanceType")
	if err != nil {
		return err
	}
	*x = PerformanceType(value)
	return nil
}
func (PerformanceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{36} }

type PerformanceUnlockCondition int32

const (
	// 玩家等级
	PerformanceUnlockCondition_PUC_Level PerformanceUnlockCondition = 1
	// 前一关卡获得指定星数
	PerformanceUnlockCondition_PUC_mpstepitdownStar PerformanceUnlockCondition = 2
)

var PerformanceUnlockCondition_name = map[int32]string{
	1: "PUC_Level",
	2: "PUC_mpstepitdownStar",
}
var PerformanceUnlockCondition_value = map[string]int32{
	"PUC_Level":            1,
	"PUC_mpstepitdownStar": 2,
}

func (x PerformanceUnlockCondition) Enum() *PerformanceUnlockCondition {
	p := new(PerformanceUnlockCondition)
	*p = x
	return p
}
func (x PerformanceUnlockCondition) String() string {
	return proto.EnumName(PerformanceUnlockCondition_name, int32(x))
}
func (x *PerformanceUnlockCondition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PerformanceUnlockCondition_value, data, "PerformanceUnlockCondition")
	if err != nil {
		return err
	}
	*x = PerformanceUnlockCondition(value)
	return nil
}
func (PerformanceUnlockCondition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor41, []int{37}
}

type PerformancePassCondition int32

const (
	// 完成比赛
	PerformancePassCondition_PPC_FinishFight PerformancePassCondition = 1
	// 总分至少获得分数
	PerformancePassCondition_PPC_TotalScoreAtLeast PerformancePassCondition = 2
)

var PerformancePassCondition_name = map[int32]string{
	1: "PPC_FinishFight",
	2: "PPC_TotalScoreAtLeast",
}
var PerformancePassCondition_value = map[string]int32{
	"PPC_FinishFight":       1,
	"PPC_TotalScoreAtLeast": 2,
}

func (x PerformancePassCondition) Enum() *PerformancePassCondition {
	p := new(PerformancePassCondition)
	*p = x
	return p
}
func (x PerformancePassCondition) String() string {
	return proto.EnumName(PerformancePassCondition_name, int32(x))
}
func (x *PerformancePassCondition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PerformancePassCondition_value, data, "PerformancePassCondition")
	if err != nil {
		return err
	}
	*x = PerformancePassCondition(value)
	return nil
}
func (PerformancePassCondition) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{38} }

// 动画节点处理逻辑类型
type TreeNodeHandleType int32

const (
	// 战术树根节点
	TreeNodeHandleType_TNHT_Root TreeNodeHandleType = 0
	// 下面与战斗公式配置FightKey表类型一致
	// 成功节点
	TreeNodeHandleType_TNHT_Success TreeNodeHandleType = 1
	// 分支节点选择专属或其他投篮方式（投篮成功、二次成功，失误、反击）
	TreeNodeHandleType_TNHT_Branch TreeNodeHandleType = 2
	// 动画节点(动画有序)
	TreeNodeHandleType_TNHT_OrdAnim TreeNodeHandleType = 3
	// 动画节点(动画无序)
	TreeNodeHandleType_TNHT_DisOrdAnim TreeNodeHandleType = 4
	// 表演赛之选择位置节点
	TreeNodeHandleType_TNHT_PerPlace TreeNodeHandleType = 5
	// 表演赛之投篮成功、失败定位选择节点
	TreeNodeHandleType_TNHT_PerHitPosition TreeNodeHandleType = 6
	// 表演塞之扣篮分数界限节点
	TreeNodeHandleType_TNHT_ScoreLimit TreeNodeHandleType = 7
	// 结束节点选择
	TreeNodeHandleType_TNHT_EndChoose TreeNodeHandleType = 8
	// 结束动画时间选择
	TreeNodeHandleType_TNHT_TimeChoose TreeNodeHandleType = 9
	// 10.按照排序顺序有序播放节点
	TreeNodeHandleType_TNHT_SortAnimOrd TreeNodeHandleType = 10
)

var TreeNodeHandleType_name = map[int32]string{
	0:  "TNHT_Root",
	1:  "TNHT_Success",
	2:  "TNHT_Branch",
	3:  "TNHT_OrdAnim",
	4:  "TNHT_DisOrdAnim",
	5:  "TNHT_PerPlace",
	6:  "TNHT_PerHitPosition",
	7:  "TNHT_ScoreLimit",
	8:  "TNHT_EndChoose",
	9:  "TNHT_TimeChoose",
	10: "TNHT_SortAnimOrd",
}
var TreeNodeHandleType_value = map[string]int32{
	"TNHT_Root":           0,
	"TNHT_Success":        1,
	"TNHT_Branch":         2,
	"TNHT_OrdAnim":        3,
	"TNHT_DisOrdAnim":     4,
	"TNHT_PerPlace":       5,
	"TNHT_PerHitPosition": 6,
	"TNHT_ScoreLimit":     7,
	"TNHT_EndChoose":      8,
	"TNHT_TimeChoose":     9,
	"TNHT_SortAnimOrd":    10,
}

func (x TreeNodeHandleType) Enum() *TreeNodeHandleType {
	p := new(TreeNodeHandleType)
	*p = x
	return p
}
func (x TreeNodeHandleType) String() string {
	return proto.EnumName(TreeNodeHandleType_name, int32(x))
}
func (x *TreeNodeHandleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TreeNodeHandleType_value, data, "TreeNodeHandleType")
	if err != nil {
		return err
	}
	*x = TreeNodeHandleType(value)
	return nil
}
func (TreeNodeHandleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{39} }

// 招募类型
type RecruitClass int32

const (
	// 球员招募
	RecruitClass_RC_Player RecruitClass = 1
	// 巨星招募
	RecruitClass_RC_SuperStar RecruitClass = 2
	// 位置招募
	RecruitClass_RC_Placer RecruitClass = 3
	// 赛区招募
	RecruitClass_RC_Division RecruitClass = 4
	// 新服UR池招募
	RecruitClass_RC_NewServerUR RecruitClass = 5
	// 限时UR池招募
	RecruitClass_RC_LimitUR RecruitClass = 6
	// 公共UR池招募
	RecruitClass_RC_CommonUR RecruitClass = 7
	// 活动UR池招募
	RecruitClass_RC_ActivityUR RecruitClass = 8
	// max值
	RecruitClass_RC_Max RecruitClass = 9
)

var RecruitClass_name = map[int32]string{
	1: "RC_Player",
	2: "RC_SuperStar",
	3: "RC_Placer",
	4: "RC_Division",
	5: "RC_NewServerUR",
	6: "RC_LimitUR",
	7: "RC_CommonUR",
	8: "RC_ActivityUR",
	9: "RC_Max",
}
var RecruitClass_value = map[string]int32{
	"RC_Player":      1,
	"RC_SuperStar":   2,
	"RC_Placer":      3,
	"RC_Division":    4,
	"RC_NewServerUR": 5,
	"RC_LimitUR":     6,
	"RC_CommonUR":    7,
	"RC_ActivityUR":  8,
	"RC_Max":         9,
}

func (x RecruitClass) Enum() *RecruitClass {
	p := new(RecruitClass)
	*p = x
	return p
}
func (x RecruitClass) String() string {
	return proto.EnumName(RecruitClass_name, int32(x))
}
func (x *RecruitClass) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitClass_value, data, "RecruitClass")
	if err != nil {
		return err
	}
	*x = RecruitClass(value)
	return nil
}
func (RecruitClass) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{40} }

// 战斗属性范围
type BattleAttrScope int32

const (
	// 无意义
	BattleAttrScope_BAS_NO BattleAttrScope = 0
	// 个人
	BattleAttrScope_BAS_Personal BattleAttrScope = 1
	// 全体
	BattleAttrScope_BAS_All BattleAttrScope = 2
	// 场上位置
	BattleAttrScope_BAS_Position BattleAttrScope = 3
	// 球队
	BattleAttrScope_BAS_Team BattleAttrScope = 4
	// 指定球员
	BattleAttrScope_BAS_SpecifyPlayer BattleAttrScope = 5
	// 标签
	BattleAttrScope_BAS_Tag BattleAttrScope = 6
	// 首发球员
	BattleAttrScope_BAS_Starter BattleAttrScope = 7
	// 替补球员
	BattleAttrScope_BAS_Bench BattleAttrScope = 8
)

var BattleAttrScope_name = map[int32]string{
	0: "BAS_NO",
	1: "BAS_Personal",
	2: "BAS_All",
	3: "BAS_Position",
	4: "BAS_Team",
	5: "BAS_SpecifyPlayer",
	6: "BAS_Tag",
	7: "BAS_Starter",
	8: "BAS_Bench",
}
var BattleAttrScope_value = map[string]int32{
	"BAS_NO":            0,
	"BAS_Personal":      1,
	"BAS_All":           2,
	"BAS_Position":      3,
	"BAS_Team":          4,
	"BAS_SpecifyPlayer": 5,
	"BAS_Tag":           6,
	"BAS_Starter":       7,
	"BAS_Bench":         8,
}

func (x BattleAttrScope) Enum() *BattleAttrScope {
	p := new(BattleAttrScope)
	*p = x
	return p
}
func (x BattleAttrScope) String() string {
	return proto.EnumName(BattleAttrScope_name, int32(x))
}
func (x *BattleAttrScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BattleAttrScope_value, data, "BattleAttrScope")
	if err != nil {
		return err
	}
	*x = BattleAttrScope(value)
	return nil
}
func (BattleAttrScope) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{41} }

// 自定义球员标签类型
type CustomerPlayerTagType int32

const (
	// 球队
	CustomerPlayerTagType_CPTT_Team CustomerPlayerTagType = 1
	// 技能
	CustomerPlayerTagType_CPTT_Skill CustomerPlayerTagType = 2
	// 位置
	CustomerPlayerTagType_CPTT_Place CustomerPlayerTagType = 3
)

var CustomerPlayerTagType_name = map[int32]string{
	1: "CPTT_Team",
	2: "CPTT_Skill",
	3: "CPTT_Place",
}
var CustomerPlayerTagType_value = map[string]int32{
	"CPTT_Team":  1,
	"CPTT_Skill": 2,
	"CPTT_Place": 3,
}

func (x CustomerPlayerTagType) Enum() *CustomerPlayerTagType {
	p := new(CustomerPlayerTagType)
	*p = x
	return p
}
func (x CustomerPlayerTagType) String() string {
	return proto.EnumName(CustomerPlayerTagType_name, int32(x))
}
func (x *CustomerPlayerTagType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CustomerPlayerTagType_value, data, "CustomerPlayerTagType")
	if err != nil {
		return err
	}
	*x = CustomerPlayerTagType(value)
	return nil
}
func (CustomerPlayerTagType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{42} }

// 弹窗兑换产出方式
type PopExchangeProductType int32

const (
	// 直接获得
	PopExchangeProductType_PEPT_GetCommdity PopExchangeProductType = 1
	// 从掉落集合中掉落
	PopExchangeProductType_PEPT_DropAggregate PopExchangeProductType = 2
	// 从掉落id中掉落
	PopExchangeProductType_PEPT_DropId PopExchangeProductType = 3
)

var PopExchangeProductType_name = map[int32]string{
	1: "PEPT_GetCommdity",
	2: "PEPT_DropAggregate",
	3: "PEPT_DropId",
}
var PopExchangeProductType_value = map[string]int32{
	"PEPT_GetCommdity":   1,
	"PEPT_DropAggregate": 2,
	"PEPT_DropId":        3,
}

func (x PopExchangeProductType) Enum() *PopExchangeProductType {
	p := new(PopExchangeProductType)
	*p = x
	return p
}
func (x PopExchangeProductType) String() string {
	return proto.EnumName(PopExchangeProductType_name, int32(x))
}
func (x *PopExchangeProductType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PopExchangeProductType_value, data, "PopExchangeProductType")
	if err != nil {
		return err
	}
	*x = PopExchangeProductType(value)
	return nil
}
func (PopExchangeProductType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{43} }

// 常规赛事件
type RegularEventType int32

const (
	// 常规赛事件：比赛
	RegularEventType_RET_Match RegularEventType = 1
	// 常规赛事件:选择题
	RegularEventType_RET_ChoiceQuestion RegularEventType = 2
	// 常规赛事件:打折
	RegularEventType_RET_Sale RegularEventType = 3
	// 常规赛事件:挑战
	RegularEventType_RET_Challenge RegularEventType = 4
	// 常规赛-小游戏-看图识人
	RegularEventType_RET_LittleGame RegularEventType = 5
	// 常规赛-小游戏-翻牌
	RegularEventType_RET_LittleGame_Flop RegularEventType = 6
)

var RegularEventType_name = map[int32]string{
	1: "RET_Match",
	2: "RET_ChoiceQuestion",
	3: "RET_Sale",
	4: "RET_Challenge",
	5: "RET_LittleGame",
	6: "RET_LittleGame_Flop",
}
var RegularEventType_value = map[string]int32{
	"RET_Match":           1,
	"RET_ChoiceQuestion":  2,
	"RET_Sale":            3,
	"RET_Challenge":       4,
	"RET_LittleGame":      5,
	"RET_LittleGame_Flop": 6,
}

func (x RegularEventType) Enum() *RegularEventType {
	p := new(RegularEventType)
	*p = x
	return p
}
func (x RegularEventType) String() string {
	return proto.EnumName(RegularEventType_name, int32(x))
}
func (x *RegularEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegularEventType_value, data, "RegularEventType")
	if err != nil {
		return err
	}
	*x = RegularEventType(value)
	return nil
}
func (RegularEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{44} }

type AdventurePlayType int32

const (
	// 比赛
	AdventurePlayType_APT_Fight AdventurePlayType = 1
	// 捡东西
	AdventurePlayType_APT_Pickupitem AdventurePlayType = 2
	// 答题
	AdventurePlayType_APT_Answer AdventurePlayType = 3
)

var AdventurePlayType_name = map[int32]string{
	1: "APT_Fight",
	2: "APT_Pickupitem",
	3: "APT_Answer",
}
var AdventurePlayType_value = map[string]int32{
	"APT_Fight":      1,
	"APT_Pickupitem": 2,
	"APT_Answer":     3,
}

func (x AdventurePlayType) Enum() *AdventurePlayType {
	p := new(AdventurePlayType)
	*p = x
	return p
}
func (x AdventurePlayType) String() string {
	return proto.EnumName(AdventurePlayType_name, int32(x))
}
func (x *AdventurePlayType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdventurePlayType_value, data, "AdventurePlayType")
	if err != nil {
		return err
	}
	*x = AdventurePlayType(value)
	return nil
}
func (AdventurePlayType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{45} }

// 装备大星=多少级
type EquipmentBigStar int32

const (
	// 装备1
	EquipmentBigStar_BIG_STAR_EQUIPMENT EquipmentBigStar = 5
)

var EquipmentBigStar_name = map[int32]string{
	5: "BIG_STAR_EQUIPMENT",
}
var EquipmentBigStar_value = map[string]int32{
	"BIG_STAR_EQUIPMENT": 5,
}

func (x EquipmentBigStar) Enum() *EquipmentBigStar {
	p := new(EquipmentBigStar)
	*p = x
	return p
}
func (x EquipmentBigStar) String() string {
	return proto.EnumName(EquipmentBigStar_name, int32(x))
}
func (x *EquipmentBigStar) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EquipmentBigStar_value, data, "EquipmentBigStar")
	if err != nil {
		return err
	}
	*x = EquipmentBigStar(value)
	return nil
}
func (EquipmentBigStar) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{46} }

// 装备类型
type EquipmentType int32

const (
	// 装备
	EquipmentType_ET_EQUIPMENT EquipmentType = 1
	// 配饰
	EquipmentType_ET_JEWELRY EquipmentType = 2
	// 教练装备
	EquipmentType_ET_COACH EquipmentType = 3
	// 名宿装备
	EquipmentType_ET_LEGEND EquipmentType = 4
)

var EquipmentType_name = map[int32]string{
	1: "ET_EQUIPMENT",
	2: "ET_JEWELRY",
	3: "ET_COACH",
	4: "ET_LEGEND",
}
var EquipmentType_value = map[string]int32{
	"ET_EQUIPMENT": 1,
	"ET_JEWELRY":   2,
	"ET_COACH":     3,
	"ET_LEGEND":    4,
}

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}
func (x EquipmentType) String() string {
	return proto.EnumName(EquipmentType_name, int32(x))
}
func (x *EquipmentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EquipmentType_value, data, "EquipmentType")
	if err != nil {
		return err
	}
	*x = EquipmentType(value)
	return nil
}
func (EquipmentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{47} }

// 装备位
type EquipmentPart int32

const (
	// 装备1:
	EquipmentPart_EP_EQUIPMENT_1 EquipmentPart = 0
	// 装备2
	EquipmentPart_EP_EQUIPMENT_2 EquipmentPart = 1
	// 装备3
	EquipmentPart_EP_EQUIPMENT_3 EquipmentPart = 2
	// 装备4
	EquipmentPart_EP_EQUIPMENT_4 EquipmentPart = 3
	// 配饰1
	EquipmentPart_EP_JEWELRY_1 EquipmentPart = 4
	// 配饰2
	EquipmentPart_EP_JEWELRY_2 EquipmentPart = 5
	// 教练装备1
	EquipmentPart_EP_COACH_1 EquipmentPart = 6
	// 教练装备2
	EquipmentPart_EP_COACH_2 EquipmentPart = 7
	// 教练装备3
	EquipmentPart_EP_COACH_3 EquipmentPart = 8
	// 教练装备4
	EquipmentPart_EP_COACH_4 EquipmentPart = 9
	// 名宿装备1
	EquipmentPart_EP_LEGNED_1 EquipmentPart = 10
	// 名宿装备2
	EquipmentPart_EP_LEGNED_2 EquipmentPart = 11
	// 名宿装备3
	EquipmentPart_EP_LEGNED_3 EquipmentPart = 12
	// 名宿装备4
	EquipmentPart_EP_LEGNED_4 EquipmentPart = 13
)

var EquipmentPart_name = map[int32]string{
	0:  "EP_EQUIPMENT_1",
	1:  "EP_EQUIPMENT_2",
	2:  "EP_EQUIPMENT_3",
	3:  "EP_EQUIPMENT_4",
	4:  "EP_JEWELRY_1",
	5:  "EP_JEWELRY_2",
	6:  "EP_COACH_1",
	7:  "EP_COACH_2",
	8:  "EP_COACH_3",
	9:  "EP_COACH_4",
	10: "EP_LEGNED_1",
	11: "EP_LEGNED_2",
	12: "EP_LEGNED_3",
	13: "EP_LEGNED_4",
}
var EquipmentPart_value = map[string]int32{
	"EP_EQUIPMENT_1": 0,
	"EP_EQUIPMENT_2": 1,
	"EP_EQUIPMENT_3": 2,
	"EP_EQUIPMENT_4": 3,
	"EP_JEWELRY_1":   4,
	"EP_JEWELRY_2":   5,
	"EP_COACH_1":     6,
	"EP_COACH_2":     7,
	"EP_COACH_3":     8,
	"EP_COACH_4":     9,
	"EP_LEGNED_1":    10,
	"EP_LEGNED_2":    11,
	"EP_LEGNED_3":    12,
	"EP_LEGNED_4":    13,
}

func (x EquipmentPart) Enum() *EquipmentPart {
	p := new(EquipmentPart)
	*p = x
	return p
}
func (x EquipmentPart) String() string {
	return proto.EnumName(EquipmentPart_name, int32(x))
}
func (x *EquipmentPart) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EquipmentPart_value, data, "EquipmentPart")
	if err != nil {
		return err
	}
	*x = EquipmentPart(value)
	return nil
}
func (EquipmentPart) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{48} }

// 比赛中球员节点事件
type BatNodePlayerEv int32

const (
	// 罚球命中
	BatNodePlayerEv_EV_PenaltyShoot BatNodePlayerEv = 0
	// 罚球次数
	BatNodePlayerEv_EV_PenaltyTimes BatNodePlayerEv = 1
	// 两分球命中
	BatNodePlayerEv_EV_2ScoreShoot BatNodePlayerEv = 2
	// 两分球次数
	BatNodePlayerEv_EV_2ScoreTimes BatNodePlayerEv = 3
	// 三分球命中
	BatNodePlayerEv_EV_3ScoreShoot BatNodePlayerEv = 4
	// 三分球次数
	BatNodePlayerEv_EV_3ScoreTimes BatNodePlayerEv = 5
	// 篮板球
	BatNodePlayerEv_EV_Basketball BatNodePlayerEv = 6
	// 助攻
	BatNodePlayerEv_EV_Assistants BatNodePlayerEv = 7
	// 抢断
	BatNodePlayerEv_EV_Steal BatNodePlayerEv = 8
	// 盖帽
	BatNodePlayerEv_EV_BlockAShot BatNodePlayerEv = 9
	// 失误
	BatNodePlayerEv_EV_Miss BatNodePlayerEv = 10
	// 犯规
	BatNodePlayerEv_EV_Foul BatNodePlayerEv = 11
	// 被犯规
	BatNodePlayerEv_EV_BeFoul BatNodePlayerEv = 12
	// 表演赛特殊类型
	BatNodePlayerEv_EV_ShowShoot BatNodePlayerEv = 13
	// 被抢断
	BatNodePlayerEv_EV_BeSteal BatNodePlayerEv = 14
	// 被盖帽
	BatNodePlayerEv_EV_BeBlockAShot BatNodePlayerEv = 15
	// 上场时间（毫秒）
	BatNodePlayerEv_EV_OnlineTime BatNodePlayerEv = 16
	// 上场回合
	BatNodePlayerEv_EV_OnlineBout BatNodePlayerEv = 17
	// 扣篮
	BatNodePlayerEv_EV_SlamDunk BatNodePlayerEv = 18
	// 上篮
	BatNodePlayerEv_EV_LayUp BatNodePlayerEv = 19
	// 最大值
	BatNodePlayerEv_EV_Max BatNodePlayerEv = 20
)

var BatNodePlayerEv_name = map[int32]string{
	0:  "EV_PenaltyShoot",
	1:  "EV_PenaltyTimes",
	2:  "EV_2ScoreShoot",
	3:  "EV_2ScoreTimes",
	4:  "EV_3ScoreShoot",
	5:  "EV_3ScoreTimes",
	6:  "EV_Basketball",
	7:  "EV_Assistants",
	8:  "EV_Steal",
	9:  "EV_BlockAShot",
	10: "EV_Miss",
	11: "EV_Foul",
	12: "EV_BeFoul",
	13: "EV_ShowShoot",
	14: "EV_BeSteal",
	15: "EV_BeBlockAShot",
	16: "EV_OnlineTime",
	17: "EV_OnlineBout",
	18: "EV_SlamDunk",
	19: "EV_LayUp",
	20: "EV_Max",
}
var BatNodePlayerEv_value = map[string]int32{
	"EV_PenaltyShoot": 0,
	"EV_PenaltyTimes": 1,
	"EV_2ScoreShoot":  2,
	"EV_2ScoreTimes":  3,
	"EV_3ScoreShoot":  4,
	"EV_3ScoreTimes":  5,
	"EV_Basketball":   6,
	"EV_Assistants":   7,
	"EV_Steal":        8,
	"EV_BlockAShot":   9,
	"EV_Miss":         10,
	"EV_Foul":         11,
	"EV_BeFoul":       12,
	"EV_ShowShoot":    13,
	"EV_BeSteal":      14,
	"EV_BeBlockAShot": 15,
	"EV_OnlineTime":   16,
	"EV_OnlineBout":   17,
	"EV_SlamDunk":     18,
	"EV_LayUp":        19,
	"EV_Max":          20,
}

func (x BatNodePlayerEv) Enum() *BatNodePlayerEv {
	p := new(BatNodePlayerEv)
	*p = x
	return p
}
func (x BatNodePlayerEv) String() string {
	return proto.EnumName(BatNodePlayerEv_name, int32(x))
}
func (x *BatNodePlayerEv) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BatNodePlayerEv_value, data, "BatNodePlayerEv")
	if err != nil {
		return err
	}
	*x = BatNodePlayerEv(value)
	return nil
}
func (BatNodePlayerEv) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{49} }

// 爬塔类型 1.巅峰挑战 2阵营 东部赛区 3阵营 西部赛区 4阵营 巅峰赛区 5阵营 常规赛区
type TowerBranch int32

const (
	// 1巅峰挑战
	TowerBranch_TB_Normal TowerBranch = 1
	// 2阵营 东部赛区
	TowerBranch_TB_East TowerBranch = 2
	// 3阵营 西部赛区
	TowerBranch_TB_West TowerBranch = 3
	// 4阵营 巅峰赛区
	TowerBranch_TB_Top TowerBranch = 4
	// 5阵营 常规赛区
	TowerBranch_TB_Common TowerBranch = 5
)

var TowerBranch_name = map[int32]string{
	1: "TB_Normal",
	2: "TB_East",
	3: "TB_West",
	4: "TB_Top",
	5: "TB_Common",
}
var TowerBranch_value = map[string]int32{
	"TB_Normal": 1,
	"TB_East":   2,
	"TB_West":   3,
	"TB_Top":    4,
	"TB_Common": 5,
}

func (x TowerBranch) Enum() *TowerBranch {
	p := new(TowerBranch)
	*p = x
	return p
}
func (x TowerBranch) String() string {
	return proto.EnumName(TowerBranch_name, int32(x))
}
func (x *TowerBranch) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TowerBranch_value, data, "TowerBranch")
	if err != nil {
		return err
	}
	*x = TowerBranch(value)
	return nil
}
func (TowerBranch) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{50} }

// 运营活动类型
type BusinessActivity int32

const (
	// 1每日体力领取
	BusinessActivity_BA_Energy BusinessActivity = 1
	// 2升级有礼
	BusinessActivity_BA_Level BusinessActivity = 2
	// 3七日签到
	BusinessActivity_BA_Sign BusinessActivity = 3
	// 4在线礼包
	BusinessActivity_BA_Online BusinessActivity = 4
	// 5七日任务
	BusinessActivity_BA_Task BusinessActivity = 5
)

var BusinessActivity_name = map[int32]string{
	1: "BA_Energy",
	2: "BA_Level",
	3: "BA_Sign",
	4: "BA_Online",
	5: "BA_Task",
}
var BusinessActivity_value = map[string]int32{
	"BA_Energy": 1,
	"BA_Level":  2,
	"BA_Sign":   3,
	"BA_Online": 4,
	"BA_Task":   5,
}

func (x BusinessActivity) Enum() *BusinessActivity {
	p := new(BusinessActivity)
	*p = x
	return p
}
func (x BusinessActivity) String() string {
	return proto.EnumName(BusinessActivity_name, int32(x))
}
func (x *BusinessActivity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BusinessActivity_value, data, "BusinessActivity")
	if err != nil {
		return err
	}
	*x = BusinessActivity(value)
	return nil
}
func (BusinessActivity) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{51} }

// 购买类型
type PurchaseType int32

const (
	// 无意义
	PurchaseType_PT_NO PurchaseType = 0
	// 购买钻石
	PurchaseType_PT_Diamond PurchaseType = 1
	// 购买月卡
	PurchaseType_PT_MonthCard PurchaseType = 2
	// 购买基金
	PurchaseType_PT_Fund PurchaseType = 3
	// 购买订阅特权月卡
	PurchaseType_PT_Privilege PurchaseType = 4
	// 购买连续充值礼包
	PurchaseType_PT_Continuous PurchaseType = 5
	// 购买新手礼包
	PurchaseType_PT_NewComer PurchaseType = 6
	// 购买超值礼包
	PurchaseType_PT_Preferential PurchaseType = 7
	// 限时礼包
	PurchaseType_PT_LimitBuyGift PurchaseType = 8
	// 通行证礼包
	PurchaseType_PT_PassportGift PurchaseType = 9
	// 限时特惠礼包
	PurchaseType_PT_LimitDiscount PurchaseType = 11
	// 球鞋活动-万能球星卡
	PurchaseType_PT_ActivityShoesCard PurchaseType = 12
	// 自选礼包
	PurchaseType_PT_ActivityOptionalChest PurchaseType = 13
	// 节日礼包
	PurchaseType_PT_FestivalGift PurchaseType = 14
	// 联盟活动礼包
	PurchaseType_PT_LeagueActivityGift PurchaseType = 15
	// 7日目标
	PurchaseType_PT_SevenDayShop PurchaseType = 16
)

var PurchaseType_name = map[int32]string{
	0:  "PT_NO",
	1:  "PT_Diamond",
	2:  "PT_MonthCard",
	3:  "PT_Fund",
	4:  "PT_Privilege",
	5:  "PT_Continuous",
	6:  "PT_NewComer",
	7:  "PT_Preferential",
	8:  "PT_LimitBuyGift",
	9:  "PT_PassportGift",
	11: "PT_LimitDiscount",
	12: "PT_ActivityShoesCard",
	13: "PT_ActivityOptionalChest",
	14: "PT_FestivalGift",
	15: "PT_LeagueActivityGift",
	16: "PT_SevenDayShop",
}
var PurchaseType_value = map[string]int32{
	"PT_NO":                    0,
	"PT_Diamond":               1,
	"PT_MonthCard":             2,
	"PT_Fund":                  3,
	"PT_Privilege":             4,
	"PT_Continuous":            5,
	"PT_NewComer":              6,
	"PT_Preferential":          7,
	"PT_LimitBuyGift":          8,
	"PT_PassportGift":          9,
	"PT_LimitDiscount":         11,
	"PT_ActivityShoesCard":     12,
	"PT_ActivityOptionalChest": 13,
	"PT_FestivalGift":          14,
	"PT_LeagueActivityGift":    15,
	"PT_SevenDayShop":          16,
}

func (x PurchaseType) Enum() *PurchaseType {
	p := new(PurchaseType)
	*p = x
	return p
}
func (x PurchaseType) String() string {
	return proto.EnumName(PurchaseType_name, int32(x))
}
func (x *PurchaseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PurchaseType_value, data, "PurchaseType")
	if err != nil {
		return err
	}
	*x = PurchaseType(value)
	return nil
}
func (PurchaseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{52} }

// 订阅类型 对应订阅配置PrivilegeConf->subscription.csv中的ID
type PrivilegeType int32

const (
	// 赛季比赛结束美元收益增加xx倍
	PrivilegeType_PT_PlayOffGetAddMoneyTimes PrivilegeType = 1
	// 赛季比赛结束球员经验收益增加xx倍
	PrivilegeType_PT_PlayOffGetAddExpTimes PrivilegeType = 2
	// 玩家精力上限增加xx
	PrivilegeType_PT_GamerEnergyAddMaxVal PrivilegeType = 3
	// 玩家工资帽上限增加xx
	PrivilegeType_PT_GamerSalaryAddMaxVal PrivilegeType = 4
	// 开启联盟至尊捐献(联盟捐钱)功能
	PrivilegeType_PT_OpenLeagueContribute PrivilegeType = 5
	// 商业比赛免费刷新次数+xx
	PrivilegeType_PT_BusinessRegionalAddFreeTimes PrivilegeType = 6
	// 商业比最大可累计xx挑战次数
	PrivilegeType_PT_BusinessRegionalTotalAddBattleTimes PrivilegeType = 7
	// 开启商业比赛跳过战斗功能
	PrivilegeType_PT_OpenBusinessRegionalJump PrivilegeType = 8
	// 篮球之巅挂机(离线)收益时间上限提升至xx小时
	PrivilegeType_PT_NormalTowerGetAddHours PrivilegeType = 9
)

var PrivilegeType_name = map[int32]string{
	1: "PT_PlayOffGetAddMoneyTimes",
	2: "PT_PlayOffGetAddExpTimes",
	3: "PT_GamerEnergyAddMaxVal",
	4: "PT_GamerSalaryAddMaxVal",
	5: "PT_OpenLeagueContribute",
	6: "PT_BusinessRegionalAddFreeTimes",
	7: "PT_BusinessRegionalTotalAddBattleTimes",
	8: "PT_OpenBusinessRegionalJump",
	9: "PT_NormalTowerGetAddHours",
}
var PrivilegeType_value = map[string]int32{
	"PT_PlayOffGetAddMoneyTimes":             1,
	"PT_PlayOffGetAddExpTimes":               2,
	"PT_GamerEnergyAddMaxVal":                3,
	"PT_GamerSalaryAddMaxVal":                4,
	"PT_OpenLeagueContribute":                5,
	"PT_BusinessRegionalAddFreeTimes":        6,
	"PT_BusinessRegionalTotalAddBattleTimes": 7,
	"PT_OpenBusinessRegionalJump":            8,
	"PT_NormalTowerGetAddHours":              9,
}

func (x PrivilegeType) Enum() *PrivilegeType {
	p := new(PrivilegeType)
	*p = x
	return p
}
func (x PrivilegeType) String() string {
	return proto.EnumName(PrivilegeType_name, int32(x))
}
func (x *PrivilegeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PrivilegeType_value, data, "PrivilegeType")
	if err != nil {
		return err
	}
	*x = PrivilegeType(value)
	return nil
}
func (PrivilegeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{53} }

// 资源找回-类型
type RansomType int32

const (
	// 无意义
	RansomType_RT_Unknown RansomType = 0
	// 每日精力领取
	RansomType_RT_Energy RansomType = 1
	// 表演赛-3分球挑战次数
	RansomType_RT_PerformThree RansomType = 2
	// 表演赛-2分球挑战次数
	RansomType_RT_PerformTwo RansomType = 3
	// 竞技场挑战次数
	RansomType_RT_Arena RansomType = 4
	// 名宿副本挑战次数
	RansomType_RT_Mascot RansomType = 5
	// 日常任务玩家经验
	RansomType_RT_DayTask RansomType = 6
)

var RansomType_name = map[int32]string{
	0: "RT_Unknown",
	1: "RT_Energy",
	2: "RT_PerformThree",
	3: "RT_PerformTwo",
	4: "RT_Arena",
	5: "RT_Mascot",
	6: "RT_DayTask",
}
var RansomType_value = map[string]int32{
	"RT_Unknown":      0,
	"RT_Energy":       1,
	"RT_PerformThree": 2,
	"RT_PerformTwo":   3,
	"RT_Arena":        4,
	"RT_Mascot":       5,
	"RT_DayTask":      6,
}

func (x RansomType) Enum() *RansomType {
	p := new(RansomType)
	*p = x
	return p
}
func (x RansomType) String() string {
	return proto.EnumName(RansomType_name, int32(x))
}
func (x *RansomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RansomType_value, data, "RansomType")
	if err != nil {
		return err
	}
	*x = RansomType(value)
	return nil
}
func (RansomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{54} }

// 通行证礼包类型
type PassportType int32

const (
	// 无意义
	PassportType_PTY_Unknown PassportType = 0
	// 日常礼包
	PassportType_PTY_Daily PassportType = 1
	// 巡演赛礼包
	PassportType_PTY_Battle PassportType = 2
)

var PassportType_name = map[int32]string{
	0: "PTY_Unknown",
	1: "PTY_Daily",
	2: "PTY_Battle",
}
var PassportType_value = map[string]int32{
	"PTY_Unknown": 0,
	"PTY_Daily":   1,
	"PTY_Battle":  2,
}

func (x PassportType) Enum() *PassportType {
	p := new(PassportType)
	*p = x
	return p
}
func (x PassportType) String() string {
	return proto.EnumName(PassportType_name, int32(x))
}
func (x *PassportType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PassportType_value, data, "PassportType")
	if err != nil {
		return err
	}
	*x = PassportType(value)
	return nil
}
func (PassportType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{55} }

// 图鉴枚举
type BookType int32

const (
	BookType_BT_Unknown BookType = 0
	// 教练
	BookType_BT_Coach BookType = 1
	// 吉祥物
	BookType_BT_Mascot BookType = 2
	// 称号
	BookType_BT_Title BookType = 3
	// 球员
	BookType_BT_FashionDress BookType = 4
	// 球鞋
	BookType_BT_Sneaker BookType = 5
)

var BookType_name = map[int32]string{
	0: "BT_Unknown",
	1: "BT_Coach",
	2: "BT_Mascot",
	3: "BT_Title",
	4: "BT_FashionDress",
	5: "BT_Sneaker",
}
var BookType_value = map[string]int32{
	"BT_Unknown":      0,
	"BT_Coach":        1,
	"BT_Mascot":       2,
	"BT_Title":        3,
	"BT_FashionDress": 4,
	"BT_Sneaker":      5,
}

func (x BookType) Enum() *BookType {
	p := new(BookType)
	*p = x
	return p
}
func (x BookType) String() string {
	return proto.EnumName(BookType_name, int32(x))
}
func (x *BookType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BookType_value, data, "BookType")
	if err != nil {
		return err
	}
	*x = BookType(value)
	return nil
}
func (BookType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{56} }

type FightStatus int32

const (
	FightStatus_FS_Unknown FightStatus = 0
	// 匹配结果展示中
	FightStatus_FS_MatchShow FightStatus = 1
	// ban
	FightStatus_FS_Ban FightStatus = 2
	// ban结果展示中
	FightStatus_FS_BanShow FightStatus = 3
	// 猜拳中
	FightStatus_FS_Guess FightStatus = 4
	// 猜拳结果展示中
	FightStatus_FS_GuessShow FightStatus = 5
	// 选人中
	FightStatus_FS_Select FightStatus = 6
	// 选人结果展示中
	FightStatus_FS_SelectShow FightStatus = 7
	// 加载场景中
	FightStatus_FS_Loading FightStatus = 8
	// 比赛中(毫秒)
	FightStatus_FS_Fighting FightStatus = 9
)

var FightStatus_name = map[int32]string{
	0: "FS_Unknown",
	1: "FS_MatchShow",
	2: "FS_Ban",
	3: "FS_BanShow",
	4: "FS_Guess",
	5: "FS_GuessShow",
	6: "FS_Select",
	7: "FS_SelectShow",
	8: "FS_Loading",
	9: "FS_Fighting",
}
var FightStatus_value = map[string]int32{
	"FS_Unknown":    0,
	"FS_MatchShow":  1,
	"FS_Ban":        2,
	"FS_BanShow":    3,
	"FS_Guess":      4,
	"FS_GuessShow":  5,
	"FS_Select":     6,
	"FS_SelectShow": 7,
	"FS_Loading":    8,
	"FS_Fighting":   9,
}

func (x FightStatus) Enum() *FightStatus {
	p := new(FightStatus)
	*p = x
	return p
}
func (x FightStatus) String() string {
	return proto.EnumName(FightStatus_name, int32(x))
}
func (x *FightStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FightStatus_value, data, "FightStatus")
	if err != nil {
		return err
	}
	*x = FightStatus(value)
	return nil
}
func (FightStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{57} }

type FingerType int32

const (
	// 剪刀
	FingerType_FT_Paper FingerType = 0
	// 石头
	FingerType_FT_Rock FingerType = 1
	// 布
	FingerType_FT_Scissors FingerType = 2
)

var FingerType_name = map[int32]string{
	0: "FT_Paper",
	1: "FT_Rock",
	2: "FT_Scissors",
}
var FingerType_value = map[string]int32{
	"FT_Paper":    0,
	"FT_Rock":     1,
	"FT_Scissors": 2,
}

func (x FingerType) Enum() *FingerType {
	p := new(FingerType)
	*p = x
	return p
}
func (x FingerType) String() string {
	return proto.EnumName(FingerType_name, int32(x))
}
func (x *FingerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FingerType_value, data, "FingerType")
	if err != nil {
		return err
	}
	*x = FingerType(value)
	return nil
}
func (FingerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{58} }

type BehaviourPointType int32

const (
	// 篮板
	BehaviourPointType_BPT_rebound BehaviourPointType = 1
	// 助攻
	BehaviourPointType_BPT_assist BehaviourPointType = 2
	// 2分命中
	BehaviourPointType_BPT_two_shot BehaviourPointType = 3
	// 3分命中
	BehaviourPointType_BPT_three_shot BehaviourPointType = 4
	// 抢断
	BehaviourPointType_BPT_steal BehaviourPointType = 5
	// 盖帽
	BehaviourPointType_BPT_blockshot BehaviourPointType = 6
	// 罚球
	BehaviourPointType_BPT_fq BehaviourPointType = 7
)

var BehaviourPointType_name = map[int32]string{
	1: "BPT_rebound",
	2: "BPT_assist",
	3: "BPT_two_shot",
	4: "BPT_three_shot",
	5: "BPT_steal",
	6: "BPT_blockshot",
	7: "BPT_fq",
}
var BehaviourPointType_value = map[string]int32{
	"BPT_rebound":    1,
	"BPT_assist":     2,
	"BPT_two_shot":   3,
	"BPT_three_shot": 4,
	"BPT_steal":      5,
	"BPT_blockshot":  6,
	"BPT_fq":         7,
}

func (x BehaviourPointType) Enum() *BehaviourPointType {
	p := new(BehaviourPointType)
	*p = x
	return p
}
func (x BehaviourPointType) String() string {
	return proto.EnumName(BehaviourPointType_name, int32(x))
}
func (x *BehaviourPointType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BehaviourPointType_value, data, "BehaviourPointType")
	if err != nil {
		return err
	}
	*x = BehaviourPointType(value)
	return nil
}
func (BehaviourPointType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{59} }

func init() {
	proto.RegisterEnum("GamerStatus", GamerStatus_name, GamerStatus_value)
	proto.RegisterEnum("GamerIsNewStatus", GamerIsNewStatus_name, GamerIsNewStatus_value)
	proto.RegisterEnum("SquadState", SquadState_name, SquadState_value)
	proto.RegisterEnum("AllianceJobType", AllianceJobType_name, AllianceJobType_value)
	proto.RegisterEnum("AllianceOpFunType", AllianceOpFunType_name, AllianceOpFunType_value)
	proto.RegisterEnum("AllianceSetType", AllianceSetType_name, AllianceSetType_value)
	proto.RegisterEnum("AllianceVote", AllianceVote_name, AllianceVote_value)
	proto.RegisterEnum("Battle", Battle_name, Battle_value)
	proto.RegisterEnum("DeputyAttrType", DeputyAttrType_name, DeputyAttrType_value)
	proto.RegisterEnum("ChatChannel", ChatChannel_name, ChatChannel_value)
	proto.RegisterEnum("SquadType", SquadType_name, SquadType_value)
	proto.RegisterEnum("FriendStatusEnum", FriendStatusEnum_name, FriendStatusEnum_value)
	proto.RegisterEnum("ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterEnum("MatchType", MatchType_name, MatchType_value)
	proto.RegisterEnum("AllianceChallengeMonster", AllianceChallengeMonster_name, AllianceChallengeMonster_value)
	proto.RegisterEnum("AllianceDealTaskStatus", AllianceDealTaskStatus_name, AllianceDealTaskStatus_value)
	proto.RegisterEnum("GamerCareerDataType", GamerCareerDataType_name, GamerCareerDataType_value)
	proto.RegisterEnum("TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("StoryTaskType", StoryTaskType_name, StoryTaskType_value)
	proto.RegisterEnum("TimeOutType", TimeOutType_name, TimeOutType_value)
	proto.RegisterEnum("AccountStatus", AccountStatus_name, AccountStatus_value)
	proto.RegisterEnum("NoticeType", NoticeType_name, NoticeType_value)
	proto.RegisterEnum("AssistantType", AssistantType_name, AssistantType_value)
	proto.RegisterEnum("BranchType", BranchType_name, BranchType_value)
	proto.RegisterEnum("FirstRechargeState", FirstRechargeState_name, FirstRechargeState_value)
	proto.RegisterEnum("ConditionType", ConditionType_name, ConditionType_value)
	proto.RegisterEnum("ConditionState", ConditionState_name, ConditionState_value)
	proto.RegisterEnum("ClickPageId", ClickPageId_name, ClickPageId_value)
	proto.RegisterEnum("ServerType", ServerType_name, ServerType_value)
	proto.RegisterEnum("ReplaysBoutStatus", ReplaysBoutStatus_name, ReplaysBoutStatus_value)
	proto.RegisterEnum("JumpFightStatus", JumpFightStatus_name, JumpFightStatus_value)
	proto.RegisterEnum("ReplayType", ReplayType_name, ReplayType_value)
	proto.RegisterEnum("ShouldShowNoticeModule", ShouldShowNoticeModule_name, ShouldShowNoticeModule_value)
	proto.RegisterEnum("ReserveType", ReserveType_name, ReserveType_value)
	proto.RegisterEnum("SourceOfReward", SourceOfReward_name, SourceOfReward_value)
	proto.RegisterEnum("ZSExclusiveCondition", ZSExclusiveCondition_name, ZSExclusiveCondition_value)
	proto.RegisterEnum("PerformanceType", PerformanceType_name, PerformanceType_value)
	proto.RegisterEnum("PerformanceUnlockCondition", PerformanceUnlockCondition_name, PerformanceUnlockCondition_value)
	proto.RegisterEnum("PerformancePassCondition", PerformancePassCondition_name, PerformancePassCondition_value)
	proto.RegisterEnum("TreeNodeHandleType", TreeNodeHandleType_name, TreeNodeHandleType_value)
	proto.RegisterEnum("RecruitClass", RecruitClass_name, RecruitClass_value)
	proto.RegisterEnum("BattleAttrScope", BattleAttrScope_name, BattleAttrScope_value)
	proto.RegisterEnum("CustomerPlayerTagType", CustomerPlayerTagType_name, CustomerPlayerTagType_value)
	proto.RegisterEnum("PopExchangeProductType", PopExchangeProductType_name, PopExchangeProductType_value)
	proto.RegisterEnum("RegularEventType", RegularEventType_name, RegularEventType_value)
	proto.RegisterEnum("AdventurePlayType", AdventurePlayType_name, AdventurePlayType_value)
	proto.RegisterEnum("EquipmentBigStar", EquipmentBigStar_name, EquipmentBigStar_value)
	proto.RegisterEnum("EquipmentType", EquipmentType_name, EquipmentType_value)
	proto.RegisterEnum("EquipmentPart", EquipmentPart_name, EquipmentPart_value)
	proto.RegisterEnum("BatNodePlayerEv", BatNodePlayerEv_name, BatNodePlayerEv_value)
	proto.RegisterEnum("TowerBranch", TowerBranch_name, TowerBranch_value)
	proto.RegisterEnum("BusinessActivity", BusinessActivity_name, BusinessActivity_value)
	proto.RegisterEnum("PurchaseType", PurchaseType_name, PurchaseType_value)
	proto.RegisterEnum("PrivilegeType", PrivilegeType_name, PrivilegeType_value)
	proto.RegisterEnum("RansomType", RansomType_name, RansomType_value)
	proto.RegisterEnum("PassportType", PassportType_name, PassportType_value)
	proto.RegisterEnum("BookType", BookType_name, BookType_value)
	proto.RegisterEnum("FightStatus", FightStatus_name, FightStatus_value)
	proto.RegisterEnum("FingerType", FingerType_name, FingerType_value)
	proto.RegisterEnum("BehaviourPointType", BehaviourPointType_name, BehaviourPointType_value)
}

func init() { proto.RegisterFile("macro.proto", fileDescriptor41) }

var fileDescriptor41 = []byte{
	// 5062 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x5a, 0x59, 0x93, 0x1c, 0x49,
	0x52, 0xde, 0xaa, 0xbe, 0xa4, 0x50, 0x4b, 0x4a, 0x95, 0xee, 0x91, 0x66, 0x34, 0xc7, 0xce, 0x62,
	0x96, 0x0f, 0x6b, 0x8c, 0x34, 0x86, 0xad, 0x81, 0x19, 0x58, 0x9d, 0xdd, 0xad, 0xe9, 0xee, 0x2a,
	0x75, 0x55, 0x4b, 0xb3, 0x8b, 0x61, 0x65, 0xd9, 0x55, 0x51, 0x55, 0x39, 0x9d, 0x95, 0x99, 0x93,
	0x47, 0xb7, 0x9a, 0x73, 0x61, 0x81, 0x61, 0xb9, 0x61, 0x19, 0xce, 0x05, 0x96, 0x5d, 0xe0, 0x11,
	0xe3, 0x5a, 0x6e, 0x58, 0xee, 0x1b, 0x33, 0x5e, 0x78, 0xe3, 0x9d, 0x27, 0xfe, 0x03, 0x9f, 0xbb,
	0x47, 0x64, 0x65, 0xf5, 0x68, 0x79, 0x28, 0xb3, 0x0a, 0x8f, 0x08, 0x0f, 0x0f, 0x77, 0x0f, 0xf7,
	0xcf, 0x23, 0x52, 0x5d, 0x9a, 0x7b, 0xa3, 0x24, 0xfa, 0x64, 0x9c, 0x44, 0x59, 0xe4, 0x76, 0xd5,
	0xa5, 0x2d, 0x6f, 0xae, 0x93, 0x7e, 0xe6, 0x65, 0x79, 0x5a, 0xbb, 0xa4, 0x36, 0xa2, 0xc9, 0x24,
	0xf0, 0x43, 0xed, 0x54, 0x6a, 0x4a, 0xad, 0x47, 0x21, 0xff, 0xaf, 0x52, 0x47, 0xa6, 0xbd, 0xb9,
	0x1f, 0x4e, 0x9d, 0x95, 0xda, 0xa6, 0xba, 0x30, 0xf7, 0xb2, 0xd1, 0x8c, 0x5a, 0xab, 0xd4, 0x9a,
	0xf8, 0xd3, 0x59, 0x46, 0xad, 0x35, 0xf7, 0x93, 0xca, 0x61, 0x86, 0x3b, 0xe9, 0xbe, 0x3e, 0x35,
	0x5c, 0x31, 0x22, 0xd4, 0xa7, 0x4c, 0x06, 0x5b, 0xb4, 0xa2, 0x60, 0x2c, 0xad, 0xaa, 0xfb, 0xb6,
	0x52, 0xfd, 0xf7, 0x73, 0x6f, 0x4c, 0x43, 0x35, 0x2d, 0x83, 0x3f, 0x49, 0x86, 0xae, 0x8f, 0xd5,
	0x2e, 0xaa, 0xb5, 0x86, 0x0e, 0x47, 0x33, 0xcc, 0xb9, 0xa2, 0x54, 0x2f, 0xf0, 0xce, 0x74, 0xd2,
	0x8b, 0xa2, 0x00, 0xb3, 0x9a, 0xea, 0x6a, 0x3d, 0x08, 0x7c, 0x2f, 0x1c, 0xe9, 0xc7, 0xd1, 0xd1,
	0xe0, 0x2c, 0xd6, 0x34, 0x7a, 0xb7, 0x11, 0xa5, 0xa9, 0xac, 0xb0, 0xbb, 0xe7, 0x85, 0xde, 0x94,
	0x56, 0xa0, 0x6d, 0xec, 0xb6, 0x03, 0x3f, 0xd3, 0x90, 0x1c, 0xfc, 0x77, 0x9b, 0x5e, 0x9a, 0x7b,
	0x81, 0xb3, 0xea, 0xfe, 0x76, 0x45, 0x5d, 0xb3, 0x5c, 0xba, 0x71, 0x27, 0x0f, 0x99, 0xcf, 0x65,
	0x75, 0x71, 0xb7, 0x1b, 0xf7, 0x75, 0x06, 0xc6, 0xe0, 0x45, 0x33, 0xba, 0xf1, 0x3b, 0xfe, 0xe8,
	0xd8, 0xb0, 0xe2, 0x3e, 0x51, 0x02, 0xfe, 0xd7, 0xe3, 0x38, 0x38, 0x83, 0x12, 0xae, 0xaa, 0x4b,
	0x68, 0x0d, 0xf2, 0x24, 0x8c, 0x4e, 0xb0, 0xea, 0x1a, 0x49, 0x0c, 0x42, 0xcb, 0x4f, 0x8f, 0xbc,
	0x70, 0xec, 0xac, 0x1b, 0xb6, 0x3b, 0xe1, 0x09, 0x09, 0xb2, 0x61, 0xba, 0x1b, 0xf9, 0xd9, 0x96,
	0x3f, 0xc9, 0x9c, 0x0b, 0x66, 0x99, 0x3d, 0xcf, 0x0f, 0x9c, 0x8b, 0xa6, 0x73, 0x67, 0x1e, 0x6b,
	0x0f, 0xbb, 0x57, 0xee, 0xa7, 0x16, 0xbb, 0xc5, 0xda, 0x2c, 0x25, 0x0d, 0xd9, 0xd7, 0x7a, 0x5c,
	0xcf, 0xc7, 0x7e, 0x06, 0x31, 0x69, 0xf7, 0xdd, 0x58, 0x87, 0x46, 0xc8, 0x66, 0x10, 0xa5, 0xd8,
	0xaf, 0x5b, 0x57, 0x9b, 0x76, 0xe6, 0xd3, 0x48, 0xf4, 0xbb, 0xdb, 0x8c, 0xe6, 0xf3, 0x28, 0x84,
	0x7e, 0x69, 0x60, 0x7d, 0x9a, 0x68, 0x6d, 0xb6, 0xf9, 0xcc, 0xf3, 0x4f, 0x58, 0x63, 0xd4, 0x38,
	0xd0, 0xef, 0xe9, 0x11, 0xf6, 0xe9, 0x7e, 0xb8, 0xaa, 0xd6, 0x1b, 0x5e, 0x96, 0x05, 0xba, 0x76,
	0x4d, 0x5d, 0x3e, 0xe2, 0x7f, 0x79, 0x78, 0x1c, 0x46, 0xa7, 0x86, 0x07, 0x28, 0x1e, 0xb4, 0xc3,
	0x3c, 0xc6, 0x7a, 0xa2, 0xc3, 0xb1, 0x71, 0x18, 0x6f, 0xea, 0x43, 0xed, 0x67, 0xd0, 0x15, 0x46,
	0x1d, 0x45, 0x39, 0x84, 0x80, 0xa6, 0x2e, 0xa8, 0xd5, 0x39, 0x74, 0x04, 0x15, 0x81, 0x9a, 0x66,
	0x49, 0x04, 0xb7, 0x59, 0x27, 0x6d, 0x26, 0xd8, 0x6d, 0xe6, 0x43, 0xb2, 0x8d, 0xda, 0x75, 0x75,
	0x35, 0xcd, 0xc8, 0xdb, 0xbc, 0x2c, 0x8a, 0x03, 0x7f, 0xee, 0x93, 0x8a, 0xa0, 0xc1, 0x71, 0x8e,
	0x11, 0xcc, 0xf3, 0x62, 0xad, 0xa6, 0xae, 0x84, 0xda, 0x4b, 0x12, 0x2f, 0x9c, 0xea, 0x74, 0x16,
	0x45, 0x99, 0xa3, 0x6a, 0x37, 0x94, 0x33, 0xd7, 0x63, 0x3f, 0x9f, 0x97, 0xa8, 0x97, 0x68, 0x64,
	0x80, 0x55, 0x4a, 0xb4, 0x4d, 0xd2, 0xd7, 0x18, 0xbb, 0x48, 0x9d, 0xcb, 0xf4, 0x17, 0xae, 0x95,
	0xc7, 0xce, 0x15, 0x91, 0x82, 0x24, 0x1d, 0xa7, 0xce, 0x55, 0xb2, 0xe9, 0x91, 0x17, 0x04, 0xa3,
	0x28, 0x84, 0x94, 0x81, 0xe3, 0x90, 0xe8, 0xb1, 0x07, 0x0f, 0xbb, 0x46, 0xb2, 0x1c, 0x05, 0xd1,
	0xe8, 0x18, 0xec, 0x32, 0xa7, 0x56, 0x73, 0xd4, 0xe6, 0x11, 0xc4, 0x3f, 0xce, 0x66, 0x49, 0x94,
	0x4f, 0x67, 0xce, 0x75, 0x1a, 0x90, 0xe9, 0xd1, 0x2c, 0xf4, 0xdf, 0xcf, 0xb5, 0x73, 0x83, 0xb6,
	0x1a, 0x47, 0x69, 0x86, 0x45, 0x6e, 0xb2, 0x9a, 0x7c, 0xfc, 0x4f, 0x8e, 0x9c, 0x5b, 0xb4, 0xf8,
	0x88, 0x3d, 0xe6, 0x36, 0xfd, 0x4d, 0x71, 0xc6, 0x02, 0xe7, 0x0e, 0xfd, 0xdd, 0x7a, 0xf6, 0x99,
	0xfe, 0xbb, 0xce, 0x5d, 0xfa, 0xdb, 0x6a, 0xd2, 0xdf, 0x97, 0xe8, 0xef, 0xa0, 0x43, 0x7f, 0xef,
	0xd1, 0xdf, 0x77, 0x9e, 0xd0, 0xdf, 0xfb, 0x3c, 0x80, 0xc7, 0xbe, 0x4c, 0xf6, 0x11, 0x63, 0x0c,
	0xf5, 0x64, 0x42, 0xd6, 0x7b, 0xc5, 0x72, 0x6a, 0x39, 0x0f, 0x2c, 0xa7, 0x96, 0xf3, 0xaa, 0xe5,
	0xd4, 0x72, 0x5e, 0xb3, 0x9c, 0x5a, 0xce, 0xeb, 0x96, 0x53, 0xcb, 0x79, 0x83, 0x54, 0xc6, 0xa6,
	0x4c, 0xb5, 0x65, 0xf5, 0x71, 0xde, 0x33, 0x5b, 0x7f, 0xcf, 0x7b, 0xee, 0xbc, 0xe9, 0x7e, 0xb1,
	0xa2, 0xae, 0xb4, 0x74, 0x9c, 0x67, 0x67, 0xf5, 0x2c, 0x4b, 0xd8, 0x29, 0xb1, 0xfe, 0x98, 0x29,
	0x0b, 0xff, 0x80, 0x0e, 0xe3, 0xc4, 0x9f, 0x7b, 0x09, 0x8f, 0x12, 0x27, 0x89, 0x75, 0x32, 0xd2,
	0x61, 0x06, 0x27, 0x01, 0xcb, 0x28, 0x9b, 0xe9, 0x84, 0xfb, 0x56, 0x48, 0x8d, 0xd3, 0x24, 0x3a,
	0xcd, 0x66, 0x1d, 0x78, 0x42, 0x94, 0xc0, 0x59, 0x0a, 0x8f, 0xeb, 0x99, 0x39, 0x6b, 0xb5, 0x5b,
	0xaa, 0x26, 0xa4, 0x2e, 0xcd, 0xb4, 0x74, 0x3e, 0x60, 0xb2, 0x38, 0x89, 0xb7, 0xe1, 0x7e, 0x8b,
	0xba, 0xd4, 0x9c, 0x79, 0x19, 0x7e, 0x61, 0xa8, 0x03, 0xda, 0xdb, 0x69, 0x94, 0x04, 0x63, 0x48,
	0x00, 0x2b, 0x8e, 0x82, 0xfc, 0x48, 0x7c, 0x14, 0xc2, 0x9d, 0x78, 0x1c, 0x1a, 0xc8, 0x1b, 0xcf,
	0x60, 0x80, 0x39, 0x22, 0xc3, 0xef, 0xae, 0xa8, 0x8b, 0x1c, 0x95, 0x78, 0x5b, 0x14, 0x94, 0xa8,
	0xb1, 0x1f, 0x61, 0x43, 0x70, 0x4d, 0x6e, 0xc8, 0x29, 0xa2, 0x7e, 0xb0, 0x7c, 0x59, 0xdd, 0x65,
	0x22, 0xa4, 0x99, 0x44, 0xc9, 0x9c, 0x8e, 0xdb, 0x60, 0x86, 0x83, 0xd5, 0x82, 0x22, 0x20, 0xda,
	0x1d, 0x75, 0xe3, 0x7c, 0x37, 0xf7, 0x6c, 0x90, 0x9e, 0x65, 0x9d, 0x28, 0x4f, 0xf6, 0x28, 0xa4,
	0xc2, 0xb1, 0xed, 0xe8, 0x82, 0xd6, 0x80, 0xe7, 0x52, 0x1c, 0xa8, 0xdd, 0x55, 0x37, 0x0d, 0x1f,
	0x9d, 0x04, 0x3a, 0x4d, 0xeb, 0x62, 0xec, 0xb7, 0xe0, 0xe3, 0x5f, 0xa7, 0xeb, 0x21, 0x5c, 0xfd,
	0xeb, 0x74, 0x3d, 0x82, 0xeb, 0x43, 0xe1, 0xdc, 0x25, 0x61, 0xe9, 0x2d, 0x38, 0xf6, 0x32, 0xe5,
	0x21, 0x7c, 0x7b, 0x21, 0xe2, 0xa9, 0x4e, 0xda, 0x5e, 0x9a, 0xc1, 0x9d, 0x97, 0x68, 0xcf, 0x34,
	0x68, 0x37, 0xc9, 0x54, 0x0b, 0xda, 0x20, 0x8a, 0xe1, 0xdc, 0x38, 0x8e, 0x0b, 0x92, 0x09, 0x3b,
	0xb7, 0xc9, 0x80, 0x4c, 0xdd, 0xd5, 0xde, 0x34, 0xd7, 0x12, 0x5a, 0xde, 0x82, 0xd3, 0xbf, 0x88,
	0xfe, 0x10, 0x27, 0xe0, 0x45, 0xf4, 0x47, 0x38, 0x0e, 0x38, 0xac, 0x4c, 0x27, 0x7b, 0xdf, 0x73,
	0x5b, 0xca, 0xe9, 0x24, 0x3e, 0x82, 0x8f, 0xe4, 0x9c, 0x76, 0x98, 0xcf, 0xc9, 0x70, 0x42, 0x33,
	0x49, 0xa1, 0x9f, 0x71, 0x0c, 0xa0, 0x10, 0x07, 0x7f, 0x90, 0xd0, 0xcd, 0x86, 0xaf, 0x8f, 0x46,
	0x3a, 0xce, 0x60, 0xf8, 0xef, 0x50, 0x9b, 0x07, 0x3a, 0x85, 0xe2, 0x61, 0x40, 0xe3, 0xd1, 0x5b,
	0x51, 0x34, 0x4e, 0x2d, 0x11, 0x7c, 0xe0, 0xd1, 0xd0, 0x60, 0x41, 0xa8, 0x92, 0x32, 0x24, 0x37,
	0x15, 0xb4, 0x95, 0xda, 0x4d, 0x75, 0xad, 0xfd, 0x7e, 0xee, 0xc7, 0x73, 0xf8, 0x66, 0x41, 0x5e,
	0x73, 0xff, 0x1b, 0x7e, 0xc5, 0x26, 0x65, 0xe6, 0xe0, 0x74, 0x18, 0xbe, 0x83, 0x83, 0x22, 0x96,
	0xff, 0x58, 0xed, 0x25, 0x75, 0xcb, 0x46, 0x6b, 0xf8, 0x6d, 0x10, 0x68, 0x08, 0x2b, 0x7d, 0xab,
	0xe4, 0x77, 0x46, 0x01, 0xc8, 0x71, 0x42, 0x5c, 0x23, 0x05, 0xef, 0x47, 0x27, 0xfe, 0x48, 0x6f,
	0xe5, 0xfe, 0xd8, 0x0c, 0x5d, 0xe7, 0xb8, 0xee, 0x8d, 0xc7, 0xd8, 0xe7, 0xa6, 0x08, 0x17, 0x65,
	0xa5, 0xfe, 0x2b, 0xe4, 0x60, 0x2f, 0x74, 0x54, 0x87, 0x16, 0x39, 0xef, 0xa3, 0xd7, 0x88, 0xc5,
	0xae, 0x9e, 0x42, 0x8b, 0x38, 0xc4, 0xc2, 0xa2, 0x46, 0x3e, 0x75, 0xa0, 0xa7, 0x79, 0xe0, 0x89,
	0x87, 0x16, 0xd2, 0xc2, 0x37, 0x1c, 0x52, 0xe1, 0xa2, 0x0b, 0x9e, 0x81, 0x93, 0x59, 0x1f, 0x9f,
	0x40, 0x13, 0x79, 0xa2, 0xe1, 0x15, 0x68, 0x2e, 0xdc, 0xfd, 0x36, 0xad, 0x79, 0xde, 0xd3, 0xef,
	0x90, 0xe5, 0x48, 0xa7, 0xc0, 0x22, 0x70, 0x00, 0xd2, 0x78, 0xa2, 0x43, 0xef, 0x40, 0xc7, 0xa0,
	0xc1, 0xf2, 0x20, 0x88, 0x7f, 0x0a, 0x8f, 0x7b, 0x94, 0x0d, 0xd9, 0xc7, 0xa4, 0x7d, 0x9f, 0xcc,
	0x66, 0xbd, 0x5d, 0x48, 0x2f, 0xd3, 0x9c, 0x3d, 0x2f, 0x1d, 0x45, 0x99, 0x10, 0x5e, 0x21, 0x13,
	0x95, 0x3d, 0x4a, 0xc8, 0x0f, 0x38, 0x4f, 0xfb, 0x44, 0x68, 0x22, 0x58, 0xbf, 0x4a, 0xcd, 0x8e,
	0xe7, 0x1b, 0xc6, 0xaf, 0x51, 0xb3, 0x3f, 0xb3, 0x06, 0x7b, 0x9d, 0x9a, 0xad, 0x5c, 0x07, 0xd2,
	0x7c, 0xc3, 0xfd, 0x66, 0x75, 0xe7, 0xa3, 0xf6, 0x8b, 0x42, 0x04, 0x95, 0x84, 0xa2, 0x0e, 0x0e,
	0xcf, 0x99, 0xc0, 0xaa, 0x3d, 0x4e, 0x52, 0xf0, 0x1d, 0x50, 0xb7, 0x81, 0x9d, 0x90, 0x66, 0xfd,
	0x85, 0xed, 0x5b, 0x48, 0x02, 0x03, 0x2f, 0x3d, 0x36, 0xe8, 0x09, 0x0a, 0x25, 0xca, 0x7e, 0x94,
	0x31, 0x34, 0x92, 0xa0, 0x4a, 0x14, 0xe4, 0x6b, 0x06, 0x5d, 0x0c, 0x8f, 0x88, 0xb0, 0x13, 0x6e,
	0x13, 0xd8, 0xa8, 0xda, 0x76, 0xc7, 0x0f, 0xfd, 0x74, 0x26, 0x58, 0x85, 0xda, 0xad, 0xc4, 0x3b,
	0x85, 0x93, 0x7f, 0xa1, 0xaa, 0xae, 0x33, 0xfc, 0x6a, 0x7a, 0x30, 0x7d, 0xd2, 0xf2, 0x32, 0xcf,
	0x22, 0x9f, 0x2d, 0x9d, 0x89, 0x2f, 0x83, 0x29, 0xdc, 0x04, 0xe7, 0x22, 0x9a, 0x23, 0x01, 0xa7,
	0xb3, 0x0e, 0x21, 0xbc, 0x26, 0x32, 0x23, 0x85, 0x6d, 0xac, 0x8f, 0x81, 0x87, 0x07, 0x66, 0xe8,
	0x0a, 0xe9, 0xfb, 0x99, 0x1f, 0x96, 0xc6, 0xac, 0x92, 0xd4, 0x18, 0xd3, 0xef, 0xdb, 0x41, 0x6b,
	0x7c, 0x96, 0x68, 0x55, 0x22, 0x8f, 0x22, 0xb8, 0xc2, 0x3a, 0x31, 0x92, 0x6e, 0x9c, 0xe1, 0xdd,
	0x13, 0xc4, 0xc3, 0xfb, 0xea, 0x8e, 0xc0, 0x51, 0x9f, 0xce, 0x69, 0xc7, 0xd7, 0x01, 0x1d, 0x6f,
	0x19, 0x7e, 0x81, 0xcd, 0x6a, 0x87, 0x93, 0x2e, 0x10, 0x2c, 0xef, 0xa9, 0xdb, 0xa5, 0x09, 0xbb,
	0x7e, 0x78, 0x5c, 0x8c, 0x57, 0x2c, 0x27, 0x75, 0x82, 0xd4, 0xa9, 0xf7, 0x10, 0x25, 0x71, 0xc0,
	0x98, 0x00, 0x61, 0xfb, 0xda, 0x4b, 0xa3, 0x10, 0x66, 0x9a, 0xc7, 0x84, 0x39, 0x36, 0xdd, 0xf7,
	0xd4, 0x05, 0x52, 0x3a, 0x6b, 0x02, 0xc2, 0x67, 0xd9, 0xb0, 0x05, 0x34, 0x76, 0x46, 0x34, 0x28,
	0x03, 0x87, 0x00, 0x94, 0x3a, 0x30, 0xaf, 0x3e, 0xd1, 0x73, 0xc9, 0x5e, 0xf0, 0xdc, 0xf2, 0xa8,
	0x46, 0xf4, 0x1c, 0xaa, 0xc0, 0x9a, 0x20, 0x3e, 0xd3, 0xfa, 0x98, 0x67, 0xae, 0x9a, 0x99, 0x96,
	0x40, 0x83, 0xd6, 0x5c, 0x8d, 0x58, 0x89, 0x04, 0x77, 0x56, 0x2c, 0x78, 0xcd, 0x10, 0x00, 0x00,
	0x43, 0xb3, 0xa2, 0x25, 0xf5, 0x71, 0x72, 0x99, 0x54, 0x25, 0x97, 0x65, 0x52, 0xcb, 0xf7, 0x82,
	0x08, 0x9e, 0xcb, 0xe4, 0x95, 0xda, 0x6d, 0x75, 0x9d, 0xc9, 0x1d, 0xa0, 0x0a, 0xd1, 0x8f, 0x2c,
	0xed, 0x3e, 0x52, 0x97, 0x06, 0xfe, 0x5c, 0x77, 0x73, 0xc1, 0x8c, 0xeb, 0xaa, 0xca, 0x29, 0x8c,
	0xf2, 0x99, 0x06, 0xaa, 0xe1, 0xb0, 0x08, 0x79, 0xdb, 0xe1, 0x18, 0x3e, 0xa0, 0x69, 0x28, 0xa0,
	0xf5, 0xb7, 0xab, 0xcb, 0x64, 0x76, 0x58, 0xd1, 0xf8, 0x1f, 0xd8, 0x2f, 0x11, 0xf6, 0x29, 0x3c,
	0x04, 0xe0, 0x63, 0x1c, 0xa4, 0xe8, 0x20, 0xd0, 0x49, 0x47, 0xbc, 0xf2, 0x91, 0x29, 0xfd, 0x59,
	0x4e, 0xd8, 0xa7, 0xea, 0x7e, 0xa3, 0x52, 0xf0, 0x63, 0xdf, 0x44, 0x57, 0x9c, 0x04, 0x04, 0x40,
	0x01, 0x0a, 0x38, 0x09, 0x64, 0x1a, 0x09, 0xd4, 0x75, 0xc0, 0xbc, 0x13, 0x82, 0x79, 0x55, 0xf7,
	0xbf, 0x2a, 0x90, 0x27, 0x4d, 0xb1, 0x35, 0x2f, 0x94, 0x6d, 0x20, 0x1f, 0x80, 0x40, 0x7f, 0x87,
	0xb2, 0xdb, 0xc3, 0x18, 0xbe, 0x53, 0x21, 0x57, 0x38, 0x4f, 0x7f, 0x02, 0xa0, 0xcf, 0x6c, 0x58,
	0xd6, 0x73, 0x9d, 0xec, 0x41, 0x2b, 0x14, 0xca, 0x3e, 0xd2, 0x73, 0xec, 0x07, 0x28, 0x10, 0x38,
	0x1e, 0x2f, 0x75, 0xf5, 0x12, 0x82, 0xa8, 0x14, 0xca, 0xc9, 0xf8, 0xb6, 0x8f, 0x70, 0x37, 0xd9,
	0x75, 0xa3, 0x2c, 0x1a, 0x45, 0xbc, 0x24, 0xf3, 0x53, 0xb8, 0x3e, 0x3b, 0xae, 0xa5, 0xc3, 0x37,
	0xf3, 0xcc, 0xb9, 0x48, 0x9a, 0x90, 0x68, 0x67, 0xe1, 0x7c, 0x63, 0x30, 0xec, 0xe7, 0xc8, 0x43,
	0x5c, 0xc1, 0xc0, 0x69, 0xd0, 0x46, 0x05, 0x75, 0xa0, 0x61, 0xd9, 0x4c, 0xe3, 0x50, 0xbb, 0x7b,
	0xaa, 0xd6, 0xf1, 0x93, 0x14, 0xf9, 0x64, 0x34, 0xf3, 0x92, 0xa9, 0x96, 0x8a, 0x09, 0x23, 0x3b,
	0x07, 0xfd, 0xe1, 0x7e, 0x64, 0xc9, 0xd0, 0x25, 0xdc, 0x97, 0x68, 0x05, 0x85, 0x9d, 0x89, 0x28,
	0xdb, 0xde, 0x89, 0xae, 0x9f, 0x7a, 0x09, 0xb1, 0xfb, 0xf2, 0x75, 0x75, 0xb9, 0x09, 0x27, 0xf0,
	0x09, 0x73, 0xdb, 0x7c, 0xd4, 0x1c, 0x0c, 0x39, 0x98, 0xed, 0x23, 0x3a, 0xb1, 0x57, 0x82, 0x70,
	0x98, 0xea, 0xf6, 0xf3, 0x78, 0x87, 0x90, 0xd1, 0x84, 0x96, 0x03, 0x09, 0x75, 0x4b, 0x91, 0xd5,
	0xa6, 0x66, 0x18, 0x9f, 0x83, 0xdd, 0x68, 0xea, 0x87, 0xce, 0x8c, 0xf6, 0x03, 0x12, 0x04, 0x48,
	0x72, 0x60, 0x77, 0xdf, 0xb4, 0xf9, 0xec, 0xc1, 0x56, 0xef, 0x91, 0x84, 0x68, 0x0f, 0xa2, 0xcc,
	0x0b, 0xd8, 0x0c, 0xc7, 0xa4, 0x6b, 0x9e, 0xc1, 0x99, 0x83, 0xf7, 0xd9, 0x03, 0xd4, 0x26, 0x39,
	0x02, 0x52, 0xab, 0x9d, 0xcd, 0x31, 0xa6, 0x47, 0xb1, 0xde, 0x99, 0x1b, 0x2e, 0x62, 0x1a, 0x1a,
	0x19, 0xd6, 0xde, 0x50, 0x0f, 0x40, 0xe9, 0xc7, 0x7a, 0xe4, 0x4f, 0x7c, 0x3d, 0x2e, 0xce, 0x26,
	0x3b, 0x94, 0xc7, 0xd5, 0x45, 0x54, 0xfb, 0x84, 0x7a, 0xbd, 0x3c, 0xc8, 0xac, 0x29, 0x01, 0x41,
	0x6c, 0x42, 0xcc, 0x62, 0x0a, 0x46, 0xe5, 0x71, 0x92, 0x83, 0xbc, 0xf0, 0x98, 0x62, 0xee, 0xfb,
	0xe4, 0x6e, 0xe5, 0x5e, 0x9b, 0x6f, 0x5a, 0x5e, 0xe8, 0x24, 0x74, 0x52, 0xcb, 0x9d, 0x83, 0xd3,
	0x08, 0x02, 0xa7, 0x46, 0x0d, 0x24, 0xd0, 0x76, 0x34, 0x71, 0x32, 0xca, 0xdf, 0xa6, 0x3d, 0x40,
	0x71, 0xdd, 0x43, 0x31, 0x11, 0x39, 0xb9, 0xb1, 0x83, 0x44, 0x8b, 0xe8, 0xd8, 0x39, 0xb1, 0xda,
	0xa2, 0x7d, 0x90, 0x0c, 0xce, 0x69, 0x89, 0xc2, 0x5b, 0x74, 0x9e, 0x1b, 0xc3, 0xc8, 0x5e, 0x39,
	0x48, 0x39, 0x67, 0xc6, 0x30, 0x44, 0x93, 0x04, 0xee, 0x7c, 0x67, 0x69, 0x62, 0x33, 0xa2, 0xe2,
	0xf2, 0xbb, 0x4a, 0x13, 0x99, 0x02, 0xf3, 0x7c, 0x37, 0x9d, 0xdf, 0x32, 0x8d, 0xa1, 0x0c, 0x3a,
	0xbe, 0x87, 0xbc, 0xde, 0xae, 0x62, 0x92, 0x95, 0xf3, 0xbd, 0x74, 0x82, 0x2c, 0xd1, 0xa6, 0xf9,
	0x86, 0x26, 0x3f, 0xf8, 0x3e, 0x1c, 0xbb, 0xeb, 0xe7, 0xbb, 0x10, 0x6d, 0x9c, 0xcf, 0x56, 0x6a,
	0xaf, 0xaa, 0x7b, 0xe7, 0x7b, 0x38, 0x85, 0x9b, 0xe8, 0xf2, 0xfd, 0x15, 0xe8, 0xb0, 0x50, 0x4e,
	0x01, 0x51, 0x7e, 0xa0, 0x82, 0xd5, 0x6e, 0x9c, 0x27, 0xb3, 0x0b, 0x7d, 0xae, 0x82, 0xcd, 0x59,
	0xc5, 0xf1, 0xe0, 0x1f, 0xac, 0x40, 0xc1, 0x57, 0x4b, 0x14, 0x1e, 0xf7, 0x43, 0x65, 0xce, 0xcf,
	0xa8, 0x26, 0xa0, 0x3a, 0xc1, 0xf9, 0xe1, 0x32, 0xb9, 0x01, 0x48, 0xcb, 0xd8, 0xd2, 0xf9, 0xa0,
	0xbc, 0xa0, 0xb5, 0xb1, 0xec, 0xee, 0x47, 0x28, 0xce, 0xd5, 0xce, 0x75, 0x21, 0xb3, 0x38, 0x9f,
	0xaf, 0xc0, 0x63, 0xaf, 0x59, 0x21, 0x69, 0x53, 0x32, 0xe1, 0x47, 0xcb, 0x13, 0x04, 0x8c, 0xb0,
	0x3b, 0x3b, 0x3f, 0x56, 0x16, 0x54, 0x4c, 0x05, 0x6d, 0xff, 0x78, 0x59, 0x22, 0xa1, 0x92, 0x5f,
	0xfe, 0x44, 0x05, 0x8e, 0x79, 0xbb, 0xec, 0xf7, 0xcf, 0xfc, 0x6c, 0x66, 0x23, 0xdd, 0x4f, 0x56,
	0x70, 0x92, 0x6e, 0x9e, 0xef, 0xdd, 0x85, 0x3f, 0x04, 0xce, 0x4f, 0xd9, 0xbd, 0x2c, 0xf5, 0xb1,
	0x52, 0x7e, 0xba, 0x52, 0x7b, 0x4d, 0xdd, 0x3f, 0xdf, 0xd5, 0x4a, 0xb0, 0xa3, 0x26, 0xd5, 0xad,
	0x08, 0xcc, 0x3f, 0x53, 0xa9, 0xbd, 0xa2, 0xee, 0xbe, 0x70, 0xc8, 0x16, 0xea, 0x70, 0xe7, 0x67,
	0x2b, 0xb5, 0x8f, 0xf3, 0xe9, 0x33, 0x13, 0xcc, 0x80, 0x9d, 0x30, 0x43, 0x19, 0xe9, 0x4f, 0xce,
	0x44, 0x86, 0x2f, 0xd8, 0x85, 0x68, 0xce, 0x8b, 0x87, 0xfc, 0x9c, 0x1d, 0xb2, 0xcc, 0xe8, 0x40,
	0x4f, 0xfc, 0x50, 0xcb, 0x90, 0x0f, 0xad, 0x2c, 0x25, 0x2e, 0xe5, 0xfe, 0x9f, 0xa7, 0x92, 0x8c,
	0x0e, 0x6f, 0x01, 0xc2, 0xcd, 0xa0, 0x66, 0x14, 0xa0, 0xae, 0xfc, 0x85, 0x0a, 0x1c, 0x99, 0xbc,
	0xfe, 0x20, 0x22, 0x6c, 0x26, 0x70, 0xe1, 0x17, 0x2b, 0xb5, 0x37, 0xd5, 0xab, 0xe5, 0x53, 0x4b,
	0x39, 0xfb, 0x23, 0xe1, 0xe3, 0x97, 0xac, 0x82, 0x1f, 0x47, 0x00, 0x11, 0xc7, 0x67, 0x82, 0xb4,
	0x29, 0x77, 0xa6, 0xce, 0x2f, 0x5b, 0xd3, 0x50, 0x9f, 0x38, 0xb2, 0x54, 0x43, 0xdc, 0xfb, 0x2b,
	0xc5, 0xaa, 0x36, 0x80, 0xc3, 0x9a, 0x5f, 0xb4, 0xbe, 0x82, 0xf3, 0x54, 0xa6, 0xff, 0xaa, 0x65,
	0xd5, 0x07, 0x93, 0x00, 0x20, 0x12, 0xb2, 0x23, 0x6e, 0x23, 0xf0, 0x92, 0x0f, 0xfc, 0x9a, 0x15,
	0xa2, 0xe1, 0x4f, 0xcf, 0xf7, 0xfd, 0x3a, 0x65, 0xc2, 0x5b, 0xc2, 0xb1, 0x38, 0x21, 0x2c, 0x2c,
	0x3a, 0xbf, 0x64, 0x15, 0x57, 0xee, 0x24, 0x40, 0x06, 0x27, 0xa0, 0xfe, 0xdf, 0x28, 0x89, 0x53,
	0x9e, 0xf7, 0x65, 0xeb, 0x3a, 0x86, 0x5e, 0x9a, 0xf2, 0x15, 0x2b, 0x8b, 0x4d, 0xda, 0x00, 0xc8,
	0x1a, 0x19, 0x1f, 0xd8, 0xd2, 0xf9, 0x4d, 0x6b, 0xca, 0x81, 0x0e, 0x4d, 0x32, 0x30, 0xa5, 0x92,
	0x97, 0x60, 0x24, 0x89, 0xfb, 0x5b, 0xd6, 0xf7, 0x05, 0x8c, 0xb7, 0xa2, 0x90, 0xca, 0xf1, 0xdf,
	0xb3, 0xdb, 0x6f, 0x26, 0x1a, 0xed, 0x66, 0x9e, 0x66, 0x11, 0xa2, 0xbf, 0xc1, 0x92, 0xbf, 0x6f,
	0xa5, 0xc1, 0x96, 0x85, 0xd4, 0xa4, 0x3b, 0x1a, 0xe4, 0x66, 0xe7, 0x0f, 0x6c, 0x97, 0x94, 0xbc,
	0xa5, 0xc5, 0x9c, 0x3f, 0x7c, 0x41, 0x57, 0x47, 0x67, 0x74, 0xd7, 0xf8, 0x55, 0xab, 0x96, 0x45,
	0x17, 0x4a, 0x8f, 0x22, 0x0b, 0x39, 0x7f, 0x44, 0x19, 0x99, 0x63, 0x29, 0x99, 0x53, 0x7c, 0xec,
	0x8f, 0xad, 0x39, 0xe5, 0x24, 0x0b, 0xf1, 0x4f, 0xac, 0xe3, 0x41, 0x32, 0xf6, 0x23, 0x2f, 0xe0,
	0xfa, 0x71, 0x27, 0x84, 0x56, 0x62, 0xe7, 0x4f, 0xad, 0x08, 0x26, 0xe7, 0x48, 0xa5, 0xc1, 0x68,
	0xed, 0xcf, 0x96, 0x8f, 0xb5, 0x39, 0xcf, 0xe4, 0xb3, 0xa4, 0xa5, 0x3f, 0xb7, 0x5a, 0x12, 0x81,
	0x59, 0xd5, 0xda, 0xf9, 0x0b, 0xbb, 0x5a, 0x51, 0x9f, 0x99, 0xd8, 0x2f, 0x1e, 0xfd, 0x97, 0xcb,
	0xaa, 0x45, 0xc9, 0x44, 0x95, 0xfa, 0x5f, 0x55, 0x6a, 0x0f, 0xd4, 0x4b, 0x64, 0x2f, 0x1b, 0x77,
	0xa5, 0x4c, 0xd8, 0xf3, 0x62, 0xc1, 0xee, 0x5f, 0xb3, 0x07, 0xb9, 0x18, 0x40, 0x70, 0x59, 0x36,
	0xd3, 0xf2, 0x27, 0x13, 0x19, 0xf5, 0xd7, 0x85, 0xd9, 0xed, 0xa8, 0x6d, 0x1d, 0x18, 0x0e, 0x7f,
	0x63, 0x23, 0x57, 0x47, 0xfb, 0x4f, 0xfc, 0xdc, 0x26, 0xa4, 0xbf, 0xb5, 0xe4, 0x6e, 0xbe, 0x9d,
	0x7b, 0xa1, 0x25, 0xff, 0x5d, 0xa5, 0xf6, 0x0d, 0x9c, 0x91, 0x5f, 0x1c, 0x58, 0x16, 0xc7, 0xf6,
	0xef, 0x2b, 0x35, 0x57, 0xbd, 0xf9, 0xff, 0x05, 0xa9, 0xc5, 0xd8, 0x7f, 0xb0, 0x8e, 0x6c, 0xdc,
	0x0a, 0xd5, 0xcf, 0x16, 0xa9, 0xec, 0x1f, 0x2b, 0x26, 0x27, 0xf5, 0xa1, 0x30, 0xb9, 0x1c, 0x68,
	0x87, 0x3a, 0x99, 0x9e, 0x39, 0xff, 0x64, 0xa3, 0x33, 0x71, 0xef, 0x4e, 0x26, 0x05, 0x0e, 0xfa,
	0x67, 0xab, 0x46, 0x94, 0x4f, 0x93, 0x8c, 0x8f, 0x36, 0xa8, 0xff, 0x62, 0x4d, 0x59, 0x54, 0x8b,
	0x7c, 0x9f, 0x40, 0x5d, 0xff, 0x6a, 0x27, 0x34, 0x03, 0x7f, 0x74, 0xdc, 0xf3, 0xa6, 0x14, 0xc2,
	0x9c, 0x7f, 0xb3, 0x13, 0x3a, 0xb0, 0x02, 0xa2, 0x89, 0x94, 0x78, 0x6c, 0xa8, 0x7f, 0x2f, 0x14,
	0x13, 0xea, 0x5e, 0xc0, 0xb7, 0xdc, 0x04, 0x70, 0xfe, 0xa3, 0xe2, 0xbe, 0x0d, 0x0f, 0xb3, 0x18,
	0x4d, 0xf0, 0x1e, 0xe5, 0xf4, 0xfe, 0xb0, 0x97, 0x44, 0x84, 0x14, 0xa5, 0xfa, 0x23, 0xbc, 0xd0,
	0x47, 0xb4, 0x44, 0xa5, 0xa6, 0x33, 0x82, 0xf0, 0xdf, 0x06, 0x82, 0x5d, 0x7a, 0x67, 0x4c, 0x53,
	0x0a, 0x78, 0x41, 0x24, 0x29, 0x18, 0x25, 0xf6, 0x71, 0x9b, 0x2f, 0xe2, 0x18, 0x5a, 0x70, 0x73,
	0xc5, 0xfd, 0x6c, 0x45, 0xa9, 0xbe, 0x4e, 0x80, 0x60, 0x19, 0x18, 0xd2, 0xd5, 0x09, 0x36, 0x0a,
	0x6c, 0x37, 0x02, 0xba, 0xa4, 0x1a, 0x18, 0x2d, 0xb9, 0x61, 0xa8, 0x98, 0x4e, 0x49, 0x64, 0x55,
	0xd3, 0xd9, 0x84, 0x47, 0x70, 0x61, 0x28, 0x9d, 0xf6, 0x0e, 0x83, 0x0a, 0x0f, 0xf8, 0x3e, 0x20,
	0x14, 0x00, 0x34, 0xa4, 0x46, 0xc3, 0xe6, 0x4d, 0xb9, 0x02, 0x06, 0x41, 0x10, 0xce, 0x86, 0xbb,
	0xa3, 0xae, 0x49, 0xbd, 0x9f, 0x36, 0x00, 0x98, 0x17, 0xa5, 0xf0, 0x41, 0x03, 0x60, 0xb7, 0x3b,
	0x68, 0xbf, 0xbb, 0xd3, 0x1f, 0x48, 0x29, 0xcc, 0x94, 0xf6, 0xb3, 0x46, 0xf7, 0x70, 0x20, 0x48,
	0x97, 0x08, 0x8d, 0xfa, 0x60, 0xb0, 0xdb, 0x6e, 0xef, 0xb7, 0xa0, 0x8e, 0x96, 0xba, 0xfa, 0x38,
	0x9f, 0xc7, 0x2c, 0xa2, 0x61, 0x84, 0x69, 0x8f, 0x3b, 0xcc, 0xe8, 0xf1, 0xe1, 0x5e, 0x0f, 0x7c,
	0xb0, 0x38, 0x11, 0xb8, 0xc5, 0xf0, 0x9b, 0x5a, 0x7b, 0x3b, 0xfb, 0x87, 0x83, 0x36, 0xd3, 0xaa,
	0xee, 0x37, 0x41, 0x65, 0x2c, 0x90, 0x7d, 0x6d, 0x38, 0x00, 0x40, 0xef, 0x8a, 0x3e, 0xf0, 0xb7,
	0xd9, 0xdd, 0xdb, 0xeb, 0xee, 0x1b, 0xd5, 0xc2, 0xbd, 0x7a, 0xed, 0xe6, 0x4e, 0x7d, 0x97, 0x8d,
	0x71, 0x0b, 0x67, 0x3f, 0x0f, 0xc6, 0x74, 0x71, 0x20, 0xc5, 0xcf, 0x5e, 0x34, 0xce, 0x03, 0xae,
	0xb7, 0xfb, 0xfd, 0xfd, 0x3d, 0x70, 0xd9, 0x6f, 0x83, 0x0f, 0xdd, 0x73, 0x71, 0xb3, 0x3e, 0xd8,
	0xe9, 0xee, 0xd7, 0x77, 0x87, 0xbb, 0x3b, 0x4f, 0xdb, 0x4e, 0xc5, 0xfd, 0xda, 0x2a, 0xf6, 0xa8,
	0x53, 0x32, 0x87, 0x5d, 0x7a, 0xb8, 0x15, 0xf1, 0x55, 0x26, 0xa4, 0x1e, 0xa2, 0x18, 0x9c, 0x47,
	0x5c, 0xf5, 0xa3, 0x84, 0x1a, 0x02, 0xa9, 0xcb, 0x95, 0x96, 0x29, 0x34, 0xb8, 0xfe, 0x34, 0x07,
	0x06, 0x7d, 0xfc, 0x7c, 0xb2, 0x46, 0x86, 0x18, 0x1a, 0xb7, 0xe7, 0x8b, 0xd3, 0x61, 0xef, 0x24,
	0xde, 0x8e, 0x42, 0x9c, 0x9b, 0x0d, 0x52, 0xe0, 0xb0, 0xb8, 0xc5, 0x80, 0xb3, 0xa3, 0x7c, 0x21,
	0x16, 0x83, 0x04, 0xa5, 0x29, 0xfc, 0xad, 0x07, 0x12, 0xea, 0x17, 0xd2, 0xe0, 0xd0, 0xd4, 0xd0,
	0x34, 0x48, 0x91, 0x6d, 0x86, 0x89, 0x8e, 0x3d, 0x3f, 0x91, 0x21, 0x97, 0x58, 0xba, 0x4e, 0x90,
	0x6b, 0x42, 0x89, 0x9b, 0x4b, 0x7c, 0x3b, 0x39, 0x04, 0xbe, 0x4c, 0x3b, 0x1e, 0xda, 0x0a, 0x3c,
	0x9d, 0xf9, 0x71, 0xca, 0xf4, 0x2b, 0xcc, 0x8a, 0x76, 0x68, 0xb7, 0x76, 0x55, 0x36, 0x81, 0x48,
	0x1c, 0xa3, 0x18, 0x12, 0xc4, 0xeb, 0x90, 0xa2, 0x91, 0xab, 0x23, 0x3f, 0x48, 0xdf, 0xd1, 0x67,
	0xce, 0x35, 0xc2, 0xdc, 0xc3, 0x92, 0x9e, 0x64, 0x3f, 0x35, 0x82, 0xac, 0xc5, 0x54, 0xb9, 0xea,
	0x71, 0xae, 0x13, 0x78, 0xa7, 0x03, 0x83, 0x94, 0x42, 0x51, 0x4d, 0x54, 0xc1, 0x62, 0xa7, 0xce,
	0x0d, 0x40, 0xd3, 0xfb, 0x65, 0x46, 0xa5, 0xa2, 0x5f, 0x76, 0x76, 0x93, 0x37, 0xcf, 0xa9, 0x40,
	0xce, 0xef, 0x2d, 0xde, 0x49, 0x39, 0xca, 0x4a, 0x1c, 0xbc, 0x4d, 0x00, 0x9f, 0x34, 0x37, 0x86,
	0xe2, 0x9a, 0x79, 0x02, 0xd7, 0x1e, 0x9d, 0x39, 0x77, 0xa8, 0x18, 0x35, 0xa3, 0x8b, 0x9c, 0xc9,
	0x7c, 0xee, 0xf2, 0x3e, 0xb7, 0x72, 0x0a, 0x68, 0x76, 0xf4, 0x3d, 0xde, 0x97, 0x8d, 0x19, 0x05,
	0xf9, 0x3e, 0xef, 0xab, 0x24, 0x25, 0xdd, 0x82, 0xbe, 0x4c, 0x71, 0xa7, 0x50, 0xb2, 0x49, 0x12,
	0xff, 0xb3, 0xe1, 0x7e, 0x58, 0x51, 0x57, 0xfa, 0x5c, 0xad, 0x75, 0x27, 0x07, 0x9a, 0xea, 0x3f,
	0x3e, 0x7d, 0xdd, 0x83, 0x61, 0x4b, 0x4f, 0xbc, 0x3c, 0xa0, 0x3b, 0x25, 0xba, 0x5b, 0x00, 0x61,
	0xa9, 0xc2, 0x74, 0x2a, 0x7c, 0x79, 0x0c, 0xb2, 0xe4, 0xb8, 0xbe, 0xe6, 0x07, 0x1a, 0x4e, 0x89,
	0x55, 0xbe, 0xa0, 0x40, 0x57, 0x71, 0x91, 0x21, 0xd7, 0x9e, 0x44, 0x2a, 0x2c, 0xe5, 0x27, 0x19,
	0x3d, 0x8e, 0x91, 0x67, 0x97, 0xc8, 0xc6, 0x0a, 0x6b, 0xee, 0x96, 0xba, 0xf1, 0x99, 0x7e, 0xfb,
	0xf9, 0x28, 0xc8, 0x53, 0x48, 0x5a, 0x04, 0x3a, 0xb2, 0x3f, 0xe8, 0xcd, 0x92, 0x74, 0xb0, 0x35,
	0x53, 0x24, 0xcb, 0x56, 0xc8, 0x67, 0xb9, 0xcd, 0xe0, 0x95, 0xce, 0x58, 0xf9, 0xde, 0xd2, 0xde,
	0xa8, 0xf4, 0x3a, 0x48, 0xd8, 0x45, 0xe9, 0xc0, 0xa7, 0x85, 0x48, 0xdc, 0xe2, 0xcb, 0x7f, 0x6a,
	0xed, 0xd5, 0xdf, 0x45, 0xc0, 0x6b, 0xab, 0x97, 0x4a, 0x0c, 0x0e, 0x43, 0x7a, 0xdb, 0x59, 0xc8,
	0x83, 0xd5, 0x7a, 0x87, 0x8b, 0xc5, 0xe9, 0xfe, 0x14, 0xcd, 0x79, 0x8c, 0x00, 0x1a, 0xfb, 0xd9,
	0x38, 0x3a, 0x0d, 0x8d, 0x1c, 0x8f, 0xd5, 0x9d, 0x12, 0x1b, 0xda, 0xef, 0x82, 0x09, 0xdd, 0xad,
	0xf6, 0x9a, 0x43, 0x49, 0xb6, 0x12, 0x2e, 0x59, 0xbd, 0x44, 0x94, 0x42, 0x98, 0x7c, 0xa0, 0x0e,
	0x20, 0x41, 0x77, 0xec, 0x55, 0xf7, 0x7f, 0x2b, 0xaa, 0x36, 0x80, 0xf0, 0xfb, 0xd1, 0x58, 0xd3,
	0xb5, 0x5e, 0xa0, 0xed, 0x25, 0xdd, 0x60, 0x7f, 0x9b, 0xa0, 0x6b, 0x94, 0x49, 0xa9, 0xcf, 0xcd,
	0xc5, 0xd5, 0x01, 0x2c, 0xcb, 0x14, 0x73, 0x97, 0x5a, 0x2d, 0x86, 0x74, 0x93, 0x71, 0x3d, 0xf4,
	0xe7, 0x30, 0x13, 0x5d, 0xb9, 0x12, 0xa5, 0xe5, 0xa7, 0x96, 0xc8, 0x4f, 0x2d, 0x4c, 0xec, 0x31,
	0xcc, 0xe2, 0x3b, 0x0e, 0x94, 0x81, 0x96, 0xb4, 0x0d, 0xe4, 0x16, 0xa5, 0xbc, 0x13, 0x84, 0x0c,
	0xcb, 0x80, 0x45, 0xde, 0xe5, 0xf7, 0x39, 0x7e, 0xcb, 0x60, 0x22, 0x0a, 0xbc, 0xe6, 0x2c, 0xa2,
	0xf7, 0xc7, 0x0b, 0xc5, 0x40, 0x42, 0xc0, 0x86, 0x78, 0x91, 0x0e, 0x85, 0xcc, 0x86, 0x2f, 0xd0,
	0xe2, 0x90, 0xc1, 0x51, 0xee, 0x57, 0x2a, 0x74, 0x71, 0xcc, 0x18, 0xb1, 0x19, 0x40, 0x73, 0x1c,
	0x57, 0x9b, 0xc3, 0xe2, 0x3a, 0x92, 0x62, 0x3f, 0x0c, 0x9e, 0xc7, 0xfc, 0x58, 0x9d, 0x48, 0xae,
	0x91, 0x01, 0x23, 0xce, 0x35, 0x94, 0x0a, 0xe0, 0x33, 0x38, 0x4f, 0x29, 0x49, 0xc9, 0x91, 0x0f,
	0x04, 0x7a, 0x86, 0xe6, 0x54, 0x76, 0x78, 0x20, 0xcf, 0xb2, 0xa0, 0xb1, 0xc8, 0x68, 0xaf, 0x9b,
	0x49, 0xf2, 0x36, 0x01, 0x02, 0x87, 0x3f, 0x10, 0xec, 0xb9, 0x04, 0xe9, 0x02, 0x45, 0x53, 0x90,
	0xe8, 0x80, 0x5d, 0x74, 0xbf, 0x54, 0x51, 0x57, 0xc5, 0x7f, 0xe9, 0xcd, 0x0a, 0xfb, 0x97, 0x6b,
	0xac, 0x46, 0xbd, 0x2f, 0xc9, 0x00, 0x52, 0xd2, 0x7f, 0x68, 0x0c, 0x91, 0xd1, 0x0b, 0xe4, 0xc1,
	0x8b, 0x28, 0x38, 0x95, 0x62, 0x0b, 0xee, 0xb6, 0xaa, 0xe4, 0x0c, 0x49, 0x14, 0x4a, 0xd0, 0x10,
	0x19, 0x07, 0x88, 0x5a, 0x52, 0x82, 0x9c, 0x15, 0x57, 0xa7, 0x86, 0xc7, 0xc0, 0x9b, 0x8a, 0xc8,
	0x3c, 0xc6, 0xbc, 0x93, 0x6f, 0x90, 0x1e, 0x88, 0x20, 0x6f, 0xe5, 0x17, 0xdc, 0x0e, 0x60, 0xd9,
	0x12, 0x5e, 0xc6, 0x34, 0xeb, 0x3a, 0xcd, 0xde, 0x60, 0x20, 0x6b, 0x71, 0xa2, 0xe2, 0xa6, 0xdc,
	0x76, 0x55, 0x8b, 0xb6, 0x58, 0x7f, 0xc5, 0x7d, 0xa6, 0x6e, 0xf5, 0xa2, 0x18, 0xc7, 0x73, 0x46,
	0x8f, 0x26, 0x40, 0x1c, 0xf4, 0xfa, 0xca, 0x8c, 0x60, 0xc0, 0x5e, 0xbb, 0x47, 0xd5, 0x57, 0x46,
	0x9a, 0x1b, 0x13, 0xba, 0x26, 0xbc, 0x55, 0x63, 0x6a, 0x2b, 0x89, 0xe2, 0xfa, 0x74, 0x9a, 0xe8,
	0x29, 0x21, 0x79, 0xbe, 0x2d, 0x2e, 0xe8, 0x3b, 0x63, 0x30, 0xfe, 0xa0, 0xa2, 0x1c, 0x03, 0x80,
	0xdb, 0x84, 0x1d, 0xad, 0x70, 0x07, 0x6d, 0x0b, 0x15, 0x98, 0x19, 0x35, 0xe1, 0x33, 0xc8, 0x97,
	0x4f, 0x72, 0x0a, 0x7f, 0x11, 0x3d, 0x6e, 0x43, 0x5d, 0x44, 0xef, 0x7b, 0x81, 0x96, 0x7b, 0x67,
	0x19, 0x65, 0x9f, 0x1f, 0xc4, 0xe8, 0x6d, 0x8b, 0xca, 0xf8, 0x46, 0x91, 0xfd, 0x78, 0x99, 0x86,
	0xb4, 0x04, 0x34, 0xbe, 0x0e, 0x55, 0x5d, 0x2b, 0xe0, 0x6b, 0xcf, 0xa6, 0x76, 0xc2, 0x42, 0x3d,
	0x8b, 0x68, 0x18, 0x0b, 0x50, 0xb3, 0x07, 0x3c, 0x95, 0xe3, 0xb4, 0xeb, 0xb9, 0xa8, 0x8a, 0x68,
	0xf5, 0x30, 0x25, 0x9c, 0xb6, 0xe2, 0xba, 0xca, 0x29, 0x2a, 0x4d, 0x94, 0x64, 0x64, 0x1a, 0xda,
	0x41, 0x63, 0x67, 0x6b, 0xd8, 0x1f, 0xd4, 0x0f, 0x86, 0xed, 0x27, 0x87, 0x3b, 0xbd, 0xbd, 0xf6,
	0xfe, 0x00, 0x41, 0x6f, 0x5f, 0x5d, 0x2e, 0xc6, 0xda, 0xcb, 0x66, 0x08, 0xb7, 0x18, 0xc2, 0x96,
	0x01, 0xe5, 0x71, 0xfb, 0x59, 0x7b, 0xf7, 0xe0, 0xd3, 0xb2, 0x69, 0xda, 0x65, 0xb7, 0xde, 0xdc,
	0xc6, 0xa6, 0x21, 0x1f, 0x6d, 0xa6, 0xbd, 0x45, 0xe8, 0x66, 0xd5, 0xfd, 0xa0, 0x5a, 0x62, 0xd8,
	0x83, 0x4f, 0x90, 0xc4, 0xed, 0xde, 0x82, 0xe1, 0xf0, 0x2d, 0xf8, 0xe5, 0x79, 0xda, 0x43, 0xd9,
	0xd9, 0x12, 0xed, 0x91, 0x3c, 0x66, 0x2d, 0xd1, 0xde, 0x96, 0x67, 0x59, 0xd0, 0x8c, 0x38, 0xe0,
	0xb6, 0x7a, 0x8e, 0xf2, 0x50, 0xce, 0x15, 0x28, 0x2c, 0x22, 0x46, 0xac, 0x2f, 0xb5, 0x1f, 0xca,
	0xf7, 0x0e, 0x45, 0xfb, 0x11, 0xce, 0x54, 0xb9, 0xfd, 0xb6, 0xc0, 0x09, 0xb4, 0xb1, 0xa9, 0xfd,
	0x76, 0x0b, 0x0c, 0xd4, 0x32, 0xe1, 0x21, 0xd0, 0xc4, 0x12, 0xe1, 0x11, 0x00, 0xc5, 0x12, 0xe1,
	0x6d, 0xe7, 0xb2, 0xfb, 0xb9, 0x15, 0x3e, 0x9b, 0x14, 0x30, 0x0d, 0xe0, 0x39, 0xa1, 0x00, 0xd4,
	0x7e, 0x8a, 0xe3, 0x88, 0xb3, 0xc8, 0x95, 0x29, 0x07, 0xcd, 0x25, 0xa2, 0x14, 0xe7, 0xa2, 0x8d,
	0xa7, 0xc3, 0x87, 0x1c, 0xd2, 0x64, 0x60, 0x75, 0x89, 0x26, 0xe3, 0x56, 0x0c, 0xed, 0x51, 0x69,
	0xdc, 0xea, 0x12, 0x4d, 0xc6, 0xf1, 0x73, 0x07, 0x68, 0x0d, 0x24, 0x46, 0x9d, 0xd1, 0x67, 0x04,
	0x50, 0x8a, 0x90, 0x8a, 0xdb, 0xec, 0x14, 0x7a, 0x21, 0xd3, 0x3e, 0xc5, 0x59, 0xa6, 0x77, 0xff,
	0x0b, 0x76, 0x0e, 0x65, 0x9f, 0x7a, 0x9f, 0x3e, 0x2d, 0xb8, 0x48, 0x47, 0x1f, 0xa4, 0x3d, 0x1f,
	0xb1, 0x5d, 0x99, 0x46, 0x07, 0x68, 0x12, 0x0a, 0x21, 0x3f, 0xc0, 0x60, 0xcd, 0xcd, 0x4d, 0xb6,
	0x09, 0x38, 0x01, 0x64, 0x8a, 0x54, 0x97, 0x59, 0xc7, 0x34, 0x40, 0xb8, 0x5f, 0x31, 0xdb, 0x6e,
	0xe8, 0x12, 0xff, 0xab, 0x66, 0xc9, 0x2e, 0x7f, 0xe7, 0xc3, 0x2f, 0x00, 0xce, 0x12, 0x89, 0xc0,
	0x37, 0xb0, 0x15, 0xe9, 0x1a, 0xcc, 0x03, 0x6f, 0xce, 0xd9, 0xb3, 0x66, 0xe4, 0xde, 0xf5, 0xce,
	0x0e, 0x63, 0xc0, 0x29, 0x44, 0x40, 0x12, 0x12, 0x11, 0xf2, 0x86, 0xfb, 0x04, 0xf9, 0x87, 0xef,
	0xbc, 0x38, 0xff, 0x70, 0xbe, 0x6a, 0x0c, 0xcd, 0xad, 0x1e, 0x47, 0x43, 0x34, 0xf9, 0x19, 0xb9,
	0x6a, 0x1a, 0xfc, 0x7e, 0xcc, 0x98, 0x15, 0x0d, 0x7a, 0x38, 0x5e, 0x35, 0x93, 0xcc, 0x8b, 0xf1,
	0x9a, 0xfb, 0xae, 0x72, 0x1a, 0x80, 0x08, 0x21, 0x3d, 0x5e, 0x9b, 0xc0, 0x2c, 0x41, 0xcf, 0x82,
	0xd8, 0x8a, 0x84, 0x51, 0x93, 0xa1, 0xab, 0x12, 0x2f, 0x87, 0x7d, 0x7f, 0x1a, 0xca, 0x79, 0x41,
	0x43, 0xb6, 0x23, 0x45, 0x08, 0x9a, 0x0c, 0x58, 0xd6, 0xdc, 0xff, 0xac, 0xaa, 0xcd, 0x1e, 0x80,
	0xd1, 0xcc, 0x4b, 0x0b, 0x70, 0xdd, 0x33, 0xb8, 0x9e, 0xbe, 0x39, 0x1a, 0x14, 0xf0, 0x9a, 0x13,
	0x10, 0xda, 0xc5, 0x75, 0x8b, 0x81, 0x10, 0x08, 0x14, 0x04, 0x5a, 0x57, 0x4c, 0x77, 0x2f, 0x81,
	0x78, 0x81, 0xe6, 0x50, 0x44, 0x10, 0x84, 0x6e, 0xb1, 0xc2, 0xcc, 0x0f, 0xf3, 0x28, 0x4f, 0xa5,
	0xe8, 0xe9, 0xf1, 0xbd, 0x7e, 0x93, 0xc2, 0xb3, 0x64, 0x52, 0x9e, 0xa5, 0x27, 0x1a, 0xc0, 0x2e,
	0x03, 0x18, 0x95, 0xcf, 0x5f, 0x7a, 0x03, 0x49, 0x52, 0x8b, 0x2f, 0x84, 0xcc, 0x48, 0x83, 0xa1,
	0x98, 0xc8, 0xa9, 0xd4, 0x8e, 0x44, 0x32, 0xe7, 0x17, 0x17, 0x78, 0x06, 0x01, 0x94, 0x73, 0xf7,
	0x31, 0x2c, 0xf1, 0x26, 0x5d, 0x69, 0x97, 0x7a, 0xba, 0x31, 0x45, 0x55, 0xa0, 0xca, 0x19, 0x99,
	0xe0, 0xb2, 0x59, 0xc2, 0x62, 0x4d, 0x5e, 0xe2, 0x0a, 0x43, 0x94, 0xc1, 0x39, 0xb8, 0xca, 0x5d,
	0x57, 0xcd, 0xf8, 0x3e, 0x94, 0x1e, 0xb6, 0xbc, 0x33, 0xbe, 0xe1, 0x70, 0xdc, 0xaf, 0x22, 0x1e,
	0x15, 0x5a, 0x60, 0x9d, 0xbe, 0x02, 0x70, 0x55, 0x94, 0xd5, 0xc8, 0x19, 0xf5, 0xf1, 0x18, 0x5a,
	0xd4, 0xc5, 0xc9, 0x13, 0xa1, 0x96, 0xfa, 0x51, 0xaa, 0x48, 0x6f, 0x95, 0xa0, 0x7a, 0xcf, 0x5c,
	0xfe, 0x8b, 0xb5, 0x69, 0xba, 0xf7, 0xfc, 0x29, 0x34, 0xb5, 0x52, 0xee, 0x44, 0x4a, 0xa0, 0x0b,
	0x90, 0xa2, 0x73, 0xd5, 0x74, 0xd2, 0xeb, 0x8c, 0x48, 0xcf, 0x97, 0x44, 0xfe, 0x51, 0x9e, 0x51,
	0x4e, 0x78, 0x43, 0x3d, 0xe8, 0xd1, 0x35, 0x8d, 0xb8, 0x15, 0xd2, 0x11, 0x6b, 0x02, 0xd3, 0x3b,
	0xc0, 0x5c, 0xb2, 0xf6, 0x7a, 0xcd, 0x55, 0x9f, 0x78, 0xc1, 0x20, 0x46, 0x6b, 0x18, 0x29, 0x38,
	0x40, 0xc6, 0x6e, 0xd4, 0x1e, 0xa8, 0x7b, 0x66, 0xb5, 0xf3, 0xe3, 0xa9, 0xf8, 0x84, 0x01, 0x5f,
	0x56, 0x77, 0xc9, 0xf6, 0x8b, 0x6b, 0x41, 0xd9, 0xea, 0x36, 0x80, 0x79, 0x0a, 0x64, 0x41, 0x35,
	0x37, 0x4a, 0xe3, 0x34, 0x9a, 0xdb, 0x17, 0x21, 0x94, 0x91, 0x87, 0xc5, 0x87, 0x34, 0x52, 0x65,
	0x16, 0xfe, 0x0e, 0xd5, 0x1f, 0x30, 0x30, 0x23, 0xb0, 0xc9, 0x20, 0x57, 0x10, 0x79, 0x89, 0x78,
	0x1a, 0x09, 0xbc, 0x38, 0xb0, 0x45, 0xf5, 0xaa, 0x61, 0x22, 0x60, 0xde, 0x80, 0x21, 0x7a, 0xb8,
	0x11, 0xf8, 0xbe, 0xee, 0x7e, 0x2b, 0x5c, 0xd8, 0xf8, 0x97, 0x7d, 0x10, 0xea, 0x0d, 0x3e, 0xbd,
	0x2c, 0x04, 0x11, 0xa4, 0x02, 0x93, 0xaf, 0xf2, 0xd0, 0x34, 0x78, 0xbe, 0x4a, 0x4f, 0xa8, 0xf4,
	0x62, 0x51, 0x7a, 0xd1, 0x5a, 0x4c, 0xa5, 0x03, 0x4a, 0x87, 0xc1, 0xe3, 0xf4, 0x4e, 0x67, 0xb2,
	0x10, 0xa4, 0x6a, 0x3a, 0x07, 0x7e, 0xc6, 0x59, 0x1d, 0x7b, 0x43, 0xab, 0xe3, 0xa1, 0x24, 0x8c,
	0x42, 0xbe, 0xde, 0x81, 0xe8, 0xe6, 0x85, 0x2c, 0xd4, 0xde, 0x31, 0x41, 0x22, 0xf7, 0x77, 0x2a,
	0xea, 0x52, 0xb9, 0xa2, 0x47, 0x3f, 0x2a, 0xf6, 0xc5, 0x7a, 0xf4, 0x06, 0xd6, 0x17, 0x38, 0x41,
	0x31, 0x51, 0xde, 0xdd, 0x41, 0x69, 0x78, 0xa1, 0x24, 0x70, 0xf9, 0xcf, 0x7d, 0xac, 0x26, 0xb4,
	0xb9, 0xf2, 0x92, 0xf4, 0x66, 0x5b, 0xdc, 0xbf, 0xc6, 0x9f, 0x01, 0x00, 0x72, 0xe9, 0x80, 0x3e,
	0x85, 0xe2, 0x40, 0x5e, 0x34, 0x79, 0xc4, 0x86, 0xe1, 0xb8, 0x1b, 0x71, 0xad, 0x07, 0x6b, 0x43,
	0x77, 0x68, 0x77, 0xec, 0x87, 0x91, 0x17, 0xdd, 0x4f, 0x61, 0x00, 0x3f, 0x52, 0xdb, 0x2b, 0x95,
	0x0e, 0x9d, 0xe6, 0x98, 0xbf, 0x74, 0xa4, 0x0f, 0x55, 0x08, 0xd2, 0xf3, 0x67, 0x74, 0x34, 0x93,
	0xa0, 0x35, 0x42, 0x7e, 0x04, 0xcf, 0xa8, 0xba, 0x9f, 0x47, 0x25, 0xd0, 0xd0, 0x33, 0xef, 0xc4,
	0x87, 0xab, 0x70, 0x09, 0x6a, 0xad, 0xd3, 0x80, 0x43, 0x99, 0x0f, 0xd6, 0xc4, 0x1c, 0x44, 0xf0,
	0x38, 0xbf, 0x18, 0xb0, 0x89, 0x76, 0x76, 0x1a, 0x0d, 0xf9, 0x3b, 0x35, 0xce, 0x5d, 0x4c, 0x21,
	0x7f, 0x11, 0x1a, 0xfb, 0x04, 0xd1, 0xe4, 0xd3, 0x33, 0x4e, 0x5b, 0xd4, 0x5c, 0x7c, 0xdd, 0xc6,
	0xdf, 0x93, 0x10, 0x69, 0xf2, 0xbe, 0xb3, 0xf1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xee,
	0xec, 0xf9, 0x3d, 0x2a, 0x00, 0x00,
}
