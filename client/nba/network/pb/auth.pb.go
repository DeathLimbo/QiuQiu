// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 服务器颜色
type ServerColor int32

const (
	// 流畅
	ServerColor_Green ServerColor = 0
	// 繁忙
	ServerColor_Yellow ServerColor = 1
	// 拥挤
	ServerColor_Red ServerColor = 2
	// 维护
	ServerColor_Gray ServerColor = 3
)

var ServerColor_name = map[int32]string{
	0: "Green",
	1: "Yellow",
	2: "Red",
	3: "Gray",
}
var ServerColor_value = map[string]int32{
	"Green":  0,
	"Yellow": 1,
	"Red":    2,
	"Gray":   3,
}

func (x ServerColor) Enum() *ServerColor {
	p := new(ServerColor)
	*p = x
	return p
}
func (x ServerColor) String() string {
	return proto.EnumName(ServerColor_name, int32(x))
}
func (x *ServerColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerColor_value, data, "ServerColor")
	if err != nil {
		return err
	}
	*x = ServerColor(value)
	return nil
}
func (ServerColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

// 服务器状态
type ServerState int32

const (
	// 无
	ServerState_None ServerState = 0
	// 新服
	ServerState_New ServerState = 1
	// 推荐
	ServerState_Recommend ServerState = 2
	// 火爆
	ServerState_Hot ServerState = 3
)

var ServerState_name = map[int32]string{
	0: "None",
	1: "New",
	2: "Recommend",
	3: "Hot",
}
var ServerState_value = map[string]int32{
	"None":      0,
	"New":       1,
	"Recommend": 2,
	"Hot":       3,
}

func (x ServerState) Enum() *ServerState {
	p := new(ServerState)
	*p = x
	return p
}
func (x ServerState) String() string {
	return proto.EnumName(ServerState_name, int32(x))
}
func (x *ServerState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerState_value, data, "ServerState")
	if err != nil {
		return err
	}
	*x = ServerState(value)
	return nil
}
func (ServerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

// 账户信息
type UserInfo struct {
	// SDK名
	SdkName *string `protobuf:"bytes,1,opt,name=sdkName" json:"sdkName,omitempty"`
	// SDK的uid(sdkname.sdkid是唯一帐号名称)
	SdkUid *string `protobuf:"bytes,2,opt,name=sdkUid" json:"sdkUid,omitempty"`
	// 账户创建时间戳
	CreateTime *int32 `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	// 帐号封停时间戳（一般时间戳为封停结束时间, 0：表示无状态，一个大的时间戳(例如20年)为永久封停）
	ClosureTime *int32 `protobuf:"varint,4,opt,name=closureTime" json:"closureTime,omitempty"`
	// IP等其他信息
	// 帐号封停理由
	Reason *string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	// 第三方账号
	AccountName *string `protobuf:"bytes,6,opt,name=accountName" json:"accountName,omitempty"`
	// 第三方类型
	AccountType *int32 `protobuf:"varint,7,opt,name=accountType" json:"accountType,omitempty"`
	// 渠道
	Channel *string `protobuf:"bytes,8,opt,name=channel" json:"channel,omitempty"`
	// 乐曼多账号
	LmdAccountName   *string `protobuf:"bytes,9,opt,name=lmdAccountName" json:"lmdAccountName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *UserInfo) GetSdkName() string {
	if m != nil && m.SdkName != nil {
		return *m.SdkName
	}
	return ""
}

func (m *UserInfo) GetSdkUid() string {
	if m != nil && m.SdkUid != nil {
		return *m.SdkUid
	}
	return ""
}

func (m *UserInfo) GetCreateTime() int32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *UserInfo) GetClosureTime() int32 {
	if m != nil && m.ClosureTime != nil {
		return *m.ClosureTime
	}
	return 0
}

func (m *UserInfo) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *UserInfo) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *UserInfo) GetAccountType() int32 {
	if m != nil && m.AccountType != nil {
		return *m.AccountType
	}
	return 0
}

func (m *UserInfo) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *UserInfo) GetLmdAccountName() string {
	if m != nil && m.LmdAccountName != nil {
		return *m.LmdAccountName
	}
	return ""
}

// 角色列表中的角色信息
type UserRoleInfo struct {
	// 角色id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 角色昵称
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 角色所在区服id
	Server *int32 `protobuf:"varint,3,opt,name=server" json:"server,omitempty"`
	// 角色创建时间
	Ctime *int64 `protobuf:"varint,4,opt,name=ctime" json:"ctime,omitempty"`
	// 账号id
	Uid              *int64 `protobuf:"varint,5,opt,name=uid" json:"uid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserRoleInfo) Reset()                    { *m = UserRoleInfo{} }
func (m *UserRoleInfo) String() string            { return proto.CompactTextString(m) }
func (*UserRoleInfo) ProtoMessage()               {}
func (*UserRoleInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *UserRoleInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UserRoleInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserRoleInfo) GetServer() int32 {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return 0
}

func (m *UserRoleInfo) GetCtime() int64 {
	if m != nil && m.Ctime != nil {
		return *m.Ctime
	}
	return 0
}

func (m *UserRoleInfo) GetUid() int64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

// 区服信息
type LogicServerInfo struct {
	// 区服id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 区服名字
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 状态 0无 1新服 2推荐 3火爆
	State *int32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	// 开服时间戳(秒)
	Start *int64 `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	// 颜色 0绿 1黄 2红 3灰
	Color *int32 `protobuf:"varint,5,opt,name=color" json:"color,omitempty"`
	// 区服创建时间戳(秒)
	Time *int64 `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	// 小分组(跨服)ID
	GroupId *int32 `protobuf:"varint,7,opt,name=groupId" json:"groupId,omitempty"`
	// 大分组(跨服)ID
	SuperGroupId *int32 `protobuf:"varint,8,opt,name=superGroupId" json:"superGroupId,omitempty"`
	// 地区(暂时没用)
	// optional string area = 9;
	// 是否关闭注册(老号可以进)
	CloseReg *bool `protobuf:"varint,10,opt,name=closeReg" json:"closeReg,omitempty"`
	// 是否维护中(只有白名单可以进)
	// optional bool isMaintenance = 11;
	// 是否屏蔽,不显示在服务器列表中
	IsHide           *bool  `protobuf:"varint,12,opt,name=isHide" json:"isHide,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogicServerInfo) Reset()                    { *m = LogicServerInfo{} }
func (m *LogicServerInfo) String() string            { return proto.CompactTextString(m) }
func (*LogicServerInfo) ProtoMessage()               {}
func (*LogicServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *LogicServerInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LogicServerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LogicServerInfo) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *LogicServerInfo) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *LogicServerInfo) GetColor() int32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *LogicServerInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *LogicServerInfo) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *LogicServerInfo) GetSuperGroupId() int32 {
	if m != nil && m.SuperGroupId != nil {
		return *m.SuperGroupId
	}
	return 0
}

func (m *LogicServerInfo) GetCloseReg() bool {
	if m != nil && m.CloseReg != nil {
		return *m.CloseReg
	}
	return false
}

func (m *LogicServerInfo) GetIsHide() bool {
	if m != nil && m.IsHide != nil {
		return *m.IsHide
	}
	return false
}

// 修改开服时间
type LogicServerOpenTime struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OpenTime         *string `protobuf:"bytes,2,opt,name=openTime" json:"openTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogicServerOpenTime) Reset()                    { *m = LogicServerOpenTime{} }
func (m *LogicServerOpenTime) String() string            { return proto.CompactTextString(m) }
func (*LogicServerOpenTime) ProtoMessage()               {}
func (*LogicServerOpenTime) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *LogicServerOpenTime) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LogicServerOpenTime) GetOpenTime() string {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return ""
}

// 已有角色信息
type ExistingRoleInfo struct {
	// 角色id
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// 角色icon
	TeamIcon *int32 `protobuf:"varint,2,opt,name=teamIcon" json:"teamIcon,omitempty"`
	// 角色创建时间
	CreateTime *int64 `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	// 角色等级
	Level *int32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	// 区服id
	ZoneId *int32 `protobuf:"varint,5,opt,name=zoneId" json:"zoneId,omitempty"`
	// 区服名称
	ZoneName *string `protobuf:"bytes,6,opt,name=zoneName" json:"zoneName,omitempty"`
	// gid
	Gid              *int32 `protobuf:"varint,7,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExistingRoleInfo) Reset()                    { *m = ExistingRoleInfo{} }
func (m *ExistingRoleInfo) String() string            { return proto.CompactTextString(m) }
func (*ExistingRoleInfo) ProtoMessage()               {}
func (*ExistingRoleInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *ExistingRoleInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ExistingRoleInfo) GetTeamIcon() int32 {
	if m != nil && m.TeamIcon != nil {
		return *m.TeamIcon
	}
	return 0
}

func (m *ExistingRoleInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExistingRoleInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ExistingRoleInfo) GetZoneId() int32 {
	if m != nil && m.ZoneId != nil {
		return *m.ZoneId
	}
	return 0
}

func (m *ExistingRoleInfo) GetZoneName() string {
	if m != nil && m.ZoneName != nil {
		return *m.ZoneName
	}
	return ""
}

func (m *ExistingRoleInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

// 回收道具
type GmRecycleItemG2L struct {
	// 列表
	ItemList         []*ItemVaryConfig `protobuf:"bytes,3,rep,name=itemList" json:"itemList,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GmRecycleItemG2L) Reset()                    { *m = GmRecycleItemG2L{} }
func (m *GmRecycleItemG2L) String() string            { return proto.CompactTextString(m) }
func (*GmRecycleItemG2L) ProtoMessage()               {}
func (*GmRecycleItemG2L) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *GmRecycleItemG2L) GetItemList() []*ItemVaryConfig {
	if m != nil {
		return m.ItemList
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "UserInfo")
	proto.RegisterType((*UserRoleInfo)(nil), "UserRoleInfo")
	proto.RegisterType((*LogicServerInfo)(nil), "LogicServerInfo")
	proto.RegisterType((*LogicServerOpenTime)(nil), "LogicServerOpenTime")
	proto.RegisterType((*ExistingRoleInfo)(nil), "ExistingRoleInfo")
	proto.RegisterType((*GmRecycleItemG2L)(nil), "gmRecycleItemG2L")
	proto.RegisterEnum("ServerColor", ServerColor_name, ServerColor_value)
	proto.RegisterEnum("ServerState", ServerState_name, ServerState_value)
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x71, 0x9c, 0x38, 0x93, 0xb4, 0xb1, 0x5c, 0x84, 0x2c, 0x4e, 0xe0, 0x53, 0xd5, 0x43,
	0x0f, 0x45, 0x08, 0xae, 0xa8, 0x42, 0x69, 0xa4, 0x28, 0x48, 0x69, 0x8a, 0xc4, 0xd1, 0x5a, 0x4f,
	0xdd, 0x15, 0xf6, 0x8e, 0xb5, 0x5e, 0x17, 0xc2, 0x99, 0xff, 0xe1, 0xc8, 0xef, 0x31, 0xbb, 0x76,
	0x42, 0x40, 0x48, 0xdc, 0x76, 0xde, 0xce, 0x7b, 0xfb, 0xde, 0xcc, 0x02, 0x64, 0xad, 0x79, 0xb8,
	0xac, 0x35, 0x19, 0x7a, 0x0e, 0x82, 0xd4, 0x7d, 0x77, 0x4e, 0x7f, 0x7a, 0x10, 0xde, 0x35, 0xa8,
	0x97, 0xea, 0x9e, 0xe2, 0x39, 0x8c, 0x9b, 0xfc, 0xf3, 0x3a, 0xab, 0x30, 0xf1, 0x5e, 0x78, 0xe7,
	0x93, 0xf8, 0x14, 0x46, 0x0c, 0xdc, 0xc9, 0x3c, 0x19, 0xb8, 0x3a, 0x06, 0x10, 0x1a, 0x33, 0x83,
	0x5b, 0xc9, 0x3d, 0x3e, 0x63, 0x41, 0x7c, 0x06, 0x53, 0x51, 0x52, 0xd3, 0xea, 0x0e, 0x1c, 0x3a,
	0x90, 0x89, 0xdc, 0xd7, 0x90, 0x4a, 0x02, 0x47, 0xe4, 0xa6, 0x4c, 0x08, 0x6a, 0x95, 0x71, 0xea,
	0xa3, 0xbf, 0xc0, 0xed, 0xae, 0xc6, 0x64, 0xec, 0x98, 0xec, 0x41, 0x3c, 0x64, 0x4a, 0x61, 0x99,
	0x84, 0xae, 0xeb, 0x19, 0x9c, 0x96, 0x55, 0xfe, 0xee, 0x88, 0x3d, 0xb1, 0x78, 0xba, 0x85, 0x99,
	0x35, 0xbe, 0xa1, 0x12, 0x9d, 0x79, 0x80, 0x01, 0xfb, 0xf4, 0x9c, 0xc8, 0x0c, 0x86, 0xca, 0x76,
	0x0e, 0x0e, 0x29, 0x50, 0x3f, 0xa2, 0xee, 0x1d, 0x9f, 0x40, 0x20, 0xcc, 0xde, 0xab, 0x1f, 0x4f,
	0xc1, 0x6f, 0x99, 0x69, 0x8d, 0xfa, 0xe9, 0x0f, 0x0f, 0xe6, 0x2b, 0x2a, 0xa4, 0xb8, 0x75, 0x8c,
	0xff, 0x28, 0xb3, 0x52, 0x63, 0x78, 0x1c, 0xbf, 0x85, 0xb9, 0xd4, 0xa6, 0x17, 0xb6, 0xef, 0x50,
	0x49, 0xda, 0x49, 0x3b, 0xaa, 0x7b, 0x75, 0xe4, 0x2e, 0x39, 0x67, 0xa1, 0xa9, 0xad, 0x97, 0x79,
	0x1f, 0xfc, 0x29, 0xcc, 0x9a, 0xb6, 0x46, 0xbd, 0xe8, 0xd1, 0xd0, 0xa1, 0x11, 0x84, 0x76, 0xba,
	0xb8, 0xc1, 0x22, 0x01, 0x46, 0x42, 0x9b, 0x46, 0x36, 0x37, 0x32, 0xc7, 0x64, 0x66, 0xeb, 0xf4,
	0x15, 0x9c, 0x1d, 0x19, 0xfe, 0x50, 0xa3, 0xb2, 0x7b, 0xf8, 0xc3, 0x34, 0x8b, 0x50, 0x8f, 0x77,
	0xc6, 0xd3, 0xef, 0x1e, 0x44, 0xef, 0xbf, 0xca, 0xc6, 0x48, 0x55, 0x1c, 0x26, 0xb8, 0xcf, 0xd6,
	0xed, 0x9e, 0x49, 0x06, 0xb3, 0x6a, 0xc9, 0x9f, 0xc5, 0x91, 0x82, 0x7f, 0x6c, 0xdf, 0x65, 0x2c,
	0xf1, 0x91, 0x97, 0x75, 0xd8, 0xfb, 0x37, 0x52, 0xb8, 0xcc, 0xfb, 0xcc, 0x2c, 0x62, 0xeb, 0xa3,
	0xa5, 0xf3, 0xb4, 0x0b, 0xd9, 0x67, 0x4e, 0x5f, 0x43, 0x54, 0x54, 0x1b, 0x14, 0x3b, 0xc1, 0x16,
	0x0c, 0x56, 0x8b, 0xab, 0x55, 0xfc, 0x12, 0x42, 0xc9, 0xc7, 0x15, 0x9b, 0xe3, 0x37, 0xfc, 0xf3,
	0xe9, 0xd5, 0xfc, 0xd2, 0xde, 0x7d, 0xcc, 0xf4, 0xee, 0x9a, 0x3f, 0xae, 0x2c, 0x2e, 0xde, 0xc0,
	0xb4, 0x4b, 0x7b, 0x6d, 0xc7, 0x1b, 0x4f, 0x20, 0x58, 0x68, 0x44, 0x15, 0x3d, 0x61, 0x87, 0xa3,
	0x4f, 0x58, 0x96, 0xf4, 0x25, 0xf2, 0xe2, 0x31, 0xf8, 0x1b, 0xcc, 0xa3, 0x41, 0x1c, 0xc2, 0x70,
	0xa1, 0xb3, 0x5d, 0xe4, 0x5f, 0xbc, 0xdd, 0x13, 0x6f, 0xed, 0xd6, 0xec, 0xc5, 0x9a, 0xdd, 0x31,
	0x8f, 0x7b, 0xd7, 0x68, 0x49, 0x27, 0x30, 0x61, 0x3f, 0x54, 0x55, 0xa8, 0x2c, 0x95, 0xf1, 0x1b,
	0x32, 0x91, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x65, 0x41, 0x65, 0x40, 0x03, 0x00, 0x00,
}
