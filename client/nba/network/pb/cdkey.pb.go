// Code generated by protoc-gen-go.
// source: cdkey.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CdkType int32

const (
	// 一码一用(单角色同批次只能使用一次) [一批兑换码]一个玩家只能使用其中一个
	CdkType_CT_OneUseOne CdkType = 1
	// 一码一用(单角色同批次不限使用次数) [一批兑换码]一个玩家只能使用其中N个
	CdkType_CT_OneUseMore CdkType = 2
	// 一码多用(单角色同批次只能使用一次) [一个兑换码] 一个玩家只能使用一次（最大使用次数=所有使用人次数的和）
	CdkType_CT_MoreUseOne CdkType = 3
	// 一码多用(单角色同批次不限使用次数) [一个兑换码] 一个玩家可使用N次（最大使用次数=所有使用人次数的和）
	CdkType_CT_MoreUseMore CdkType = 4
)

var CdkType_name = map[int32]string{
	1: "CT_OneUseOne",
	2: "CT_OneUseMore",
	3: "CT_MoreUseOne",
	4: "CT_MoreUseMore",
}
var CdkType_value = map[string]int32{
	"CT_OneUseOne":   1,
	"CT_OneUseMore":  2,
	"CT_MoreUseOne":  3,
	"CT_MoreUseMore": 4,
}

func (x CdkType) Enum() *CdkType {
	p := new(CdkType)
	*p = x
	return p
}
func (x CdkType) String() string {
	return proto.EnumName(CdkType_name, int32(x))
}
func (x *CdkType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CdkType_value, data, "CdkType")
	if err != nil {
		return err
	}
	*x = CdkType(value)
	return nil
}
func (CdkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

type GamerUseCdkC2S_MsgID int32

const (
	GamerUseCdkC2S_eMsgID GamerUseCdkC2S_MsgID = 543
)

var GamerUseCdkC2S_MsgID_name = map[int32]string{
	543: "eMsgID",
}
var GamerUseCdkC2S_MsgID_value = map[string]int32{
	"eMsgID": 543,
}

func (x GamerUseCdkC2S_MsgID) Enum() *GamerUseCdkC2S_MsgID {
	p := new(GamerUseCdkC2S_MsgID)
	*p = x
	return p
}
func (x GamerUseCdkC2S_MsgID) String() string {
	return proto.EnumName(GamerUseCdkC2S_MsgID_name, int32(x))
}
func (x *GamerUseCdkC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerUseCdkC2S_MsgID_value, data, "GamerUseCdkC2S_MsgID")
	if err != nil {
		return err
	}
	*x = GamerUseCdkC2S_MsgID(value)
	return nil
}
func (GamerUseCdkC2S_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{2, 0} }

type GamerUseCdkS2C_MsgID int32

const (
	GamerUseCdkS2C_eMsgID GamerUseCdkS2C_MsgID = 543
)

var GamerUseCdkS2C_MsgID_name = map[int32]string{
	543: "eMsgID",
}
var GamerUseCdkS2C_MsgID_value = map[string]int32{
	"eMsgID": 543,
}

func (x GamerUseCdkS2C_MsgID) Enum() *GamerUseCdkS2C_MsgID {
	p := new(GamerUseCdkS2C_MsgID)
	*p = x
	return p
}
func (x GamerUseCdkS2C_MsgID) String() string {
	return proto.EnumName(GamerUseCdkS2C_MsgID_name, int32(x))
}
func (x *GamerUseCdkS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerUseCdkS2C_MsgID_value, data, "GamerUseCdkS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerUseCdkS2C_MsgID(value)
	return nil
}
func (GamerUseCdkS2C_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{3, 0} }

type GamerSendCdkSwitchS2C_MsgID int32

const (
	GamerSendCdkSwitchS2C_eMsgID GamerSendCdkSwitchS2C_MsgID = 544
)

var GamerSendCdkSwitchS2C_MsgID_name = map[int32]string{
	544: "eMsgID",
}
var GamerSendCdkSwitchS2C_MsgID_value = map[string]int32{
	"eMsgID": 544,
}

func (x GamerSendCdkSwitchS2C_MsgID) Enum() *GamerSendCdkSwitchS2C_MsgID {
	p := new(GamerSendCdkSwitchS2C_MsgID)
	*p = x
	return p
}
func (x GamerSendCdkSwitchS2C_MsgID) String() string {
	return proto.EnumName(GamerSendCdkSwitchS2C_MsgID_name, int32(x))
}
func (x *GamerSendCdkSwitchS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamerSendCdkSwitchS2C_MsgID_value, data, "GamerSendCdkSwitchS2C_MsgID")
	if err != nil {
		return err
	}
	*x = GamerSendCdkSwitchS2C_MsgID(value)
	return nil
}
func (GamerSendCdkSwitchS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor12, []int{4, 0}
}

// 兑换码模板
type CdkeyTemplate struct {
	// 模板ID(批次ID)
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 模板名称
	TemplateName *string `protobuf:"bytes,2,opt,name=template_name" json:"template_name,omitempty"`
	// 渠道名称
	ChannelName *string `protobuf:"bytes,3,opt,name=channel_name" json:"channel_name,omitempty"`
	// 兑换码类型（1 2 3 4）
	CdkType *CdkType `protobuf:"varint,4,opt,name=cdk_type,enum=CdkType" json:"cdk_type,omitempty"`
	// 兑换码奖励字符串 后台查询用
	RewardsStr *string `protobuf:"bytes,5,opt,name=rewards_str" json:"rewards_str,omitempty"`
	// 兑换码奖励列表
	Rewards []*ItemVaryConfig `protobuf:"bytes,6,rep,name=rewards" json:"rewards,omitempty"`
	// 兑换码生成时间
	BeginTime *int64 `protobuf:"varint,7,opt,name=begin_time" json:"begin_time,omitempty"`
	// 兑换码失效时间
	EndTime *int64 `protobuf:"varint,8,opt,name=end_time" json:"end_time,omitempty"`
	// 创造cdk个数
	CreateNum *int32 `protobuf:"varint,9,opt,name=create_num" json:"create_num,omitempty"`
	// 最大可使用次数(-1:无上限)
	MaxUseNum *int32 `protobuf:"varint,10,opt,name=max_use_num" json:"max_use_num,omitempty"`
	// 当前已使用次数
	TotalUse *int32 `protobuf:"varint,11,opt,name=total_use" json:"total_use,omitempty"`
	// 0正常 1禁用
	Status *int32 `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
	// 自定义兑换码长度
	CustomLength *int32 `protobuf:"varint,13,opt,name=customLength" json:"customLength,omitempty"`
	// 自定义兑换码前缀
	CustomPrefix *string `protobuf:"bytes,14,opt,name=customPrefix" json:"customPrefix,omitempty"`
	// 单用户同批次cdk使用次数
	BatchCdkUseNum   *int32 `protobuf:"varint,15,opt,name=batchCdkUseNum" json:"batchCdkUseNum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CdkeyTemplate) Reset()                    { *m = CdkeyTemplate{} }
func (m *CdkeyTemplate) String() string            { return proto.CompactTextString(m) }
func (*CdkeyTemplate) ProtoMessage()               {}
func (*CdkeyTemplate) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *CdkeyTemplate) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CdkeyTemplate) GetTemplateName() string {
	if m != nil && m.TemplateName != nil {
		return *m.TemplateName
	}
	return ""
}

func (m *CdkeyTemplate) GetChannelName() string {
	if m != nil && m.ChannelName != nil {
		return *m.ChannelName
	}
	return ""
}

func (m *CdkeyTemplate) GetCdkType() CdkType {
	if m != nil && m.CdkType != nil {
		return *m.CdkType
	}
	return CdkType_CT_OneUseOne
}

func (m *CdkeyTemplate) GetRewardsStr() string {
	if m != nil && m.RewardsStr != nil {
		return *m.RewardsStr
	}
	return ""
}

func (m *CdkeyTemplate) GetRewards() []*ItemVaryConfig {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *CdkeyTemplate) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

func (m *CdkeyTemplate) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *CdkeyTemplate) GetCreateNum() int32 {
	if m != nil && m.CreateNum != nil {
		return *m.CreateNum
	}
	return 0
}

func (m *CdkeyTemplate) GetMaxUseNum() int32 {
	if m != nil && m.MaxUseNum != nil {
		return *m.MaxUseNum
	}
	return 0
}

func (m *CdkeyTemplate) GetTotalUse() int32 {
	if m != nil && m.TotalUse != nil {
		return *m.TotalUse
	}
	return 0
}

func (m *CdkeyTemplate) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *CdkeyTemplate) GetCustomLength() int32 {
	if m != nil && m.CustomLength != nil {
		return *m.CustomLength
	}
	return 0
}

func (m *CdkeyTemplate) GetCustomPrefix() string {
	if m != nil && m.CustomPrefix != nil {
		return *m.CustomPrefix
	}
	return ""
}

func (m *CdkeyTemplate) GetBatchCdkUseNum() int32 {
	if m != nil && m.BatchCdkUseNum != nil {
		return *m.BatchCdkUseNum
	}
	return 0
}

// 兑换码信息
type CdkeyList struct {
	// 模板ID(批次ID) CdkeyTemplate.id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 兑换码字符
	CdkStr *string `protobuf:"bytes,2,opt,name=cdk_str" json:"cdk_str,omitempty"`
	// 当前已使用次数(使用标记)
	OneUseNum        *int32 `protobuf:"varint,3,opt,name=one_use_num" json:"one_use_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CdkeyList) Reset()                    { *m = CdkeyList{} }
func (m *CdkeyList) String() string            { return proto.CompactTextString(m) }
func (*CdkeyList) ProtoMessage()               {}
func (*CdkeyList) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *CdkeyList) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CdkeyList) GetCdkStr() string {
	if m != nil && m.CdkStr != nil {
		return *m.CdkStr
	}
	return ""
}

func (m *CdkeyList) GetOneUseNum() int32 {
	if m != nil && m.OneUseNum != nil {
		return *m.OneUseNum
	}
	return 0
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~客户端接口~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// 使用兑换码
type GamerUseCdkC2S struct {
	// 兑换码字符
	CdkStr           *string `protobuf:"bytes,1,opt,name=cdkStr" json:"cdkStr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GamerUseCdkC2S) Reset()                    { *m = GamerUseCdkC2S{} }
func (m *GamerUseCdkC2S) String() string            { return proto.CompactTextString(m) }
func (*GamerUseCdkC2S) ProtoMessage()               {}
func (*GamerUseCdkC2S) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *GamerUseCdkC2S) GetCdkStr() string {
	if m != nil && m.CdkStr != nil {
		return *m.CdkStr
	}
	return ""
}

// 返回 使用兑换码
type GamerUseCdkS2C struct {
	// 使用结果 0成功 1兑换码不存在 2兑换码禁止使用 3兑换码已过期 4兑换码不可使用 5兑换码未到使用时间
	UseRes           *int32 `protobuf:"varint,1,opt,name=use_res" json:"use_res,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerUseCdkS2C) Reset()                    { *m = GamerUseCdkS2C{} }
func (m *GamerUseCdkS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerUseCdkS2C) ProtoMessage()               {}
func (*GamerUseCdkS2C) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *GamerUseCdkS2C) GetUseRes() int32 {
	if m != nil && m.UseRes != nil {
		return *m.UseRes
	}
	return 0
}

// 兑换码开关
type GamerSendCdkSwitchS2C struct {
	// 是否显示兑换码
	Show             *bool  `protobuf:"varint,1,opt,name=show" json:"show,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerSendCdkSwitchS2C) Reset()                    { *m = GamerSendCdkSwitchS2C{} }
func (m *GamerSendCdkSwitchS2C) String() string            { return proto.CompactTextString(m) }
func (*GamerSendCdkSwitchS2C) ProtoMessage()               {}
func (*GamerSendCdkSwitchS2C) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *GamerSendCdkSwitchS2C) GetShow() bool {
	if m != nil && m.Show != nil {
		return *m.Show
	}
	return false
}

func init() {
	proto.RegisterType((*CdkeyTemplate)(nil), "CdkeyTemplate")
	proto.RegisterType((*CdkeyList)(nil), "CdkeyList")
	proto.RegisterType((*GamerUseCdkC2S)(nil), "GamerUseCdkC2S")
	proto.RegisterType((*GamerUseCdkS2C)(nil), "GamerUseCdkS2C")
	proto.RegisterType((*GamerSendCdkSwitchS2C)(nil), "GamerSendCdkSwitchS2C")
	proto.RegisterEnum("CdkType", CdkType_name, CdkType_value)
	proto.RegisterEnum("GamerUseCdkC2S_MsgID", GamerUseCdkC2S_MsgID_name, GamerUseCdkC2S_MsgID_value)
	proto.RegisterEnum("GamerUseCdkS2C_MsgID", GamerUseCdkS2C_MsgID_name, GamerUseCdkS2C_MsgID_value)
	proto.RegisterEnum("GamerSendCdkSwitchS2C_MsgID", GamerSendCdkSwitchS2C_MsgID_name, GamerSendCdkSwitchS2C_MsgID_value)
}

func init() { proto.RegisterFile("cdkey.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x95, 0xc4, 0x49, 0xec, 0xb1, 0xe3, 0x18, 0xd3, 0xa2, 0x55, 0x4f, 0x51, 0x4e, 0x15,
	0x87, 0x1c, 0x72, 0x80, 0x03, 0xe2, 0x64, 0x24, 0x54, 0xa9, 0x05, 0xa4, 0xa4, 0x5c, 0xad, 0xad,
	0x33, 0xb5, 0x2d, 0xe2, 0xdd, 0x68, 0x77, 0xad, 0x34, 0x4f, 0x03, 0xaf, 0xc4, 0x1b, 0x31, 0xbb,
	0x36, 0x45, 0x91, 0xe8, 0xc5, 0xf2, 0x7c, 0x9a, 0x7f, 0xe6, 0x9f, 0x7f, 0x21, 0x2c, 0x76, 0x3f,
	0xf0, 0xb4, 0x3a, 0x28, 0x69, 0xe4, 0x55, 0x54, 0xc8, 0xa6, 0x91, 0xa2, 0xaf, 0xa0, 0x90, 0xe2,
	0xb1, 0xfb, 0x5f, 0xfe, 0x1e, 0xc2, 0x2c, 0xb3, 0x9d, 0x5b, 0x6c, 0x0e, 0x7b, 0x6e, 0x30, 0x05,
	0x18, 0xd6, 0x3b, 0x36, 0x58, 0x0c, 0xae, 0xc7, 0xe9, 0x25, 0xcc, 0x4c, 0xcf, 0x73, 0xc1, 0x1b,
	0x64, 0x43, 0xc2, 0x41, 0x7a, 0x01, 0x51, 0x51, 0x71, 0x21, 0x70, 0xdf, 0xd1, 0x91, 0xa3, 0x57,
	0xe0, 0xd3, 0xce, 0xdc, 0x9c, 0x0e, 0xc8, 0x3c, 0x22, 0xf1, 0xda, 0x5f, 0xd1, 0xe8, 0x2d, 0xd5,
	0xe9, 0x6b, 0x08, 0x15, 0x1e, 0xb9, 0xda, 0xe9, 0x5c, 0x1b, 0xc5, 0xc6, 0x4e, 0xb0, 0x80, 0x69,
	0x0f, 0xd9, 0x64, 0x31, 0xba, 0x0e, 0xd7, 0xf3, 0xd5, 0x0d, 0xad, 0xfb, 0xce, 0xd5, 0x29, 0x23,
	0x87, 0x75, 0x99, 0x92, 0x99, 0x07, 0x2c, 0x6b, 0x91, 0x9b, 0x9a, 0xd6, 0x4c, 0x49, 0x35, 0x4a,
	0x13, 0xf0, 0x51, 0xec, 0x3a, 0xe2, 0x3b, 0x42, 0x5d, 0x85, 0x42, 0xe7, 0xb1, 0x6d, 0x58, 0xe0,
	0x9c, 0xd3, 0xc2, 0x86, 0x3f, 0xe5, 0xad, 0xee, 0x20, 0x38, 0xf8, 0x0a, 0x02, 0x23, 0x0d, 0xdf,
	0x5b, 0xcc, 0x42, 0x87, 0x62, 0x98, 0x68, 0xc3, 0x4d, 0xab, 0x59, 0xe4, 0x6a, 0x7b, 0x5a, 0xab,
	0x8d, 0x6c, 0x6e, 0x51, 0x94, 0xa6, 0x62, 0xb3, 0x73, 0xfa, 0x4d, 0xe1, 0x63, 0xfd, 0xc4, 0x62,
	0xe7, 0xff, 0x0d, 0xc4, 0x0f, 0xdc, 0x14, 0x15, 0x1d, 0x79, 0xaf, 0xf1, 0x0b, 0xad, 0x99, 0xdb,
	0xee, 0xe5, 0x47, 0x08, 0x5c, 0xa4, 0xb7, 0xb5, 0x36, 0x67, 0x71, 0xce, 0x61, 0x6a, 0x13, 0xb2,
	0x09, 0x74, 0x41, 0x92, 0x4b, 0x29, 0xf0, 0xd9, 0xe5, 0xc8, 0xc9, 0xdf, 0x41, 0xfc, 0x99, 0x52,
	0x55, 0x34, 0x93, 0xc6, 0x64, 0xeb, 0x8d, 0x35, 0x49, 0xba, 0x0d, 0xc9, 0xec, 0x9c, 0x60, 0x79,
	0x01, 0xe3, 0x3b, 0x5d, 0xde, 0x7c, 0x4a, 0x43, 0x98, 0xa0, 0xfb, 0x4b, 0x7e, 0x7a, 0xcb, 0xf7,
	0x67, 0xba, 0xcd, 0x3a, 0xb3, 0xfb, 0xec, 0x68, 0x85, 0xba, 0x33, 0xf0, 0x82, 0xf0, 0x03, 0x5c,
	0x3a, 0xe1, 0x86, 0x72, 0xb5, 0xca, 0x63, 0x4d, 0x47, 0x59, 0x7d, 0x04, 0x9e, 0xae, 0xe4, 0xd1,
	0x89, 0xfd, 0xff, 0x89, 0x7f, 0x79, 0x6f, 0xef, 0x61, 0xfa, 0xf7, 0x91, 0x13, 0x88, 0xb2, 0x6d,
	0xfe, 0x55, 0x20, 0x39, 0xa0, 0x6f, 0x32, 0xa0, 0xc0, 0x67, 0xcf, 0xe4, 0x4e, 0x2a, 0x4c, 0x86,
	0x3d, 0xb2, 0x45, 0xdf, 0x65, 0xdf, 0x2f, 0xfe, 0x87, 0x5c, 0x9b, 0xf7, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x29, 0xc3, 0x58, 0x53, 0xbf, 0x02, 0x00, 0x00,
}
