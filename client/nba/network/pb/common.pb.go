// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ItemToken int32

const (
	ItemToken_Regular ItemToken = 1
)

var ItemToken_name = map[int32]string{
	1: "Regular",
}
var ItemToken_value = map[string]int32{
	"Regular": 1,
}

func (x ItemToken) Enum() *ItemToken {
	p := new(ItemToken)
	*p = x
	return p
}
func (x ItemToken) String() string {
	return proto.EnumName(ItemToken_name, int32(x))
}
func (x *ItemToken) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemToken_value, data, "ItemToken")
	if err != nil {
		return err
	}
	*x = ItemToken(value)
	return nil
}
func (ItemToken) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

// 玩家主信息
type Gamer struct {
	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Sex   *int32  `protobuf:"varint,3,opt,name=sex" json:"sex,omitempty"`
	Level *int32  `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	// 账号id
	UserId *int64       `protobuf:"varint,5,opt,name=userId" json:"userId,omitempty"`
	Sign   *string      `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	Rmb    *int32       `protobuf:"varint,7,opt,name=rmb" json:"rmb,omitempty"`
	Vip    *int32       `protobuf:"varint,8,opt,name=vip" json:"vip,omitempty"`
	State  *GamerStatus `protobuf:"varint,9,opt,name=state,enum=GamerStatus" json:"state,omitempty"`
	// 玩家所属区服id
	LSId *int32 `protobuf:"varint,10,opt,name=LSId" json:"LSId,omitempty"`
	// 玩家所在logic服id
	PSId *int32 `protobuf:"varint,11,opt,name=PSId" json:"PSId,omitempty"`
	// SDK的账户id
	SdkUid *string `protobuf:"bytes,12,opt,name=sdkUid" json:"sdkUid,omitempty"`
	// 重连session
	ReconnectSession *string `protobuf:"bytes,14,opt,name=ReconnectSession" json:"ReconnectSession,omitempty"`
	// 客户端版本号(major.minor.build.buildsvn.res.ressvn)
	ClientVersion *string `protobuf:"bytes,15,opt,name=clientVersion" json:"clientVersion,omitempty"`
	// 玩家体力值上限
	MaxEnergy *int32 `protobuf:"varint,16,opt,name=MaxEnergy" json:"MaxEnergy,omitempty"`
	// 改名次数
	RenameNum *int32 `protobuf:"varint,17,opt,name=renameNum" json:"renameNum,omitempty"`
	// 初始队伍信息
	TeamInfo *RoleTeamInfo `protobuf:"bytes,19,opt,name=teamInfo" json:"teamInfo,omitempty"`
	// 是否是新玩家
	GamerNewStatus *GamerIsNewStatus `protobuf:"varint,20,opt,name=gamerNewStatus,enum=GamerIsNewStatus" json:"gamerNewStatus,omitempty"`
	// 战斗力
	Fap *uint64 `protobuf:"varint,21,opt,name=fap" json:"fap,omitempty"`
	// 用户登录渠道
	Channel *string `protobuf:"bytes,23,opt,name=Channel" json:"Channel,omitempty"`
	// 账号状态（停封/禁言...）
	AccountStatus *AccountStatus `protobuf:"varint,24,opt,name=accountStatus,enum=AccountStatus" json:"accountStatus,omitempty"`
	// 设备信息
	DeviceData *DeviceData `protobuf:"bytes,25,opt,name=deviceData" json:"deviceData,omitempty"`
	// pvp排名
	PvpRank *int32 `protobuf:"varint,26,opt,name=pvpRank" json:"pvpRank,omitempty"`
	// 有某些月卡:1普通月卡的结束时间,2表示至尊月卡的结束时间。
	HaveMonthCard []int64 `protobuf:"varint,34,rep,name=haveMonthCard" json:"haveMonthCard,omitempty"`
	// 需要开防沉迷不
	IsKid *bool `protobuf:"varint,35,opt,name=isKid" json:"isKid,omitempty"`
	// 首充状态
	FirstRechargeState *FirstRechargeState `protobuf:"varint,36,opt,name=firstRechargeState,enum=FirstRechargeState" json:"firstRechargeState,omitempty"`
	// 防沉迷计时器给的下线时间
	KidShouldLogOut *int64 `protobuf:"varint,37,opt,name=kidShouldLogOut" json:"kidShouldLogOut,omitempty"`
	// 已使用过的CDKs
	ReCdks []*ReceivedCdkData `protobuf:"bytes,39,rep,name=reCdks" json:"reCdks,omitempty"`
	// 联盟id
	LeagueId *int32 `protobuf:"varint,40,opt,name=leagueId" json:"leagueId,omitempty"`
	// 联盟名字
	LeagueName *string `protobuf:"bytes,41,opt,name=leagueName" json:"leagueName,omitempty"`
	// 最强球员id
	BestPlayerId *int32 `protobuf:"varint,42,opt,name=bestPlayerId" json:"bestPlayerId,omitempty"`
	// 是否创建了自定义球员
	ExistCustomPlayer *bool `protobuf:"varint,43,opt,name=existCustomPlayer" json:"existCustomPlayer,omitempty"`
	// 活动：重置钻石直购id
	ResetDiamondPurchaseId *int32 `protobuf:"varint,44,opt,name=resetDiamondPurchaseId" json:"resetDiamondPurchaseId,omitempty"`
	XXX_unrecognized       []byte `json:"-"`
}

func (m *Gamer) Reset()                    { *m = Gamer{} }
func (m *Gamer) String() string            { return proto.CompactTextString(m) }
func (*Gamer) ProtoMessage()               {}
func (*Gamer) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *Gamer) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Gamer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Gamer) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *Gamer) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Gamer) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Gamer) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

func (m *Gamer) GetRmb() int32 {
	if m != nil && m.Rmb != nil {
		return *m.Rmb
	}
	return 0
}

func (m *Gamer) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *Gamer) GetState() GamerStatus {
	if m != nil && m.State != nil {
		return *m.State
	}
	return GamerStatus_offline
}

func (m *Gamer) GetLSId() int32 {
	if m != nil && m.LSId != nil {
		return *m.LSId
	}
	return 0
}

func (m *Gamer) GetPSId() int32 {
	if m != nil && m.PSId != nil {
		return *m.PSId
	}
	return 0
}

func (m *Gamer) GetSdkUid() string {
	if m != nil && m.SdkUid != nil {
		return *m.SdkUid
	}
	return ""
}

func (m *Gamer) GetReconnectSession() string {
	if m != nil && m.ReconnectSession != nil {
		return *m.ReconnectSession
	}
	return ""
}

func (m *Gamer) GetClientVersion() string {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return ""
}

func (m *Gamer) GetMaxEnergy() int32 {
	if m != nil && m.MaxEnergy != nil {
		return *m.MaxEnergy
	}
	return 0
}

func (m *Gamer) GetRenameNum() int32 {
	if m != nil && m.RenameNum != nil {
		return *m.RenameNum
	}
	return 0
}

func (m *Gamer) GetTeamInfo() *RoleTeamInfo {
	if m != nil {
		return m.TeamInfo
	}
	return nil
}

func (m *Gamer) GetGamerNewStatus() GamerIsNewStatus {
	if m != nil && m.GamerNewStatus != nil {
		return *m.GamerNewStatus
	}
	return GamerIsNewStatus_newGamer
}

func (m *Gamer) GetFap() uint64 {
	if m != nil && m.Fap != nil {
		return *m.Fap
	}
	return 0
}

func (m *Gamer) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *Gamer) GetAccountStatus() AccountStatus {
	if m != nil && m.AccountStatus != nil {
		return *m.AccountStatus
	}
	return AccountStatus_AccountStatusNormal
}

func (m *Gamer) GetDeviceData() *DeviceData {
	if m != nil {
		return m.DeviceData
	}
	return nil
}

func (m *Gamer) GetPvpRank() int32 {
	if m != nil && m.PvpRank != nil {
		return *m.PvpRank
	}
	return 0
}

func (m *Gamer) GetHaveMonthCard() []int64 {
	if m != nil {
		return m.HaveMonthCard
	}
	return nil
}

func (m *Gamer) GetIsKid() bool {
	if m != nil && m.IsKid != nil {
		return *m.IsKid
	}
	return false
}

func (m *Gamer) GetFirstRechargeState() FirstRechargeState {
	if m != nil && m.FirstRechargeState != nil {
		return *m.FirstRechargeState
	}
	return FirstRechargeState_FRS_NoRecharge
}

func (m *Gamer) GetKidShouldLogOut() int64 {
	if m != nil && m.KidShouldLogOut != nil {
		return *m.KidShouldLogOut
	}
	return 0
}

func (m *Gamer) GetReCdks() []*ReceivedCdkData {
	if m != nil {
		return m.ReCdks
	}
	return nil
}

func (m *Gamer) GetLeagueId() int32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *Gamer) GetLeagueName() string {
	if m != nil && m.LeagueName != nil {
		return *m.LeagueName
	}
	return ""
}

func (m *Gamer) GetBestPlayerId() int32 {
	if m != nil && m.BestPlayerId != nil {
		return *m.BestPlayerId
	}
	return 0
}

func (m *Gamer) GetExistCustomPlayer() bool {
	if m != nil && m.ExistCustomPlayer != nil {
		return *m.ExistCustomPlayer
	}
	return false
}

func (m *Gamer) GetResetDiamondPurchaseId() int32 {
	if m != nil && m.ResetDiamondPurchaseId != nil {
		return *m.ResetDiamondPurchaseId
	}
	return 0
}

// 队伍信息
type RoleTeamInfo struct {
	// icon 原id
	TeamIcon *int32 `protobuf:"varint,1,opt,name=teamIcon" json:"teamIcon,omitempty"`
	// 分区 (1东部, 2西部)
	TeamPart *int32 `protobuf:"varint,2,opt,name=teamPart" json:"teamPart,omitempty"`
	// 队衣id
	TeamShirt *int32 `protobuf:"varint,3,opt,name=teamShirt" json:"teamShirt,omitempty"`
	// 首选球员id
	FirstPid         *int32 `protobuf:"varint,4,opt,name=firstPid" json:"firstPid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RoleTeamInfo) Reset()                    { *m = RoleTeamInfo{} }
func (m *RoleTeamInfo) String() string            { return proto.CompactTextString(m) }
func (*RoleTeamInfo) ProtoMessage()               {}
func (*RoleTeamInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *RoleTeamInfo) GetTeamIcon() int32 {
	if m != nil && m.TeamIcon != nil {
		return *m.TeamIcon
	}
	return 0
}

func (m *RoleTeamInfo) GetTeamPart() int32 {
	if m != nil && m.TeamPart != nil {
		return *m.TeamPart
	}
	return 0
}

func (m *RoleTeamInfo) GetTeamShirt() int32 {
	if m != nil && m.TeamShirt != nil {
		return *m.TeamShirt
	}
	return 0
}

func (m *RoleTeamInfo) GetFirstPid() int32 {
	if m != nil && m.FirstPid != nil {
		return *m.FirstPid
	}
	return 0
}

// 空消息
type BlankMsg struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *BlankMsg) Reset()                    { *m = BlankMsg{} }
func (m *BlankMsg) String() string            { return proto.CompactTextString(m) }
func (*BlankMsg) ProtoMessage()               {}
func (*BlankMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

// 设备信息
type DeviceData struct {
	// 平台
	Platform *string `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	// 设备码
	Device *string `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	// mac地址
	MacAddr *string `protobuf:"bytes,3,opt,name=macAddr" json:"macAddr,omitempty"`
	// 系统语言
	SystemLanguage *string `protobuf:"bytes,4,opt,name=systemLanguage" json:"systemLanguage,omitempty"`
	// 设备机型
	DeviceType *string `protobuf:"bytes,5,opt,name=deviceType" json:"deviceType,omitempty"`
	// 操作系统版本号
	OsVersion *string `protobuf:"bytes,6,opt,name=osVersion" json:"osVersion,omitempty"`
	// 客户端IP
	ClientIP         *string `protobuf:"bytes,9,opt,name=clientIP" json:"clientIP,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeviceData) Reset()                    { *m = DeviceData{} }
func (m *DeviceData) String() string            { return proto.CompactTextString(m) }
func (*DeviceData) ProtoMessage()               {}
func (*DeviceData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *DeviceData) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *DeviceData) GetDevice() string {
	if m != nil && m.Device != nil {
		return *m.Device
	}
	return ""
}

func (m *DeviceData) GetMacAddr() string {
	if m != nil && m.MacAddr != nil {
		return *m.MacAddr
	}
	return ""
}

func (m *DeviceData) GetSystemLanguage() string {
	if m != nil && m.SystemLanguage != nil {
		return *m.SystemLanguage
	}
	return ""
}

func (m *DeviceData) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *DeviceData) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *DeviceData) GetClientIP() string {
	if m != nil && m.ClientIP != nil {
		return *m.ClientIP
	}
	return ""
}

type ReceivedCdkData struct {
	// cdk批次ID
	CdkTemplateId *int32 `protobuf:"varint,1,opt,name=cdkTemplateId" json:"cdkTemplateId,omitempty"`
	// cdk字符
	CdkStr *string `protobuf:"bytes,2,opt,name=cdkStr" json:"cdkStr,omitempty"`
	// 使用次数
	UseTime          *int32 `protobuf:"varint,3,opt,name=useTime" json:"useTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReceivedCdkData) Reset()                    { *m = ReceivedCdkData{} }
func (m *ReceivedCdkData) String() string            { return proto.CompactTextString(m) }
func (*ReceivedCdkData) ProtoMessage()               {}
func (*ReceivedCdkData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

func (m *ReceivedCdkData) GetCdkTemplateId() int32 {
	if m != nil && m.CdkTemplateId != nil {
		return *m.CdkTemplateId
	}
	return 0
}

func (m *ReceivedCdkData) GetCdkStr() string {
	if m != nil && m.CdkStr != nil {
		return *m.CdkStr
	}
	return ""
}

func (m *ReceivedCdkData) GetUseTime() int32 {
	if m != nil && m.UseTime != nil {
		return *m.UseTime
	}
	return 0
}

// 货币类型
type CurrencyConfig struct {
	TypeId           *int32 `protobuf:"varint,1,opt,name=typeId" json:"typeId,omitempty"`
	Number           *int64 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CurrencyConfig) Reset()                    { *m = CurrencyConfig{} }
func (m *CurrencyConfig) String() string            { return proto.CompactTextString(m) }
func (*CurrencyConfig) ProtoMessage()               {}
func (*CurrencyConfig) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

func (m *CurrencyConfig) GetTypeId() int32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *CurrencyConfig) GetNumber() int64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

// 玩家资源数据
type GamerReserveData struct {
	Currencys        []*CurrencyConfig `protobuf:"bytes,1,rep,name=currencys" json:"currencys,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GamerReserveData) Reset()                    { *m = GamerReserveData{} }
func (m *GamerReserveData) String() string            { return proto.CompactTextString(m) }
func (*GamerReserveData) ProtoMessage()               {}
func (*GamerReserveData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

func (m *GamerReserveData) GetCurrencys() []*CurrencyConfig {
	if m != nil {
		return m.Currencys
	}
	return nil
}

// 玩家生涯数据类型
type CareerConfig struct {
	CareerType       *GamerCareerDataType `protobuf:"varint,1,opt,name=careerType,enum=GamerCareerDataType" json:"careerType,omitempty"`
	Data             *int64               `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CareerConfig) Reset()                    { *m = CareerConfig{} }
func (m *CareerConfig) String() string            { return proto.CompactTextString(m) }
func (*CareerConfig) ProtoMessage()               {}
func (*CareerConfig) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

func (m *CareerConfig) GetCareerType() GamerCareerDataType {
	if m != nil && m.CareerType != nil {
		return *m.CareerType
	}
	return GamerCareerDataType_GetPlayer
}

func (m *CareerConfig) GetData() int64 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

// 玩家生涯数据
type GamerCareerData struct {
	Careers          []*CareerConfig `protobuf:"bytes,1,rep,name=careers" json:"careers,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GamerCareerData) Reset()                    { *m = GamerCareerData{} }
func (m *GamerCareerData) String() string            { return proto.CompactTextString(m) }
func (*GamerCareerData) ProtoMessage()               {}
func (*GamerCareerData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

func (m *GamerCareerData) GetCareers() []*CareerConfig {
	if m != nil {
		return m.Careers
	}
	return nil
}

// 服务器时间
type ServerTime struct {
	Timestamp        *int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Year             *int32 `protobuf:"varint,2,opt,name=year" json:"year,omitempty"`
	Month            *int32 `protobuf:"varint,3,opt,name=month" json:"month,omitempty"`
	Day              *int32 `protobuf:"varint,4,opt,name=day" json:"day,omitempty"`
	Hour             *int32 `protobuf:"varint,5,opt,name=hour" json:"hour,omitempty"`
	Minute           *int32 `protobuf:"varint,6,opt,name=minute" json:"minute,omitempty"`
	Second           *int32 `protobuf:"varint,7,opt,name=second" json:"second,omitempty"`
	Timezone         *int32 `protobuf:"varint,8,opt,name=timezone" json:"timezone,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ServerTime) Reset()                    { *m = ServerTime{} }
func (m *ServerTime) String() string            { return proto.CompactTextString(m) }
func (*ServerTime) ProtoMessage()               {}
func (*ServerTime) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

func (m *ServerTime) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ServerTime) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *ServerTime) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *ServerTime) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *ServerTime) GetHour() int32 {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return 0
}

func (m *ServerTime) GetMinute() int32 {
	if m != nil && m.Minute != nil {
		return *m.Minute
	}
	return 0
}

func (m *ServerTime) GetSecond() int32 {
	if m != nil && m.Second != nil {
		return *m.Second
	}
	return 0
}

func (m *ServerTime) GetTimezone() int32 {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return 0
}

// 时间记录
type TimeRecord struct {
	// 建立时间
	Create *int64 `protobuf:"varint,1,opt,name=create" json:"create,omitempty"`
	// 最后一次查询全服邮件的时间戳
	LastMail *int64 `protobuf:"varint,2,opt,name=lastMail" json:"lastMail,omitempty"`
	// 最后签到时间戳
	LastSign *int64 `protobuf:"varint,3,opt,name=lastSign" json:"lastSign,omitempty"`
	// 最后登陆时间
	LastLogin *int64 `protobuf:"varint,4,opt,name=lastLogin" json:"lastLogin,omitempty"`
	// 最后下线时间
	LastLogout *int64 `protobuf:"varint,5,opt,name=lastLogout" json:"lastLogout,omitempty"`
	// 玩家体力恢复时间戳
	RecoverTime *int64 `protobuf:"varint,6,opt,name=RecoverTime" json:"RecoverTime,omitempty"`
	// 联盟玩法刷新时间
	AlliancePlayTime *int64 `protobuf:"varint,7,opt,name=alliancePlayTime" json:"alliancePlayTime,omitempty"`
	// 联盟活跃值领取时间
	AllianceActive *int64 `protobuf:"varint,8,opt,name=AllianceActive" json:"AllianceActive,omitempty"`
	// (防沉迷用)今天还能玩多久
	LeftForKidTodayTime *int64 `protobuf:"varint,9,opt,name=leftForKidTodayTime" json:"leftForKidTodayTime,omitempty"`
	// 不再提醒全国直播的截止时间
	DontShowLiveNoticeAgainTodayTime *int64 `protobuf:"varint,10,opt,name=DontShowLiveNoticeAgainTodayTime" json:"DontShowLiveNoticeAgainTodayTime,omitempty"`
	// 上一级升级累计花费时间(秒)
	LastLevelUpTotalTime *int32 `protobuf:"varint,11,opt,name=lastLevelUpTotalTime" json:"lastLevelUpTotalTime,omitempty"`
	// 本级升级累计花费时间(秒)
	CurrentLevelUpTotalTime *int32 `protobuf:"varint,12,opt,name=currentLevelUpTotalTime" json:"currentLevelUpTotalTime,omitempty"`
	// 本次升级累计开始时间（上线时间或升级时间）
	ThisTimeLevelUpBeginTime *int64 `protobuf:"varint,13,opt,name=thisTimeLevelUpBeginTime" json:"thisTimeLevelUpBeginTime,omitempty"`
	// 常规赛、常规赛挑战赛、季后赛使用跳过比赛功能，比赛输了后的冷却结束时间戳（秒）
	JumpFightEndCoolTime *int64 `protobuf:"varint,14,opt,name=jumpFightEndCoolTime" json:"jumpFightEndCoolTime,omitempty"`
	// 累计登录天数
	LoginDays *int32 `protobuf:"varint,15,opt,name=loginDays" json:"loginDays,omitempty"`
	// 连续登录天数(中断就重置)
	ContinueLoginDays *int32 `protobuf:"varint,16,opt,name=continueLoginDays" json:"continueLoginDays,omitempty"`
	// 上次更新日期的时间戳(秒)
	LastUpdateDayTimeStamp *int64 `protobuf:"varint,17,opt,name=lastUpdateDayTimeStamp" json:"lastUpdateDayTimeStamp,omitempty"`
	XXX_unrecognized       []byte `json:"-"`
}

func (m *TimeRecord) Reset()                    { *m = TimeRecord{} }
func (m *TimeRecord) String() string            { return proto.CompactTextString(m) }
func (*TimeRecord) ProtoMessage()               {}
func (*TimeRecord) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

func (m *TimeRecord) GetCreate() int64 {
	if m != nil && m.Create != nil {
		return *m.Create
	}
	return 0
}

func (m *TimeRecord) GetLastMail() int64 {
	if m != nil && m.LastMail != nil {
		return *m.LastMail
	}
	return 0
}

func (m *TimeRecord) GetLastSign() int64 {
	if m != nil && m.LastSign != nil {
		return *m.LastSign
	}
	return 0
}

func (m *TimeRecord) GetLastLogin() int64 {
	if m != nil && m.LastLogin != nil {
		return *m.LastLogin
	}
	return 0
}

func (m *TimeRecord) GetLastLogout() int64 {
	if m != nil && m.LastLogout != nil {
		return *m.LastLogout
	}
	return 0
}

func (m *TimeRecord) GetRecoverTime() int64 {
	if m != nil && m.RecoverTime != nil {
		return *m.RecoverTime
	}
	return 0
}

func (m *TimeRecord) GetAlliancePlayTime() int64 {
	if m != nil && m.AlliancePlayTime != nil {
		return *m.AlliancePlayTime
	}
	return 0
}

func (m *TimeRecord) GetAllianceActive() int64 {
	if m != nil && m.AllianceActive != nil {
		return *m.AllianceActive
	}
	return 0
}

func (m *TimeRecord) GetLeftForKidTodayTime() int64 {
	if m != nil && m.LeftForKidTodayTime != nil {
		return *m.LeftForKidTodayTime
	}
	return 0
}

func (m *TimeRecord) GetDontShowLiveNoticeAgainTodayTime() int64 {
	if m != nil && m.DontShowLiveNoticeAgainTodayTime != nil {
		return *m.DontShowLiveNoticeAgainTodayTime
	}
	return 0
}

func (m *TimeRecord) GetLastLevelUpTotalTime() int32 {
	if m != nil && m.LastLevelUpTotalTime != nil {
		return *m.LastLevelUpTotalTime
	}
	return 0
}

func (m *TimeRecord) GetCurrentLevelUpTotalTime() int32 {
	if m != nil && m.CurrentLevelUpTotalTime != nil {
		return *m.CurrentLevelUpTotalTime
	}
	return 0
}

func (m *TimeRecord) GetThisTimeLevelUpBeginTime() int64 {
	if m != nil && m.ThisTimeLevelUpBeginTime != nil {
		return *m.ThisTimeLevelUpBeginTime
	}
	return 0
}

func (m *TimeRecord) GetJumpFightEndCoolTime() int64 {
	if m != nil && m.JumpFightEndCoolTime != nil {
		return *m.JumpFightEndCoolTime
	}
	return 0
}

func (m *TimeRecord) GetLoginDays() int32 {
	if m != nil && m.LoginDays != nil {
		return *m.LoginDays
	}
	return 0
}

func (m *TimeRecord) GetContinueLoginDays() int32 {
	if m != nil && m.ContinueLoginDays != nil {
		return *m.ContinueLoginDays
	}
	return 0
}

func (m *TimeRecord) GetLastUpdateDayTimeStamp() int64 {
	if m != nil && m.LastUpdateDayTimeStamp != nil {
		return *m.LastUpdateDayTimeStamp
	}
	return 0
}

// 次数记录
type NumberRecord struct {
	EvaluateNum      *int32 `protobuf:"varint,1,opt,name=evaluateNum" json:"evaluateNum,omitempty"`
	EvaluateMax      *int32 `protobuf:"varint,2,opt,name=evaluateMax" json:"evaluateMax,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NumberRecord) Reset()                    { *m = NumberRecord{} }
func (m *NumberRecord) String() string            { return proto.CompactTextString(m) }
func (*NumberRecord) ProtoMessage()               {}
func (*NumberRecord) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func (m *NumberRecord) GetEvaluateNum() int32 {
	if m != nil && m.EvaluateNum != nil {
		return *m.EvaluateNum
	}
	return 0
}

func (m *NumberRecord) GetEvaluateMax() int32 {
	if m != nil && m.EvaluateMax != nil {
		return *m.EvaluateMax
	}
	return 0
}

// 商店当前刷新后能购买的结果
type ShopSellGoodsBox struct {
	CommodityId      *int32 `protobuf:"varint,1,opt,name=commodityId" json:"commodityId,omitempty"`
	Index            *int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	IsBuy            *bool  `protobuf:"varint,3,opt,name=isBuy" json:"isBuy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShopSellGoodsBox) Reset()                    { *m = ShopSellGoodsBox{} }
func (m *ShopSellGoodsBox) String() string            { return proto.CompactTextString(m) }
func (*ShopSellGoodsBox) ProtoMessage()               {}
func (*ShopSellGoodsBox) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{12} }

func (m *ShopSellGoodsBox) GetCommodityId() int32 {
	if m != nil && m.CommodityId != nil {
		return *m.CommodityId
	}
	return 0
}

func (m *ShopSellGoodsBox) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *ShopSellGoodsBox) GetIsBuy() bool {
	if m != nil && m.IsBuy != nil {
		return *m.IsBuy
	}
	return false
}

// 商店当前的记录
type ShopFlushRecords struct {
	Shop             []*ShopSellGoodsBox `protobuf:"bytes,1,rep,name=shop" json:"shop,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *ShopFlushRecords) Reset()                    { *m = ShopFlushRecords{} }
func (m *ShopFlushRecords) String() string            { return proto.CompactTextString(m) }
func (*ShopFlushRecords) ProtoMessage()               {}
func (*ShopFlushRecords) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{13} }

func (m *ShopFlushRecords) GetShop() []*ShopSellGoodsBox {
	if m != nil {
		return m.Shop
	}
	return nil
}

type ItemGood struct {
	Instid           *int64 `protobuf:"varint,1,opt,name=instid" json:"instid,omitempty"`
	Goodsid          *int32 `protobuf:"varint,2,opt,name=goodsid" json:"goodsid,omitempty"`
	Number           *int32 `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	EndTime          *int64 `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ItemGood) Reset()                    { *m = ItemGood{} }
func (m *ItemGood) String() string            { return proto.CompactTextString(m) }
func (*ItemGood) ProtoMessage()               {}
func (*ItemGood) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{14} }

func (m *ItemGood) GetInstid() int64 {
	if m != nil && m.Instid != nil {
		return *m.Instid
	}
	return 0
}

func (m *ItemGood) GetGoodsid() int32 {
	if m != nil && m.Goodsid != nil {
		return *m.Goodsid
	}
	return 0
}

func (m *ItemGood) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *ItemGood) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

// PVP TEST
type PvpTest struct {
	Val1             *int32  `protobuf:"varint,1,req,name=val1" json:"val1,omitempty"`
	Val2             *int64  `protobuf:"varint,2,req,name=val2" json:"val2,omitempty"`
	Val3             *string `protobuf:"bytes,3,req,name=val3" json:"val3,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PvpTest) Reset()                    { *m = PvpTest{} }
func (m *PvpTest) String() string            { return proto.CompactTextString(m) }
func (*PvpTest) ProtoMessage()               {}
func (*PvpTest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{15} }

func (m *PvpTest) GetVal1() int32 {
	if m != nil && m.Val1 != nil {
		return *m.Val1
	}
	return 0
}

func (m *PvpTest) GetVal2() int64 {
	if m != nil && m.Val2 != nil {
		return *m.Val2
	}
	return 0
}

func (m *PvpTest) GetVal3() string {
	if m != nil && m.Val3 != nil {
		return *m.Val3
	}
	return ""
}

// 球员
type Player struct {
	// 球员实例id
	Instid *int64 `protobuf:"varint,1,opt,name=instid" json:"instid,omitempty"`
	// 球员id
	Playerid *int32 `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	// 球员等级(仅供NPC使用)
	Level *int32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	// 球员星级
	Star *int32 `protobuf:"varint,4,opt,name=star" json:"star,omitempty"`
	// 是否使用新形象
	IsNewImage *bool `protobuf:"varint,5,opt,name=isNewImage" json:"isNewImage,omitempty"`
	// 球员战斗力，客户端改动太大，所以不重新包一层
	Battlevalue *uint32 `protobuf:"varint,6,opt,name=battlevalue" json:"battlevalue,omitempty"`
	// 球员来源
	GetSource *string `protobuf:"bytes,7,opt,name=getSource" json:"getSource,omitempty"`
	// 球员技能等级
	SkillLv []*PlayerSkill `protobuf:"bytes,8,rep,name=skillLv" json:"skillLv,omitempty"`
	// 球员额外的属性id
	ExtraAttrs []int32 `protobuf:"varint,9,rep,name=extraAttrs" json:"extraAttrs,omitempty"`
	// 自定义球员特征
	Customer *CustomPlayerTrait `protobuf:"bytes,12,opt,name=customer" json:"customer,omitempty"`
	// 球员槽位序列
	SlotIndex *int32 `protobuf:"varint,13,opt,name=slotIndex" json:"slotIndex,omitempty"`
	// 绰号[是否激活，是否展示]
	NickActive []bool `protobuf:"varint,14,rep,name=nick_active" json:"nick_active,omitempty"`
	// 专属装备
	ExclusiveEquip *ExclusiveEquip `protobuf:"bytes,15,opt,name=exclusive_equip" json:"exclusive_equip,omitempty"`
	// 球员阶级(仅供NPC或展示使用)
	Class *int32 `protobuf:"varint,16,opt,name=Class" json:"Class,omitempty"`
	// 球鞋id(未装备为0)
	SneakerId        *int32 `protobuf:"varint,17,opt,name=sneakerId" json:"sneakerId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{16} }

func (m *Player) GetInstid() int64 {
	if m != nil && m.Instid != nil {
		return *m.Instid
	}
	return 0
}

func (m *Player) GetPlayerid() int32 {
	if m != nil && m.Playerid != nil {
		return *m.Playerid
	}
	return 0
}

func (m *Player) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Player) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *Player) GetIsNewImage() bool {
	if m != nil && m.IsNewImage != nil {
		return *m.IsNewImage
	}
	return false
}

func (m *Player) GetBattlevalue() uint32 {
	if m != nil && m.Battlevalue != nil {
		return *m.Battlevalue
	}
	return 0
}

func (m *Player) GetGetSource() string {
	if m != nil && m.GetSource != nil {
		return *m.GetSource
	}
	return ""
}

func (m *Player) GetSkillLv() []*PlayerSkill {
	if m != nil {
		return m.SkillLv
	}
	return nil
}

func (m *Player) GetExtraAttrs() []int32 {
	if m != nil {
		return m.ExtraAttrs
	}
	return nil
}

func (m *Player) GetCustomer() *CustomPlayerTrait {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *Player) GetSlotIndex() int32 {
	if m != nil && m.SlotIndex != nil {
		return *m.SlotIndex
	}
	return 0
}

func (m *Player) GetNickActive() []bool {
	if m != nil {
		return m.NickActive
	}
	return nil
}

func (m *Player) GetExclusiveEquip() *ExclusiveEquip {
	if m != nil {
		return m.ExclusiveEquip
	}
	return nil
}

func (m *Player) GetClass() int32 {
	if m != nil && m.Class != nil {
		return *m.Class
	}
	return 0
}

func (m *Player) GetSneakerId() int32 {
	if m != nil && m.SneakerId != nil {
		return *m.SneakerId
	}
	return 0
}

// 球员专属装备
type ExclusiveEquip struct {
	// 等级
	Lv *int32 `protobuf:"varint,2,opt,name=lv" json:"lv,omitempty"`
	// 星级
	Star *int32 `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
	// 当前消耗的数量
	ConsumeItemNums  []int32 `protobuf:"varint,4,rep,name=consume_item_nums" json:"consume_item_nums,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExclusiveEquip) Reset()                    { *m = ExclusiveEquip{} }
func (m *ExclusiveEquip) String() string            { return proto.CompactTextString(m) }
func (*ExclusiveEquip) ProtoMessage()               {}
func (*ExclusiveEquip) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{17} }

func (m *ExclusiveEquip) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *ExclusiveEquip) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *ExclusiveEquip) GetConsumeItemNums() []int32 {
	if m != nil {
		return m.ConsumeItemNums
	}
	return nil
}

type PlayerSkill struct {
	// 阵容类型
	SquadType *SquadType `protobuf:"varint,1,opt,name=squadType,enum=SquadType" json:"squadType,omitempty"`
	// 技能等级
	SkillLv          []int32 `protobuf:"varint,2,rep,name=skillLv" json:"skillLv,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerSkill) Reset()                    { *m = PlayerSkill{} }
func (m *PlayerSkill) String() string            { return proto.CompactTextString(m) }
func (*PlayerSkill) ProtoMessage()               {}
func (*PlayerSkill) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{18} }

func (m *PlayerSkill) GetSquadType() SquadType {
	if m != nil && m.SquadType != nil {
		return *m.SquadType
	}
	return SquadType_SquadNo
}

func (m *PlayerSkill) GetSkillLv() []int32 {
	if m != nil {
		return m.SkillLv
	}
	return nil
}

// 自定义球员基础特征
type CustomPlayerTrait struct {
	// 头像
	Portrait *int32 `protobuf:"varint,1,opt,name=portrait" json:"portrait,omitempty"`
	// 肤色
	// optional int32 skin = 2;
	// 体型
	Body *int32 `protobuf:"varint,3,opt,name=body" json:"body,omitempty"`
	// 位置
	Place *int32 `protobuf:"varint,4,opt,name=place" json:"place,omitempty"`
	// 技能
	HaveSkills []int32 `protobuf:"varint,5,rep,name=haveSkills" json:"haveSkills,omitempty"`
	// 球队
	Team *int32 `protobuf:"varint,6,opt,name=team" json:"team,omitempty"`
	// 球员名称
	Name *string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	// 专属技能（弃用）
	ZsSkill *int32 `protobuf:"varint,8,opt,name=zsSkill" json:"zsSkill,omitempty"`
	// 球员品质
	Rarity *int32 `protobuf:"varint,9,opt,name=rarity" json:"rarity,omitempty"`
	// 球员身高
	Height *int32 `protobuf:"varint,10,opt,name=height" json:"height,omitempty"`
	// 球衣号码
	UniformNumber *int32 `protobuf:"varint,11,opt,name=uniformNumber" json:"uniformNumber,omitempty"`
	// 球员创建时间
	CreateTime *int64 `protobuf:"varint,12,opt,name=createTime" json:"createTime,omitempty"`
	// 专属技能列表
	ZsSkills         []int32 `protobuf:"varint,13,rep,name=zsSkills" json:"zsSkills,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CustomPlayerTrait) Reset()                    { *m = CustomPlayerTrait{} }
func (m *CustomPlayerTrait) String() string            { return proto.CompactTextString(m) }
func (*CustomPlayerTrait) ProtoMessage()               {}
func (*CustomPlayerTrait) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{19} }

func (m *CustomPlayerTrait) GetPortrait() int32 {
	if m != nil && m.Portrait != nil {
		return *m.Portrait
	}
	return 0
}

func (m *CustomPlayerTrait) GetBody() int32 {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return 0
}

func (m *CustomPlayerTrait) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

func (m *CustomPlayerTrait) GetHaveSkills() []int32 {
	if m != nil {
		return m.HaveSkills
	}
	return nil
}

func (m *CustomPlayerTrait) GetTeam() int32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CustomPlayerTrait) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CustomPlayerTrait) GetZsSkill() int32 {
	if m != nil && m.ZsSkill != nil {
		return *m.ZsSkill
	}
	return 0
}

func (m *CustomPlayerTrait) GetRarity() int32 {
	if m != nil && m.Rarity != nil {
		return *m.Rarity
	}
	return 0
}

func (m *CustomPlayerTrait) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *CustomPlayerTrait) GetUniformNumber() int32 {
	if m != nil && m.UniformNumber != nil {
		return *m.UniformNumber
	}
	return 0
}

func (m *CustomPlayerTrait) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CustomPlayerTrait) GetZsSkills() []int32 {
	if m != nil {
		return m.ZsSkills
	}
	return nil
}

type ProxyPlayer struct {
	Players          []*Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ProxyPlayer) Reset()                    { *m = ProxyPlayer{} }
func (m *ProxyPlayer) String() string            { return proto.CompactTextString(m) }
func (*ProxyPlayer) ProtoMessage()               {}
func (*ProxyPlayer) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{20} }

func (m *ProxyPlayer) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

// 阶级槽位
type PlayerClass struct {
	Class            *int32       `protobuf:"varint,1,opt,name=class" json:"class,omitempty"`
	SlotList         []*ClassSlot `protobuf:"bytes,2,rep,name=slotList" json:"slotList,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PlayerClass) Reset()                    { *m = PlayerClass{} }
func (m *PlayerClass) String() string            { return proto.CompactTextString(m) }
func (*PlayerClass) ProtoMessage()               {}
func (*PlayerClass) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{21} }

func (m *PlayerClass) GetClass() int32 {
	if m != nil && m.Class != nil {
		return *m.Class
	}
	return 0
}

func (m *PlayerClass) GetSlotList() []*ClassSlot {
	if m != nil {
		return m.SlotList
	}
	return nil
}

// 阶级槽位
type ClassSlot struct {
	Index            *int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	ActivatedSlot    []int32 `protobuf:"varint,2,rep,name=activatedSlot" json:"activatedSlot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClassSlot) Reset()                    { *m = ClassSlot{} }
func (m *ClassSlot) String() string            { return proto.CompactTextString(m) }
func (*ClassSlot) ProtoMessage()               {}
func (*ClassSlot) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{22} }

func (m *ClassSlot) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *ClassSlot) GetActivatedSlot() []int32 {
	if m != nil {
		return m.ActivatedSlot
	}
	return nil
}

// 物品数据,扩展自ItemConfig
// 由于ItemConfig结构中仅包含物品ID和物品数量, 客户端需要物品变化量,及物品变化时的特定标记,
// 所以增加此结构用于服务器与客户端交互
type ItemData struct {
	Id               *int32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Number           *uint32    `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	ChgNumber        *uint32    `protobuf:"varint,3,opt,name=chgNumber" json:"chgNumber,omitempty"`
	Token            *ItemToken `protobuf:"varint,4,opt,name=token,enum=ItemToken" json:"token,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ItemData) Reset()                    { *m = ItemData{} }
func (m *ItemData) String() string            { return proto.CompactTextString(m) }
func (*ItemData) ProtoMessage()               {}
func (*ItemData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{23} }

func (m *ItemData) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemData) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *ItemData) GetChgNumber() uint32 {
	if m != nil && m.ChgNumber != nil {
		return *m.ChgNumber
	}
	return 0
}

func (m *ItemData) GetToken() ItemToken {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ItemToken_Regular
}

// 球员上阵信息
type SquadInfo struct {
	Pos              *int32  `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
	Player           *Player `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SquadInfo) Reset()                    { *m = SquadInfo{} }
func (m *SquadInfo) String() string            { return proto.CompactTextString(m) }
func (*SquadInfo) ProtoMessage()               {}
func (*SquadInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{24} }

func (m *SquadInfo) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *SquadInfo) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

// 球员上阵列表
type SquadTableInfo struct {
	Info             []*SquadInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SquadTableInfo) Reset()                    { *m = SquadTableInfo{} }
func (m *SquadTableInfo) String() string            { return proto.CompactTextString(m) }
func (*SquadTableInfo) ProtoMessage()               {}
func (*SquadTableInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{25} }

func (m *SquadTableInfo) GetInfo() []*SquadInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 球员上阵信息
type SquadInfo_Ex struct {
	// 位置(0-4)
	Pos *int32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
	// 实例id
	Instid           *int64 `protobuf:"varint,2,opt,name=instid" json:"instid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SquadInfo_Ex) Reset()                    { *m = SquadInfo_Ex{} }
func (m *SquadInfo_Ex) String() string            { return proto.CompactTextString(m) }
func (*SquadInfo_Ex) ProtoMessage()               {}
func (*SquadInfo_Ex) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{26} }

func (m *SquadInfo_Ex) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *SquadInfo_Ex) GetInstid() int64 {
	if m != nil && m.Instid != nil {
		return *m.Instid
	}
	return 0
}

// 球员上阵列表
type SquadTableInfo_Ex struct {
	Starter          []*SquadInfo_Ex `protobuf:"bytes,1,rep,name=Starter" json:"Starter,omitempty"`
	Bench            []*SquadInfo_Ex `protobuf:"bytes,2,rep,name=Bench" json:"Bench,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SquadTableInfo_Ex) Reset()                    { *m = SquadTableInfo_Ex{} }
func (m *SquadTableInfo_Ex) String() string            { return proto.CompactTextString(m) }
func (*SquadTableInfo_Ex) ProtoMessage()               {}
func (*SquadTableInfo_Ex) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{27} }

func (m *SquadTableInfo_Ex) GetStarter() []*SquadInfo_Ex {
	if m != nil {
		return m.Starter
	}
	return nil
}

func (m *SquadTableInfo_Ex) GetBench() []*SquadInfo_Ex {
	if m != nil {
		return m.Bench
	}
	return nil
}

// 球员最终版本的上阵
type SquadAllPlayerFinal_Ex struct {
	Type             *SquadType         `protobuf:"varint,1,opt,name=type,enum=SquadType" json:"type,omitempty"`
	BattlePlayer     *SquadTableInfo_Ex `protobuf:"bytes,2,opt,name=BattlePlayer" json:"BattlePlayer,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SquadAllPlayerFinal_Ex) Reset()                    { *m = SquadAllPlayerFinal_Ex{} }
func (m *SquadAllPlayerFinal_Ex) String() string            { return proto.CompactTextString(m) }
func (*SquadAllPlayerFinal_Ex) ProtoMessage()               {}
func (*SquadAllPlayerFinal_Ex) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{28} }

func (m *SquadAllPlayerFinal_Ex) GetType() SquadType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SquadType_SquadNo
}

func (m *SquadAllPlayerFinal_Ex) GetBattlePlayer() *SquadTableInfo_Ex {
	if m != nil {
		return m.BattlePlayer
	}
	return nil
}

type ProxySquad struct {
	Squads           []*SquadAllPlayerFinal_Ex `protobuf:"bytes,1,rep,name=squads" json:"squads,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ProxySquad) Reset()                    { *m = ProxySquad{} }
func (m *ProxySquad) String() string            { return proto.CompactTextString(m) }
func (*ProxySquad) ProtoMessage()               {}
func (*ProxySquad) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{29} }

func (m *ProxySquad) GetSquads() []*SquadAllPlayerFinal_Ex {
	if m != nil {
		return m.Squads
	}
	return nil
}

// 联盟开启了的逻辑服务器ID
type AllianceServer struct {
	Serverid         *int32 `protobuf:"varint,1,opt,name=serverid" json:"serverid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AllianceServer) Reset()                    { *m = AllianceServer{} }
func (m *AllianceServer) String() string            { return proto.CompactTextString(m) }
func (*AllianceServer) ProtoMessage()               {}
func (*AllianceServer) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{30} }

func (m *AllianceServer) GetServerid() int32 {
	if m != nil && m.Serverid != nil {
		return *m.Serverid
	}
	return 0
}

// 延迟扣除的删除机制
type DelayDelGoods struct {
	Instid           *int64            `protobuf:"varint,1,opt,name=instid" json:"instid,omitempty"`
	Info             []*ItemVaryConfig `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
	IsDel            *bool             `protobuf:"varint,3,opt,name=isDel" json:"isDel,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *DelayDelGoods) Reset()                    { *m = DelayDelGoods{} }
func (m *DelayDelGoods) String() string            { return proto.CompactTextString(m) }
func (*DelayDelGoods) ProtoMessage()               {}
func (*DelayDelGoods) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{31} }

func (m *DelayDelGoods) GetInstid() int64 {
	if m != nil && m.Instid != nil {
		return *m.Instid
	}
	return 0
}

func (m *DelayDelGoods) GetInfo() []*ItemVaryConfig {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DelayDelGoods) GetIsDel() bool {
	if m != nil && m.IsDel != nil {
		return *m.IsDel
	}
	return false
}

// 好友信息
type Friend struct {
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 体力赠送领取标记
	EnergyFlag       *int32 `protobuf:"varint,2,opt,name=energyFlag" json:"energyFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{32} }

func (m *Friend) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Friend) GetEnergyFlag() int32 {
	if m != nil && m.EnergyFlag != nil {
		return *m.EnergyFlag
	}
	return 0
}

// 好友申请信息
type FriendRequest struct {
	// 请求人
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 被请求人
	Oid *int32 `protobuf:"varint,2,opt,name=oid" json:"oid,omitempty"`
	// 申请时间
	ApplyTime        *int64 `protobuf:"varint,3,opt,name=applyTime" json:"applyTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FriendRequest) Reset()                    { *m = FriendRequest{} }
func (m *FriendRequest) String() string            { return proto.CompactTextString(m) }
func (*FriendRequest) ProtoMessage()               {}
func (*FriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{33} }

func (m *FriendRequest) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FriendRequest) GetOid() int32 {
	if m != nil && m.Oid != nil {
		return *m.Oid
	}
	return 0
}

func (m *FriendRequest) GetApplyTime() int64 {
	if m != nil && m.ApplyTime != nil {
		return *m.ApplyTime
	}
	return 0
}

// 新好友信息
type FriendNew struct {
	Gid              *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	Fid              *int32 `protobuf:"varint,2,opt,name=fid" json:"fid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FriendNew) Reset()                    { *m = FriendNew{} }
func (m *FriendNew) String() string            { return proto.CompactTextString(m) }
func (*FriendNew) ProtoMessage()               {}
func (*FriendNew) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{34} }

func (m *FriendNew) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FriendNew) GetFid() int32 {
	if m != nil && m.Fid != nil {
		return *m.Fid
	}
	return 0
}

// 好友体力
type FriendEnergy struct {
	Gid              *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	Fid              *int32 `protobuf:"varint,2,opt,name=fid" json:"fid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FriendEnergy) Reset()                    { *m = FriendEnergy{} }
func (m *FriendEnergy) String() string            { return proto.CompactTextString(m) }
func (*FriendEnergy) ProtoMessage()               {}
func (*FriendEnergy) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{35} }

func (m *FriendEnergy) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FriendEnergy) GetFid() int32 {
	if m != nil && m.Fid != nil {
		return *m.Fid
	}
	return 0
}

// 好友申请的客户端显示
type FriendRequestDetail struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon             *int32  `protobuf:"varint,3,opt,name=icon" json:"icon,omitempty"`
	Lv               *int32  `protobuf:"varint,4,opt,name=lv" json:"lv,omitempty"`
	Attack           *uint64 `protobuf:"varint,5,opt,name=attack" json:"attack,omitempty"`
	ApplyTime        *int64  `protobuf:"varint,6,opt,name=applyTime" json:"applyTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FriendRequestDetail) Reset()                    { *m = FriendRequestDetail{} }
func (m *FriendRequestDetail) String() string            { return proto.CompactTextString(m) }
func (*FriendRequestDetail) ProtoMessage()               {}
func (*FriendRequestDetail) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{36} }

func (m *FriendRequestDetail) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FriendRequestDetail) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FriendRequestDetail) GetIcon() int32 {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return 0
}

func (m *FriendRequestDetail) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *FriendRequestDetail) GetAttack() uint64 {
	if m != nil && m.Attack != nil {
		return *m.Attack
	}
	return 0
}

func (m *FriendRequestDetail) GetApplyTime() int64 {
	if m != nil && m.ApplyTime != nil {
		return *m.ApplyTime
	}
	return 0
}

// 好友信息的客户端显示
type FriendDetail struct {
	Id               *int32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Icon             *int32       `protobuf:"varint,2,opt,name=icon" json:"icon,omitempty"`
	Name             *string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Lv               *int32       `protobuf:"varint,4,opt,name=lv" json:"lv,omitempty"`
	Attack           *uint64      `protobuf:"varint,5,opt,name=attack" json:"attack,omitempty"`
	EnergySend       *int32       `protobuf:"varint,6,opt,name=energySend" json:"energySend,omitempty"`
	EnergyRecv       *int32       `protobuf:"varint,7,opt,name=energyRecv" json:"energyRecv,omitempty"`
	State            *GamerStatus `protobuf:"varint,8,opt,name=state,enum=GamerStatus" json:"state,omitempty"`
	OfflineTime      *int64       `protobuf:"varint,9,opt,name=offlineTime" json:"offlineTime,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *FriendDetail) Reset()                    { *m = FriendDetail{} }
func (m *FriendDetail) String() string            { return proto.CompactTextString(m) }
func (*FriendDetail) ProtoMessage()               {}
func (*FriendDetail) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{37} }

func (m *FriendDetail) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FriendDetail) GetIcon() int32 {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return 0
}

func (m *FriendDetail) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FriendDetail) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *FriendDetail) GetAttack() uint64 {
	if m != nil && m.Attack != nil {
		return *m.Attack
	}
	return 0
}

func (m *FriendDetail) GetEnergySend() int32 {
	if m != nil && m.EnergySend != nil {
		return *m.EnergySend
	}
	return 0
}

func (m *FriendDetail) GetEnergyRecv() int32 {
	if m != nil && m.EnergyRecv != nil {
		return *m.EnergyRecv
	}
	return 0
}

func (m *FriendDetail) GetState() GamerStatus {
	if m != nil && m.State != nil {
		return *m.State
	}
	return GamerStatus_offline
}

func (m *FriendDetail) GetOfflineTime() int64 {
	if m != nil && m.OfflineTime != nil {
		return *m.OfflineTime
	}
	return 0
}

// 每天领取好友赠送体力的好友id列表,次日刷新时重置,避免赠送体力后删除好友，重新加好友，继续赠送体力
type DailyFrdEnergyRecv struct {
	// 下次刷新时间
	NextRefTime *int64 `protobuf:"varint,1,opt,name=nextRefTime" json:"nextRefTime,omitempty"`
	// 每日领取好友赠送体力的好友id列表
	Recvs []int32 `protobuf:"varint,2,rep,name=recvs" json:"recvs,omitempty"`
	// 每日赠送体力的好友idl列表
	Sends            []int32 `protobuf:"varint,3,rep,name=sends" json:"sends,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DailyFrdEnergyRecv) Reset()                    { *m = DailyFrdEnergyRecv{} }
func (m *DailyFrdEnergyRecv) String() string            { return proto.CompactTextString(m) }
func (*DailyFrdEnergyRecv) ProtoMessage()               {}
func (*DailyFrdEnergyRecv) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{38} }

func (m *DailyFrdEnergyRecv) GetNextRefTime() int64 {
	if m != nil && m.NextRefTime != nil {
		return *m.NextRefTime
	}
	return 0
}

func (m *DailyFrdEnergyRecv) GetRecvs() []int32 {
	if m != nil {
		return m.Recvs
	}
	return nil
}

func (m *DailyFrdEnergyRecv) GetSends() []int32 {
	if m != nil {
		return m.Sends
	}
	return nil
}

// 黑名单
type FriendBlack struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FriendBlack) Reset()                    { *m = FriendBlack{} }
func (m *FriendBlack) String() string            { return proto.CompactTextString(m) }
func (*FriendBlack) ProtoMessage()               {}
func (*FriendBlack) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{39} }

func (m *FriendBlack) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type ProxyBlack struct {
	Blacks           []*FriendBlack `protobuf:"bytes,1,rep,name=blacks" json:"blacks,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ProxyBlack) Reset()                    { *m = ProxyBlack{} }
func (m *ProxyBlack) String() string            { return proto.CompactTextString(m) }
func (*ProxyBlack) ProtoMessage()               {}
func (*ProxyBlack) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{40} }

func (m *ProxyBlack) GetBlacks() []*FriendBlack {
	if m != nil {
		return m.Blacks
	}
	return nil
}

// 战斗力的存储
type MainCache struct {
	Battle           *uint32 `protobuf:"varint,1,opt,name=battle" json:"battle,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MainCache) Reset()                    { *m = MainCache{} }
func (m *MainCache) String() string            { return proto.CompactTextString(m) }
func (*MainCache) ProtoMessage()               {}
func (*MainCache) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{41} }

func (m *MainCache) GetBattle() uint32 {
	if m != nil && m.Battle != nil {
		return *m.Battle
	}
	return 0
}

// 好友私聊信息
type ChatLog struct {
	// 私聊ID
	ChatID *int64 `protobuf:"varint,1,opt,name=chatID" json:"chatID,omitempty"`
	// 信息类型(1:文字，2:语音,3:交易邀请,4:联盟交易, 5:商业邀请赛组队邀请)
	ChatType *int32 `protobuf:"varint,2,opt,name=chatType" json:"chatType,omitempty"`
	// 信息内容
	ChatInfo []byte `protobuf:"bytes,3,opt,name=chatInfo" json:"chatInfo,omitempty"`
	// 发送方id
	SendId *int32 `protobuf:"varint,4,opt,name=sendId" json:"sendId,omitempty"`
	// 接受方id
	RecvId *int32 `protobuf:"varint,5,opt,name=recvId" json:"recvId,omitempty"`
	// 发送方名字
	SendName *string `protobuf:"bytes,6,opt,name=sendName" json:"sendName,omitempty"`
	// 发送方等级
	SendLv *int32 `protobuf:"varint,7,opt,name=sendLv" json:"sendLv,omitempty"`
	// 发送时间
	SendTime *int64 `protobuf:"varint,8,opt,name=sendTime" json:"sendTime,omitempty"`
	// 发送方icon
	SendIcon *int32 `protobuf:"varint,9,opt,name=sendIcon" json:"sendIcon,omitempty"`
	// 是否已读
	IsRead *bool `protobuf:"varint,10,opt,name=isRead" json:"isRead,omitempty"`
	// 发送方联盟职位
	AllianceJob      *int32 `protobuf:"varint,11,opt,name=allianceJob" json:"allianceJob,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChatLog) Reset()                    { *m = ChatLog{} }
func (m *ChatLog) String() string            { return proto.CompactTextString(m) }
func (*ChatLog) ProtoMessage()               {}
func (*ChatLog) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{42} }

func (m *ChatLog) GetChatID() int64 {
	if m != nil && m.ChatID != nil {
		return *m.ChatID
	}
	return 0
}

func (m *ChatLog) GetChatType() int32 {
	if m != nil && m.ChatType != nil {
		return *m.ChatType
	}
	return 0
}

func (m *ChatLog) GetChatInfo() []byte {
	if m != nil {
		return m.ChatInfo
	}
	return nil
}

func (m *ChatLog) GetSendId() int32 {
	if m != nil && m.SendId != nil {
		return *m.SendId
	}
	return 0
}

func (m *ChatLog) GetRecvId() int32 {
	if m != nil && m.RecvId != nil {
		return *m.RecvId
	}
	return 0
}

func (m *ChatLog) GetSendName() string {
	if m != nil && m.SendName != nil {
		return *m.SendName
	}
	return ""
}

func (m *ChatLog) GetSendLv() int32 {
	if m != nil && m.SendLv != nil {
		return *m.SendLv
	}
	return 0
}

func (m *ChatLog) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *ChatLog) GetSendIcon() int32 {
	if m != nil && m.SendIcon != nil {
		return *m.SendIcon
	}
	return 0
}

func (m *ChatLog) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

func (m *ChatLog) GetAllianceJob() int32 {
	if m != nil && m.AllianceJob != nil {
		return *m.AllianceJob
	}
	return 0
}

// 好友私聊消息列表（单独私聊对象保存最多50条消息）
type ChatLogList struct {
	Fid *int32 `protobuf:"varint,1,opt,name=fid" json:"fid,omitempty"`
	// 聊天记录（上限50条）
	LogList          []*ChatLog `protobuf:"bytes,2,rep,name=logList" json:"logList,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ChatLogList) Reset()                    { *m = ChatLogList{} }
func (m *ChatLogList) String() string            { return proto.CompactTextString(m) }
func (*ChatLogList) ProtoMessage()               {}
func (*ChatLogList) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{43} }

func (m *ChatLogList) GetFid() int32 {
	if m != nil && m.Fid != nil {
		return *m.Fid
	}
	return 0
}

func (m *ChatLogList) GetLogList() []*ChatLog {
	if m != nil {
		return m.LogList
	}
	return nil
}

// 聊天消息间隔
type ChatTimeObject struct {
	// 聊天频道
	ChatType *ChatChannel `protobuf:"varint,1,opt,name=chatType,enum=ChatChannel" json:"chatType,omitempty"`
	// 发送时间
	SendTime         *int64 `protobuf:"varint,2,opt,name=sendTime" json:"sendTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChatTimeObject) Reset()                    { *m = ChatTimeObject{} }
func (m *ChatTimeObject) String() string            { return proto.CompactTextString(m) }
func (*ChatTimeObject) ProtoMessage()               {}
func (*ChatTimeObject) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{44} }

func (m *ChatTimeObject) GetChatType() ChatChannel {
	if m != nil && m.ChatType != nil {
		return *m.ChatType
	}
	return ChatChannel_world
}

func (m *ChatTimeObject) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

// 新手引导
type NoviceGuide struct {
	GuideGroup       *int32 `protobuf:"varint,1,opt,name=guideGroup" json:"guideGroup,omitempty"`
	GuideStep        *int32 `protobuf:"varint,2,opt,name=guideStep" json:"guideStep,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NoviceGuide) Reset()                    { *m = NoviceGuide{} }
func (m *NoviceGuide) String() string            { return proto.CompactTextString(m) }
func (*NoviceGuide) ProtoMessage()               {}
func (*NoviceGuide) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{45} }

func (m *NoviceGuide) GetGuideGroup() int32 {
	if m != nil && m.GuideGroup != nil {
		return *m.GuideGroup
	}
	return 0
}

func (m *NoviceGuide) GetGuideStep() int32 {
	if m != nil && m.GuideStep != nil {
		return *m.GuideStep
	}
	return 0
}

// 排行榜数据
type GamerRankObj struct {
	// 排行分(如战力等)
	RankValue *uint64 `protobuf:"varint,1,opt,name=rankValue" json:"rankValue,omitempty"`
	// 玩家ID
	Gid *int32 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	// 名次
	Rank *int32 `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	// 名字
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// 阵容
	Squad []*SquadInfo `protobuf:"bytes,5,rep,name=squad" json:"squad,omitempty"`
	// 球员(最强球员时用)
	Baller *Player `protobuf:"bytes,6,opt,name=baller" json:"baller,omitempty"`
	// 玩家等级
	Level *int32 `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	// 玩家头像
	Icon *int32 `protobuf:"varint,8,opt,name=icon" json:"icon,omitempty"`
	// 记录时间
	Time *int64 `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	// 联盟名称
	AllianceName *string `protobuf:"bytes,10,opt,name=allianceName" json:"allianceName,omitempty"`
	// 逻辑服id
	LsId *int32 `protobuf:"varint,11,opt,name=lsId" json:"lsId,omitempty"`
	// 逻辑服id
	LsName *string `protobuf:"bytes,12,opt,name=lsName" json:"lsName,omitempty"`
	// 排行榜item唯一键，如：球员排行榜中key是球员的inst,玩家相关排行榜中key是gid
	Key *int64 `protobuf:"varint,13,opt,name=key" json:"key,omitempty"`
	// 比赛回放id(用作个人挑战赛使用的比赛回放id)
	ReplayId *int64 `protobuf:"varint,14,opt,name=replayId" json:"replayId,omitempty"`
	// 战力值(用作个人挑战赛使用的战斗力)
	BattleValue *int64 `protobuf:"varint,15,opt,name=battleValue" json:"battleValue,omitempty"`
	// 队伍id（用作个人挑战赛ui显示的球衣）
	TeamId *int32 `protobuf:"varint,16,opt,name=teamId" json:"teamId,omitempty"`
	// 点赞数
	TagsCount        *int32 `protobuf:"varint,17,opt,name=tagsCount" json:"tagsCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerRankObj) Reset()                    { *m = GamerRankObj{} }
func (m *GamerRankObj) String() string            { return proto.CompactTextString(m) }
func (*GamerRankObj) ProtoMessage()               {}
func (*GamerRankObj) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{46} }

func (m *GamerRankObj) GetRankValue() uint64 {
	if m != nil && m.RankValue != nil {
		return *m.RankValue
	}
	return 0
}

func (m *GamerRankObj) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *GamerRankObj) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *GamerRankObj) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GamerRankObj) GetSquad() []*SquadInfo {
	if m != nil {
		return m.Squad
	}
	return nil
}

func (m *GamerRankObj) GetBaller() *Player {
	if m != nil {
		return m.Baller
	}
	return nil
}

func (m *GamerRankObj) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *GamerRankObj) GetIcon() int32 {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return 0
}

func (m *GamerRankObj) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *GamerRankObj) GetAllianceName() string {
	if m != nil && m.AllianceName != nil {
		return *m.AllianceName
	}
	return ""
}

func (m *GamerRankObj) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

func (m *GamerRankObj) GetLsName() string {
	if m != nil && m.LsName != nil {
		return *m.LsName
	}
	return ""
}

func (m *GamerRankObj) GetKey() int64 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *GamerRankObj) GetReplayId() int64 {
	if m != nil && m.ReplayId != nil {
		return *m.ReplayId
	}
	return 0
}

func (m *GamerRankObj) GetBattleValue() int64 {
	if m != nil && m.BattleValue != nil {
		return *m.BattleValue
	}
	return 0
}

func (m *GamerRankObj) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *GamerRankObj) GetTagsCount() int32 {
	if m != nil && m.TagsCount != nil {
		return *m.TagsCount
	}
	return 0
}

// 接收到的联盟邀请数据
type GamerAllianceInviteJoinObj struct {
	// 邀请人ID
	InviteGamerID *int32 `protobuf:"varint,1,opt,name=inviteGamerID" json:"inviteGamerID,omitempty"`
	// 联盟ID
	AllianceID *int32 `protobuf:"varint,2,opt,name=allianceID" json:"allianceID,omitempty"`
	// 删除时间
	DeleteTime *int64 `protobuf:"varint,3,opt,name=deleteTime" json:"deleteTime,omitempty"`
	// 邀请人名字
	InviteGamerName *string `protobuf:"bytes,4,opt,name=inviteGamerName" json:"inviteGamerName,omitempty"`
	// 联盟名字
	AllianceName     *string `protobuf:"bytes,5,opt,name=allianceName" json:"allianceName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GamerAllianceInviteJoinObj) Reset()                    { *m = GamerAllianceInviteJoinObj{} }
func (m *GamerAllianceInviteJoinObj) String() string            { return proto.CompactTextString(m) }
func (*GamerAllianceInviteJoinObj) ProtoMessage()               {}
func (*GamerAllianceInviteJoinObj) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{47} }

func (m *GamerAllianceInviteJoinObj) GetInviteGamerID() int32 {
	if m != nil && m.InviteGamerID != nil {
		return *m.InviteGamerID
	}
	return 0
}

func (m *GamerAllianceInviteJoinObj) GetAllianceID() int32 {
	if m != nil && m.AllianceID != nil {
		return *m.AllianceID
	}
	return 0
}

func (m *GamerAllianceInviteJoinObj) GetDeleteTime() int64 {
	if m != nil && m.DeleteTime != nil {
		return *m.DeleteTime
	}
	return 0
}

func (m *GamerAllianceInviteJoinObj) GetInviteGamerName() string {
	if m != nil && m.InviteGamerName != nil {
		return *m.InviteGamerName
	}
	return ""
}

func (m *GamerAllianceInviteJoinObj) GetAllianceName() string {
	if m != nil && m.AllianceName != nil {
		return *m.AllianceName
	}
	return ""
}

// 联盟邀请数据
type GamerAllianceInviteJoinData struct {
	// 数据
	Data             []*GamerAllianceInviteJoinObj `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *GamerAllianceInviteJoinData) Reset()                    { *m = GamerAllianceInviteJoinData{} }
func (m *GamerAllianceInviteJoinData) String() string            { return proto.CompactTextString(m) }
func (*GamerAllianceInviteJoinData) ProtoMessage()               {}
func (*GamerAllianceInviteJoinData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{48} }

func (m *GamerAllianceInviteJoinData) GetData() []*GamerAllianceInviteJoinObj {
	if m != nil {
		return m.Data
	}
	return nil
}

// 功能首次开发（点击）列表
type FuncFirstOpenList struct {
	FuncList         []string `protobuf:"bytes,1,rep,name=funcList" json:"funcList,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FuncFirstOpenList) Reset()                    { *m = FuncFirstOpenList{} }
func (m *FuncFirstOpenList) String() string            { return proto.CompactTextString(m) }
func (*FuncFirstOpenList) ProtoMessage()               {}
func (*FuncFirstOpenList) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{49} }

func (m *FuncFirstOpenList) GetFuncList() []string {
	if m != nil {
		return m.FuncList
	}
	return nil
}

// 竞技场挑战者的联盟相关信息
type PvpRoleAllianceInfo struct {
	AllianceId       *int32  `protobuf:"varint,1,opt,name=allianceId" json:"allianceId,omitempty"`
	AllianceIcon     *int32  `protobuf:"varint,2,opt,name=allianceIcon" json:"allianceIcon,omitempty"`
	AllianceName     *string `protobuf:"bytes,3,opt,name=allianceName" json:"allianceName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PvpRoleAllianceInfo) Reset()                    { *m = PvpRoleAllianceInfo{} }
func (m *PvpRoleAllianceInfo) String() string            { return proto.CompactTextString(m) }
func (*PvpRoleAllianceInfo) ProtoMessage()               {}
func (*PvpRoleAllianceInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{50} }

func (m *PvpRoleAllianceInfo) GetAllianceId() int32 {
	if m != nil && m.AllianceId != nil {
		return *m.AllianceId
	}
	return 0
}

func (m *PvpRoleAllianceInfo) GetAllianceIcon() int32 {
	if m != nil && m.AllianceIcon != nil {
		return *m.AllianceIcon
	}
	return 0
}

func (m *PvpRoleAllianceInfo) GetAllianceName() string {
	if m != nil && m.AllianceName != nil {
		return *m.AllianceName
	}
	return ""
}

// 球员战斗数据
type PlayerBattleInfo struct {
	// 球员id
	PlayerId *int32 `protobuf:"varint,1,opt,name=player_id" json:"player_id,omitempty"`
	// 球员事件
	BattleData []int32 `protobuf:"varint,2,rep,name=battle_data" json:"battle_data,omitempty"`
	// 一：是否首发（1：首发， 0：替补）二：首发数
	IsStart *int32 `protobuf:"varint,3,opt,name=is_start" json:"is_start,omitempty"`
	// 球员instId
	InstanceId *int64 `protobuf:"varint,6,opt,name=instanceId" json:"instanceId,omitempty"`
	// 球员等级
	Level *int32 `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	// 位置
	FirstPlace       *int32 `protobuf:"varint,8,opt,name=firstPlace" json:"firstPlace,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerBattleInfo) Reset()                    { *m = PlayerBattleInfo{} }
func (m *PlayerBattleInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerBattleInfo) ProtoMessage()               {}
func (*PlayerBattleInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{51} }

func (m *PlayerBattleInfo) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerBattleInfo) GetBattleData() []int32 {
	if m != nil {
		return m.BattleData
	}
	return nil
}

func (m *PlayerBattleInfo) GetIsStart() int32 {
	if m != nil && m.IsStart != nil {
		return *m.IsStart
	}
	return 0
}

func (m *PlayerBattleInfo) GetInstanceId() int64 {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return 0
}

func (m *PlayerBattleInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *PlayerBattleInfo) GetFirstPlace() int32 {
	if m != nil && m.FirstPlace != nil {
		return *m.FirstPlace
	}
	return 0
}

// 简单服务器信息
type SimpleServerInfo struct {
	ServerType       *int32 `protobuf:"varint,1,opt,name=serverType" json:"serverType,omitempty"`
	ServerId         *int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SimpleServerInfo) Reset()                    { *m = SimpleServerInfo{} }
func (m *SimpleServerInfo) String() string            { return proto.CompactTextString(m) }
func (*SimpleServerInfo) ProtoMessage()               {}
func (*SimpleServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{52} }

func (m *SimpleServerInfo) GetServerType() int32 {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return 0
}

func (m *SimpleServerInfo) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

// 发往逻辑服的消息体
type ToLogicServerMsg struct {
	Gid              *int32  `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	Cmd              *uint32 `protobuf:"varint,2,opt,name=cmd" json:"cmd,omitempty"`
	Act              *uint32 `protobuf:"varint,3,opt,name=act" json:"act,omitempty"`
	Err              *uint32 `protobuf:"varint,4,opt,name=err" json:"err,omitempty"`
	Data             []byte  `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ToLogicServerMsg) Reset()                    { *m = ToLogicServerMsg{} }
func (m *ToLogicServerMsg) String() string            { return proto.CompactTextString(m) }
func (*ToLogicServerMsg) ProtoMessage()               {}
func (*ToLogicServerMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{53} }

func (m *ToLogicServerMsg) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *ToLogicServerMsg) GetCmd() uint32 {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return 0
}

func (m *ToLogicServerMsg) GetAct() uint32 {
	if m != nil && m.Act != nil {
		return *m.Act
	}
	return 0
}

func (m *ToLogicServerMsg) GetErr() uint32 {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return 0
}

func (m *ToLogicServerMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 玩家基本信息
type TeamBaseInfo struct {
	Gid              *int32  `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	TeamId           *int32  `protobuf:"varint,2,opt,name=teamId" json:"teamId,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=teamName" json:"teamName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TeamBaseInfo) Reset()                    { *m = TeamBaseInfo{} }
func (m *TeamBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*TeamBaseInfo) ProtoMessage()               {}
func (*TeamBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{54} }

func (m *TeamBaseInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *TeamBaseInfo) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamBaseInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

type LastWorthsRecord struct {
	// 最近5次身价记录
	LastWorths []*TypeValueConfig `protobuf:"bytes,1,rep,name=lastWorths" json:"lastWorths,omitempty"`
	// 最大市价记录
	MaxWorth         *TypeValueConfig `protobuf:"bytes,2,opt,name=max_worth" json:"max_worth,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *LastWorthsRecord) Reset()                    { *m = LastWorthsRecord{} }
func (m *LastWorthsRecord) String() string            { return proto.CompactTextString(m) }
func (*LastWorthsRecord) ProtoMessage()               {}
func (*LastWorthsRecord) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{55} }

func (m *LastWorthsRecord) GetLastWorths() []*TypeValueConfig {
	if m != nil {
		return m.LastWorths
	}
	return nil
}

func (m *LastWorthsRecord) GetMaxWorth() *TypeValueConfig {
	if m != nil {
		return m.MaxWorth
	}
	return nil
}

// 球员市场价排名数据
type PlayerWorthRankObj struct {
	// 球员id
	PlayerId *int32 `protobuf:"varint,1,opt,name=player_id" json:"player_id,omitempty"`
	// espn_id
	EspnId *int32 `protobuf:"varint,2,opt,name=espn_id" json:"espn_id,omitempty"`
	// 排名
	Rank *int32 `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	// 市场价
	Worth *int32 `protobuf:"varint,4,opt,name=worth" json:"worth,omitempty"`
	// 上一轮市场价(弃用)
	LastWorth *int32 `protobuf:"varint,5,opt,name=last_worth" json:"last_worth,omitempty"`
	// 权重
	Weight *int32 `protobuf:"varint,6,opt,name=weight" json:"weight,omitempty"`
	// 最近5次市场价记录(type:时间戳 val:市场价)
	LastWorths []*TypeValueConfig `protobuf:"bytes,7,rep,name=last_worths" json:"last_worths,omitempty"`
	// 最大市价记录
	MaxWorth *TypeValueConfig `protobuf:"bytes,8,opt,name=max_worth" json:"max_worth,omitempty"`
	// 日期时间戳（临时使用）
	RecordTime       *int32 `protobuf:"varint,9,opt,name=recordTime" json:"recordTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerWorthRankObj) Reset()                    { *m = PlayerWorthRankObj{} }
func (m *PlayerWorthRankObj) String() string            { return proto.CompactTextString(m) }
func (*PlayerWorthRankObj) ProtoMessage()               {}
func (*PlayerWorthRankObj) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{56} }

func (m *PlayerWorthRankObj) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerWorthRankObj) GetEspnId() int32 {
	if m != nil && m.EspnId != nil {
		return *m.EspnId
	}
	return 0
}

func (m *PlayerWorthRankObj) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *PlayerWorthRankObj) GetWorth() int32 {
	if m != nil && m.Worth != nil {
		return *m.Worth
	}
	return 0
}

func (m *PlayerWorthRankObj) GetLastWorth() int32 {
	if m != nil && m.LastWorth != nil {
		return *m.LastWorth
	}
	return 0
}

func (m *PlayerWorthRankObj) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *PlayerWorthRankObj) GetLastWorths() []*TypeValueConfig {
	if m != nil {
		return m.LastWorths
	}
	return nil
}

func (m *PlayerWorthRankObj) GetMaxWorth() *TypeValueConfig {
	if m != nil {
		return m.MaxWorth
	}
	return nil
}

func (m *PlayerWorthRankObj) GetRecordTime() int32 {
	if m != nil && m.RecordTime != nil {
		return *m.RecordTime
	}
	return 0
}

// 球员能力值数据
// MIN  | FG       | 3PT     | FT      | REB  | AST  | BLK  | STL  | PF   | TO   | PTS
// 34.5 | 9.3-19.2 | 2.8-7.1 | 3.3-4.3 | 6.0  | 3.4  | 0.6  | 1.2  | 2.9  | 2.7  | 24.7
type PlayerAbilityAvgData struct {
	EspnId           *int32  `protobuf:"varint,1,opt,name=espn_id" json:"espn_id,omitempty"`
	Min              *string `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	Fg               *string `protobuf:"bytes,3,opt,name=fg" json:"fg,omitempty"`
	X3Pt             *string `protobuf:"bytes,4,opt,name=x3Pt" json:"x3Pt,omitempty"`
	Ft               *string `protobuf:"bytes,5,opt,name=ft" json:"ft,omitempty"`
	Reb              *string `protobuf:"bytes,6,opt,name=reb" json:"reb,omitempty"`
	Ast              *string `protobuf:"bytes,7,opt,name=ast" json:"ast,omitempty"`
	Blk              *string `protobuf:"bytes,8,opt,name=blk" json:"blk,omitempty"`
	Stl              *string `protobuf:"bytes,9,opt,name=stl" json:"stl,omitempty"`
	Pf               *string `protobuf:"bytes,10,opt,name=pf" json:"pf,omitempty"`
	To               *string `protobuf:"bytes,11,opt,name=to" json:"to,omitempty"`
	Pts              *string `protobuf:"bytes,12,opt,name=pts" json:"pts,omitempty"`
	PlayerId         *int32  `protobuf:"varint,13,opt,name=player_id" json:"player_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerAbilityAvgData) Reset()                    { *m = PlayerAbilityAvgData{} }
func (m *PlayerAbilityAvgData) String() string            { return proto.CompactTextString(m) }
func (*PlayerAbilityAvgData) ProtoMessage()               {}
func (*PlayerAbilityAvgData) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{57} }

func (m *PlayerAbilityAvgData) GetEspnId() int32 {
	if m != nil && m.EspnId != nil {
		return *m.EspnId
	}
	return 0
}

func (m *PlayerAbilityAvgData) GetMin() string {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetFg() string {
	if m != nil && m.Fg != nil {
		return *m.Fg
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetX3Pt() string {
	if m != nil && m.X3Pt != nil {
		return *m.X3Pt
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetFt() string {
	if m != nil && m.Ft != nil {
		return *m.Ft
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetReb() string {
	if m != nil && m.Reb != nil {
		return *m.Reb
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetAst() string {
	if m != nil && m.Ast != nil {
		return *m.Ast
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetBlk() string {
	if m != nil && m.Blk != nil {
		return *m.Blk
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetStl() string {
	if m != nil && m.Stl != nil {
		return *m.Stl
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetPf() string {
	if m != nil && m.Pf != nil {
		return *m.Pf
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetPts() string {
	if m != nil && m.Pts != nil {
		return *m.Pts
	}
	return ""
}

func (m *PlayerAbilityAvgData) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type Int64S struct {
	Res              []int64 `protobuf:"varint,1,rep,name=res" json:"res,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Int64S) Reset()                    { *m = Int64S{} }
func (m *Int64S) String() string            { return proto.CompactTextString(m) }
func (*Int64S) ProtoMessage()               {}
func (*Int64S) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{58} }

func (m *Int64S) GetRes() []int64 {
	if m != nil {
		return m.Res
	}
	return nil
}

func init() {
	proto.RegisterType((*Gamer)(nil), "Gamer")
	proto.RegisterType((*RoleTeamInfo)(nil), "RoleTeamInfo")
	proto.RegisterType((*BlankMsg)(nil), "BlankMsg")
	proto.RegisterType((*DeviceData)(nil), "DeviceData")
	proto.RegisterType((*ReceivedCdkData)(nil), "ReceivedCdkData")
	proto.RegisterType((*CurrencyConfig)(nil), "CurrencyConfig")
	proto.RegisterType((*GamerReserveData)(nil), "GamerReserveData")
	proto.RegisterType((*CareerConfig)(nil), "CareerConfig")
	proto.RegisterType((*GamerCareerData)(nil), "GamerCareerData")
	proto.RegisterType((*ServerTime)(nil), "ServerTime")
	proto.RegisterType((*TimeRecord)(nil), "TimeRecord")
	proto.RegisterType((*NumberRecord)(nil), "NumberRecord")
	proto.RegisterType((*ShopSellGoodsBox)(nil), "ShopSellGoodsBox")
	proto.RegisterType((*ShopFlushRecords)(nil), "ShopFlushRecords")
	proto.RegisterType((*ItemGood)(nil), "ItemGood")
	proto.RegisterType((*PvpTest)(nil), "PvpTest")
	proto.RegisterType((*Player)(nil), "Player")
	proto.RegisterType((*ExclusiveEquip)(nil), "ExclusiveEquip")
	proto.RegisterType((*PlayerSkill)(nil), "PlayerSkill")
	proto.RegisterType((*CustomPlayerTrait)(nil), "CustomPlayerTrait")
	proto.RegisterType((*ProxyPlayer)(nil), "ProxyPlayer")
	proto.RegisterType((*PlayerClass)(nil), "PlayerClass")
	proto.RegisterType((*ClassSlot)(nil), "ClassSlot")
	proto.RegisterType((*ItemData)(nil), "ItemData")
	proto.RegisterType((*SquadInfo)(nil), "SquadInfo")
	proto.RegisterType((*SquadTableInfo)(nil), "SquadTableInfo")
	proto.RegisterType((*SquadInfo_Ex)(nil), "SquadInfo_Ex")
	proto.RegisterType((*SquadTableInfo_Ex)(nil), "SquadTableInfo_Ex")
	proto.RegisterType((*SquadAllPlayerFinal_Ex)(nil), "SquadAllPlayerFinal_Ex")
	proto.RegisterType((*ProxySquad)(nil), "ProxySquad")
	proto.RegisterType((*AllianceServer)(nil), "AllianceServer")
	proto.RegisterType((*DelayDelGoods)(nil), "DelayDelGoods")
	proto.RegisterType((*Friend)(nil), "Friend")
	proto.RegisterType((*FriendRequest)(nil), "FriendRequest")
	proto.RegisterType((*FriendNew)(nil), "FriendNew")
	proto.RegisterType((*FriendEnergy)(nil), "FriendEnergy")
	proto.RegisterType((*FriendRequestDetail)(nil), "FriendRequestDetail")
	proto.RegisterType((*FriendDetail)(nil), "FriendDetail")
	proto.RegisterType((*DailyFrdEnergyRecv)(nil), "DailyFrdEnergyRecv")
	proto.RegisterType((*FriendBlack)(nil), "FriendBlack")
	proto.RegisterType((*ProxyBlack)(nil), "ProxyBlack")
	proto.RegisterType((*MainCache)(nil), "MainCache")
	proto.RegisterType((*ChatLog)(nil), "ChatLog")
	proto.RegisterType((*ChatLogList)(nil), "ChatLogList")
	proto.RegisterType((*ChatTimeObject)(nil), "ChatTimeObject")
	proto.RegisterType((*NoviceGuide)(nil), "NoviceGuide")
	proto.RegisterType((*GamerRankObj)(nil), "GamerRankObj")
	proto.RegisterType((*GamerAllianceInviteJoinObj)(nil), "GamerAllianceInviteJoinObj")
	proto.RegisterType((*GamerAllianceInviteJoinData)(nil), "GamerAllianceInviteJoinData")
	proto.RegisterType((*FuncFirstOpenList)(nil), "FuncFirstOpenList")
	proto.RegisterType((*PvpRoleAllianceInfo)(nil), "PvpRoleAllianceInfo")
	proto.RegisterType((*PlayerBattleInfo)(nil), "PlayerBattleInfo")
	proto.RegisterType((*SimpleServerInfo)(nil), "SimpleServerInfo")
	proto.RegisterType((*ToLogicServerMsg)(nil), "ToLogicServerMsg")
	proto.RegisterType((*TeamBaseInfo)(nil), "TeamBaseInfo")
	proto.RegisterType((*LastWorthsRecord)(nil), "LastWorthsRecord")
	proto.RegisterType((*PlayerWorthRankObj)(nil), "PlayerWorthRankObj")
	proto.RegisterType((*PlayerAbilityAvgData)(nil), "PlayerAbilityAvgData")
	proto.RegisterType((*Int64S)(nil), "Int64s")
	proto.RegisterEnum("ItemToken", ItemToken_name, ItemToken_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 2862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x58, 0x4b, 0x73, 0x1b, 0xc7,
	0xf1, 0x2f, 0x00, 0x22, 0x09, 0x0c, 0x00, 0x3e, 0x20, 0xd9, 0x5a, 0x5b, 0xf2, 0xff, 0xaf, 0x5a,
	0x5b, 0x65, 0xd9, 0x4e, 0x21, 0xb1, 0xec, 0xb8, 0x5c, 0x49, 0xe5, 0xc0, 0x87, 0xa8, 0xc0, 0xa1,
	0x68, 0x86, 0xa0, 0xec, 0x4b, 0x52, 0xac, 0xc5, 0xee, 0x10, 0x58, 0x63, 0xb1, 0x0b, 0xef, 0x0c,
	0x20, 0xc2, 0xd7, 0x9c, 0x92, 0x53, 0x3e, 0x48, 0x8e, 0xf9, 0x04, 0x39, 0xa4, 0x72, 0xcc, 0x35,
	0xb7, 0xe4, 0x9b, 0xe4, 0xd7, 0x3d, 0x33, 0xbb, 0x0b, 0x52, 0x56, 0xe5, 0x42, 0x62, 0x7b, 0x7a,
	0x7a, 0xfa, 0xf1, 0xeb, 0xc7, 0x8c, 0xe8, 0x84, 0xd9, 0x6c, 0x96, 0xa5, 0xfd, 0x79, 0x9e, 0xe9,
	0xec, 0x5d, 0x11, 0x66, 0xe9, 0x95, 0xfd, 0xdd, 0x9e, 0x05, 0x61, 0x9e, 0x99, 0x0f, 0xff, 0x3f,
	0x1b, 0x62, 0xe3, 0x79, 0x30, 0x93, 0x79, 0x4f, 0x88, 0x7a, 0x1c, 0x79, 0xb5, 0x47, 0xb5, 0x27,
	0x1b, 0xbd, 0x8e, 0xb8, 0x93, 0x82, 0xe8, 0xd5, 0xf1, 0xd5, 0xea, 0xb5, 0x45, 0x43, 0xc9, 0x6b,
	0xaf, 0xc1, 0x4b, 0x5d, 0xb1, 0x91, 0xc8, 0xa5, 0x4c, 0xbc, 0x3b, 0xfc, 0xb9, 0x2d, 0x36, 0x17,
	0x4a, 0xe6, 0x83, 0xc8, 0xdb, 0xc0, 0x77, 0x83, 0x76, 0xaa, 0x78, 0x9c, 0x7a, 0x9b, 0x6e, 0x67,
	0x3e, 0x1b, 0x79, 0x5b, 0xcc, 0x8a, 0x8f, 0x65, 0x3c, 0xf7, 0x9a, 0xfc, 0xf1, 0x40, 0x6c, 0x28,
	0x1d, 0x68, 0xe9, 0xb5, 0xf0, 0xb9, 0xfd, 0xb4, 0xd3, 0x67, 0x25, 0x86, 0x20, 0x2d, 0x14, 0x09,
	0x39, 0x19, 0x42, 0xa4, 0x70, 0xca, 0x9c, 0xd1, 0x57, 0xdb, 0x1d, 0xa8, 0xa2, 0xe9, 0x4b, 0xa8,
	0xda, 0xe1, 0x23, 0x3c, 0xb1, 0x7b, 0x2e, 0x61, 0x5d, 0x2a, 0x43, 0x3d, 0x94, 0x4a, 0xc5, 0x59,
	0xea, 0x6d, 0xf3, 0xca, 0x5b, 0xa2, 0x1b, 0x26, 0xb1, 0x4c, 0xf5, 0x37, 0x32, 0x67, 0xf2, 0x0e,
	0x93, 0xf7, 0x44, 0xeb, 0x45, 0x70, 0xfd, 0x2c, 0x95, 0xf9, 0x78, 0xe5, 0xed, 0xb2, 0x4c, 0x90,
	0x72, 0x49, 0x06, 0x9f, 0x2e, 0x66, 0xde, 0x1e, 0x93, 0xfe, 0x5f, 0x34, 0xb5, 0x0c, 0x66, 0x83,
	0xf4, 0x2a, 0xf3, 0xee, 0x82, 0xd2, 0x7e, 0xda, 0xed, 0x9f, 0x67, 0x89, 0xbc, 0xb0, 0xc4, 0xde,
	0x47, 0x62, 0x7b, 0x4c, 0x2a, 0x9f, 0xca, 0x57, 0x46, 0x6b, 0xef, 0x1e, 0x5b, 0xb2, 0x67, 0x2c,
	0x19, 0xa8, 0x62, 0x81, 0x0c, 0xbf, 0x0a, 0xe6, 0xde, 0x5b, 0x58, 0xbf, 0xd3, 0xdb, 0x11, 0x5b,
	0x87, 0x93, 0x00, 0xea, 0x26, 0xde, 0x7d, 0xd6, 0xe7, 0xb1, 0xe8, 0x06, 0x61, 0x98, 0x2d, 0x52,
	0x6d, 0xe5, 0x78, 0x2c, 0x67, 0xbb, 0xbf, 0x5f, 0xa5, 0x42, 0x21, 0x11, 0xc9, 0x65, 0x1c, 0xca,
	0xa3, 0x40, 0x07, 0xde, 0x3b, 0xac, 0x52, 0xbb, 0x7f, 0x54, 0x90, 0x48, 0xf0, 0x7c, 0x39, 0x3f,
	0x0f, 0xd2, 0xa9, 0xf7, 0x2e, 0x9b, 0x00, 0xfb, 0x27, 0xc1, 0x52, 0xbe, 0xc8, 0x52, 0x3d, 0x39,
	0x0c, 0xf2, 0xc8, 0xf3, 0x1f, 0x35, 0x10, 0x21, 0x04, 0x30, 0x56, 0xbf, 0x81, 0xff, 0xde, 0x07,
	0x57, 0xb3, 0xf7, 0x53, 0xd1, 0xbb, 0x8a, 0x73, 0xa5, 0xe1, 0xc4, 0x49, 0x90, 0x8f, 0xe5, 0x90,
	0xa3, 0xf2, 0x01, 0xeb, 0x70, 0xb7, 0x7f, 0x7c, 0x6b, 0xa9, 0x77, 0x5f, 0xec, 0x4c, 0xe3, 0x68,
	0x38, 0xc9, 0x16, 0x49, 0x74, 0x92, 0x8d, 0xbf, 0x5e, 0x68, 0xef, 0x31, 0x87, 0xfe, 0x91, 0xd8,
	0xcc, 0xe5, 0x61, 0x34, 0x55, 0xde, 0x87, 0x38, 0xa8, 0xfd, 0x74, 0xb7, 0x8f, 0x8d, 0x32, 0x5e,
	0xca, 0x08, 0x44, 0x56, 0x71, 0x57, 0x34, 0x13, 0x19, 0x8c, 0x17, 0x12, 0xd1, 0x7c, 0xc2, 0x3a,
	0x02, 0x75, 0x86, 0x72, 0x4a, 0x70, 0xfb, 0x88, 0x1d, 0x72, 0x4f, 0x74, 0x46, 0x52, 0xe9, 0xb3,
	0x24, 0x58, 0x31, 0xb0, 0x3e, 0x66, 0xce, 0x77, 0xc4, 0x9e, 0xbc, 0x8e, 0x95, 0x3e, 0x5c, 0x28,
	0x9d, 0xcd, 0xcc, 0xa2, 0xf7, 0x09, 0x9b, 0xf0, 0x7f, 0xe2, 0xed, 0x5c, 0x2a, 0xa9, 0x8f, 0xe2,
	0x00, 0x88, 0x8f, 0xce, 0x16, 0x39, 0xf4, 0x55, 0x74, 0xc8, 0x4f, 0x68, 0xab, 0xff, 0xad, 0xe8,
	0xac, 0x85, 0x6e, 0xd7, 0xc6, 0x16, 0xa8, 0xb1, 0x78, 0xb7, 0x94, 0xb3, 0x20, 0xd7, 0x8c, 0x79,
	0x86, 0x04, 0x51, 0x86, 0x93, 0x18, 0xa4, 0x86, 0x63, 0x62, 0x4f, 0x9d, 0xc1, 0x77, 0x0c, 0x7e,
	0x5f, 0x88, 0xe6, 0x41, 0x02, 0x87, 0xbf, 0x50, 0x63, 0xff, 0xcf, 0x35, 0x21, 0x2a, 0xd1, 0x00,
	0xf3, 0x3c, 0x09, 0xf4, 0x55, 0x96, 0xcf, 0xf8, 0x8c, 0x16, 0x01, 0xd7, 0x04, 0xd0, 0x66, 0x15,
	0xe2, 0x85, 0x44, 0xdc, 0x8f, 0xa2, 0x9c, 0xe5, 0xb7, 0x7a, 0x6f, 0x8b, 0x6d, 0xb5, 0x52, 0x5a,
	0xce, 0x4e, 0x82, 0x74, 0xbc, 0x08, 0xc6, 0x92, 0x4f, 0x69, 0x91, 0x8f, 0xcc, 0xc6, 0x8b, 0xd5,
	0x5c, 0x72, 0x9a, 0x31, 0x88, 0x33, 0xe5, 0x70, 0x6d, 0x72, 0x0d, 0x27, 0x1a, 0xb8, 0x0f, 0xce,
	0x38, 0xa9, 0x5a, 0xfe, 0x40, 0xec, 0xdc, 0x8c, 0x00, 0xe5, 0x44, 0x34, 0xbd, 0x90, 0x33, 0x52,
	0x8e, 0x3c, 0x54, 0x73, 0x49, 0x05, 0xf2, 0x50, 0xe7, 0xa5, 0x6e, 0xc8, 0xea, 0x8b, 0x18, 0x31,
	0x61, 0xdb, 0xfd, 0x9f, 0x89, 0xed, 0xc3, 0x45, 0x8e, 0x24, 0x09, 0x57, 0x87, 0xa8, 0x24, 0xf1,
	0x98, 0xb6, 0x68, 0xe8, 0x53, 0x15, 0x91, 0x2e, 0x66, 0x23, 0x69, 0x44, 0x34, 0xfc, 0x2f, 0xc4,
	0x2e, 0x27, 0xc2, 0x39, 0x22, 0x93, 0x2f, 0x8d, 0x53, 0x7c, 0xd1, 0x0a, 0xad, 0x14, 0x85, 0x6d,
	0x04, 0x92, 0x9d, 0xfe, 0xba, 0x5c, 0xff, 0x58, 0x74, 0x00, 0x56, 0x29, 0x73, 0x7b, 0xce, 0x13,
	0x21, 0x42, 0xfe, 0x66, 0xeb, 0x6b, 0x8c, 0xcb, 0x7b, 0x26, 0xc7, 0x0c, 0x1f, 0x49, 0xa6, 0x35,
	0xaa, 0x13, 0x11, 0xe5, 0x86, 0x39, 0xff, 0x53, 0xb1, 0x73, 0x83, 0x09, 0x38, 0xd9, 0x32, 0xa2,
	0xdc, 0xe1, 0xdd, 0x7e, 0xf5, 0x28, 0xff, 0x8f, 0x08, 0xe1, 0x90, 0x94, 0xcd, 0xc9, 0x72, 0x86,
	0x00, 0xfe, 0xa3, 0x4c, 0xcd, 0xe6, 0x7c, 0x30, 0x57, 0xb7, 0x95, 0x0c, 0x72, 0x8b, 0x11, 0x64,
	0xd2, 0x8c, 0x92, 0xcb, 0xe2, 0x03, 0x69, 0x1e, 0x05, 0x2b, 0x5b, 0x17, 0xc1, 0x89, 0x0c, 0xc9,
	0x39, 0x5c, 0xec, 0x9c, 0x59, 0x9c, 0x2e, 0x90, 0x58, 0x9b, 0x45, 0x11, 0xa3, 0xa2, 0x15, 0xd9,
	0xd2, 0x48, 0xf8, 0xc3, 0x51, 0x3f, 0x64, 0xa9, 0x34, 0xf5, 0xd1, 0xff, 0x5b, 0x43, 0x08, 0xd2,
	0x82, 0x6a, 0x5b, 0x1e, 0x71, 0x80, 0x72, 0x49, 0x99, 0x69, 0x14, 0xa1, 0x4c, 0x0a, 0x94, 0x7e,
	0x11, 0xc4, 0x89, 0xb1, 0xd7, 0x51, 0x86, 0x54, 0x7c, 0x1b, 0x4c, 0x81, 0xfe, 0x44, 0x41, 0x8e,
	0xc6, 0x29, 0x6b, 0xd5, 0xe0, 0x74, 0x33, 0xa4, 0x0c, 0x69, 0x6b, 0x2a, 0xf6, 0x5d, 0xd1, 0xa6,
	0x43, 0xac, 0xd5, 0xac, 0x60, 0x83, 0xaa, 0x6a, 0x90, 0x24, 0x71, 0x90, 0x86, 0x92, 0x52, 0x8d,
	0x57, 0xb6, 0x78, 0x05, 0x28, 0xdd, 0xb7, 0x2b, 0xfb, 0xa1, 0x06, 0xb6, 0x58, 0xe1, 0x06, 0x0a,
	0xfa, 0xdd, 0x44, 0x5e, 0xe9, 0xe3, 0x2c, 0x47, 0x6d, 0xb9, 0xc8, 0x22, 0xbb, 0xa9, 0xc5, 0x8b,
	0x4f, 0xc4, 0xa3, 0x23, 0x78, 0x0a, 0x45, 0xe3, 0xd5, 0x09, 0xb6, 0x9c, 0x66, 0x1a, 0x70, 0xde,
	0x1f, 0x07, 0x71, 0x5a, 0x72, 0x0a, 0xe6, 0x7c, 0x28, 0xee, 0xb1, 0x86, 0xd4, 0x62, 0x5e, 0xce,
	0x2f, 0x32, 0x1d, 0x24, 0xbc, 0xda, 0xb6, 0x55, 0xf9, 0xbe, 0x01, 0xd0, 0x6d, 0x86, 0x0e, 0x33,
	0x3c, 0x12, 0x9e, 0x9e, 0xc4, 0x8a, 0x28, 0x96, 0xe3, 0x40, 0xc2, 0x7c, 0xe6, 0xe8, 0xba, 0x03,
	0xbe, 0x5b, 0xcc, 0xe6, 0xc7, 0xf1, 0x78, 0xa2, 0x9f, 0xa5, 0xd1, 0x61, 0x96, 0x99, 0xfd, 0xdb,
	0x85, 0xcf, 0xc8, 0x5f, 0x47, 0x01, 0x10, 0xba, 0xe3, 0x0a, 0x0f, 0x22, 0xa5, 0x11, 0x3e, 0x79,
	0x52, 0x2c, 0x99, 0xbe, 0x81, 0xc2, 0x43, 0xca, 0xbe, 0x9c, 0x03, 0x77, 0x40, 0x38, 0xdb, 0x31,
	0x64, 0xb8, 0xec, 0x31, 0x06, 0xbf, 0x14, 0x9d, 0x53, 0xce, 0x09, 0x1b, 0x45, 0xb8, 0x5a, 0x2e,
	0x83, 0x64, 0x01, 0x6e, 0xea, 0x34, 0x26, 0x71, 0x2a, 0x44, 0xf4, 0x25, 0x03, 0x2d, 0xff, 0x99,
	0xd8, 0x85, 0xb3, 0xe6, 0x43, 0x99, 0x24, 0xcf, 0xb3, 0x2c, 0x52, 0x07, 0xd9, 0x35, 0x31, 0x72,
	0x4f, 0x8f, 0x62, 0xbd, 0x2a, 0xd2, 0x8e, 0xaa, 0x79, 0x1a, 0xc9, 0xeb, 0x12, 0x92, 0xb1, 0x3a,
	0x58, 0xac, 0x18, 0x02, 0x4d, 0xff, 0x33, 0x23, 0xe6, 0x38, 0x59, 0xa8, 0x89, 0xd1, 0x81, 0x1a,
	0xc9, 0x1d, 0x05, 0x9a, 0x4d, 0x81, 0xbd, 0xfe, 0xcd, 0x73, 0xfc, 0x13, 0xd1, 0x1c, 0xa0, 0x0a,
	0xd1, 0x37, 0xe1, 0x2e, 0x4e, 0x95, 0xb6, 0x83, 0x41, 0x83, 0x0a, 0xc3, 0x98, 0xf8, 0x40, 0xa8,
	0xdf, 0x48, 0x7b, 0x93, 0x04, 0x60, 0x90, 0x69, 0xc4, 0x1e, 0x65, 0xc8, 0x41, 0x85, 0xad, 0xb3,
	0xe5, 0xfc, 0x02, 0x69, 0x44, 0x39, 0x01, 0x43, 0x3f, 0x85, 0xa8, 0xba, 0xc9, 0x10, 0x7c, 0x3d,
	0x85, 0x9c, 0xba, 0xc9, 0x2c, 0x7c, 0x7d, 0x06, 0x29, 0x75, 0x54, 0xae, 0x7f, 0xd6, 0xc5, 0xa6,
	0x29, 0xf1, 0xb7, 0x34, 0x30, 0x85, 0x15, 0x2b, 0x85, 0x0a, 0xc5, 0x44, 0xd2, 0x70, 0x99, 0x87,
	0x94, 0xcd, 0x6d, 0x1e, 0x02, 0xf1, 0x31, 0xb5, 0xe2, 0xc1, 0x8c, 0x0a, 0xea, 0x06, 0xf7, 0x0b,
	0x38, 0x72, 0x14, 0x68, 0x9d, 0xb0, 0xdb, 0x0d, 0xe2, 0xbb, 0x14, 0xf9, 0xb1, 0xd4, 0x43, 0xe4,
	0x6c, 0x68, 0xa0, 0xde, 0xea, 0xbd, 0x27, 0xb6, 0xd4, 0x34, 0x4e, 0x92, 0x93, 0x25, 0x30, 0x4e,
	0xce, 0xea, 0xf4, 0x8d, 0x52, 0x43, 0xa2, 0x92, 0x68, 0x79, 0xad, 0xf3, 0x60, 0x5f, 0x6b, 0x54,
	0x94, 0x16, 0x38, 0x36, 0x7a, 0x1f, 0xa0, 0x08, 0x73, 0x83, 0x82, 0x43, 0x3a, 0xdc, 0xa3, 0x7b,
	0xfd, 0x6a, 0xc7, 0xba, 0xc8, 0x83, 0x58, 0xd3, 0x59, 0x2a, 0xc9, 0xf4, 0x80, 0x03, 0xd7, 0x75,
	0x28, 0x48, 0xe3, 0x70, 0x7a, 0x19, 0x98, 0x9c, 0xda, 0x86, 0xb4, 0x26, 0xd2, 0x66, 0x47, 0x5e,
	0x87, 0x08, 0x1e, 0x48, 0x97, 0xf2, 0xfb, 0x05, 0xa6, 0xa7, 0x1d, 0x16, 0xba, 0xd3, 0x7f, 0xe6,
	0xe8, 0xcf, 0x88, 0x4c, 0x3e, 0x38, 0x04, 0x14, 0x55, 0x39, 0xd0, 0xa8, 0x54, 0x06, 0x53, 0xee,
	0x9f, 0x7b, 0x16, 0x51, 0xdb, 0x37, 0xf6, 0x60, 0xe0, 0x4b, 0x96, 0xd6, 0x87, 0xce, 0x69, 0x8d,
	0x0a, 0xe4, 0xd5, 0x62, 0x26, 0x2f, 0x63, 0x20, 0xe1, 0x12, 0x11, 0x56, 0xf0, 0x27, 0x0c, 0xf4,
	0x7f, 0x25, 0xda, 0x55, 0x1f, 0xbc, 0x87, 0x83, 0xbe, 0x5f, 0x04, 0x51, 0xa5, 0x38, 0x8b, 0xfe,
	0xd0, 0x51, 0x08, 0x0d, 0xce, 0x83, 0x75, 0xde, 0xfe, 0xef, 0x9a, 0xd8, 0xbb, 0xed, 0x0f, 0x8a,
	0x69, 0x96, 0x6b, 0xfa, 0x5d, 0x0e, 0xa0, 0xa3, 0x2c, 0x5a, 0x95, 0x33, 0x27, 0x62, 0x1e, 0xca,
	0x32, 0xa6, 0x34, 0xd8, 0xb0, 0x06, 0x0a, 0x31, 0x6d, 0x98, 0x0d, 0xd4, 0xaf, 0x6d, 0x7d, 0x75,
	0xf3, 0xeb, 0x96, 0xeb, 0x66, 0x3f, 0x28, 0xe6, 0xb6, 0xc3, 0x27, 0x30, 0x95, 0x07, 0x39, 0xd2,
	0x88, 0xcb, 0x13, 0x7f, 0x4f, 0x24, 0x15, 0x04, 0x3b, 0x71, 0xa2, 0x4b, 0x2e, 0xd2, 0x98, 0x7a,
	0xb7, 0x49, 0x5f, 0x5b, 0x7d, 0x70, 0xae, 0x29, 0xc2, 0x45, 0xc1, 0x61, 0x38, 0x5a, 0xd9, 0x0a,
	0x91, 0x24, 0x13, 0x3f, 0x84, 0x87, 0xf2, 0xec, 0x7a, 0x65, 0xf1, 0xeb, 0x61, 0x2c, 0xe3, 0x5f,
	0xae, 0xe9, 0x6c, 0x59, 0x10, 0xf9, 0xbf, 0x70, 0xae, 0xe4, 0xc8, 0x91, 0x91, 0x21, 0x87, 0xd0,
	0x78, 0xe0, 0xa1, 0x68, 0x12, 0x46, 0x4e, 0x30, 0xf2, 0xb0, 0xef, 0xda, 0x70, 0x2c, 0x33, 0x0e,
	0x41, 0x45, 0x77, 0x6b, 0x15, 0x1f, 0x65, 0x0d, 0xa8, 0x39, 0xed, 0x19, 0x45, 0x50, 0x34, 0xa2,
	0x75, 0xeb, 0xfa, 0x0b, 0x93, 0xd6, 0xdc, 0x09, 0xab, 0xb3, 0xfe, 0x7a, 0xe3, 0xe6, 0x44, 0x08,
	0x27, 0xe3, 0xd3, 0x32, 0xa9, 0xbb, 0xc0, 0xc3, 0x86, 0xce, 0xa6, 0xd2, 0x74, 0x11, 0x8a, 0x30,
	0x09, 0xba, 0x20, 0x0a, 0x29, 0xc2, 0xe1, 0xe6, 0xc1, 0x0a, 0x1d, 0x70, 0x9e, 0x39, 0x03, 0xee,
	0x8b, 0x4d, 0x63, 0x38, 0xcb, 0xad, 0xd8, 0xfd, 0xb1, 0xd8, 0x36, 0x08, 0x09, 0x46, 0x89, 0xe4,
	0x7d, 0x9e, 0xb8, 0x13, 0xd3, 0xa0, 0x5d, 0xb3, 0x76, 0x16, 0x12, 0xfd, 0x4f, 0x44, 0xa7, 0xf8,
	0xb8, 0x7c, 0x76, 0xbd, 0x7e, 0x42, 0x59, 0x1a, 0x4c, 0xcb, 0xff, 0xad, 0xd8, 0x5b, 0x17, 0x4c,
	0x3b, 0xd0, 0xf4, 0x51, 0x92, 0x73, 0x0d, 0x3d, 0x5c, 0xd3, 0x5f, 0x93, 0xf8, 0x50, 0x6c, 0x1c,
	0x60, 0xfc, 0x98, 0x58, 0x27, 0xaf, 0xaf, 0xfa, 0xbf, 0x13, 0x6f, 0xf3, 0x37, 0x5a, 0x9e, 0xd1,
	0xfe, 0x38, 0x4e, 0x83, 0x84, 0xf6, 0x41, 0x67, 0xfd, 0x7a, 0xd0, 0x3f, 0x11, 0x9d, 0x03, 0x2e,
	0x2f, 0x67, 0x55, 0xf3, 0x7b, 0xfd, 0x5b, 0xba, 0xf9, 0x3f, 0x17, 0x82, 0xa1, 0xc2, 0x2b, 0xbd,
	0x0f, 0x31, 0x14, 0xd0, 0x0f, 0x07, 0x94, 0xfb, 0xfd, 0xd7, 0x1f, 0xed, 0xfb, 0x65, 0x0b, 0x36,
	0xe3, 0x0a, 0xa1, 0x90, 0xa7, 0xac, 0xdc, 0x45, 0xd5, 0x7f, 0x21, 0xba, 0x47, 0x12, 0xdb, 0xf0,
	0x87, 0x0b, 0xfb, 0xad, 0x3a, 0xfa, 0x9e, 0xf5, 0x79, 0xdd, 0x8e, 0x61, 0x14, 0xd2, 0x6f, 0x82,
	0xdc, 0x8d, 0x77, 0xdc, 0x48, 0x8e, 0x6c, 0x51, 0x6d, 0xfa, 0x4f, 0xc4, 0xe6, 0x71, 0x8e, 0xe1,
	0x32, 0x5a, 0x83, 0x0e, 0x55, 0x40, 0xbe, 0x47, 0x1d, 0x27, 0xc1, 0xd8, 0x76, 0xae, 0x5f, 0x8a,
	0xae, 0xe1, 0x3c, 0x47, 0xc1, 0xa2, 0xaa, 0x5f, 0xdd, 0x80, 0xf0, 0x65, 0x45, 0xdd, 0x06, 0xd0,
	0x82, 0xf9, 0x3c, 0x59, 0x15, 0x63, 0x66, 0xc3, 0x7f, 0x2c, 0x5a, 0x66, 0x33, 0x2a, 0x36, 0x31,
	0x8f, 0xab, 0x3b, 0xaf, 0xdc, 0x4e, 0x68, 0xd3, 0x31, 0x6c, 0xe6, 0x16, 0xf7, 0x06, 0xce, 0x44,
	0xdc, 0x5d, 0xd3, 0xe6, 0x48, 0x6a, 0x8c, 0x4c, 0x6f, 0xb8, 0xeb, 0xe2, 0x2b, 0xa6, 0x7b, 0x81,
	0x29, 0x3c, 0xa6, 0x44, 0x16, 0x37, 0x5d, 0x44, 0x35, 0x08, 0xa7, 0xdc, 0x45, 0xee, 0xac, 0xab,
	0xcf, 0x53, 0x93, 0xff, 0x97, 0x9a, 0x53, 0xec, 0xf5, 0xe7, 0xb0, 0xe4, 0xfa, 0xda, 0xa9, 0x66,
	0xf4, 0x7f, 0xd3, 0x39, 0x85, 0x93, 0x87, 0x90, 0x6b, 0xeb, 0x5b, 0x41, 0x43, 0x53, 0x5f, 0xda,
	0x19, 0xb2, 0xb8, 0x51, 0x37, 0x5f, 0x73, 0xa3, 0x46, 0x7b, 0xc9, 0xae, 0xae, 0x92, 0x38, 0x95,
	0xe5, 0x54, 0xe6, 0x3f, 0x17, 0xbd, 0x23, 0x68, 0xb9, 0x3a, 0xce, 0xad, 0x23, 0x49, 0x1a, 0x77,
	0x22, 0xf4, 0xb5, 0x73, 0x79, 0xc5, 0xac, 0x06, 0x2d, 0x80, 0x43, 0x8e, 0x45, 0x65, 0x6a, 0x09,
	0x7d, 0x2a, 0x68, 0xa3, 0xa0, 0x3e, 0x95, 0x96, 0x77, 0x44, 0xdb, 0x98, 0x8d, 0xdb, 0x50, 0x38,
	0xad, 0x5a, 0x8d, 0x64, 0x37, 0x10, 0x37, 0x2b, 0x0f, 0xc5, 0xe6, 0x88, 0x7e, 0x38, 0x88, 0x77,
	0xfa, 0x95, 0x7d, 0xfe, 0x03, 0xba, 0x99, 0xc7, 0xe9, 0x61, 0x10, 0x4e, 0x24, 0xb9, 0xc1, 0x34,
	0x69, 0x16, 0xd4, 0xf5, 0xff, 0x51, 0xe3, 0x8b, 0x33, 0xcd, 0xae, 0x3c, 0x0d, 0xe3, 0xe7, 0xe0,
	0xa8, 0x9c, 0x09, 0xe8, 0x9b, 0x9b, 0x50, 0xdd, 0x0d, 0xd4, 0xcc, 0x41, 0x08, 0x27, 0x17, 0x77,
	0xcc, 0xc8, 0x9d, 0x46, 0x83, 0xa8, 0x74, 0x33, 0x59, 0x64, 0x1f, 0x2e, 0x36, 0x4c, 0x0a, 0x01,
	0x78, 0x81, 0x8d, 0x66, 0xcb, 0xed, 0x38, 0x59, 0x96, 0x43, 0xba, 0x72, 0xb3, 0x4d, 0xd3, 0x9d,
	0xcb, 0x32, 0x29, 0xac, 0x45, 0x27, 0x89, 0xd5, 0xb9, 0x0c, 0xcc, 0xdb, 0x05, 0x8f, 0x1a, 0x6e,
	0x8e, 0xfe, 0x2a, 0x1b, 0x99, 0x3e, 0x82, 0xb4, 0x6f, 0x5b, 0x4b, 0xa8, 0xba, 0x3b, 0xc0, 0xd6,
	0x6c, 0xeb, 0xdd, 0x4a, 0x0c, 0xdd, 0x66, 0x66, 0xb3, 0x6f, 0x79, 0xfd, 0x03, 0xdc, 0xc1, 0xc8,
	0x4a, 0x9c, 0xff, 0xf5, 0xe8, 0x3b, 0x19, 0x6a, 0xd4, 0xb6, 0xd2, 0xee, 0x9a, 0x8d, 0x3a, 0xb1,
	0xd8, 0x07, 0x86, 0x35, 0x8d, 0x4d, 0x89, 0xfc, 0x5c, 0xb4, 0x4f, 0x33, 0xba, 0x4b, 0x3e, 0x5f,
	0xc4, 0x91, 0x24, 0x1c, 0x8d, 0xe9, 0xc7, 0xf3, 0x3c, 0x5b, 0xcc, 0xad, 0x06, 0x34, 0x08, 0x11,
	0x6d, 0xa8, 0xe5, 0xdc, 0x66, 0xd1, 0x5f, 0xeb, 0xa2, 0x63, 0x2e, 0x73, 0xb8, 0xec, 0xe2, 0x6c,
	0x7e, 0x30, 0xc1, 0xcf, 0x6f, 0x78, 0x7e, 0xaa, 0x31, 0x4c, 0x6d, 0x0e, 0x16, 0xe8, 0xa6, 0xf5,
	0x72, 0x22, 0x63, 0xac, 0x9b, 0xeb, 0x2c, 0x9a, 0x09, 0x97, 0x39, 0x6e, 0xdc, 0x6b, 0xd5, 0x9e,
	0x5a, 0xc6, 0x08, 0xee, 0x42, 0xcd, 0xdc, 0x5c, 0x6b, 0x19, 0xe5, 0x88, 0xb7, 0xb5, 0x96, 0x4a,
	0x4d, 0xf7, 0xa5, 0xcb, 0xab, 0xc6, 0x3d, 0xd1, 0x71, 0x1e, 0xe7, 0x58, 0x0a, 0x97, 0xd6, 0x89,
	0xaa, 0xbe, 0x21, 0x25, 0x8a, 0x57, 0x3b, 0xee, 0x99, 0x6a, 0x2a, 0x57, 0xf6, 0x82, 0x00, 0xa7,
	0xe5, 0x92, 0x3a, 0x17, 0xd8, 0xb7, 0xdd, 0x0d, 0xc9, 0x40, 0xd1, 0xd8, 0xbb, 0xc3, 0x44, 0xba,
	0xff, 0xd2, 0x23, 0x42, 0x54, 0x8e, 0x5c, 0x3a, 0x18, 0xab, 0x43, 0x7a, 0xb2, 0xb1, 0x23, 0xd7,
	0x9f, 0x6a, 0xe2, 0x5d, 0x76, 0x9b, 0xab, 0xd6, 0x83, 0x74, 0x89, 0x79, 0xea, 0xab, 0x2c, 0x4e,
	0xc9, 0x89, 0xe8, 0xd3, 0x31, 0x13, 0xcc, 0x83, 0xd1, 0x51, 0x59, 0x54, 0x9d, 0x01, 0xa0, 0xd5,
	0x1d, 0x2d, 0x92, 0x89, 0xd4, 0xe5, 0x95, 0xbc, 0x41, 0xef, 0x30, 0x95, 0xed, 0xa7, 0xa5, 0x83,
	0x6f, 0x7a, 0x80, 0x5f, 0x0c, 0xfc, 0x5f, 0x8b, 0x07, 0x3f, 0xa2, 0x0b, 0x4f, 0x04, 0x1f, 0xd9,
	0xcb, 0xb3, 0xc9, 0xcb, 0x07, 0xfd, 0x1f, 0xd7, 0x1b, 0x45, 0x7a, 0xef, 0x78, 0x91, 0x86, 0xfc,
	0x34, 0xf4, 0xf5, 0x5c, 0xa6, 0x0c, 0x62, 0x7a, 0x1c, 0x01, 0x91, 0x81, 0x4b, 0x32, 0x5a, 0xfe,
	0x4b, 0x71, 0x17, 0x83, 0x3f, 0x3d, 0xbc, 0x94, 0x62, 0x10, 0xe3, 0xaa, 0x79, 0x0e, 0xf4, 0x15,
	0x8d, 0x07, 0x65, 0x89, 0xbc, 0x69, 0x07, 0x97, 0x4a, 0xff, 0x0f, 0x35, 0xb1, 0x6b, 0x50, 0x61,
	0x9a, 0x2c, 0x0b, 0x85, 0xf3, 0xcd, 0xac, 0x71, 0x59, 0x24, 0x52, 0x11, 0xb4, 0x4b, 0xfb, 0x28,
	0xd0, 0x30, 0x29, 0x1c, 0xab, 0x4b, 0x9a, 0x74, 0xdd, 0xa3, 0x0e, 0xdd, 0x0f, 0xd0, 0x16, 0xad,
	0x3a, 0x9b, 0xae, 0xd8, 0x55, 0xd1, 0x06, 0x16, 0xf3, 0xee, 0xc3, 0x23, 0xa8, 0xb9, 0x9e, 0x7f,
	0x89, 0x8b, 0x55, 0x3c, 0x9b, 0x27, 0xb6, 0x01, 0x3b, 0xcb, 0x4c, 0x13, 0x2e, 0xf2, 0x71, 0xa3,
	0x6c, 0xcc, 0x03, 0xd7, 0x91, 0x2e, 0xc4, 0xee, 0x45, 0x46, 0x17, 0xc9, 0xd0, 0x6c, 0x7d, 0xa1,
	0xc6, 0xb7, 0xfa, 0x57, 0x38, 0x8b, 0xec, 0x30, 0x86, 0x0f, 0xcc, 0x72, 0x76, 0x0c, 0xc3, 0x87,
	0xcc, 0xcd, 0xc5, 0xa6, 0x5b, 0xbc, 0x76, 0x50, 0x74, 0x3b, 0x18, 0xcb, 0x3b, 0xf4, 0xbc, 0x75,
	0x40, 0xcf, 0x5e, 0x76, 0x12, 0x1b, 0x57, 0x27, 0x3c, 0x0b, 0xd5, 0x7a, 0xf5, 0xb5, 0xab, 0xe2,
	0xd4, 0xdf, 0x8b, 0xdd, 0x13, 0x5c, 0x64, 0xbf, 0xc5, 0x10, 0x3e, 0x51, 0xf6, 0xb2, 0xfa, 0x81,
	0x79, 0x2b, 0x30, 0x34, 0x8b, 0x8b, 0xdd, 0x3e, 0xd9, 0xc6, 0x69, 0x60, 0xe7, 0x84, 0xf7, 0x45,
	0x6b, 0x16, 0x5c, 0x5f, 0xbe, 0x22, 0x2e, 0x3b, 0xe9, 0xdc, 0x62, 0xf2, 0xff, 0x55, 0x13, 0x3d,
	0x13, 0x33, 0x96, 0x56, 0xa9, 0x22, 0x37, 0xa3, 0x46, 0xd7, 0x47, 0x35, 0x4f, 0x2f, 0x7f, 0xa4,
	0x92, 0x20, 0x32, 0xe6, 0xa4, 0xe2, 0x22, 0x40, 0x2a, 0xda, 0xd3, 0x8b, 0xa7, 0x96, 0x57, 0x66,
	0x96, 0x37, 0xad, 0xf2, 0xb1, 0x68, 0x97, 0x3c, 0x0a, 0x21, 0xfd, 0x1f, 0xec, 0x68, 0xbe, 0xde,
	0x0e, 0x3a, 0x2f, 0x67, 0xe7, 0x14, 0x4d, 0x74, 0xc3, 0xff, 0x7b, 0x4d, 0xdc, 0x33, 0xb6, 0xed,
	0x8f, 0xe2, 0x04, 0x77, 0x8a, 0xfd, 0xe5, 0xd8, 0xbd, 0xc7, 0x3a, 0x53, 0x8a, 0xc0, 0xce, 0xe2,
	0xd4, 0xce, 0x19, 0xe8, 0x91, 0x57, 0x63, 0xdb, 0xfd, 0x61, 0xe3, 0xf5, 0x67, 0x67, 0xda, 0xa6,
	0x2f, 0xad, 0x68, 0xfb, 0xcc, 0x47, 0xef, 0xe7, 0x72, 0x54, 0x3e, 0xa6, 0xc3, 0x10, 0x7b, 0xa7,
	0xc1, 0xc7, 0x28, 0x99, 0xb2, 0xa6, 0xe6, 0x81, 0x5e, 0x27, 0xe6, 0xd5, 0x8f, 0xf6, 0xcf, 0xaf,
	0x6c, 0xd9, 0xc3, 0x6f, 0x9d, 0x71, 0xd1, 0x63, 0xa6, 0xb9, 0x56, 0xb6, 0xe2, 0xad, 0xb9, 0x9e,
	0x6f, 0xa0, 0xfe, 0x5b, 0x62, 0x73, 0x90, 0xea, 0x2f, 0x3e, 0x57, 0xe6, 0x54, 0x13, 0xf2, 0xc6,
	0xc7, 0x9e, 0x68, 0x15, 0xd3, 0x3e, 0x56, 0xb6, 0xce, 0xe5, 0x78, 0x91, 0x04, 0xf9, 0x6e, 0xed,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x2f, 0xf7, 0xda, 0x62, 0x18, 0x00, 0x00,
}
