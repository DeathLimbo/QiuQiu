// Code generated by protoc-gen-go.
// source: peerless.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerlessLoginSendDataS2C_MsgID int32

const (
	PeerlessLoginSendDataS2C_eMsgID PeerlessLoginSendDataS2C_MsgID = 4353
)

var PeerlessLoginSendDataS2C_MsgID_name = map[int32]string{
	4353: "eMsgID",
}
var PeerlessLoginSendDataS2C_MsgID_value = map[string]int32{
	"eMsgID": 4353,
}

func (x PeerlessLoginSendDataS2C_MsgID) Enum() *PeerlessLoginSendDataS2C_MsgID {
	p := new(PeerlessLoginSendDataS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessLoginSendDataS2C_MsgID) String() string {
	return proto.EnumName(PeerlessLoginSendDataS2C_MsgID_name, int32(x))
}
func (x *PeerlessLoginSendDataS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessLoginSendDataS2C_MsgID_value, data, "PeerlessLoginSendDataS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessLoginSendDataS2C_MsgID(value)
	return nil
}
func (PeerlessLoginSendDataS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{18, 0}
}

type PeerlessGetDanRewardC2S_MsgID int32

const (
	PeerlessGetDanRewardC2S_eMsgID PeerlessGetDanRewardC2S_MsgID = 4354
)

var PeerlessGetDanRewardC2S_MsgID_name = map[int32]string{
	4354: "eMsgID",
}
var PeerlessGetDanRewardC2S_MsgID_value = map[string]int32{
	"eMsgID": 4354,
}

func (x PeerlessGetDanRewardC2S_MsgID) Enum() *PeerlessGetDanRewardC2S_MsgID {
	p := new(PeerlessGetDanRewardC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessGetDanRewardC2S_MsgID) String() string {
	return proto.EnumName(PeerlessGetDanRewardC2S_MsgID_name, int32(x))
}
func (x *PeerlessGetDanRewardC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetDanRewardC2S_MsgID_value, data, "PeerlessGetDanRewardC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetDanRewardC2S_MsgID(value)
	return nil
}
func (PeerlessGetDanRewardC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{19, 0}
}

type PeerlessGetDanRewardS2C_MsgID int32

const (
	PeerlessGetDanRewardS2C_eMsgID PeerlessGetDanRewardS2C_MsgID = 4354
)

var PeerlessGetDanRewardS2C_MsgID_name = map[int32]string{
	4354: "eMsgID",
}
var PeerlessGetDanRewardS2C_MsgID_value = map[string]int32{
	"eMsgID": 4354,
}

func (x PeerlessGetDanRewardS2C_MsgID) Enum() *PeerlessGetDanRewardS2C_MsgID {
	p := new(PeerlessGetDanRewardS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessGetDanRewardS2C_MsgID) String() string {
	return proto.EnumName(PeerlessGetDanRewardS2C_MsgID_name, int32(x))
}
func (x *PeerlessGetDanRewardS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetDanRewardS2C_MsgID_value, data, "PeerlessGetDanRewardS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetDanRewardS2C_MsgID(value)
	return nil
}
func (PeerlessGetDanRewardS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{20, 0}
}

type PeerlessGetChallengeHistoryC2S_MsgID int32

const (
	PeerlessGetChallengeHistoryC2S_eMsgID PeerlessGetChallengeHistoryC2S_MsgID = 4355
)

var PeerlessGetChallengeHistoryC2S_MsgID_name = map[int32]string{
	4355: "eMsgID",
}
var PeerlessGetChallengeHistoryC2S_MsgID_value = map[string]int32{
	"eMsgID": 4355,
}

func (x PeerlessGetChallengeHistoryC2S_MsgID) Enum() *PeerlessGetChallengeHistoryC2S_MsgID {
	p := new(PeerlessGetChallengeHistoryC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessGetChallengeHistoryC2S_MsgID) String() string {
	return proto.EnumName(PeerlessGetChallengeHistoryC2S_MsgID_name, int32(x))
}
func (x *PeerlessGetChallengeHistoryC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetChallengeHistoryC2S_MsgID_value, data, "PeerlessGetChallengeHistoryC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetChallengeHistoryC2S_MsgID(value)
	return nil
}
func (PeerlessGetChallengeHistoryC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{21, 0}
}

type PeerlessGetChallengeHistoryS2C_MsgID int32

const (
	PeerlessGetChallengeHistoryS2C_eMsgID PeerlessGetChallengeHistoryS2C_MsgID = 4355
)

var PeerlessGetChallengeHistoryS2C_MsgID_name = map[int32]string{
	4355: "eMsgID",
}
var PeerlessGetChallengeHistoryS2C_MsgID_value = map[string]int32{
	"eMsgID": 4355,
}

func (x PeerlessGetChallengeHistoryS2C_MsgID) Enum() *PeerlessGetChallengeHistoryS2C_MsgID {
	p := new(PeerlessGetChallengeHistoryS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessGetChallengeHistoryS2C_MsgID) String() string {
	return proto.EnumName(PeerlessGetChallengeHistoryS2C_MsgID_name, int32(x))
}
func (x *PeerlessGetChallengeHistoryS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetChallengeHistoryS2C_MsgID_value, data, "PeerlessGetChallengeHistoryS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetChallengeHistoryS2C_MsgID(value)
	return nil
}
func (PeerlessGetChallengeHistoryS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{22, 0}
}

type PeerlessGetRankDataC2S_MsgID int32

const (
	PeerlessGetRankDataC2S_eMsgID PeerlessGetRankDataC2S_MsgID = 4356
)

var PeerlessGetRankDataC2S_MsgID_name = map[int32]string{
	4356: "eMsgID",
}
var PeerlessGetRankDataC2S_MsgID_value = map[string]int32{
	"eMsgID": 4356,
}

func (x PeerlessGetRankDataC2S_MsgID) Enum() *PeerlessGetRankDataC2S_MsgID {
	p := new(PeerlessGetRankDataC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessGetRankDataC2S_MsgID) String() string {
	return proto.EnumName(PeerlessGetRankDataC2S_MsgID_name, int32(x))
}
func (x *PeerlessGetRankDataC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetRankDataC2S_MsgID_value, data, "PeerlessGetRankDataC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetRankDataC2S_MsgID(value)
	return nil
}
func (PeerlessGetRankDataC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{23, 0}
}

type PeerlessGetRankDataS2C_MsgID int32

const (
	PeerlessGetRankDataS2C_eMsgID PeerlessGetRankDataS2C_MsgID = 4356
)

var PeerlessGetRankDataS2C_MsgID_name = map[int32]string{
	4356: "eMsgID",
}
var PeerlessGetRankDataS2C_MsgID_value = map[string]int32{
	"eMsgID": 4356,
}

func (x PeerlessGetRankDataS2C_MsgID) Enum() *PeerlessGetRankDataS2C_MsgID {
	p := new(PeerlessGetRankDataS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessGetRankDataS2C_MsgID) String() string {
	return proto.EnumName(PeerlessGetRankDataS2C_MsgID_name, int32(x))
}
func (x *PeerlessGetRankDataS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetRankDataS2C_MsgID_value, data, "PeerlessGetRankDataS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetRankDataS2C_MsgID(value)
	return nil
}
func (PeerlessGetRankDataS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{24, 0}
}

type PeerlessGetGetOppListC2S_MsgID int32

const (
	PeerlessGetGetOppListC2S_eMsgID PeerlessGetGetOppListC2S_MsgID = 4357
)

var PeerlessGetGetOppListC2S_MsgID_name = map[int32]string{
	4357: "eMsgID",
}
var PeerlessGetGetOppListC2S_MsgID_value = map[string]int32{
	"eMsgID": 4357,
}

func (x PeerlessGetGetOppListC2S_MsgID) Enum() *PeerlessGetGetOppListC2S_MsgID {
	p := new(PeerlessGetGetOppListC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessGetGetOppListC2S_MsgID) String() string {
	return proto.EnumName(PeerlessGetGetOppListC2S_MsgID_name, int32(x))
}
func (x *PeerlessGetGetOppListC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetGetOppListC2S_MsgID_value, data, "PeerlessGetGetOppListC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetGetOppListC2S_MsgID(value)
	return nil
}
func (PeerlessGetGetOppListC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{25, 0}
}

type PeerlessGetGetOppListS2C_MsgID int32

const (
	PeerlessGetGetOppListS2C_eMsgID PeerlessGetGetOppListS2C_MsgID = 4357
)

var PeerlessGetGetOppListS2C_MsgID_name = map[int32]string{
	4357: "eMsgID",
}
var PeerlessGetGetOppListS2C_MsgID_value = map[string]int32{
	"eMsgID": 4357,
}

func (x PeerlessGetGetOppListS2C_MsgID) Enum() *PeerlessGetGetOppListS2C_MsgID {
	p := new(PeerlessGetGetOppListS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessGetGetOppListS2C_MsgID) String() string {
	return proto.EnumName(PeerlessGetGetOppListS2C_MsgID_name, int32(x))
}
func (x *PeerlessGetGetOppListS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetGetOppListS2C_MsgID_value, data, "PeerlessGetGetOppListS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetGetOppListS2C_MsgID(value)
	return nil
}
func (PeerlessGetGetOppListS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{26, 0}
}

type PeerlessChallengeC2S_MsgID int32

const (
	PeerlessChallengeC2S_eMsgID PeerlessChallengeC2S_MsgID = 4358
)

var PeerlessChallengeC2S_MsgID_name = map[int32]string{
	4358: "eMsgID",
}
var PeerlessChallengeC2S_MsgID_value = map[string]int32{
	"eMsgID": 4358,
}

func (x PeerlessChallengeC2S_MsgID) Enum() *PeerlessChallengeC2S_MsgID {
	p := new(PeerlessChallengeC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessChallengeC2S_MsgID) String() string {
	return proto.EnumName(PeerlessChallengeC2S_MsgID_name, int32(x))
}
func (x *PeerlessChallengeC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessChallengeC2S_MsgID_value, data, "PeerlessChallengeC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessChallengeC2S_MsgID(value)
	return nil
}
func (PeerlessChallengeC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{27, 0}
}

type PeerlessChallengeS2C_MsgID int32

const (
	PeerlessChallengeS2C_eMsgID PeerlessChallengeS2C_MsgID = 4358
)

var PeerlessChallengeS2C_MsgID_name = map[int32]string{
	4358: "eMsgID",
}
var PeerlessChallengeS2C_MsgID_value = map[string]int32{
	"eMsgID": 4358,
}

func (x PeerlessChallengeS2C_MsgID) Enum() *PeerlessChallengeS2C_MsgID {
	p := new(PeerlessChallengeS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessChallengeS2C_MsgID) String() string {
	return proto.EnumName(PeerlessChallengeS2C_MsgID_name, int32(x))
}
func (x *PeerlessChallengeS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessChallengeS2C_MsgID_value, data, "PeerlessChallengeS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessChallengeS2C_MsgID(value)
	return nil
}
func (PeerlessChallengeS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{28, 0}
}

type PeerlessDailyRefreshS2C_MsgID int32

const (
	PeerlessDailyRefreshS2C_eMsgID PeerlessDailyRefreshS2C_MsgID = 4359
)

var PeerlessDailyRefreshS2C_MsgID_name = map[int32]string{
	4359: "eMsgID",
}
var PeerlessDailyRefreshS2C_MsgID_value = map[string]int32{
	"eMsgID": 4359,
}

func (x PeerlessDailyRefreshS2C_MsgID) Enum() *PeerlessDailyRefreshS2C_MsgID {
	p := new(PeerlessDailyRefreshS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessDailyRefreshS2C_MsgID) String() string {
	return proto.EnumName(PeerlessDailyRefreshS2C_MsgID_name, int32(x))
}
func (x *PeerlessDailyRefreshS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessDailyRefreshS2C_MsgID_value, data, "PeerlessDailyRefreshS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessDailyRefreshS2C_MsgID(value)
	return nil
}
func (PeerlessDailyRefreshS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{29, 0}
}

type PeerlessBuyCountC2S_MsgID int32

const (
	PeerlessBuyCountC2S_eMsgID PeerlessBuyCountC2S_MsgID = 4360
)

var PeerlessBuyCountC2S_MsgID_name = map[int32]string{
	4360: "eMsgID",
}
var PeerlessBuyCountC2S_MsgID_value = map[string]int32{
	"eMsgID": 4360,
}

func (x PeerlessBuyCountC2S_MsgID) Enum() *PeerlessBuyCountC2S_MsgID {
	p := new(PeerlessBuyCountC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessBuyCountC2S_MsgID) String() string {
	return proto.EnumName(PeerlessBuyCountC2S_MsgID_name, int32(x))
}
func (x *PeerlessBuyCountC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessBuyCountC2S_MsgID_value, data, "PeerlessBuyCountC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessBuyCountC2S_MsgID(value)
	return nil
}
func (PeerlessBuyCountC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{30, 0}
}

type PeerlessBuyCountS2C_MsgID int32

const (
	PeerlessBuyCountS2C_eMsgID PeerlessBuyCountS2C_MsgID = 4360
)

var PeerlessBuyCountS2C_MsgID_name = map[int32]string{
	4360: "eMsgID",
}
var PeerlessBuyCountS2C_MsgID_value = map[string]int32{
	"eMsgID": 4360,
}

func (x PeerlessBuyCountS2C_MsgID) Enum() *PeerlessBuyCountS2C_MsgID {
	p := new(PeerlessBuyCountS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessBuyCountS2C_MsgID) String() string {
	return proto.EnumName(PeerlessBuyCountS2C_MsgID_name, int32(x))
}
func (x *PeerlessBuyCountS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessBuyCountS2C_MsgID_value, data, "PeerlessBuyCountS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessBuyCountS2C_MsgID(value)
	return nil
}
func (PeerlessBuyCountS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{31, 0}
}

type PeerlessGetDanRankC2S_MsgID int32

const (
	PeerlessGetDanRankC2S_eMsgID PeerlessGetDanRankC2S_MsgID = 4362
)

var PeerlessGetDanRankC2S_MsgID_name = map[int32]string{
	4362: "eMsgID",
}
var PeerlessGetDanRankC2S_MsgID_value = map[string]int32{
	"eMsgID": 4362,
}

func (x PeerlessGetDanRankC2S_MsgID) Enum() *PeerlessGetDanRankC2S_MsgID {
	p := new(PeerlessGetDanRankC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessGetDanRankC2S_MsgID) String() string {
	return proto.EnumName(PeerlessGetDanRankC2S_MsgID_name, int32(x))
}
func (x *PeerlessGetDanRankC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetDanRankC2S_MsgID_value, data, "PeerlessGetDanRankC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetDanRankC2S_MsgID(value)
	return nil
}
func (PeerlessGetDanRankC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{32, 0}
}

type PeerlessGetDanRankS2C_MsgID int32

const (
	PeerlessGetDanRankS2C_eMsgID PeerlessGetDanRankS2C_MsgID = 4362
)

var PeerlessGetDanRankS2C_MsgID_name = map[int32]string{
	4362: "eMsgID",
}
var PeerlessGetDanRankS2C_MsgID_value = map[string]int32{
	"eMsgID": 4362,
}

func (x PeerlessGetDanRankS2C_MsgID) Enum() *PeerlessGetDanRankS2C_MsgID {
	p := new(PeerlessGetDanRankS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessGetDanRankS2C_MsgID) String() string {
	return proto.EnumName(PeerlessGetDanRankS2C_MsgID_name, int32(x))
}
func (x *PeerlessGetDanRankS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessGetDanRankS2C_MsgID_value, data, "PeerlessGetDanRankS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessGetDanRankS2C_MsgID(value)
	return nil
}
func (PeerlessGetDanRankS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{33, 0}
}

type PeerlessSyncRankingS2C_MsgID int32

const (
	PeerlessSyncRankingS2C_eMsgID PeerlessSyncRankingS2C_MsgID = 4363
)

var PeerlessSyncRankingS2C_MsgID_name = map[int32]string{
	4363: "eMsgID",
}
var PeerlessSyncRankingS2C_MsgID_value = map[string]int32{
	"eMsgID": 4363,
}

func (x PeerlessSyncRankingS2C_MsgID) Enum() *PeerlessSyncRankingS2C_MsgID {
	p := new(PeerlessSyncRankingS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessSyncRankingS2C_MsgID) String() string {
	return proto.EnumName(PeerlessSyncRankingS2C_MsgID_name, int32(x))
}
func (x *PeerlessSyncRankingS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessSyncRankingS2C_MsgID_value, data, "PeerlessSyncRankingS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessSyncRankingS2C_MsgID(value)
	return nil
}
func (PeerlessSyncRankingS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{34, 0}
}

type PeerlessRefreshPeriodsS2C_MsgID int32

const (
	PeerlessRefreshPeriodsS2C_eMsgID PeerlessRefreshPeriodsS2C_MsgID = 4364
)

var PeerlessRefreshPeriodsS2C_MsgID_name = map[int32]string{
	4364: "eMsgID",
}
var PeerlessRefreshPeriodsS2C_MsgID_value = map[string]int32{
	"eMsgID": 4364,
}

func (x PeerlessRefreshPeriodsS2C_MsgID) Enum() *PeerlessRefreshPeriodsS2C_MsgID {
	p := new(PeerlessRefreshPeriodsS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessRefreshPeriodsS2C_MsgID) String() string {
	return proto.EnumName(PeerlessRefreshPeriodsS2C_MsgID_name, int32(x))
}
func (x *PeerlessRefreshPeriodsS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessRefreshPeriodsS2C_MsgID_value, data, "PeerlessRefreshPeriodsS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessRefreshPeriodsS2C_MsgID(value)
	return nil
}
func (PeerlessRefreshPeriodsS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{35, 0}
}

type PeerlessOneKeyGetDanRewardC2S_MsgID int32

const (
	PeerlessOneKeyGetDanRewardC2S_eMsgID PeerlessOneKeyGetDanRewardC2S_MsgID = 4365
)

var PeerlessOneKeyGetDanRewardC2S_MsgID_name = map[int32]string{
	4365: "eMsgID",
}
var PeerlessOneKeyGetDanRewardC2S_MsgID_value = map[string]int32{
	"eMsgID": 4365,
}

func (x PeerlessOneKeyGetDanRewardC2S_MsgID) Enum() *PeerlessOneKeyGetDanRewardC2S_MsgID {
	p := new(PeerlessOneKeyGetDanRewardC2S_MsgID)
	*p = x
	return p
}
func (x PeerlessOneKeyGetDanRewardC2S_MsgID) String() string {
	return proto.EnumName(PeerlessOneKeyGetDanRewardC2S_MsgID_name, int32(x))
}
func (x *PeerlessOneKeyGetDanRewardC2S_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessOneKeyGetDanRewardC2S_MsgID_value, data, "PeerlessOneKeyGetDanRewardC2S_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessOneKeyGetDanRewardC2S_MsgID(value)
	return nil
}
func (PeerlessOneKeyGetDanRewardC2S_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{36, 0}
}

type PeerlessOneKeyGetDanRewardS2C_MsgID int32

const (
	PeerlessOneKeyGetDanRewardS2C_eMsgID PeerlessOneKeyGetDanRewardS2C_MsgID = 4365
)

var PeerlessOneKeyGetDanRewardS2C_MsgID_name = map[int32]string{
	4365: "eMsgID",
}
var PeerlessOneKeyGetDanRewardS2C_MsgID_value = map[string]int32{
	"eMsgID": 4365,
}

func (x PeerlessOneKeyGetDanRewardS2C_MsgID) Enum() *PeerlessOneKeyGetDanRewardS2C_MsgID {
	p := new(PeerlessOneKeyGetDanRewardS2C_MsgID)
	*p = x
	return p
}
func (x PeerlessOneKeyGetDanRewardS2C_MsgID) String() string {
	return proto.EnumName(PeerlessOneKeyGetDanRewardS2C_MsgID_name, int32(x))
}
func (x *PeerlessOneKeyGetDanRewardS2C_MsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerlessOneKeyGetDanRewardS2C_MsgID_value, data, "PeerlessOneKeyGetDanRewardS2C_MsgID")
	if err != nil {
		return err
	}
	*x = PeerlessOneKeyGetDanRewardS2C_MsgID(value)
	return nil
}
func (PeerlessOneKeyGetDanRewardS2C_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor47, []int{37, 0}
}

// 玩家无双数据
type PeerlessData struct {
	// 进攻阵容顺序
	AttackSquadOrder []int32 `protobuf:"varint,1,rep,name=attackSquadOrder" json:"attackSquadOrder,omitempty"`
	// 防守阵容顺序
	DefenderSquadOrder []int32 `protobuf:"varint,2,rep,name=defenderSquadOrder" json:"defenderSquadOrder,omitempty"`
	// 已经领取的段位奖励
	DanReward []int32 `protobuf:"varint,3,rep,name=danReward" json:"danReward,omitempty"`
	// 今日挑战次数
	TodayChallengeCount *int32 `protobuf:"varint,4,opt,name=todayChallengeCount" json:"todayChallengeCount,omitempty"`
	// 下次挑战次数刷新时间
	NextChallengeCountRefreshTime *int64 `protobuf:"varint,5,opt,name=nextChallengeCountRefreshTime" json:"nextChallengeCountRefreshTime,omitempty"`
	// 下期开始时间，重置每期数据
	NextPeriodStartTime *int64 `protobuf:"varint,6,opt,name=nextPeriodStartTime" json:"nextPeriodStartTime,omitempty"`
	// 今日购买挑战次数的次数
	TodayBuyChallengeCount *int32 `protobuf:"varint,7,opt,name=todayBuyChallengeCount" json:"todayBuyChallengeCount,omitempty"`
	// 最高积分
	TopScore *int32 `protobuf:"varint,8,opt,name=topScore" json:"topScore,omitempty"`
	// 匹配到的对手gid列表
	MatchOppGidList []int32 `protobuf:"varint,9,rep,name=matchOppGidList" json:"matchOppGidList,omitempty"`
	// 下次结束时间
	NextPeriodEndTime *int64 `protobuf:"varint,10,opt,name=nextPeriodEndTime" json:"nextPeriodEndTime,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *PeerlessData) Reset()                    { *m = PeerlessData{} }
func (m *PeerlessData) String() string            { return proto.CompactTextString(m) }
func (*PeerlessData) ProtoMessage()               {}
func (*PeerlessData) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{0} }

func (m *PeerlessData) GetAttackSquadOrder() []int32 {
	if m != nil {
		return m.AttackSquadOrder
	}
	return nil
}

func (m *PeerlessData) GetDefenderSquadOrder() []int32 {
	if m != nil {
		return m.DefenderSquadOrder
	}
	return nil
}

func (m *PeerlessData) GetDanReward() []int32 {
	if m != nil {
		return m.DanReward
	}
	return nil
}

func (m *PeerlessData) GetTodayChallengeCount() int32 {
	if m != nil && m.TodayChallengeCount != nil {
		return *m.TodayChallengeCount
	}
	return 0
}

func (m *PeerlessData) GetNextChallengeCountRefreshTime() int64 {
	if m != nil && m.NextChallengeCountRefreshTime != nil {
		return *m.NextChallengeCountRefreshTime
	}
	return 0
}

func (m *PeerlessData) GetNextPeriodStartTime() int64 {
	if m != nil && m.NextPeriodStartTime != nil {
		return *m.NextPeriodStartTime
	}
	return 0
}

func (m *PeerlessData) GetTodayBuyChallengeCount() int32 {
	if m != nil && m.TodayBuyChallengeCount != nil {
		return *m.TodayBuyChallengeCount
	}
	return 0
}

func (m *PeerlessData) GetTopScore() int32 {
	if m != nil && m.TopScore != nil {
		return *m.TopScore
	}
	return 0
}

func (m *PeerlessData) GetMatchOppGidList() []int32 {
	if m != nil {
		return m.MatchOppGidList
	}
	return nil
}

func (m *PeerlessData) GetNextPeriodEndTime() int64 {
	if m != nil && m.NextPeriodEndTime != nil {
		return *m.NextPeriodEndTime
	}
	return 0
}

// 无双挑战记录 1
type PeerlessChallengeRecord struct {
	// 挑战记录信息
	InfoList         []*PeerlessChallengeRecordMatchInfo `protobuf:"bytes,1,rep,name=infoList" json:"infoList,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *PeerlessChallengeRecord) Reset()                    { *m = PeerlessChallengeRecord{} }
func (m *PeerlessChallengeRecord) String() string            { return proto.CompactTextString(m) }
func (*PeerlessChallengeRecord) ProtoMessage()               {}
func (*PeerlessChallengeRecord) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{1} }

func (m *PeerlessChallengeRecord) GetInfoList() []*PeerlessChallengeRecordMatchInfo {
	if m != nil {
		return m.InfoList
	}
	return nil
}

// 无双挑战记录比赛信息 2
type PeerlessChallengeRecordMatchInfo struct {
	// 挑战者信息
	AttackerInfo *PeerlessChallengeGamerInfo `protobuf:"bytes,1,opt,name=attackerInfo" json:"attackerInfo,omitempty"`
	// 被挑战者信息
	DefenderInfo *PeerlessChallengeGamerInfo `protobuf:"bytes,2,opt,name=defenderInfo" json:"defenderInfo,omitempty"`
	// 比赛信息（三场比赛）
	Records []*FightDataRecord `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
	// 挑战时间
	ChallengeTime    *int64 `protobuf:"varint,4,opt,name=challengeTime" json:"challengeTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessChallengeRecordMatchInfo) Reset()         { *m = PeerlessChallengeRecordMatchInfo{} }
func (m *PeerlessChallengeRecordMatchInfo) String() string { return proto.CompactTextString(m) }
func (*PeerlessChallengeRecordMatchInfo) ProtoMessage()    {}
func (*PeerlessChallengeRecordMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor47, []int{2}
}

func (m *PeerlessChallengeRecordMatchInfo) GetAttackerInfo() *PeerlessChallengeGamerInfo {
	if m != nil {
		return m.AttackerInfo
	}
	return nil
}

func (m *PeerlessChallengeRecordMatchInfo) GetDefenderInfo() *PeerlessChallengeGamerInfo {
	if m != nil {
		return m.DefenderInfo
	}
	return nil
}

func (m *PeerlessChallengeRecordMatchInfo) GetRecords() []*FightDataRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *PeerlessChallengeRecordMatchInfo) GetChallengeTime() int64 {
	if m != nil && m.ChallengeTime != nil {
		return *m.ChallengeTime
	}
	return 0
}

// 无双 挑战历史玩家信息
type PeerlessChallengeGamerInfo struct {
	// 挑战者信息
	GamerInfo *PeerlessGamerBaseInfo `protobuf:"bytes,1,opt,name=gamerInfo" json:"gamerInfo,omitempty"`
	// 积分
	Score *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	// 增量
	AddValue         *int32 `protobuf:"varint,3,opt,name=addValue" json:"addValue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessChallengeGamerInfo) Reset()                    { *m = PeerlessChallengeGamerInfo{} }
func (m *PeerlessChallengeGamerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessChallengeGamerInfo) ProtoMessage()               {}
func (*PeerlessChallengeGamerInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{3} }

func (m *PeerlessChallengeGamerInfo) GetGamerInfo() *PeerlessGamerBaseInfo {
	if m != nil {
		return m.GamerInfo
	}
	return nil
}

func (m *PeerlessChallengeGamerInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *PeerlessChallengeGamerInfo) GetAddValue() int32 {
	if m != nil && m.AddValue != nil {
		return *m.AddValue
	}
	return 0
}

// 无双 比赛信息(单场比赛)
type PeerlessMatchInfo struct {
	// 攻击方信息
	Attacker *PeerlessMatchCampInfo `protobuf:"bytes,1,opt,name=attacker" json:"attacker,omitempty"`
	// 防守方信息
	Defender *PeerlessMatchCampInfo `protobuf:"bytes,2,opt,name=defender" json:"defender,omitempty"`
	// 回放id
	ReplayId         *int64 `protobuf:"varint,3,opt,name=replayId" json:"replayId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessMatchInfo) Reset()                    { *m = PeerlessMatchInfo{} }
func (m *PeerlessMatchInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessMatchInfo) ProtoMessage()               {}
func (*PeerlessMatchInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{4} }

func (m *PeerlessMatchInfo) GetAttacker() *PeerlessMatchCampInfo {
	if m != nil {
		return m.Attacker
	}
	return nil
}

func (m *PeerlessMatchInfo) GetDefender() *PeerlessMatchCampInfo {
	if m != nil {
		return m.Defender
	}
	return nil
}

func (m *PeerlessMatchInfo) GetReplayId() int64 {
	if m != nil && m.ReplayId != nil {
		return *m.ReplayId
	}
	return 0
}

// 无双 比赛阵营信息
type PeerlessMatchCampInfo struct {
	// 阵型信息
	SquadInfo *PvpRoleSquadInfo `protobuf:"bytes,2,opt,name=squadInfo" json:"squadInfo,omitempty"`
	// 比赛得分
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessMatchCampInfo) Reset()                    { *m = PeerlessMatchCampInfo{} }
func (m *PeerlessMatchCampInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessMatchCampInfo) ProtoMessage()               {}
func (*PeerlessMatchCampInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{5} }

func (m *PeerlessMatchCampInfo) GetSquadInfo() *PvpRoleSquadInfo {
	if m != nil {
		return m.SquadInfo
	}
	return nil
}

func (m *PeerlessMatchCampInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 无双玩家信息(基础信息)
type PeerlessGamerBaseInfo struct {
	// 玩家id
	Gid *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// 玩家名称
	GamerName *string `protobuf:"bytes,2,opt,name=gamerName" json:"gamerName,omitempty"`
	// 区服id
	Sid *int32 `protobuf:"varint,3,opt,name=sid" json:"sid,omitempty"`
	// 玩家战力
	BattlePower *int32 `protobuf:"varint,4,opt,name=battlePower" json:"battlePower,omitempty"`
	// 半身像
	HalfId *int32 `protobuf:"varint,5,opt,name=halfId" json:"halfId,omitempty"`
	// 球队id
	TeamId *int32 `protobuf:"varint,6,opt,name=teamId" json:"teamId,omitempty"`
	// 球队id
	IsRobot *bool `protobuf:"varint,7,opt,name=isRobot" json:"isRobot,omitempty"`
	// 玩家等级
	GamerLv          *int32 `protobuf:"varint,8,opt,name=gamer_lv" json:"gamer_lv,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGamerBaseInfo) Reset()                    { *m = PeerlessGamerBaseInfo{} }
func (m *PeerlessGamerBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGamerBaseInfo) ProtoMessage()               {}
func (*PeerlessGamerBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{6} }

func (m *PeerlessGamerBaseInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *PeerlessGamerBaseInfo) GetGamerName() string {
	if m != nil && m.GamerName != nil {
		return *m.GamerName
	}
	return ""
}

func (m *PeerlessGamerBaseInfo) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

func (m *PeerlessGamerBaseInfo) GetBattlePower() int32 {
	if m != nil && m.BattlePower != nil {
		return *m.BattlePower
	}
	return 0
}

func (m *PeerlessGamerBaseInfo) GetHalfId() int32 {
	if m != nil && m.HalfId != nil {
		return *m.HalfId
	}
	return 0
}

func (m *PeerlessGamerBaseInfo) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *PeerlessGamerBaseInfo) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *PeerlessGamerBaseInfo) GetGamerLv() int32 {
	if m != nil && m.GamerLv != nil {
		return *m.GamerLv
	}
	return 0
}

// 无双排行榜item
type PeerlessRankItem struct {
	// 玩家信息
	GamerInfo *PeerlessGamerBaseInfo `protobuf:"bytes,1,opt,name=gamerInfo" json:"gamerInfo,omitempty"`
	// 积分
	Score            *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Time             *int64 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessRankItem) Reset()                    { *m = PeerlessRankItem{} }
func (m *PeerlessRankItem) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRankItem) ProtoMessage()               {}
func (*PeerlessRankItem) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{7} }

func (m *PeerlessRankItem) GetGamerInfo() *PeerlessGamerBaseInfo {
	if m != nil {
		return m.GamerInfo
	}
	return nil
}

func (m *PeerlessRankItem) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *PeerlessRankItem) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 段位排行
type PeerlessDanRank struct {
	// 段位
	Dan *int32 `protobuf:"varint,1,opt,name=dan" json:"dan,omitempty"`
	// 排行item列表
	ItemList []*PeerlessRankItem `protobuf:"bytes,2,rep,name=itemList" json:"itemList,omitempty"`
	// 段位人数
	DanNum           *int32 `protobuf:"varint,3,opt,name=danNum" json:"danNum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessDanRank) Reset()                    { *m = PeerlessDanRank{} }
func (m *PeerlessDanRank) String() string            { return proto.CompactTextString(m) }
func (*PeerlessDanRank) ProtoMessage()               {}
func (*PeerlessDanRank) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{8} }

func (m *PeerlessDanRank) GetDan() int32 {
	if m != nil && m.Dan != nil {
		return *m.Dan
	}
	return 0
}

func (m *PeerlessDanRank) GetItemList() []*PeerlessRankItem {
	if m != nil {
		return m.ItemList
	}
	return nil
}

func (m *PeerlessDanRank) GetDanNum() int32 {
	if m != nil && m.DanNum != nil {
		return *m.DanNum
	}
	return 0
}

// 无双 匹配玩家信息
type PeerlessGamerMatchInfo struct {
	// 玩家信息
	GamerInfo *PeerlessGamerBaseInfo `protobuf:"bytes,1,opt,name=gamerInfo" json:"gamerInfo,omitempty"`
	// 阵型信息
	SquadInfoList []*PeerlessRoleSquadInfo `protobuf:"bytes,2,rep,name=squadInfoList" json:"squadInfoList,omitempty"`
	// 战力
	BattleValue *int32 `protobuf:"varint,3,opt,name=battleValue" json:"battleValue,omitempty"`
	// 积分
	Score *int32 `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	// 排行
	Rank *int32 `protobuf:"varint,5,opt,name=rank" json:"rank,omitempty"`
	// 联盟名称
	AllianceName *string `protobuf:"bytes,6,opt,name=allianceName" json:"allianceName,omitempty"`
	// 玩家等级
	GamerLv          *int32 `protobuf:"varint,7,opt,name=gamer_lv" json:"gamer_lv,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGamerMatchInfo) Reset()                    { *m = PeerlessGamerMatchInfo{} }
func (m *PeerlessGamerMatchInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGamerMatchInfo) ProtoMessage()               {}
func (*PeerlessGamerMatchInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{9} }

func (m *PeerlessGamerMatchInfo) GetGamerInfo() *PeerlessGamerBaseInfo {
	if m != nil {
		return m.GamerInfo
	}
	return nil
}

func (m *PeerlessGamerMatchInfo) GetSquadInfoList() []*PeerlessRoleSquadInfo {
	if m != nil {
		return m.SquadInfoList
	}
	return nil
}

func (m *PeerlessGamerMatchInfo) GetBattleValue() int32 {
	if m != nil && m.BattleValue != nil {
		return *m.BattleValue
	}
	return 0
}

func (m *PeerlessGamerMatchInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *PeerlessGamerMatchInfo) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *PeerlessGamerMatchInfo) GetAllianceName() string {
	if m != nil && m.AllianceName != nil {
		return *m.AllianceName
	}
	return ""
}

func (m *PeerlessGamerMatchInfo) GetGamerLv() int32 {
	if m != nil && m.GamerLv != nil {
		return *m.GamerLv
	}
	return 0
}

// 无双阵容信息
type PeerlessRoleSquadInfo struct {
	// 阵容信息
	SquadInfo *PvpRoleSquadInfo `protobuf:"bytes,1,opt,name=squadInfo" json:"squadInfo,omitempty"`
	// 战力
	BattleValue      *int32 `protobuf:"varint,2,opt,name=battleValue" json:"battleValue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessRoleSquadInfo) Reset()                    { *m = PeerlessRoleSquadInfo{} }
func (m *PeerlessRoleSquadInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRoleSquadInfo) ProtoMessage()               {}
func (*PeerlessRoleSquadInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{10} }

func (m *PeerlessRoleSquadInfo) GetSquadInfo() *PvpRoleSquadInfo {
	if m != nil {
		return m.SquadInfo
	}
	return nil
}

func (m *PeerlessRoleSquadInfo) GetBattleValue() int32 {
	if m != nil && m.BattleValue != nil {
		return *m.BattleValue
	}
	return 0
}

// 无双机器人队伍信息
type PeerlessRobotTeamInfo struct {
	RobotId          *int32                    `protobuf:"varint,1,opt,name=robotId" json:"robotId,omitempty"`
	SquadList        []*PeerlessRobotSquadInfo `protobuf:"bytes,2,rep,name=squadList" json:"squadList,omitempty"`
	BattleValue      *int32                    `protobuf:"varint,4,opt,name=BattleValue" json:"BattleValue,omitempty"`
	NpcLv            *int32                    `protobuf:"varint,5,opt,name=NpcLv" json:"NpcLv,omitempty"`
	HalfId           *int32                    `protobuf:"varint,6,opt,name=halfId" json:"halfId,omitempty"`
	TeamId           *int32                    `protobuf:"varint,7,opt,name=teamId" json:"teamId,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *PeerlessRobotTeamInfo) Reset()                    { *m = PeerlessRobotTeamInfo{} }
func (m *PeerlessRobotTeamInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRobotTeamInfo) ProtoMessage()               {}
func (*PeerlessRobotTeamInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{11} }

func (m *PeerlessRobotTeamInfo) GetRobotId() int32 {
	if m != nil && m.RobotId != nil {
		return *m.RobotId
	}
	return 0
}

func (m *PeerlessRobotTeamInfo) GetSquadList() []*PeerlessRobotSquadInfo {
	if m != nil {
		return m.SquadList
	}
	return nil
}

func (m *PeerlessRobotTeamInfo) GetBattleValue() int32 {
	if m != nil && m.BattleValue != nil {
		return *m.BattleValue
	}
	return 0
}

func (m *PeerlessRobotTeamInfo) GetNpcLv() int32 {
	if m != nil && m.NpcLv != nil {
		return *m.NpcLv
	}
	return 0
}

func (m *PeerlessRobotTeamInfo) GetHalfId() int32 {
	if m != nil && m.HalfId != nil {
		return *m.HalfId
	}
	return 0
}

func (m *PeerlessRobotTeamInfo) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

// pvp的机器人球员信息
type PeerlessRobotBallerInfo struct {
	NIndexpos        *int32 `protobuf:"varint,1,opt,name=nIndexpos" json:"nIndexpos,omitempty"`
	NpcID            *int32 `protobuf:"varint,2,opt,name=npcID" json:"npcID,omitempty"`
	Quality          *int32 `protobuf:"varint,3,opt,name=quality" json:"quality,omitempty"`
	Level            *int32 `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	Star             *int32 `protobuf:"varint,5,opt,name=star" json:"star,omitempty"`
	ExtraAttrs       *int32 `protobuf:"varint,7,opt,name=extraAttrs" json:"extraAttrs,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessRobotBallerInfo) Reset()                    { *m = PeerlessRobotBallerInfo{} }
func (m *PeerlessRobotBallerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRobotBallerInfo) ProtoMessage()               {}
func (*PeerlessRobotBallerInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{12} }

func (m *PeerlessRobotBallerInfo) GetNIndexpos() int32 {
	if m != nil && m.NIndexpos != nil {
		return *m.NIndexpos
	}
	return 0
}

func (m *PeerlessRobotBallerInfo) GetNpcID() int32 {
	if m != nil && m.NpcID != nil {
		return *m.NpcID
	}
	return 0
}

func (m *PeerlessRobotBallerInfo) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *PeerlessRobotBallerInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *PeerlessRobotBallerInfo) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *PeerlessRobotBallerInfo) GetExtraAttrs() int32 {
	if m != nil && m.ExtraAttrs != nil {
		return *m.ExtraAttrs
	}
	return 0
}

// 机器人阵型
type PeerlessRobotSquadInfo struct {
	// 阵容类型
	Type *SquadType `protobuf:"varint,1,opt,name=type,enum=SquadType" json:"type,omitempty"`
	// 无双机器人主阵容球员信息
	Starter []*PeerlessRobotBallerInfo `protobuf:"bytes,2,rep,name=Starter" json:"Starter,omitempty"`
	// 无双机器人替补阵容球员信息
	Bench []*PeerlessRobotBallerInfo `protobuf:"bytes,3,rep,name=bench" json:"bench,omitempty"`
	// 战力
	BattleValue      *int32 `protobuf:"varint,4,opt,name=battleValue" json:"battleValue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessRobotSquadInfo) Reset()                    { *m = PeerlessRobotSquadInfo{} }
func (m *PeerlessRobotSquadInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRobotSquadInfo) ProtoMessage()               {}
func (*PeerlessRobotSquadInfo) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{13} }

func (m *PeerlessRobotSquadInfo) GetType() SquadType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SquadType_SquadNo
}

func (m *PeerlessRobotSquadInfo) GetStarter() []*PeerlessRobotBallerInfo {
	if m != nil {
		return m.Starter
	}
	return nil
}

func (m *PeerlessRobotSquadInfo) GetBench() []*PeerlessRobotBallerInfo {
	if m != nil {
		return m.Bench
	}
	return nil
}

func (m *PeerlessRobotSquadInfo) GetBattleValue() int32 {
	if m != nil && m.BattleValue != nil {
		return *m.BattleValue
	}
	return 0
}

// 无双时间
type PeerlessTime struct {
	// 下次开始时间
	NextStartTime *int64 `protobuf:"varint,1,opt,name=nextStartTime" json:"nextStartTime,omitempty"`
	// 下次结束时间
	NextEndTime      *int64 `protobuf:"varint,2,opt,name=nextEndTime" json:"nextEndTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessTime) Reset()                    { *m = PeerlessTime{} }
func (m *PeerlessTime) String() string            { return proto.CompactTextString(m) }
func (*PeerlessTime) ProtoMessage()               {}
func (*PeerlessTime) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{14} }

func (m *PeerlessTime) GetNextStartTime() int64 {
	if m != nil && m.NextStartTime != nil {
		return *m.NextStartTime
	}
	return 0
}

func (m *PeerlessTime) GetNextEndTime() int64 {
	if m != nil && m.NextEndTime != nil {
		return *m.NextEndTime
	}
	return 0
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~服务器进程间消息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// 无双挑战响应
type PeerlessChallengeResp struct {
	// 对方信息
	OppInfo *PeerlessGamerMatchInfo `protobuf:"bytes,1,opt,name=oppInfo" json:"oppInfo,omitempty"`
	// 我方积分
	MyScore *int32 `protobuf:"varint,2,opt,name=myScore" json:"myScore,omitempty"`
	// 是否跳过比赛
	IsSkipFight      *bool  `protobuf:"varint,3,opt,name=isSkipFight" json:"isSkipFight,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessChallengeResp) Reset()                    { *m = PeerlessChallengeResp{} }
func (m *PeerlessChallengeResp) String() string            { return proto.CompactTextString(m) }
func (*PeerlessChallengeResp) ProtoMessage()               {}
func (*PeerlessChallengeResp) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{15} }

func (m *PeerlessChallengeResp) GetOppInfo() *PeerlessGamerMatchInfo {
	if m != nil {
		return m.OppInfo
	}
	return nil
}

func (m *PeerlessChallengeResp) GetMyScore() int32 {
	if m != nil && m.MyScore != nil {
		return *m.MyScore
	}
	return 0
}

func (m *PeerlessChallengeResp) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

// 无双挑战结果
type PeerlessFightResultRes struct {
	// 比赛信息列表
	ResultList *FightResultList `protobuf:"bytes,1,opt,name=resultList" json:"resultList,omitempty"`
	// 对方gid
	OppInfo *PeerlessGamerMatchInfo `protobuf:"bytes,2,opt,name=oppInfo" json:"oppInfo,omitempty"`
	// 我方信息
	MyGamerInfo      *PeerlessGamerMatchInfo `protobuf:"bytes,3,opt,name=myGamerInfo" json:"myGamerInfo,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PeerlessFightResultRes) Reset()                    { *m = PeerlessFightResultRes{} }
func (m *PeerlessFightResultRes) String() string            { return proto.CompactTextString(m) }
func (*PeerlessFightResultRes) ProtoMessage()               {}
func (*PeerlessFightResultRes) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{16} }

func (m *PeerlessFightResultRes) GetResultList() *FightResultList {
	if m != nil {
		return m.ResultList
	}
	return nil
}

func (m *PeerlessFightResultRes) GetOppInfo() *PeerlessGamerMatchInfo {
	if m != nil {
		return m.OppInfo
	}
	return nil
}

func (m *PeerlessFightResultRes) GetMyGamerInfo() *PeerlessGamerMatchInfo {
	if m != nil {
		return m.MyGamerInfo
	}
	return nil
}

// 无双挑战结果
type PeerlessGMChangeScoreReq struct {
	// 改变的积分
	ChangeScore      *int32 `protobuf:"varint,1,opt,name=changeScore" json:"changeScore,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGMChangeScoreReq) Reset()                    { *m = PeerlessGMChangeScoreReq{} }
func (m *PeerlessGMChangeScoreReq) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGMChangeScoreReq) ProtoMessage()               {}
func (*PeerlessGMChangeScoreReq) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{17} }

func (m *PeerlessGMChangeScoreReq) GetChangeScore() int32 {
	if m != nil && m.ChangeScore != nil {
		return *m.ChangeScore
	}
	return 0
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~客户端接口~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// 无双：登录发送数据
type PeerlessLoginSendDataS2C struct {
	// 无双数据
	Data             *PeerlessData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PeerlessLoginSendDataS2C) Reset()                    { *m = PeerlessLoginSendDataS2C{} }
func (m *PeerlessLoginSendDataS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessLoginSendDataS2C) ProtoMessage()               {}
func (*PeerlessLoginSendDataS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{18} }

func (m *PeerlessLoginSendDataS2C) GetData() *PeerlessData {
	if m != nil {
		return m.Data
	}
	return nil
}

// 无双：领段位奖励
type PeerlessGetDanRewardC2S struct {
	CfgId            *int32 `protobuf:"varint,1,opt,name=cfgId" json:"cfgId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetDanRewardC2S) Reset()                    { *m = PeerlessGetDanRewardC2S{} }
func (m *PeerlessGetDanRewardC2S) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetDanRewardC2S) ProtoMessage()               {}
func (*PeerlessGetDanRewardC2S) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{19} }

func (m *PeerlessGetDanRewardC2S) GetCfgId() int32 {
	if m != nil && m.CfgId != nil {
		return *m.CfgId
	}
	return 0
}

// 无双：领段位奖励
type PeerlessGetDanRewardS2C struct {
	CfgId            *int32 `protobuf:"varint,1,opt,name=cfgId" json:"cfgId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetDanRewardS2C) Reset()                    { *m = PeerlessGetDanRewardS2C{} }
func (m *PeerlessGetDanRewardS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetDanRewardS2C) ProtoMessage()               {}
func (*PeerlessGetDanRewardS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{20} }

func (m *PeerlessGetDanRewardS2C) GetCfgId() int32 {
	if m != nil && m.CfgId != nil {
		return *m.CfgId
	}
	return 0
}

// 无双：获取挑战记录
type PeerlessGetChallengeHistoryC2S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetChallengeHistoryC2S) Reset()         { *m = PeerlessGetChallengeHistoryC2S{} }
func (m *PeerlessGetChallengeHistoryC2S) String() string { return proto.CompactTextString(m) }
func (*PeerlessGetChallengeHistoryC2S) ProtoMessage()    {}
func (*PeerlessGetChallengeHistoryC2S) Descriptor() ([]byte, []int) {
	return fileDescriptor47, []int{21}
}

// 无双：获取挑战记录
type PeerlessGetChallengeHistoryS2C struct {
	// 挑战记录信息
	InfoList         []*PeerlessChallengeRecordMatchInfo `protobuf:"bytes,1,rep,name=infoList" json:"infoList,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *PeerlessGetChallengeHistoryS2C) Reset()         { *m = PeerlessGetChallengeHistoryS2C{} }
func (m *PeerlessGetChallengeHistoryS2C) String() string { return proto.CompactTextString(m) }
func (*PeerlessGetChallengeHistoryS2C) ProtoMessage()    {}
func (*PeerlessGetChallengeHistoryS2C) Descriptor() ([]byte, []int) {
	return fileDescriptor47, []int{22}
}

func (m *PeerlessGetChallengeHistoryS2C) GetInfoList() []*PeerlessChallengeRecordMatchInfo {
	if m != nil {
		return m.InfoList
	}
	return nil
}

// 无双：获取本人排行榜排名等数据
type PeerlessGetRankDataC2S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetRankDataC2S) Reset()                    { *m = PeerlessGetRankDataC2S{} }
func (m *PeerlessGetRankDataC2S) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetRankDataC2S) ProtoMessage()               {}
func (*PeerlessGetRankDataC2S) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{23} }

// 无双：获取本人排行榜排名等数据
type PeerlessGetRankDataS2C struct {
	// 前XX名item
	TopRankingItem []*PeerlessRankItem `protobuf:"bytes,2,rep,name=topRankingItem" json:"topRankingItem,omitempty"`
	// 段位排行
	DanRank []*PeerlessDanRank `protobuf:"bytes,3,rep,name=danRank" json:"danRank,omitempty"`
	// 我的排名
	MyRank           *PeerlessRankItem `protobuf:"bytes,4,opt,name=myRank" json:"myRank,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PeerlessGetRankDataS2C) Reset()                    { *m = PeerlessGetRankDataS2C{} }
func (m *PeerlessGetRankDataS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetRankDataS2C) ProtoMessage()               {}
func (*PeerlessGetRankDataS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{24} }

func (m *PeerlessGetRankDataS2C) GetTopRankingItem() []*PeerlessRankItem {
	if m != nil {
		return m.TopRankingItem
	}
	return nil
}

func (m *PeerlessGetRankDataS2C) GetDanRank() []*PeerlessDanRank {
	if m != nil {
		return m.DanRank
	}
	return nil
}

func (m *PeerlessGetRankDataS2C) GetMyRank() *PeerlessRankItem {
	if m != nil {
		return m.MyRank
	}
	return nil
}

// 无双：匹配，获取对手
type PeerlessGetGetOppListC2S struct {
	// 是否打开UI时获取对手
	IsOpenUI         *bool  `protobuf:"varint,1,opt,name=isOpenUI" json:"isOpenUI,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetGetOppListC2S) Reset()                    { *m = PeerlessGetGetOppListC2S{} }
func (m *PeerlessGetGetOppListC2S) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetGetOppListC2S) ProtoMessage()               {}
func (*PeerlessGetGetOppListC2S) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{25} }

func (m *PeerlessGetGetOppListC2S) GetIsOpenUI() bool {
	if m != nil && m.IsOpenUI != nil {
		return *m.IsOpenUI
	}
	return false
}

// 无双：匹配，获取对手
type PeerlessGetGetOppListS2C struct {
	// 玩家名次
	Ranking *int32 `protobuf:"varint,1,opt,name=ranking" json:"ranking,omitempty"`
	// 匹配玩家信息
	MatchInfoList []*PeerlessGamerMatchInfo `protobuf:"bytes,2,rep,name=matchInfoList" json:"matchInfoList,omitempty"`
	// 玩家积分
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetGetOppListS2C) Reset()                    { *m = PeerlessGetGetOppListS2C{} }
func (m *PeerlessGetGetOppListS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetGetOppListS2C) ProtoMessage()               {}
func (*PeerlessGetGetOppListS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{26} }

func (m *PeerlessGetGetOppListS2C) GetRanking() int32 {
	if m != nil && m.Ranking != nil {
		return *m.Ranking
	}
	return 0
}

func (m *PeerlessGetGetOppListS2C) GetMatchInfoList() []*PeerlessGamerMatchInfo {
	if m != nil {
		return m.MatchInfoList
	}
	return nil
}

func (m *PeerlessGetGetOppListS2C) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 无双：挑战
type PeerlessChallengeC2S struct {
	// 对手玩家id
	Gid *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// 是否跳过比赛
	Skip             *bool  `protobuf:"varint,3,opt,name=skip" json:"skip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessChallengeC2S) Reset()                    { *m = PeerlessChallengeC2S{} }
func (m *PeerlessChallengeC2S) String() string            { return proto.CompactTextString(m) }
func (*PeerlessChallengeC2S) ProtoMessage()               {}
func (*PeerlessChallengeC2S) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{27} }

func (m *PeerlessChallengeC2S) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *PeerlessChallengeC2S) GetSkip() bool {
	if m != nil && m.Skip != nil {
		return *m.Skip
	}
	return false
}

// 无双：挑战
type PeerlessChallengeS2C struct {
	// 挑战记录信息
	ChallengeRecordInfo *PeerlessChallengeRecordMatchInfo `protobuf:"bytes,1,opt,name=challengeRecordInfo" json:"challengeRecordInfo,omitempty"`
	// 当前排名
	Ranking *int32 `protobuf:"varint,2,opt,name=ranking" json:"ranking,omitempty"`
	// 当前积分
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessChallengeS2C) Reset()                    { *m = PeerlessChallengeS2C{} }
func (m *PeerlessChallengeS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessChallengeS2C) ProtoMessage()               {}
func (*PeerlessChallengeS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{28} }

func (m *PeerlessChallengeS2C) GetChallengeRecordInfo() *PeerlessChallengeRecordMatchInfo {
	if m != nil {
		return m.ChallengeRecordInfo
	}
	return nil
}

func (m *PeerlessChallengeS2C) GetRanking() int32 {
	if m != nil && m.Ranking != nil {
		return *m.Ranking
	}
	return 0
}

func (m *PeerlessChallengeS2C) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 无双：每日刷新次数，客户端收到后将每日挑战次数和购买次数都置零
type PeerlessDailyRefreshS2C struct {
	// 下次挑战次数刷新时间
	NextChallengeCountRefreshTime *int64 `protobuf:"varint,5,opt,name=nextChallengeCountRefreshTime" json:"nextChallengeCountRefreshTime,omitempty"`
	XXX_unrecognized              []byte `json:"-"`
}

func (m *PeerlessDailyRefreshS2C) Reset()                    { *m = PeerlessDailyRefreshS2C{} }
func (m *PeerlessDailyRefreshS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessDailyRefreshS2C) ProtoMessage()               {}
func (*PeerlessDailyRefreshS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{29} }

func (m *PeerlessDailyRefreshS2C) GetNextChallengeCountRefreshTime() int64 {
	if m != nil && m.NextChallengeCountRefreshTime != nil {
		return *m.NextChallengeCountRefreshTime
	}
	return 0
}

// 无双：购买次数
type PeerlessBuyCountC2S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessBuyCountC2S) Reset()                    { *m = PeerlessBuyCountC2S{} }
func (m *PeerlessBuyCountC2S) String() string            { return proto.CompactTextString(m) }
func (*PeerlessBuyCountC2S) ProtoMessage()               {}
func (*PeerlessBuyCountC2S) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{30} }

// 无双：购买次数
type PeerlessBuyCountS2C struct {
	// 购买次数
	BuyCount         *int32 `protobuf:"varint,1,opt,name=buyCount" json:"buyCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessBuyCountS2C) Reset()                    { *m = PeerlessBuyCountS2C{} }
func (m *PeerlessBuyCountS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessBuyCountS2C) ProtoMessage()               {}
func (*PeerlessBuyCountS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{31} }

func (m *PeerlessBuyCountS2C) GetBuyCount() int32 {
	if m != nil && m.BuyCount != nil {
		return *m.BuyCount
	}
	return 0
}

// 无双：获取段位排行榜
type PeerlessGetDanRankC2S struct {
	// 段位
	Dan              *int32 `protobuf:"varint,1,opt,name=dan" json:"dan,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessGetDanRankC2S) Reset()                    { *m = PeerlessGetDanRankC2S{} }
func (m *PeerlessGetDanRankC2S) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetDanRankC2S) ProtoMessage()               {}
func (*PeerlessGetDanRankC2S) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{32} }

func (m *PeerlessGetDanRankC2S) GetDan() int32 {
	if m != nil && m.Dan != nil {
		return *m.Dan
	}
	return 0
}

// 无双：获取段位排行榜
type PeerlessGetDanRankS2C struct {
	DanRank          *PeerlessDanRank `protobuf:"bytes,1,opt,name=danRank" json:"danRank,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PeerlessGetDanRankS2C) Reset()                    { *m = PeerlessGetDanRankS2C{} }
func (m *PeerlessGetDanRankS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessGetDanRankS2C) ProtoMessage()               {}
func (*PeerlessGetDanRankS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{33} }

func (m *PeerlessGetDanRankS2C) GetDanRank() *PeerlessDanRank {
	if m != nil {
		return m.DanRank
	}
	return nil
}

// 无双：获取段位排行榜
type PeerlessSyncRankingS2C struct {
	// 排名
	Ranking *int32 `protobuf:"varint,1,opt,name=ranking" json:"ranking,omitempty"`
	// 积分
	Score            *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessSyncRankingS2C) Reset()                    { *m = PeerlessSyncRankingS2C{} }
func (m *PeerlessSyncRankingS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessSyncRankingS2C) ProtoMessage()               {}
func (*PeerlessSyncRankingS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{34} }

func (m *PeerlessSyncRankingS2C) GetRanking() int32 {
	if m != nil && m.Ranking != nil {
		return *m.Ranking
	}
	return 0
}

func (m *PeerlessSyncRankingS2C) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 无双：每期刷新
type PeerlessRefreshPeriodsS2C struct {
	// 排名
	Ranking *int32 `protobuf:"varint,1,opt,name=ranking" json:"ranking,omitempty"`
	// 积分
	Score            *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessRefreshPeriodsS2C) Reset()                    { *m = PeerlessRefreshPeriodsS2C{} }
func (m *PeerlessRefreshPeriodsS2C) String() string            { return proto.CompactTextString(m) }
func (*PeerlessRefreshPeriodsS2C) ProtoMessage()               {}
func (*PeerlessRefreshPeriodsS2C) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{35} }

func (m *PeerlessRefreshPeriodsS2C) GetRanking() int32 {
	if m != nil && m.Ranking != nil {
		return *m.Ranking
	}
	return 0
}

func (m *PeerlessRefreshPeriodsS2C) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 无双：一键领取段位奖励
type PeerlessOneKeyGetDanRewardC2S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerlessOneKeyGetDanRewardC2S) Reset()         { *m = PeerlessOneKeyGetDanRewardC2S{} }
func (m *PeerlessOneKeyGetDanRewardC2S) String() string { return proto.CompactTextString(m) }
func (*PeerlessOneKeyGetDanRewardC2S) ProtoMessage()    {}
func (*PeerlessOneKeyGetDanRewardC2S) Descriptor() ([]byte, []int) {
	return fileDescriptor47, []int{36}
}

// 无双：一键领取段位奖励
type PeerlessOneKeyGetDanRewardS2C struct {
	// 领取到的配置id列表
	CfgIds           []int32 `protobuf:"varint,1,rep,name=cfg_ids" json:"cfg_ids,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PeerlessOneKeyGetDanRewardS2C) Reset()         { *m = PeerlessOneKeyGetDanRewardS2C{} }
func (m *PeerlessOneKeyGetDanRewardS2C) String() string { return proto.CompactTextString(m) }
func (*PeerlessOneKeyGetDanRewardS2C) ProtoMessage()    {}
func (*PeerlessOneKeyGetDanRewardS2C) Descriptor() ([]byte, []int) {
	return fileDescriptor47, []int{37}
}

func (m *PeerlessOneKeyGetDanRewardS2C) GetCfgIds() []int32 {
	if m != nil {
		return m.CfgIds
	}
	return nil
}

func init() {
	proto.RegisterType((*PeerlessData)(nil), "PeerlessData")
	proto.RegisterType((*PeerlessChallengeRecord)(nil), "PeerlessChallengeRecord")
	proto.RegisterType((*PeerlessChallengeRecordMatchInfo)(nil), "PeerlessChallengeRecordMatchInfo")
	proto.RegisterType((*PeerlessChallengeGamerInfo)(nil), "PeerlessChallengeGamerInfo")
	proto.RegisterType((*PeerlessMatchInfo)(nil), "PeerlessMatchInfo")
	proto.RegisterType((*PeerlessMatchCampInfo)(nil), "PeerlessMatchCampInfo")
	proto.RegisterType((*PeerlessGamerBaseInfo)(nil), "PeerlessGamerBaseInfo")
	proto.RegisterType((*PeerlessRankItem)(nil), "PeerlessRankItem")
	proto.RegisterType((*PeerlessDanRank)(nil), "PeerlessDanRank")
	proto.RegisterType((*PeerlessGamerMatchInfo)(nil), "PeerlessGamerMatchInfo")
	proto.RegisterType((*PeerlessRoleSquadInfo)(nil), "PeerlessRoleSquadInfo")
	proto.RegisterType((*PeerlessRobotTeamInfo)(nil), "PeerlessRobotTeamInfo")
	proto.RegisterType((*PeerlessRobotBallerInfo)(nil), "PeerlessRobotBallerInfo")
	proto.RegisterType((*PeerlessRobotSquadInfo)(nil), "PeerlessRobotSquadInfo")
	proto.RegisterType((*PeerlessTime)(nil), "PeerlessTime")
	proto.RegisterType((*PeerlessChallengeResp)(nil), "PeerlessChallengeResp")
	proto.RegisterType((*PeerlessFightResultRes)(nil), "PeerlessFightResultRes")
	proto.RegisterType((*PeerlessGMChangeScoreReq)(nil), "PeerlessGMChangeScoreReq")
	proto.RegisterType((*PeerlessLoginSendDataS2C)(nil), "PeerlessLoginSendDataS2C")
	proto.RegisterType((*PeerlessGetDanRewardC2S)(nil), "PeerlessGetDanRewardC2S")
	proto.RegisterType((*PeerlessGetDanRewardS2C)(nil), "PeerlessGetDanRewardS2C")
	proto.RegisterType((*PeerlessGetChallengeHistoryC2S)(nil), "PeerlessGetChallengeHistoryC2S")
	proto.RegisterType((*PeerlessGetChallengeHistoryS2C)(nil), "PeerlessGetChallengeHistoryS2C")
	proto.RegisterType((*PeerlessGetRankDataC2S)(nil), "PeerlessGetRankDataC2S")
	proto.RegisterType((*PeerlessGetRankDataS2C)(nil), "PeerlessGetRankDataS2C")
	proto.RegisterType((*PeerlessGetGetOppListC2S)(nil), "PeerlessGetGetOppListC2S")
	proto.RegisterType((*PeerlessGetGetOppListS2C)(nil), "PeerlessGetGetOppListS2C")
	proto.RegisterType((*PeerlessChallengeC2S)(nil), "PeerlessChallengeC2S")
	proto.RegisterType((*PeerlessChallengeS2C)(nil), "PeerlessChallengeS2C")
	proto.RegisterType((*PeerlessDailyRefreshS2C)(nil), "PeerlessDailyRefreshS2C")
	proto.RegisterType((*PeerlessBuyCountC2S)(nil), "PeerlessBuyCountC2S")
	proto.RegisterType((*PeerlessBuyCountS2C)(nil), "PeerlessBuyCountS2C")
	proto.RegisterType((*PeerlessGetDanRankC2S)(nil), "PeerlessGetDanRankC2S")
	proto.RegisterType((*PeerlessGetDanRankS2C)(nil), "PeerlessGetDanRankS2C")
	proto.RegisterType((*PeerlessSyncRankingS2C)(nil), "PeerlessSyncRankingS2C")
	proto.RegisterType((*PeerlessRefreshPeriodsS2C)(nil), "PeerlessRefreshPeriodsS2C")
	proto.RegisterType((*PeerlessOneKeyGetDanRewardC2S)(nil), "PeerlessOneKeyGetDanRewardC2S")
	proto.RegisterType((*PeerlessOneKeyGetDanRewardS2C)(nil), "PeerlessOneKeyGetDanRewardS2C")
	proto.RegisterEnum("PeerlessLoginSendDataS2C_MsgID", PeerlessLoginSendDataS2C_MsgID_name, PeerlessLoginSendDataS2C_MsgID_value)
	proto.RegisterEnum("PeerlessGetDanRewardC2S_MsgID", PeerlessGetDanRewardC2S_MsgID_name, PeerlessGetDanRewardC2S_MsgID_value)
	proto.RegisterEnum("PeerlessGetDanRewardS2C_MsgID", PeerlessGetDanRewardS2C_MsgID_name, PeerlessGetDanRewardS2C_MsgID_value)
	proto.RegisterEnum("PeerlessGetChallengeHistoryC2S_MsgID", PeerlessGetChallengeHistoryC2S_MsgID_name, PeerlessGetChallengeHistoryC2S_MsgID_value)
	proto.RegisterEnum("PeerlessGetChallengeHistoryS2C_MsgID", PeerlessGetChallengeHistoryS2C_MsgID_name, PeerlessGetChallengeHistoryS2C_MsgID_value)
	proto.RegisterEnum("PeerlessGetRankDataC2S_MsgID", PeerlessGetRankDataC2S_MsgID_name, PeerlessGetRankDataC2S_MsgID_value)
	proto.RegisterEnum("PeerlessGetRankDataS2C_MsgID", PeerlessGetRankDataS2C_MsgID_name, PeerlessGetRankDataS2C_MsgID_value)
	proto.RegisterEnum("PeerlessGetGetOppListC2S_MsgID", PeerlessGetGetOppListC2S_MsgID_name, PeerlessGetGetOppListC2S_MsgID_value)
	proto.RegisterEnum("PeerlessGetGetOppListS2C_MsgID", PeerlessGetGetOppListS2C_MsgID_name, PeerlessGetGetOppListS2C_MsgID_value)
	proto.RegisterEnum("PeerlessChallengeC2S_MsgID", PeerlessChallengeC2S_MsgID_name, PeerlessChallengeC2S_MsgID_value)
	proto.RegisterEnum("PeerlessChallengeS2C_MsgID", PeerlessChallengeS2C_MsgID_name, PeerlessChallengeS2C_MsgID_value)
	proto.RegisterEnum("PeerlessDailyRefreshS2C_MsgID", PeerlessDailyRefreshS2C_MsgID_name, PeerlessDailyRefreshS2C_MsgID_value)
	proto.RegisterEnum("PeerlessBuyCountC2S_MsgID", PeerlessBuyCountC2S_MsgID_name, PeerlessBuyCountC2S_MsgID_value)
	proto.RegisterEnum("PeerlessBuyCountS2C_MsgID", PeerlessBuyCountS2C_MsgID_name, PeerlessBuyCountS2C_MsgID_value)
	proto.RegisterEnum("PeerlessGetDanRankC2S_MsgID", PeerlessGetDanRankC2S_MsgID_name, PeerlessGetDanRankC2S_MsgID_value)
	proto.RegisterEnum("PeerlessGetDanRankS2C_MsgID", PeerlessGetDanRankS2C_MsgID_name, PeerlessGetDanRankS2C_MsgID_value)
	proto.RegisterEnum("PeerlessSyncRankingS2C_MsgID", PeerlessSyncRankingS2C_MsgID_name, PeerlessSyncRankingS2C_MsgID_value)
	proto.RegisterEnum("PeerlessRefreshPeriodsS2C_MsgID", PeerlessRefreshPeriodsS2C_MsgID_name, PeerlessRefreshPeriodsS2C_MsgID_value)
	proto.RegisterEnum("PeerlessOneKeyGetDanRewardC2S_MsgID", PeerlessOneKeyGetDanRewardC2S_MsgID_name, PeerlessOneKeyGetDanRewardC2S_MsgID_value)
	proto.RegisterEnum("PeerlessOneKeyGetDanRewardS2C_MsgID", PeerlessOneKeyGetDanRewardS2C_MsgID_name, PeerlessOneKeyGetDanRewardS2C_MsgID_value)
}

func init() { proto.RegisterFile("peerless.proto", fileDescriptor47) }

var fileDescriptor47 = []byte{
	// 1389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0x5d, 0x6f, 0xdb, 0xd4,
	0x1b, 0x97, 0xd3, 0x24, 0x4d, 0x9e, 0xac, 0x5d, 0x9b, 0x76, 0x6d, 0xd6, 0x69, 0x53, 0x7b, 0xfe,
	0x7f, 0xc4, 0xc6, 0x8b, 0x11, 0x41, 0x70, 0x31, 0x89, 0x49, 0xb4, 0x65, 0x25, 0xa2, 0x6f, 0x24,
	0x65, 0x17, 0xdc, 0x4c, 0xae, 0x7d, 0x92, 0x58, 0xf5, 0xdb, 0x6c, 0xa7, 0x9b, 0x2f, 0x90, 0x78,
	0x07, 0xc1, 0xb8, 0x45, 0x48, 0x20, 0xf8, 0x2e, 0x5c, 0xf3, 0xa1, 0x78, 0xce, 0xe3, 0xe3, 0xd8,
	0x4e, 0xed, 0x76, 0x0c, 0xa9, 0xaa, 0x72, 0xce, 0x79, 0xde, 0x9f, 0xdf, 0xf3, 0x62, 0x58, 0xf4,
	0x38, 0xf7, 0x2d, 0x1e, 0x04, 0xaa, 0xe7, 0xbb, 0xa1, 0xbb, 0xd1, 0x1a, 0x9a, 0xa3, 0x71, 0x98,
	0x1c, 0x6c, 0x4d, 0xf7, 0x5d, 0x79, 0x68, 0x7a, 0xe7, 0x5e, 0xfc, 0x93, 0xfd, 0x51, 0x81, 0x6b,
	0xc7, 0x92, 0x6f, 0x57, 0x0b, 0xb5, 0x76, 0x07, 0x96, 0xb4, 0x30, 0xd4, 0xf4, 0xb3, 0xc1, 0x93,
	0x89, 0x66, 0x1c, 0xf9, 0x06, 0xf7, 0x3b, 0xca, 0xe6, 0xdc, 0xdd, 0x5a, 0x7b, 0x03, 0xda, 0x06,
	0x1f, 0x72, 0x07, 0x6f, 0x32, 0x6f, 0x15, 0x7a, 0x5b, 0x86, 0xa6, 0xa1, 0x39, 0x7d, 0xfe, 0x54,
	0xf3, 0x8d, 0xce, 0x1c, 0x5d, 0xdd, 0x82, 0x95, 0xd0, 0x35, 0xb4, 0x68, 0x67, 0xac, 0x59, 0x16,
	0x77, 0x46, 0x7c, 0xc7, 0x9d, 0x38, 0x61, 0xa7, 0xba, 0xa9, 0xe0, 0xe3, 0x2b, 0x70, 0xdb, 0xe1,
	0xcf, 0xc2, 0xfc, 0x5b, 0x9f, 0x0f, 0x7d, 0x1e, 0x8c, 0x4f, 0x4c, 0x9b, 0x77, 0x6a, 0x48, 0x36,
	0x27, 0x64, 0x08, 0xb2, 0x63, 0xee, 0x9b, 0xae, 0x31, 0x08, 0x35, 0x3f, 0xa4, 0xc7, 0x3a, 0x3d,
	0xde, 0x81, 0x35, 0x52, 0xb0, 0x3d, 0x99, 0xd5, 0x31, 0x4f, 0x3a, 0x96, 0xa0, 0x11, 0xba, 0xde,
	0x40, 0x77, 0x7d, 0xde, 0x69, 0xd0, 0xcd, 0x3a, 0x5c, 0xb7, 0xb5, 0x50, 0x1f, 0x1f, 0x79, 0xde,
	0x9e, 0x69, 0xec, 0x9b, 0x41, 0xd8, 0x69, 0x92, 0xad, 0x37, 0x61, 0x39, 0xd5, 0xf3, 0xa1, 0x63,
	0x90, 0x16, 0x10, 0x5a, 0xd8, 0x21, 0xac, 0x27, 0xf1, 0x99, 0x6a, 0xe9, 0x73, 0x14, 0x6a, 0xb4,
	0xdf, 0x81, 0x86, 0xe9, 0x0c, 0x5d, 0x92, 0x23, 0x42, 0xd4, 0xea, 0x6e, 0xa9, 0x25, 0xb4, 0x07,
	0x42, 0x6d, 0x0f, 0x89, 0xd9, 0x5f, 0x0a, 0x6c, 0x5e, 0x45, 0xd4, 0x7e, 0x1b, 0xae, 0xc5, 0x49,
	0xe0, 0xbe, 0x38, 0xa3, 0x74, 0x05, 0xa5, 0xdf, 0xba, 0x28, 0x7d, 0x4f, 0xb3, 0x63, 0x12, 0xc1,
	0x92, 0x64, 0x87, 0x58, 0x2a, 0x57, 0xb3, 0x6c, 0xc1, 0xbc, 0x4f, 0x8a, 0x03, 0x4a, 0x59, 0xab,
	0xbb, 0xa4, 0x3e, 0x14, 0x90, 0x11, 0x38, 0x90, 0x2e, 0xde, 0x80, 0x05, 0x3d, 0x61, 0xa4, 0xa0,
	0x54, 0x29, 0x28, 0x63, 0xd8, 0xb8, 0x44, 0xee, 0x3d, 0x68, 0x8e, 0x92, 0x83, 0x34, 0x7d, 0x6d,
	0x6a, 0x07, 0x91, 0x6d, 0x6b, 0x01, 0x27, 0xd2, 0x05, 0xa8, 0x05, 0x94, 0xa0, 0x4a, 0x92, 0x32,
	0xcd, 0x30, 0x1e, 0x69, 0xd6, 0x84, 0xa3, 0x49, 0x78, 0xc3, 0x22, 0x58, 0x4e, 0x38, 0xd3, 0xf0,
	0xdc, 0x45, 0x32, 0x19, 0x9e, 0x0b, 0xf2, 0x89, 0x6a, 0x47, 0xb3, 0xbd, 0x84, 0x32, 0x89, 0x8a,
	0x8c, 0x48, 0x19, 0x25, 0xaa, 0xf6, 0xb9, 0x67, 0x69, 0x51, 0xcf, 0x20, 0xd5, 0x73, 0x6c, 0x1f,
	0x6e, 0x14, 0x93, 0xfe, 0x1f, 0x9a, 0x81, 0x28, 0x80, 0x4c, 0x9c, 0x97, 0xd5, 0xe3, 0x73, 0xaf,
	0xef, 0x5a, 0x7c, 0x90, 0x3c, 0xa4, 0xae, 0xc5, 0x8e, 0xfc, 0xae, 0xa4, 0xe2, 0xf2, 0x31, 0x68,
	0xc1, 0xdc, 0xc8, 0x34, 0xc8, 0x11, 0x2a, 0x24, 0x8a, 0xdd, 0x21, 0xfe, 0x23, 0xd9, 0x4d, 0xf1,
	0x1e, 0x98, 0xb1, 0x51, 0xb5, 0xf6, 0x0a, 0xb4, 0x4e, 0xd1, 0x77, 0x8b, 0x1f, 0xbb, 0x4f, 0xd1,
	0xa7, 0xb8, 0x9a, 0x16, 0xa1, 0x8e, 0x59, 0x18, 0xa2, 0xe5, 0xb5, 0xe4, 0x1c, 0x72, 0xcd, 0xc6,
	0x73, 0x9d, 0xce, 0xd7, 0x61, 0xde, 0x0c, 0xfa, 0xee, 0xa9, 0x1b, 0x97, 0x46, 0x43, 0x38, 0x4b,
	0x5a, 0x1e, 0x5b, 0xe7, 0x71, 0x69, 0xb0, 0xcf, 0x60, 0x29, 0xb1, 0xae, 0xaf, 0x39, 0x67, 0xbd,
	0x90, 0xdb, 0xff, 0x21, 0x8f, 0xd7, 0xa0, 0x1a, 0x0a, 0xb4, 0xc4, 0x81, 0x1c, 0xc0, 0xf5, 0xb4,
	0xc5, 0x38, 0x42, 0xbc, 0xf0, 0x09, 0xfb, 0x85, 0xf4, 0xf9, 0x7f, 0x58, 0x47, 0xa8, 0x8f, 0xea,
	0xa8, 0x42, 0x40, 0x5c, 0x56, 0x2f, 0x18, 0x83, 0x3e, 0x21, 0xc7, 0xe1, 0xc4, 0x96, 0xf1, 0xfc,
	0x5b, 0x81, 0xb5, 0x9c, 0x2d, 0x29, 0x3c, 0xfe, 0x85, 0xdd, 0x6f, 0xc2, 0xc2, 0x34, 0x95, 0x19,
	0xfd, 0x29, 0x79, 0x3e, 0xa7, 0xd3, 0xe8, 0x67, 0x20, 0x9a, 0xfa, 0x5e, 0x4d, 0x7c, 0xf7, 0xd1,
	0x68, 0x99, 0x8a, 0x55, 0xac, 0x64, 0xcb, 0x32, 0x35, 0x47, 0xe7, 0x94, 0xd2, 0x3a, 0xa5, 0x34,
	0x1b, 0x7f, 0x6a, 0x56, 0xac, 0x9f, 0xa2, 0x23, 0xaf, 0x32, 0x07, 0x36, 0xa5, 0x0c, 0x6c, 0x33,
	0x86, 0x51, 0x16, 0xd8, 0xaf, 0x4a, 0x56, 0x28, 0x66, 0xff, 0x44, 0x80, 0x42, 0x90, 0x23, 0x20,
	0x7c, 0x71, 0xd1, 0x4b, 0x60, 0xf7, 0x9a, 0xd4, 0x92, 0x89, 0xc1, 0xba, 0x9a, 0xe3, 0xcd, 0xe9,
	0xda, 0xce, 0xe8, 0xaa, 0x26, 0x41, 0x38, 0xf4, 0xf4, 0xfd, 0xf3, 0x14, 0x81, 0x12, 0x91, 0xf5,
	0x19, 0x44, 0xc6, 0xee, 0x7e, 0x9e, 0x76, 0x55, 0x92, 0xbe, 0x2d, 0x9a, 0x48, 0xdc, 0x3d, 0xb0,
	0x02, 0x9c, 0x1e, 0x16, 0xec, 0x33, 0xcf, 0x0d, 0xa4, 0x75, 0x28, 0xdc, 0xf1, 0xf4, 0xde, 0xae,
	0x44, 0x17, 0x5a, 0x8f, 0xc6, 0x58, 0x66, 0x18, 0xa5, 0x19, 0xb0, 0xf8, 0x39, 0xb7, 0xd2, 0x0c,
	0x04, 0x38, 0x2b, 0xa4, 0x29, 0x6d, 0x00, 0x6c, 0xed, 0xbe, 0xf6, 0x41, 0x18, 0xfa, 0x81, 0x54,
	0xff, 0x5b, 0x06, 0x3c, 0x33, 0xde, 0x75, 0x10, 0xba, 0x91, 0xc7, 0x49, 0xf3, 0x62, 0x17, 0x54,
	0x7a, 0x39, 0xc1, 0x1b, 0x84, 0xd5, 0x3c, 0x8d, 0x20, 0x39, 0xf4, 0x5a, 0xdd, 0x8e, 0x5a, 0xe6,
	0xc3, 0xab, 0x50, 0x3b, 0xe5, 0x8e, 0x3e, 0x96, 0x7d, 0xb5, 0x9c, 0x70, 0x26, 0x6f, 0x64, 0x3f,
	0xbb, 0x9f, 0x8e, 0x64, 0xd1, 0x73, 0x45, 0x13, 0x16, 0xd3, 0x29, 0x9d, 0x7f, 0x0a, 0xcd, 0x3f,
	0xe4, 0x15, 0xd7, 0xc9, 0xb8, 0xaa, 0x50, 0xad, 0x8d, 0xd2, 0x94, 0x67, 0xa6, 0x4b, 0xe0, 0x61,
	0x27, 0x9c, 0x77, 0x3d, 0x2f, 0x83, 0xa2, 0x75, 0xb5, 0xa4, 0x7c, 0x30, 0xbc, 0x76, 0x34, 0xc8,
	0x54, 0x33, 0x2a, 0x32, 0x83, 0xc1, 0x99, 0xe9, 0xd1, 0x74, 0xa0, 0x98, 0x37, 0xd8, 0x2f, 0x99,
	0x10, 0xd2, 0x3d, 0x6a, 0x99, 0x58, 0xe2, 0x3f, 0x42, 0x16, 0x7c, 0x3a, 0xc8, 0xc9, 0xa8, 0xa4,
	0xa3, 0xa5, 0x3f, 0xbd, 0xcf, 0x1a, 0x54, 0xb9, 0xdc, 0xa0, 0x37, 0xa0, 0x65, 0x47, 0xd3, 0xf1,
	0x42, 0xfa, 0xcb, 0xa9, 0xd9, 0x5b, 0xd0, 0x99, 0xbe, 0x1c, 0x60, 0x0c, 0x30, 0x00, 0xe4, 0x4c,
	0x9f, 0x3f, 0x11, 0x9e, 0xe8, 0xe9, 0x4d, 0x8c, 0x2e, 0x76, 0x90, 0x32, 0xec, 0xbb, 0x23, 0xd3,
	0x19, 0xe0, 0xb8, 0x10, 0x23, 0x70, 0xd0, 0xdd, 0xc1, 0x05, 0xa4, 0x6a, 0xe0, 0x4f, 0xe9, 0xc4,
	0x82, 0x9a, 0x5d, 0x95, 0xd8, 0x2a, 0xd4, 0x0e, 0x82, 0x51, 0x6f, 0x17, 0xbb, 0x59, 0x9d, 0xd3,
	0xaf, 0xa5, 0x2f, 0x19, 0x7b, 0x90, 0x42, 0x7b, 0x8f, 0x87, 0xbb, 0xc9, 0x56, 0xb4, 0xd3, 0x1d,
	0x08, 0x9c, 0xea, 0xc3, 0x51, 0x52, 0x74, 0x45, 0xfc, 0x5f, 0x95, 0xf2, 0x0b, 0x6b, 0x5e, 0x88,
	0xff, 0x3d, 0xb8, 0x93, 0xe1, 0x9f, 0x82, 0xe0, 0x23, 0x8c, 0xb9, 0xeb, 0x47, 0x68, 0x46, 0x11,
	0xdf, 0xd7, 0x8c, 0x9d, 0x5d, 0xca, 0x27, 0xd4, 0xbf, 0xd4, 0xbe, 0x53, 0xac, 0x4c, 0xcd, 0x34,
	0x6f, 0x1e, 0x8a, 0x26, 0x2f, 0x22, 0x5a, 0x62, 0xdc, 0x37, 0x8c, 0xfd, 0xa9, 0x14, 0x32, 0x08,
	0xab, 0xee, 0xc1, 0x22, 0xae, 0x79, 0xe2, 0xc6, 0x74, 0x46, 0x62, 0x54, 0x94, 0xcf, 0x10, 0x5c,
	0x78, 0x8c, 0x78, 0x00, 0x4d, 0x17, 0x9e, 0xd9, 0xc1, 0xb4, 0x05, 0x75, 0x3b, 0x22, 0x8a, 0x6a,
	0xd2, 0x6b, 0x67, 0xa4, 0x94, 0x58, 0xb8, 0x9d, 0x81, 0x1d, 0x0f, 0xf1, 0x0f, 0x97, 0x4c, 0x11,
	0x29, 0x91, 0x77, 0x6c, 0xf7, 0x66, 0x70, 0xe4, 0x71, 0xe7, 0xd3, 0x1e, 0xa5, 0xae, 0x51, 0x24,
	0xe3, 0x5b, 0xc6, 0xbe, 0x50, 0x4a, 0x84, 0x08, 0x3f, 0x45, 0xcf, 0x8e, 0x9d, 0x94, 0x5d, 0x51,
	0x85, 0x05, 0x3b, 0x09, 0x73, 0x61, 0xdf, 0x9e, 0x29, 0xa3, 0x99, 0x85, 0xa4, 0xd8, 0x84, 0x3d,
	0x58, 0xbd, 0x90, 0x52, 0xe1, 0x42, 0x6e, 0x49, 0x11, 0x0d, 0x16, 0xdb, 0x81, 0xec, 0x04, 0x05,
	0x82, 0xbe, 0x63, 0xec, 0xb9, 0x52, 0x20, 0x49, 0xf8, 0xf1, 0x00, 0x56, 0xf4, 0x3c, 0x58, 0x32,
	0x4d, 0xe9, 0x6a, 0x40, 0x65, 0xe3, 0x50, 0xc9, 0xcf, 0xdf, 0x52, 0xbf, 0xd0, 0x9c, 0x47, 0x69,
	0x55, 0xed, 0x6a, 0xa6, 0x15, 0xc9, 0x6f, 0x0d, 0x61, 0xd0, 0x8b, 0x7d, 0x8b, 0x14, 0xc9, 0xfd,
	0x9e, 0xb1, 0xd7, 0x61, 0x25, 0x91, 0x2b, 0xbe, 0x43, 0x04, 0x6b, 0x09, 0x8a, 0x7f, 0x60, 0xec,
	0xfd, 0x8b, 0xc4, 0xc2, 0x00, 0x84, 0xc7, 0xa9, 0x3c, 0x96, 0x57, 0x36, 0xb2, 0xdf, 0xcf, 0x6c,
	0x90, 0x71, 0x67, 0xc0, 0x38, 0xc8, 0xe4, 0x4c, 0xb7, 0xa9, 0x22, 0xde, 0x1f, 0x19, 0x3b, 0x2e,
	0xe2, 0x15, 0xca, 0x33, 0x35, 0x91, 0x74, 0xea, 0x99, 0x9a, 0x28, 0x91, 0x78, 0x98, 0x56, 0xe4,
	0x20, 0x72, 0x74, 0x59, 0x80, 0x85, 0x48, 0xcd, 0x6f, 0x87, 0x45, 0xf2, 0x7e, 0x62, 0xec, 0x13,
	0xb8, 0x39, 0x2d, 0xb5, 0x38, 0xf8, 0xf1, 0xe7, 0x58, 0xf0, 0x92, 0x22, 0x9f, 0x33, 0xf6, 0x2e,
	0xdc, 0x4e, 0x44, 0x1e, 0x39, 0xfc, 0x63, 0x1e, 0xcd, 0x34, 0xe4, 0x22, 0xb6, 0x9f, 0x19, 0x7b,
	0x78, 0x19, 0x9b, 0xb4, 0x06, 0xfb, 0xf0, 0x63, 0xd3, 0x08, 0xe2, 0x4f, 0xe3, 0x62, 0x39, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x26, 0x5e, 0x09, 0xc9, 0x91, 0x0f, 0x00, 0x00,
}
