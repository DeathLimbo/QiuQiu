// Code generated by protoc-gen-go.
// source: server_fight.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// cmd、act和clientCmd、clientAct区分开，是为了抽离logic接收函数
type FightServerL2F struct {
	Gid *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// 子消息cmd
	Cmd *uint32 `protobuf:"varint,2,opt,name=cmd" json:"cmd,omitempty"`
	// 子消息act
	Act *uint32 `protobuf:"varint,3,opt,name=act" json:"act,omitempty"`
	// 子消息序列化数据
	Data             []byte `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	PsId             *int32 `protobuf:"varint,5,opt,name=psId" json:"psId,omitempty"`
	LsId             *int32 `protobuf:"varint,6,opt,name=lsId" json:"lsId,omitempty"`
	ConsoleId        *int64 `protobuf:"varint,7,opt,name=consoleId" json:"consoleId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightServerL2F) Reset()                    { *m = FightServerL2F{} }
func (m *FightServerL2F) String() string            { return proto.CompactTextString(m) }
func (*FightServerL2F) ProtoMessage()               {}
func (*FightServerL2F) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{0} }

func (m *FightServerL2F) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FightServerL2F) GetCmd() uint32 {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return 0
}

func (m *FightServerL2F) GetAct() uint32 {
	if m != nil && m.Act != nil {
		return *m.Act
	}
	return 0
}

func (m *FightServerL2F) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FightServerL2F) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

func (m *FightServerL2F) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

func (m *FightServerL2F) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

// cmd、act和clientCmd、clientAct区分开，是为了抽离logic接收函数
type FightServerF2L struct {
	Gid              *int32     `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	Cmd              *uint32    `protobuf:"varint,2,opt,name=cmd" json:"cmd,omitempty"`
	Act              *uint32    `protobuf:"varint,3,opt,name=act" json:"act,omitempty"`
	Err              *uint32    `protobuf:"varint,4,opt,name=err" json:"err,omitempty"`
	Data             []byte     `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	MatchType        *MatchType `protobuf:"varint,6,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	Sid              *int32     `protobuf:"varint,7,opt,name=sid" json:"sid,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FightServerF2L) Reset()                    { *m = FightServerF2L{} }
func (m *FightServerF2L) String() string            { return proto.CompactTextString(m) }
func (*FightServerF2L) ProtoMessage()               {}
func (*FightServerF2L) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{1} }

func (m *FightServerF2L) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FightServerF2L) GetCmd() uint32 {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return 0
}

func (m *FightServerF2L) GetAct() uint32 {
	if m != nil && m.Act != nil {
		return *m.Act
	}
	return 0
}

func (m *FightServerF2L) GetErr() uint32 {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return 0
}

func (m *FightServerF2L) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FightServerF2L) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *FightServerF2L) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

// 创建房间消息
type CreateFightRoomInfo struct {
	FightRoomParam   *FightRoomParam   `protobuf:"bytes,1,opt,name=fightRoomParam" json:"fightRoomParam,omitempty"`
	FightGamerInfo   []*FightGamerInfo `protobuf:"bytes,2,rep,name=fightGamerInfo" json:"fightGamerInfo,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CreateFightRoomInfo) Reset()                    { *m = CreateFightRoomInfo{} }
func (m *CreateFightRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateFightRoomInfo) ProtoMessage()               {}
func (*CreateFightRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{2} }

func (m *CreateFightRoomInfo) GetFightRoomParam() *FightRoomParam {
	if m != nil {
		return m.FightRoomParam
	}
	return nil
}

func (m *CreateFightRoomInfo) GetFightGamerInfo() []*FightGamerInfo {
	if m != nil {
		return m.FightGamerInfo
	}
	return nil
}

// 创建回放房间消息
type CreateReplayRoomInfo struct {
	RoomInfo         *CreateFightRoomInfo `protobuf:"bytes,1,opt,name=roomInfo" json:"roomInfo,omitempty"`
	ReplayOperations []*FightOperation    `protobuf:"bytes,2,rep,name=replayOperations" json:"replayOperations,omitempty"`
	Gid              *int32               `protobuf:"varint,3,opt,name=gid" json:"gid,omitempty"`
	PsId             *int32               `protobuf:"varint,4,opt,name=psId" json:"psId,omitempty"`
	// 前3节比赛是否压缩
	NodeCompression *bool `protobuf:"varint,5,opt,name=nodeCompression" json:"nodeCompression,omitempty"`
	// 使用参数序号
	ParamIdx         *int32 `protobuf:"varint,6,opt,name=paramIdx" json:"paramIdx,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateReplayRoomInfo) Reset()                    { *m = CreateReplayRoomInfo{} }
func (m *CreateReplayRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateReplayRoomInfo) ProtoMessage()               {}
func (*CreateReplayRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{3} }

func (m *CreateReplayRoomInfo) GetRoomInfo() *CreateFightRoomInfo {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *CreateReplayRoomInfo) GetReplayOperations() []*FightOperation {
	if m != nil {
		return m.ReplayOperations
	}
	return nil
}

func (m *CreateReplayRoomInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *CreateReplayRoomInfo) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

func (m *CreateReplayRoomInfo) GetNodeCompression() bool {
	if m != nil && m.NodeCompression != nil {
		return *m.NodeCompression
	}
	return false
}

func (m *CreateReplayRoomInfo) GetParamIdx() int32 {
	if m != nil && m.ParamIdx != nil {
		return *m.ParamIdx
	}
	return 0
}

// 发送到天梯服的战斗结果数据
type ToLadderFightResult struct {
	FightResult      []*FightResult `protobuf:"bytes,1,rep,name=fightResult" json:"fightResult,omitempty"`
	ReplaysId        *int64         `protobuf:"varint,2,opt,name=ReplaysId" json:"ReplaysId,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ToLadderFightResult) Reset()                    { *m = ToLadderFightResult{} }
func (m *ToLadderFightResult) String() string            { return proto.CompactTextString(m) }
func (*ToLadderFightResult) ProtoMessage()               {}
func (*ToLadderFightResult) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{4} }

func (m *ToLadderFightResult) GetFightResult() []*FightResult {
	if m != nil {
		return m.FightResult
	}
	return nil
}

func (m *ToLadderFightResult) GetReplaysId() int64 {
	if m != nil && m.ReplaysId != nil {
		return *m.ReplaysId
	}
	return 0
}

// 创建房间后告知其它服务器consoleId
type CreateRoomConsoleIdMsg struct {
	Pids             []int64 `protobuf:"varint,1,rep,name=pids" json:"pids,omitempty"`
	ConsoleId        *int64  `protobuf:"varint,2,opt,name=consoleId" json:"consoleId,omitempty"`
	FsId             *int32  `protobuf:"varint,3,opt,name=fsId" json:"fsId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateRoomConsoleIdMsg) Reset()                    { *m = CreateRoomConsoleIdMsg{} }
func (m *CreateRoomConsoleIdMsg) String() string            { return proto.CompactTextString(m) }
func (*CreateRoomConsoleIdMsg) ProtoMessage()               {}
func (*CreateRoomConsoleIdMsg) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{5} }

func (m *CreateRoomConsoleIdMsg) GetPids() []int64 {
	if m != nil {
		return m.Pids
	}
	return nil
}

func (m *CreateRoomConsoleIdMsg) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *CreateRoomConsoleIdMsg) GetFsId() int32 {
	if m != nil && m.FsId != nil {
		return *m.FsId
	}
	return 0
}

// 战斗初始化数据
type BattleInitParam struct {
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// 上场队伍数据
	MatchTeam *MatchTeamData `protobuf:"bytes,2,opt,name=matchTeam" json:"matchTeam,omitempty"`
	// 进攻战术执行效果
	AtkTactics *TacticsInfo `protobuf:"bytes,3,opt,name=atkTactics" json:"atkTactics,omitempty"`
	// 防守战术执行效果
	DefTactics *TacticsInfo `protobuf:"bytes,4,opt,name=defTactics" json:"defTactics,omitempty"`
	// 方向
	Direction *int32 `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
	// 是否固定Ai战术（新手引导）
	LockTactic *bool `protobuf:"varint,6,opt,name=lockTactic" json:"lockTactic,omitempty"`
	// gid
	Gid              *int32 `protobuf:"varint,7,opt,name=gid" json:"gid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BattleInitParam) Reset()                    { *m = BattleInitParam{} }
func (m *BattleInitParam) String() string            { return proto.CompactTextString(m) }
func (*BattleInitParam) ProtoMessage()               {}
func (*BattleInitParam) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{6} }

func (m *BattleInitParam) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *BattleInitParam) GetMatchTeam() *MatchTeamData {
	if m != nil {
		return m.MatchTeam
	}
	return nil
}

func (m *BattleInitParam) GetAtkTactics() *TacticsInfo {
	if m != nil {
		return m.AtkTactics
	}
	return nil
}

func (m *BattleInitParam) GetDefTactics() *TacticsInfo {
	if m != nil {
		return m.DefTactics
	}
	return nil
}

func (m *BattleInitParam) GetDirection() int32 {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return 0
}

func (m *BattleInitParam) GetLockTactic() bool {
	if m != nil && m.LockTactic != nil {
		return *m.LockTactic
	}
	return false
}

func (m *BattleInitParam) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

// 参与比赛玩家信息
type FightGamerInfo struct {
	// logicId<<32 | gid
	Pid              *int64             `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Gid              *int32             `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	LsId             *int32             `protobuf:"varint,3,opt,name=lsId" json:"lsId,omitempty"`
	PsId             *int32             `protobuf:"varint,4,opt,name=psId" json:"psId,omitempty"`
	IsRobot          *bool              `protobuf:"varint,5,opt,name=isRobot" json:"isRobot,omitempty"`
	BattleInitParam  []*BattleInitParam `protobuf:"bytes,6,rep,name=battleInitParam" json:"battleInitParam,omitempty"`
	Param            *string            `protobuf:"bytes,7,opt,name=param" json:"param,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *FightGamerInfo) Reset()                    { *m = FightGamerInfo{} }
func (m *FightGamerInfo) String() string            { return proto.CompactTextString(m) }
func (*FightGamerInfo) ProtoMessage()               {}
func (*FightGamerInfo) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{7} }

func (m *FightGamerInfo) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *FightGamerInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FightGamerInfo) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

func (m *FightGamerInfo) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

func (m *FightGamerInfo) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *FightGamerInfo) GetBattleInitParam() []*BattleInitParam {
	if m != nil {
		return m.BattleInitParam
	}
	return nil
}

func (m *FightGamerInfo) GetParam() string {
	if m != nil && m.Param != nil {
		return *m.Param
	}
	return ""
}

// 查看战斗是否存在
type CheckFightExist struct {
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	IsExist   *bool  `protobuf:"varint,2,opt,name=isExist" json:"isExist,omitempty"`
	Gid       *int32 `protobuf:"varint,3,opt,name=gid" json:"gid,omitempty"`
	LsId      *int32 `protobuf:"varint,4,opt,name=lsId" json:"lsId,omitempty"`
	FsId      *int32 `protobuf:"varint,5,opt,name=fsId" json:"fsId,omitempty"`
	// 比赛类型
	MatchType *MatchType `protobuf:"varint,6,opt,name=matchType,enum=MatchType" json:"matchType,omitempty"`
	// FightStage
	StageInfo        *FightStage `protobuf:"bytes,7,opt,name=stageInfo" json:"stageInfo,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CheckFightExist) Reset()                    { *m = CheckFightExist{} }
func (m *CheckFightExist) String() string            { return proto.CompactTextString(m) }
func (*CheckFightExist) ProtoMessage()               {}
func (*CheckFightExist) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{8} }

func (m *CheckFightExist) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *CheckFightExist) GetIsExist() bool {
	if m != nil && m.IsExist != nil {
		return *m.IsExist
	}
	return false
}

func (m *CheckFightExist) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *CheckFightExist) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

func (m *CheckFightExist) GetFsId() int32 {
	if m != nil && m.FsId != nil {
		return *m.FsId
	}
	return 0
}

func (m *CheckFightExist) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return MatchType_UnKnowMatch
}

func (m *CheckFightExist) GetStageInfo() *FightStage {
	if m != nil {
		return m.StageInfo
	}
	return nil
}

// 战斗重连
type FightReconnectL2F struct {
	// 战斗id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	Gid       *int32 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	// logic server id
	PsId             *int32 `protobuf:"varint,3,opt,name=psId" json:"psId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightReconnectL2F) Reset()                    { *m = FightReconnectL2F{} }
func (m *FightReconnectL2F) String() string            { return proto.CompactTextString(m) }
func (*FightReconnectL2F) ProtoMessage()               {}
func (*FightReconnectL2F) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{9} }

func (m *FightReconnectL2F) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *FightReconnectL2F) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FightReconnectL2F) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

// 战斗重连
type FightReconnectF2L struct {
	// 控制台id
	ConsoleId *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	Gid       *int32 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	// 是否可以重连
	CanReconnect *bool `protobuf:"varint,3,opt,name=canReconnect" json:"canReconnect,omitempty"`
	// 比赛参数
	FightParam *FightRoomParam `protobuf:"bytes,4,opt,name=fightParam" json:"fightParam,omitempty"`
	// 队伍基本信息
	BaseInfos []*BattleStartBaseInfo `protobuf:"bytes,5,rep,name=baseInfos" json:"baseInfos,omitempty"`
	// 当前第几节
	NowQuarter *int32 `protobuf:"varint,6,opt,name=nowQuarter" json:"nowQuarter,omitempty"`
	// 这一节还剩多少秒
	SurplusSecond *float64 `protobuf:"fixed64,7,opt,name=surplusSecond" json:"surplusSecond,omitempty"`
	// 我的id
	Pid *int64 `protobuf:"varint,8,opt,name=pid" json:"pid,omitempty"`
	// 阵营得分
	CampScores []*CampScoreInfo `protobuf:"bytes,9,rep,name=campScores" json:"campScores,omitempty"`
	// 上一次比赛结果
	LastRes []*LastFightRes `protobuf:"bytes,10,rep,name=lastRes" json:"lastRes,omitempty"`
	// 收视人数总量(传奇挑战赛专用)
	Viewership *int32 `protobuf:"varint,11,opt,name=viewership" json:"viewership,omitempty"`
	// 收视人数增量(传奇挑战赛专用)
	ViewershipIncr *int32 `protobuf:"varint,12,opt,name=viewershipIncr" json:"viewershipIncr,omitempty"`
	// RoomId
	RoomId *int64 `protobuf:"varint,14,opt,name=RoomId" json:"RoomId,omitempty"`
	// 选秀赛信息
	DraftInfo *DraftInfo `protobuf:"bytes,15,opt,name=draftInfo" json:"draftInfo,omitempty"`
	// 比赛状态
	StageInfo *FightStage `protobuf:"bytes,16,opt,name=stageInfo" json:"stageInfo,omitempty"`
	// 比赛服id
	FsId             *int32 `protobuf:"varint,17,opt,name=fsId" json:"fsId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FightReconnectF2L) Reset()                    { *m = FightReconnectF2L{} }
func (m *FightReconnectF2L) String() string            { return proto.CompactTextString(m) }
func (*FightReconnectF2L) ProtoMessage()               {}
func (*FightReconnectF2L) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{10} }

func (m *FightReconnectF2L) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *FightReconnectF2L) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *FightReconnectF2L) GetCanReconnect() bool {
	if m != nil && m.CanReconnect != nil {
		return *m.CanReconnect
	}
	return false
}

func (m *FightReconnectF2L) GetFightParam() *FightRoomParam {
	if m != nil {
		return m.FightParam
	}
	return nil
}

func (m *FightReconnectF2L) GetBaseInfos() []*BattleStartBaseInfo {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

func (m *FightReconnectF2L) GetNowQuarter() int32 {
	if m != nil && m.NowQuarter != nil {
		return *m.NowQuarter
	}
	return 0
}

func (m *FightReconnectF2L) GetSurplusSecond() float64 {
	if m != nil && m.SurplusSecond != nil {
		return *m.SurplusSecond
	}
	return 0
}

func (m *FightReconnectF2L) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *FightReconnectF2L) GetCampScores() []*CampScoreInfo {
	if m != nil {
		return m.CampScores
	}
	return nil
}

func (m *FightReconnectF2L) GetLastRes() []*LastFightRes {
	if m != nil {
		return m.LastRes
	}
	return nil
}

func (m *FightReconnectF2L) GetViewership() int32 {
	if m != nil && m.Viewership != nil {
		return *m.Viewership
	}
	return 0
}

func (m *FightReconnectF2L) GetViewershipIncr() int32 {
	if m != nil && m.ViewershipIncr != nil {
		return *m.ViewershipIncr
	}
	return 0
}

func (m *FightReconnectF2L) GetRoomId() int64 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *FightReconnectF2L) GetDraftInfo() *DraftInfo {
	if m != nil {
		return m.DraftInfo
	}
	return nil
}

func (m *FightReconnectF2L) GetStageInfo() *FightStage {
	if m != nil {
		return m.StageInfo
	}
	return nil
}

func (m *FightReconnectF2L) GetFsId() int32 {
	if m != nil && m.FsId != nil {
		return *m.FsId
	}
	return 0
}

// 创建联盟战房间信息
type CreateLeagueBattleRoomInfo struct {
	FightGamerInfo []*LeagueBattleFighterInfo `protobuf:"bytes,1,rep,name=fightGamerInfo" json:"fightGamerInfo,omitempty"`
	// 联盟id(用于定位联盟服联盟协程)
	LeagueId *int32 `protobuf:"varint,2,opt,name=leagueId" json:"leagueId,omitempty"`
	// 比赛id(当联盟id为-1的时候，matchId用于定位决赛比赛协程)
	MatchId          *int32 `protobuf:"varint,3,opt,name=matchId" json:"matchId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateLeagueBattleRoomInfo) Reset()                    { *m = CreateLeagueBattleRoomInfo{} }
func (m *CreateLeagueBattleRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateLeagueBattleRoomInfo) ProtoMessage()               {}
func (*CreateLeagueBattleRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{11} }

func (m *CreateLeagueBattleRoomInfo) GetFightGamerInfo() []*LeagueBattleFighterInfo {
	if m != nil {
		return m.FightGamerInfo
	}
	return nil
}

func (m *CreateLeagueBattleRoomInfo) GetLeagueId() int32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CreateLeagueBattleRoomInfo) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

// 联盟战玩家信息
type LeagueBattleFighterInfo struct {
	Gid              *int32  `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	PsId             *int32  `protobuf:"varint,2,opt,name=psId" json:"psId,omitempty"`
	Buff             []int32 `protobuf:"varint,3,rep,name=buff" json:"buff,omitempty"`
	IsRobot          *bool   `protobuf:"varint,4,opt,name=isRobot" json:"isRobot,omitempty"`
	LsId             *int32  `protobuf:"varint,5,opt,name=lsId" json:"lsId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LeagueBattleFighterInfo) Reset()                    { *m = LeagueBattleFighterInfo{} }
func (m *LeagueBattleFighterInfo) String() string            { return proto.CompactTextString(m) }
func (*LeagueBattleFighterInfo) ProtoMessage()               {}
func (*LeagueBattleFighterInfo) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{12} }

func (m *LeagueBattleFighterInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *LeagueBattleFighterInfo) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

func (m *LeagueBattleFighterInfo) GetBuff() []int32 {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *LeagueBattleFighterInfo) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *LeagueBattleFighterInfo) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

type QueryFightItem struct {
	ConsoleId        *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	Exist            *bool  `protobuf:"varint,2,opt,name=exist" json:"exist,omitempty"`
	Extral           *int64 `protobuf:"varint,3,opt,name=extral" json:"extral,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *QueryFightItem) Reset()                    { *m = QueryFightItem{} }
func (m *QueryFightItem) String() string            { return proto.CompactTextString(m) }
func (*QueryFightItem) ProtoMessage()               {}
func (*QueryFightItem) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{13} }

func (m *QueryFightItem) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *QueryFightItem) GetExist() bool {
	if m != nil && m.Exist != nil {
		return *m.Exist
	}
	return false
}

func (m *QueryFightItem) GetExtral() int64 {
	if m != nil && m.Extral != nil {
		return *m.Extral
	}
	return 0
}

// 批量查询战斗
type BatchQueryFightInfo struct {
	Group            *int32            `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	List             []*QueryFightItem `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BatchQueryFightInfo) Reset()                    { *m = BatchQueryFightInfo{} }
func (m *BatchQueryFightInfo) String() string            { return proto.CompactTextString(m) }
func (*BatchQueryFightInfo) ProtoMessage()               {}
func (*BatchQueryFightInfo) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{14} }

func (m *BatchQueryFightInfo) GetGroup() int32 {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return 0
}

func (m *BatchQueryFightInfo) GetList() []*QueryFightItem {
	if m != nil {
		return m.List
	}
	return nil
}

// 战斗离线
type SetFightOffline struct {
	ConsoleId        *int64 `protobuf:"varint,1,opt,name=consoleId" json:"consoleId,omitempty"`
	Gid              *int32 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	IsFake           *bool  `protobuf:"varint,3,opt,name=isFake" json:"isFake,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetFightOffline) Reset()                    { *m = SetFightOffline{} }
func (m *SetFightOffline) String() string            { return proto.CompactTextString(m) }
func (*SetFightOffline) ProtoMessage()               {}
func (*SetFightOffline) Descriptor() ([]byte, []int) { return fileDescriptor67, []int{15} }

func (m *SetFightOffline) GetConsoleId() int64 {
	if m != nil && m.ConsoleId != nil {
		return *m.ConsoleId
	}
	return 0
}

func (m *SetFightOffline) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *SetFightOffline) GetIsFake() bool {
	if m != nil && m.IsFake != nil {
		return *m.IsFake
	}
	return false
}

func init() {
	proto.RegisterType((*FightServerL2F)(nil), "FightServerL2F")
	proto.RegisterType((*FightServerF2L)(nil), "FightServerF2L")
	proto.RegisterType((*CreateFightRoomInfo)(nil), "CreateFightRoomInfo")
	proto.RegisterType((*CreateReplayRoomInfo)(nil), "CreateReplayRoomInfo")
	proto.RegisterType((*ToLadderFightResult)(nil), "ToLadderFightResult")
	proto.RegisterType((*CreateRoomConsoleIdMsg)(nil), "CreateRoomConsoleIdMsg")
	proto.RegisterType((*BattleInitParam)(nil), "BattleInitParam")
	proto.RegisterType((*FightGamerInfo)(nil), "FightGamerInfo")
	proto.RegisterType((*CheckFightExist)(nil), "CheckFightExist")
	proto.RegisterType((*FightReconnectL2F)(nil), "FightReconnectL2F")
	proto.RegisterType((*FightReconnectF2L)(nil), "FightReconnectF2L")
	proto.RegisterType((*CreateLeagueBattleRoomInfo)(nil), "CreateLeagueBattleRoomInfo")
	proto.RegisterType((*LeagueBattleFighterInfo)(nil), "LeagueBattleFighterInfo")
	proto.RegisterType((*QueryFightItem)(nil), "QueryFightItem")
	proto.RegisterType((*BatchQueryFightInfo)(nil), "BatchQueryFightInfo")
	proto.RegisterType((*SetFightOffline)(nil), "SetFightOffline")
}

func init() { proto.RegisterFile("server_fight.proto", fileDescriptor67) }

var fileDescriptor67 = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x85, 0x4c, 0x29, 0x96, 0x46, 0x32, 0x65, 0xd3, 0x6e, 0x42, 0x04, 0x48, 0x90, 0xb2, 0x40,
	0xdb, 0x5c, 0x88, 0xc2, 0x7f, 0x50, 0x2b, 0x55, 0x20, 0x54, 0x41, 0x1a, 0xcb, 0xf7, 0x62, 0x4d,
	0x2e, 0x65, 0xc2, 0x24, 0x97, 0xdd, 0x5d, 0x25, 0xf6, 0xa5, 0xff, 0xd0, 0x7b, 0xfb, 0x0d, 0x3d,
	0xf7, 0xef, 0x3a, 0x3b, 0xbb, 0xa4, 0x4c, 0x5b, 0x86, 0x73, 0xd3, 0x0c, 0x67, 0x67, 0xde, 0xbe,
	0xf7, 0x66, 0x05, 0x81, 0xe2, 0xf2, 0x33, 0x97, 0xbf, 0x67, 0xf9, 0xfa, 0x4a, 0xc7, 0xb5, 0x14,
	0x5a, 0xbc, 0x1c, 0x77, 0x82, 0x92, 0x25, 0x52, 0xb8, 0x60, 0x92, 0x88, 0xb2, 0x14, 0x95, 0x8d,
	0x22, 0x0d, 0xfe, 0xdc, 0x54, 0xae, 0xa8, 0xc5, 0xf2, 0x74, 0x1e, 0x8c, 0xc1, 0x5b, 0xe7, 0x69,
	0xd8, 0x7b, 0xd3, 0xfb, 0x71, 0x60, 0x82, 0xa4, 0x4c, 0xc3, 0x3d, 0x0c, 0x0e, 0x4c, 0xc0, 0x12,
	0x1d, 0x7a, 0x14, 0x4c, 0xa0, 0x9f, 0x32, 0xcd, 0xc2, 0x3e, 0x46, 0x13, 0x13, 0xd5, 0x6a, 0x91,
	0x86, 0x03, 0x3a, 0x85, 0x51, 0x61, 0xa2, 0x67, 0x14, 0x1d, 0xc1, 0x28, 0x11, 0x95, 0x12, 0x05,
	0xc7, 0xd4, 0x3e, 0xa6, 0xbc, 0xe8, 0xcf, 0xce, 0xd4, 0xf9, 0xe9, 0xf2, 0x6b, 0xa7, 0x62, 0xc0,
	0xa5, 0xa4, 0xa1, 0x5b, 0x08, 0x03, 0x82, 0xf0, 0x0a, 0x46, 0x25, 0xd3, 0xc9, 0xd5, 0xc5, 0x6d,
	0xcd, 0x69, 0xb2, 0x7f, 0x0a, 0xf1, 0x87, 0x26, 0x63, 0x4e, 0xaa, 0xdc, 0xce, 0x1f, 0x44, 0x6b,
	0x38, 0x9e, 0x49, 0xce, 0x34, 0x27, 0x14, 0xe7, 0x42, 0x94, 0x8b, 0x2a, 0x13, 0xc1, 0x0f, 0xe0,
	0x67, 0x4d, 0xe2, 0x37, 0x26, 0x59, 0x49, 0x78, 0xc6, 0xa7, 0xd3, 0x78, 0xde, 0x49, 0xb7, 0x85,
	0xef, 0x59, 0xc9, 0xa5, 0x39, 0x8a, 0x58, 0xbd, 0x6d, 0x61, 0x9b, 0x8e, 0xfe, 0xed, 0xc1, 0x89,
	0x9d, 0x74, 0xce, 0xeb, 0x82, 0xdd, 0xb6, 0xa3, 0xbe, 0x87, 0xa1, 0x74, 0xbf, 0xdd, 0x90, 0x93,
	0x78, 0x17, 0xa4, 0xb7, 0x70, 0x28, 0xe9, 0xe4, 0xc7, 0x9a, 0x4b, 0xa6, 0x73, 0x24, 0xb2, 0x3b,
	0xab, 0xcd, 0x37, 0x14, 0x7a, 0x8d, 0x04, 0x24, 0x48, 0x9f, 0xa2, 0x17, 0x30, 0xad, 0x44, 0xca,
	0x67, 0xa2, 0xac, 0x25, 0x57, 0x0a, 0xab, 0x89, 0xb4, 0x61, 0x70, 0x08, 0xc3, 0xda, 0xdc, 0x68,
	0x91, 0xde, 0x58, 0xb5, 0xa2, 0x5f, 0xe1, 0xf8, 0x42, 0x2c, 0x59, 0x9a, 0xa2, 0x2e, 0x84, 0x84,
	0xab, 0x4d, 0xa1, 0x83, 0x6f, 0xc1, 0x3a, 0xca, 0x86, 0x08, 0xd9, 0x40, 0x98, 0xc4, 0x77, 0x4b,
	0x50, 0x67, 0x7b, 0x49, 0x33, 0x77, 0x8f, 0x74, 0x7e, 0x0f, 0xcf, 0xdd, 0xed, 0xf1, 0x3e, 0xb3,
	0xc6, 0x04, 0x1f, 0xd4, 0x9a, 0xf0, 0xe5, 0xa9, 0xa2, 0x46, 0x5e, 0xd7, 0x22, 0x74, 0xd4, 0x14,
	0x64, 0xa6, 0x11, 0x5d, 0x27, 0xfa, 0xaf, 0x07, 0xd3, 0x33, 0xa6, 0x35, 0x16, 0x54, 0xb9, 0xb6,
	0x22, 0xe0, 0x7d, 0x6b, 0x67, 0x19, 0x0f, 0xf1, 0x39, 0xf5, 0x39, 0xaa, 0xb6, 0x47, 0x84, 0xfa,
	0x4e, 0x7d, 0xcc, 0xbc, 0x43, 0x9b, 0x04, 0x6f, 0x00, 0x98, 0xbe, 0xbe, 0x40, 0x33, 0xe5, 0x89,
	0xa2, 0xbe, 0xe6, 0x06, 0x2e, 0x26, 0xb2, 0xb1, 0x22, 0xe5, 0x59, 0x53, 0xd1, 0xdf, 0x51, 0x81,
	0x40, 0xd3, 0x5c, 0xf2, 0x44, 0x37, 0x14, 0x0e, 0x82, 0x00, 0xa0, 0x10, 0x89, 0xeb, 0x4b, 0x24,
	0x0e, 0x1b, 0x29, 0xac, 0xd9, 0xfe, 0xea, 0x39, 0xb7, 0xb7, 0xb6, 0xe8, 0x42, 0x77, 0xc5, 0x7b,
	0x9d, 0xd5, 0xd9, 0xa5, 0xe2, 0x14, 0xf6, 0x73, 0x75, 0x2e, 0x2e, 0x85, 0x76, 0xea, 0xbd, 0x85,
	0xe9, 0x65, 0x97, 0x14, 0x9c, 0x6f, 0x84, 0x39, 0x8c, 0xef, 0x93, 0x75, 0x00, 0x03, 0x12, 0x9a,
	0x30, 0x8d, 0xa2, 0x7f, 0x90, 0xcf, 0xd9, 0x15, 0x4f, 0xae, 0x09, 0xd8, 0x2f, 0x37, 0xb9, 0xd2,
	0x5d, 0x11, 0x2c, 0x34, 0x9a, 0x48, 0x5f, 0x09, 0xde, 0xf0, 0x81, 0xc7, 0x8a, 0x2d, 0xba, 0x46,
	0x30, 0xcb, 0xca, 0x13, 0xdb, 0xf8, 0x1a, 0x46, 0x4a, 0xb3, 0x35, 0x27, 0xff, 0xef, 0x13, 0xd1,
	0x63, 0x6b, 0xa6, 0x95, 0x49, 0x47, 0x3f, 0xc3, 0x91, 0xb3, 0x16, 0x42, 0xaa, 0x90, 0x6f, 0xf3,
	0x32, 0xed, 0x00, 0x78, 0x9f, 0xbb, 0x7a, 0x6b, 0x99, 0xbf, 0xbd, 0xfb, 0x3d, 0xcc, 0x3b, 0xf3,
	0x54, 0x8f, 0x13, 0x98, 0x24, 0xac, 0x6a, 0x8f, 0x50, 0xaf, 0x61, 0xf0, 0x1d, 0x00, 0xb9, 0xdf,
	0x72, 0xdc, 0x7f, 0xec, 0x51, 0x18, 0x5d, 0x32, 0x45, 0x57, 0x52, 0xc8, 0x82, 0x47, 0x3b, 0x6d,
	0x75, 0xc0, 0x4b, 0x49, 0x7d, 0xe6, 0x3e, 0x1a, 0xc7, 0x54, 0xe2, 0xcb, 0xa7, 0x0d, 0xe6, 0xb8,
	0x74, 0x8f, 0xe4, 0x37, 0x70, 0xa0, 0x36, 0xb2, 0x2e, 0x36, 0x6a, 0x65, 0x66, 0x5b, 0xef, 0xf4,
	0x1a, 0xa3, 0x0c, 0x09, 0x68, 0x04, 0x90, 0xb0, 0xb2, 0x5e, 0x25, 0x02, 0x97, 0x38, 0x1c, 0xd1,
	0x04, 0x3f, 0x6e, 0x53, 0xd4, 0xfb, 0x35, 0xec, 0x17, 0x4c, 0x99, 0x95, 0x0c, 0x81, 0x0a, 0x0e,
	0xe2, 0x25, 0xc6, 0xcd, 0x9e, 0x9a, 0xd9, 0x9f, 0x73, 0xfe, 0x85, 0x4b, 0x75, 0x95, 0xd7, 0xe1,
	0x98, 0x66, 0x3f, 0x07, 0x7f, 0x9b, 0x5b, 0x54, 0x89, 0x0c, 0x27, 0x94, 0xf7, 0xe1, 0x19, 0xbd,
	0x43, 0x69, 0xe8, 0xd3, 0x7c, 0xd4, 0x34, 0x95, 0x2c, 0xd3, 0x24, 0xda, 0x94, 0x48, 0x80, 0xf8,
	0x5d, 0x93, 0xe9, 0x6a, 0x7a, 0xf8, 0x40, 0xd3, 0xd6, 0x20, 0x47, 0x24, 0xcf, 0x1f, 0xf0, 0xd2,
	0x3e, 0x0d, 0x4b, 0xce, 0xd6, 0x1b, 0x6e, 0x79, 0x6a, 0x9f, 0xbd, 0x9f, 0x1e, 0x3c, 0xb0, 0xf6,
	0xc5, 0x09, 0xe3, 0xbb, 0xe5, 0xd4, 0xdc, 0xad, 0x14, 0xbe, 0x64, 0x05, 0x7d, 0x5a, 0x34, 0x52,
	0xa2, 0x79, 0xc9, 0x82, 0xad, 0x23, 0x18, 0xbc, 0x78, 0xec, 0x74, 0xe7, 0xef, 0xa7, 0xf1, 0x51,
	0xeb, 0xaa, 0xcb, 0x4d, 0x96, 0x61, 0x0f, 0xaf, 0xbb, 0x83, 0x7d, 0xb2, 0x46, 0xb3, 0x04, 0x64,
	0xfb, 0xe8, 0x0c, 0xfc, 0x4f, 0x1b, 0x2e, 0x6f, 0xa9, 0xf7, 0x42, 0xf3, 0x72, 0x97, 0xe1, 0x70,
	0x17, 0xf9, 0x9d, 0x9d, 0x42, 0x9a, 0xf9, 0x8d, 0x96, 0xac, 0x20, 0x98, 0x5e, 0x34, 0x83, 0xe3,
	0x33, 0x83, 0xfb, 0x4e, 0x23, 0x03, 0x11, 0x4f, 0xad, 0xa5, 0xd8, 0xd4, 0x0e, 0xe4, 0x2b, 0x9c,
	0x6b, 0x7b, 0xd8, 0x3f, 0x83, 0xee, 0x58, 0x5c, 0xa0, 0xe9, 0x8a, 0x5b, 0xd9, 0x3f, 0x66, 0x59,
	0x91, 0x57, 0xfc, 0x49, 0xeb, 0x23, 0x8e, 0x5c, 0xcd, 0xd9, 0x35, 0xb7, 0xa6, 0xff, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0xa2, 0xac, 0xf9, 0x7c, 0x57, 0x08, 0x00, 0x00,
}
