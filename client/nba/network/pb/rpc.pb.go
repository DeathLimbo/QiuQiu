// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进程间通讯消息
// 设计为通用消息,有冗余
// 通道选择标记定义：
// center:        allianceId
// rank:          moduleId
// Championships: gid
// match:         match
// fight:         consoleId
// 服务器间通讯消息
type RpcMsg struct {
	// 玩家Id
	Gid *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// server id
	PsId *int32 `protobuf:"varint,2,opt,name=psId" json:"psId,omitempty"`
	// 区服id
	LsId *int32 `protobuf:"varint,3,opt,name=lsId" json:"lsId,omitempty"`
	Cmd  *int32 `protobuf:"varint,4,opt,name=cmd" json:"cmd,omitempty"`
	Act  *int32 `protobuf:"varint,5,opt,name=act" json:"act,omitempty"`
	// innerMsg序列化数据
	Data []byte `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	Err  *int32 `protobuf:"varint,7,opt,name=err" json:"err,omitempty"`
	// 消息标识id
	Uuid *int64 `protobuf:"varint,8,opt,name=uuid" json:"uuid,omitempty"`
	// 允许丢弃的innermsg
	TryPushInnerMsg  *bool   `protobuf:"varint,9,opt,name=tryPushInnerMsg" json:"tryPushInnerMsg,omitempty"`
	ChanSelectTag    *int32  `protobuf:"varint,10,opt,name=chanSelectTag" json:"chanSelectTag,omitempty"`
	GidList          []int32 `protobuf:"varint,11,rep,name=gidList" json:"gidList,omitempty"`
	TeamId           *int64  `protobuf:"varint,12,opt,name=teamId" json:"teamId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpcMsg) Reset()                    { *m = RpcMsg{} }
func (m *RpcMsg) String() string            { return proto.CompactTextString(m) }
func (*RpcMsg) ProtoMessage()               {}
func (*RpcMsg) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{0} }

func (m *RpcMsg) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *RpcMsg) GetPsId() int32 {
	if m != nil && m.PsId != nil {
		return *m.PsId
	}
	return 0
}

func (m *RpcMsg) GetLsId() int32 {
	if m != nil && m.LsId != nil {
		return *m.LsId
	}
	return 0
}

func (m *RpcMsg) GetCmd() int32 {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return 0
}

func (m *RpcMsg) GetAct() int32 {
	if m != nil && m.Act != nil {
		return *m.Act
	}
	return 0
}

func (m *RpcMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RpcMsg) GetErr() int32 {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return 0
}

func (m *RpcMsg) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *RpcMsg) GetTryPushInnerMsg() bool {
	if m != nil && m.TryPushInnerMsg != nil {
		return *m.TryPushInnerMsg
	}
	return false
}

func (m *RpcMsg) GetChanSelectTag() int32 {
	if m != nil && m.ChanSelectTag != nil {
		return *m.ChanSelectTag
	}
	return 0
}

func (m *RpcMsg) GetGidList() []int32 {
	if m != nil {
		return m.GidList
	}
	return nil
}

func (m *RpcMsg) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

// 埋点rpc消息
type BIRpcMsg struct {
	// proto type name
	TypeName *string `protobuf:"bytes,1,opt,name=typeName" json:"typeName,omitempty"`
	// 序列化消息
	Data             []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BIRpcMsg) Reset()                    { *m = BIRpcMsg{} }
func (m *BIRpcMsg) String() string            { return proto.CompactTextString(m) }
func (*BIRpcMsg) ProtoMessage()               {}
func (*BIRpcMsg) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{1} }

func (m *BIRpcMsg) GetTypeName() string {
	if m != nil && m.TypeName != nil {
		return *m.TypeName
	}
	return ""
}

func (m *BIRpcMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 其他服通知logic的gamer处理保存的rpc消息
type NotifyGamerRpc struct {
	// 玩家Id
	Gid *int32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// 保存的rpc消息的标识id
	RpcMsgUuid       *int64 `protobuf:"varint,2,opt,name=rpcMsgUuid" json:"rpcMsgUuid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NotifyGamerRpc) Reset()                    { *m = NotifyGamerRpc{} }
func (m *NotifyGamerRpc) String() string            { return proto.CompactTextString(m) }
func (*NotifyGamerRpc) ProtoMessage()               {}
func (*NotifyGamerRpc) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{2} }

func (m *NotifyGamerRpc) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *NotifyGamerRpc) GetRpcMsgUuid() int64 {
	if m != nil && m.RpcMsgUuid != nil {
		return *m.RpcMsgUuid
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcMsg)(nil), "RpcMsg")
	proto.RegisterType((*BIRpcMsg)(nil), "BIRpcMsg")
	proto.RegisterType((*NotifyGamerRpc)(nil), "NotifyGamerRpc")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor64) }

var fileDescriptor64 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0xcd, 0x4a, 0xc4, 0x40,
	0x10, 0x84, 0x89, 0xb3, 0x9b, 0x4d, 0x7a, 0xe3, 0xae, 0x0c, 0x88, 0x7d, 0x5c, 0x72, 0x12, 0x0f,
	0x82, 0xaf, 0xe0, 0x45, 0x02, 0xba, 0x88, 0x3f, 0x0f, 0x30, 0x4c, 0xc6, 0x6c, 0x60, 0x93, 0x0c,
	0x9d, 0xce, 0x21, 0x0f, 0xe8, 0x7b, 0xd9, 0x13, 0x1c, 0xc1, 0xe3, 0x37, 0x5d, 0x55, 0x53, 0x05,
	0x39, 0x79, 0x7b, 0xef, 0x69, 0xe0, 0xa1, 0xfc, 0x4e, 0x20, 0x7d, 0xf3, 0xf6, 0x65, 0x6c, 0xf4,
	0x16, 0x54, 0xd3, 0xd6, 0x98, 0x1c, 0x92, 0xdb, 0xb5, 0x2e, 0x60, 0xe5, 0xc7, 0xaa, 0xc6, 0x8b,
	0x48, 0xe7, 0x40, 0x6a, 0x21, 0x11, 0xda, 0xae, 0xc6, 0x55, 0x04, 0x63, 0x19, 0xd7, 0x51, 0x57,
	0x1b, 0x36, 0x98, 0x0a, 0x15, 0xe1, 0xe4, 0x88, 0x70, 0x13, 0x4f, 0xd3, 0x24, 0xf1, 0x99, 0x90,
	0xd2, 0x37, 0xb0, 0x67, 0x9a, 0x5f, 0xa7, 0xf1, 0x54, 0xf5, 0xbd, 0x23, 0xf9, 0x1e, 0x73, 0x39,
	0x64, 0xfa, 0x1a, 0x2e, 0xed, 0xc9, 0xf4, 0xef, 0xee, 0xec, 0x2c, 0x7f, 0x98, 0x06, 0x61, 0x71,
	0xef, 0x61, 0x23, 0xdd, 0x9e, 0xdb, 0x91, 0x71, 0x7b, 0x50, 0xf2, 0xb0, 0x83, 0x94, 0x9d, 0xe9,
	0xa4, 0x53, 0x11, 0x02, 0xcb, 0x3b, 0xc8, 0x1e, 0xab, 0xdf, 0x21, 0x57, 0x90, 0xf1, 0xec, 0xdd,
	0xd1, 0x74, 0x6e, 0x59, 0x93, 0xff, 0xf5, 0x0a, 0x6b, 0x8a, 0xf2, 0x01, 0x76, 0xc7, 0x81, 0xdb,
	0xaf, 0xf9, 0x49, 0x14, 0x24, 0xa6, 0xff, 0xd3, 0x35, 0x00, 0x2d, 0x41, 0x9f, 0xa1, 0x6f, 0xb0,
	0xa8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x3d, 0xd9, 0xe5, 0x32, 0x01, 0x00, 0x00,
}
