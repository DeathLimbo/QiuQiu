// Code generated by protoc-gen-go.
// source: bi.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家基础信息(优先考虑lmd公司日志平台的格式)
type GamerInfo struct {
	Gid *int32 `protobuf:"varint,1,opt,name=Gid" json:"Gid,omitempty"`
	// 账号名
	Account *string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty"`
	// 角色等级
	Level *int32 `protobuf:"varint,3,opt,name=Level" json:"Level,omitempty"`
	// 角色名
	Name *string `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty"`
	// 渠道
	Channel *string `protobuf:"bytes,5,opt,name=Channel" json:"Channel,omitempty"`
	// 角色创建时间戳
	Create *int64 `protobuf:"varint,6,opt,name=Create" json:"Create,omitempty"`
	// 区服id
	Zone *int32 `protobuf:"varint,7,opt,name=Zone" json:"Zone,omitempty"`
	// 操作系统 如 Android、iOS 等
	// @inject_tag: log:"td,nba"
	Os *string `protobuf:"bytes,8,opt,name=Os" json:"Os,omitempty" log:"td,nba"`
	// 操作系统版本 如 iOS 11.2.2、Android 8.0.0 等
	// @inject_tag: log:"td,nba"
	OsVersion *string `protobuf:"bytes,9,opt,name=OsVersion" json:"OsVersion,omitempty" log:"td,nba"`
	// 账号id
	// @inject_tag: log:"td,nba"
	UserId *int64 `protobuf:"varint,11,opt,name=UserId" json:"UserId,omitempty" log:"td,nba"`
	// 日志时间戳
	// @inject_tag: log:"td,nba"
	Time *int64 `protobuf:"varint,12,opt,name=Time" json:"Time,omitempty" log:"td,nba"`
	// 客户端IP
	// @inject_tag: log:"td,nba"
	IP *string `protobuf:"bytes,13,opt,name=IP" json:"IP,omitempty" log:"td,nba"`
	// ThinkingData事件类型
	// @inject_tag: log:"td"
	EventName *string `protobuf:"bytes,15,opt,name=EventName" json:"EventName,omitempty" log:"td"`
	// 金币数量(美金)
	// @inject_tag: log:"td"
	Gold *int64 `protobuf:"varint,16,opt,name=Gold" json:"Gold,omitempty" log:"td"`
	// 钻石数量
	// @inject_tag: log:"td"
	Diamond *int64 `protobuf:"varint,17,opt,name=Diamond" json:"Diamond,omitempty" log:"td"`
	// 联盟币
	// @inject_tag: log:"td"
	LeagueCoin *int64 `protobuf:"varint,18,opt,name=LeagueCoin" json:"LeagueCoin,omitempty" log:"td"`
	// 体力
	// @inject_tag: log:"td"
	Energy *int64 `protobuf:"varint,19,opt,name=Energy" json:"Energy,omitempty" log:"td"`
	// 荣誉币
	// @inject_tag: log:"td"
	HonorCoin *int64 `protobuf:"varint,20,opt,name=HonorCoin" json:"HonorCoin,omitempty" log:"td"`
	// 月卡
	// @inject_tag: log:"td"
	MonthCards []int32 `protobuf:"varint,21,rep,name=MonthCards" json:"MonthCards,omitempty" log:"td"`
	// 成长基金购买状态
	// @inject_tag: log:"td"
	HasBuyFund *bool `protobuf:"varint,22,opt,name=hasBuyFund" json:"hasBuyFund,omitempty" log:"td"`
	// 联盟id
	// @inject_tag: log:"td"
	LeagueId *int32 `protobuf:"varint,23,opt,name=LeagueId" json:"LeagueId,omitempty" log:"td"`
	// 当前战力
	// @inject_tag: log:"td"
	FightPower *int64 `protobuf:"varint,24,opt,name=FightPower" json:"FightPower,omitempty" log:"td"`
	// Arena竞技场排名
	// @inject_tag: log:"td"
	ArenaRank *int32 `protobuf:"varint,25,opt,name=ArenaRank" json:"ArenaRank,omitempty" log:"td"`
	// 当前球员数量
	// @inject_tag: log:"td"
	PlayerNum *int32 `protobuf:"varint,26,opt,name=PlayerNum" json:"PlayerNum,omitempty" log:"td"`
	// SkyLadder天梯赛段位
	// @inject_tag: log:"td"
	LadderLevel *int32 `protobuf:"varint,27,opt,name=LadderLevel" json:"LadderLevel,omitempty" log:"td"`
	// 巡演赛挑战通关数
	// @inject_tag: log:"td"
	TourMatchCount *int32 `protobuf:"varint,28,opt,name=TourMatchCount" json:"TourMatchCount,omitempty" log:"td"`
	// 区服名字(zone name)
	// @inject_tag: log:"lmd"
	ZName *string `protobuf:"bytes,31,opt,name=ZName" json:"ZName,omitempty" log:"lmd"`
	// 公司平台的url api name
	// @inject_tag: log:"lmd"
	ApiName *string `protobuf:"bytes,32,opt,name=ApiName" json:"ApiName,omitempty" log:"lmd"`
	// 分服系统 ios android all
	// @inject_tag: log:"cy"
	System *string `protobuf:"bytes,33,opt,name=System" json:"System,omitempty" log:"cy"`
	// 设备号
	// @inject_tag: log:"cy,td"
	DeviceId *string `protobuf:"bytes,34,opt,name=DeviceId" json:"DeviceId,omitempty" log:"cy,td"`
	// 客户端版本号
	// @inject_tag: log:"td,cy"
	ClientVersion *string `protobuf:"bytes,35,opt,name=ClientVersion" json:"ClientVersion,omitempty" log:"td,cy"`
	// sdkId?什么用途?
	// @inject_tag: log:"cy"
	SdkId *string `protobuf:"bytes,36,opt,name=SdkId" json:"SdkId,omitempty" log:"cy"`
	// 步骤号
	// @inject_tag: log:"cy"
	StepNumId *string `protobuf:"bytes,37,opt,name=StepNumId" json:"StepNumId,omitempty" log:"cy"`
	// 数数特殊事件的账号标识(非玩家账号和角色的事件用)
	ThinkingDataAccountId *string `protobuf:"bytes,38,opt,name=ThinkingDataAccountId" json:"ThinkingDataAccountId,omitempty"`
	// 设备型号
	DeviceType *string `protobuf:"bytes,39,opt,name=DeviceType" json:"DeviceType,omitempty"`
	// 最佳阵容星数
	BestSquadStar    *int32 `protobuf:"varint,40,opt,name=BestSquadStar" json:"BestSquadStar,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GamerInfo) Reset()                    { *m = GamerInfo{} }
func (m *GamerInfo) String() string            { return proto.CompactTextString(m) }
func (*GamerInfo) ProtoMessage()               {}
func (*GamerInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *GamerInfo) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *GamerInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *GamerInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *GamerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GamerInfo) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *GamerInfo) GetCreate() int64 {
	if m != nil && m.Create != nil {
		return *m.Create
	}
	return 0
}

func (m *GamerInfo) GetZone() int32 {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return 0
}

func (m *GamerInfo) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *GamerInfo) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *GamerInfo) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *GamerInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *GamerInfo) GetIP() string {
	if m != nil && m.IP != nil {
		return *m.IP
	}
	return ""
}

func (m *GamerInfo) GetEventName() string {
	if m != nil && m.EventName != nil {
		return *m.EventName
	}
	return ""
}

func (m *GamerInfo) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *GamerInfo) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *GamerInfo) GetLeagueCoin() int64 {
	if m != nil && m.LeagueCoin != nil {
		return *m.LeagueCoin
	}
	return 0
}

func (m *GamerInfo) GetEnergy() int64 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *GamerInfo) GetHonorCoin() int64 {
	if m != nil && m.HonorCoin != nil {
		return *m.HonorCoin
	}
	return 0
}

func (m *GamerInfo) GetMonthCards() []int32 {
	if m != nil {
		return m.MonthCards
	}
	return nil
}

func (m *GamerInfo) GetHasBuyFund() bool {
	if m != nil && m.HasBuyFund != nil {
		return *m.HasBuyFund
	}
	return false
}

func (m *GamerInfo) GetLeagueId() int32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *GamerInfo) GetFightPower() int64 {
	if m != nil && m.FightPower != nil {
		return *m.FightPower
	}
	return 0
}

func (m *GamerInfo) GetArenaRank() int32 {
	if m != nil && m.ArenaRank != nil {
		return *m.ArenaRank
	}
	return 0
}

func (m *GamerInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *GamerInfo) GetLadderLevel() int32 {
	if m != nil && m.LadderLevel != nil {
		return *m.LadderLevel
	}
	return 0
}

func (m *GamerInfo) GetTourMatchCount() int32 {
	if m != nil && m.TourMatchCount != nil {
		return *m.TourMatchCount
	}
	return 0
}

func (m *GamerInfo) GetZName() string {
	if m != nil && m.ZName != nil {
		return *m.ZName
	}
	return ""
}

func (m *GamerInfo) GetApiName() string {
	if m != nil && m.ApiName != nil {
		return *m.ApiName
	}
	return ""
}

func (m *GamerInfo) GetSystem() string {
	if m != nil && m.System != nil {
		return *m.System
	}
	return ""
}

func (m *GamerInfo) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *GamerInfo) GetClientVersion() string {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return ""
}

func (m *GamerInfo) GetSdkId() string {
	if m != nil && m.SdkId != nil {
		return *m.SdkId
	}
	return ""
}

func (m *GamerInfo) GetStepNumId() string {
	if m != nil && m.StepNumId != nil {
		return *m.StepNumId
	}
	return ""
}

func (m *GamerInfo) GetThinkingDataAccountId() string {
	if m != nil && m.ThinkingDataAccountId != nil {
		return *m.ThinkingDataAccountId
	}
	return ""
}

func (m *GamerInfo) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *GamerInfo) GetBestSquadStar() int32 {
	if m != nil && m.BestSquadStar != nil {
		return *m.BestSquadStar
	}
	return 0
}

// 区服在线人数(畅游的格式要求是heart)
type BiHeart struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"lmd"
	Zone *int32 `protobuf:"varint,2,opt,name=Zone" json:"Zone,omitempty" log:"lmd"`
	// @inject_tag: log:"td,lmd,cy"
	Num *int32 `protobuf:"varint,3,opt,name=Num" json:"Num,omitempty" log:"td,lmd,cy"`
	// 时间戳
	// @inject_tag: log:"lmd"
	Time *int64 `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" log:"lmd"`
	// 排队人数
	// @inject_tag: log:"cy"
	Paidui           *int32 `protobuf:"varint,5,opt,name=paidui" json:"paidui,omitempty" log:"cy"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiHeart) Reset()                    { *m = BiHeart{} }
func (m *BiHeart) String() string            { return proto.CompactTextString(m) }
func (*BiHeart) ProtoMessage()               {}
func (*BiHeart) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *BiHeart) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiHeart) GetZone() int32 {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return 0
}

func (m *BiHeart) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *BiHeart) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiHeart) GetPaidui() int32 {
	if m != nil && m.Paidui != nil {
		return *m.Paidui
	}
	return 0
}

// 区服小时在线人数(畅游的格式要求是heart)
type BiHourOnline struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"lmd"
	Zone *int32 `protobuf:"varint,2,opt,name=Zone" json:"Zone,omitempty" log:"lmd"`
	// @inject_tag: log:"td,lmd,cy"
	Num *int32 `protobuf:"varint,3,opt,name=Num" json:"Num,omitempty" log:"td,lmd,cy"`
	// 时间戳
	// @inject_tag: log:"lmd"
	Time *int64 `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" log:"lmd"`
	// 排队人数
	// @inject_tag: log:"cy"
	Paidui           *int32 `protobuf:"varint,5,opt,name=paidui" json:"paidui,omitempty" log:"cy"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiHourOnline) Reset()                    { *m = BiHourOnline{} }
func (m *BiHourOnline) String() string            { return proto.CompactTextString(m) }
func (*BiHourOnline) ProtoMessage()               {}
func (*BiHourOnline) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *BiHourOnline) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiHourOnline) GetZone() int32 {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return 0
}

func (m *BiHourOnline) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *BiHourOnline) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiHourOnline) GetPaidui() int32 {
	if m != nil && m.Paidui != nil {
		return *m.Paidui
	}
	return 0
}

// 账号创建
type BiAccountReg struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 账号名(SdkName.SdkUid)
	// @inject_tag: log:"lmd,td"
	Account *string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" log:"lmd,td"`
	// 时间戳
	// @inject_tag: log:"lmd"
	Create *int64 `protobuf:"varint,3,opt,name=Create" json:"Create,omitempty" log:"lmd"`
	// 渠道
	// @inject_tag: log:"lmd"
	Channel *string `protobuf:"bytes,4,opt,name=Channel" json:"Channel,omitempty" log:"lmd"`
	// IP
	// @inject_tag: log:"lmd"
	IP *string `protobuf:"bytes,5,opt,name=IP" json:"IP,omitempty" log:"lmd"`
	// @inject_tag: log:"lmd"
	DeviceId *string `protobuf:"bytes,6,opt,name=DeviceId" json:"DeviceId,omitempty" log:"lmd"`
	// 模拟器标识 0非模拟器 1为模拟器
	// @inject_tag: log:"lmd"
	Simulator *int32 `protobuf:"varint,7,opt,name=Simulator" json:"Simulator,omitempty" log:"lmd"`
	// SdkName
	// @inject_tag: log:"td,nba"
	SdkName          *string `protobuf:"bytes,8,opt,name=SdkName" json:"SdkName,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiAccountReg) Reset()                    { *m = BiAccountReg{} }
func (m *BiAccountReg) String() string            { return proto.CompactTextString(m) }
func (*BiAccountReg) ProtoMessage()               {}
func (*BiAccountReg) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *BiAccountReg) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAccountReg) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BiAccountReg) GetCreate() int64 {
	if m != nil && m.Create != nil {
		return *m.Create
	}
	return 0
}

func (m *BiAccountReg) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *BiAccountReg) GetIP() string {
	if m != nil && m.IP != nil {
		return *m.IP
	}
	return ""
}

func (m *BiAccountReg) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *BiAccountReg) GetSimulator() int32 {
	if m != nil && m.Simulator != nil {
		return *m.Simulator
	}
	return 0
}

func (m *BiAccountReg) GetSdkName() string {
	if m != nil && m.SdkName != nil {
		return *m.SdkName
	}
	return ""
}

// 账号登录
type BiAccountLogin struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// SdkName
	// @inject_tag: log:"td,nba"
	SdkName          *string `protobuf:"bytes,8,opt,name=SdkName" json:"SdkName,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiAccountLogin) Reset()                    { *m = BiAccountLogin{} }
func (m *BiAccountLogin) String() string            { return proto.CompactTextString(m) }
func (*BiAccountLogin) ProtoMessage()               {}
func (*BiAccountLogin) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *BiAccountLogin) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAccountLogin) GetSdkName() string {
	if m != nil && m.SdkName != nil {
		return *m.SdkName
	}
	return ""
}

// 角色登录日志
type BiLogin struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 时间戳
	// @inject_tag: log:"lmd"
	Time *int64 `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" log:"lmd"`
	// 登录必填，登出可不填，设备唯一ID
	// @inject_tag: log:"lmd"
	DeviceId *string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty" log:"lmd"`
	// 登录必填，登出可不填，模拟器标识 0非模拟器 1为模拟器
	// @inject_tag: log:"lmd"
	Simulator *int32 `protobuf:"varint,4,opt,name=Simulator" json:"Simulator,omitempty" log:"lmd"`
	// 角色名
	// @inject_tag: log:"cy"
	RoleName *string `protobuf:"bytes,5,opt,name=RoleName" json:"RoleName,omitempty" log:"cy"`
	// 登录必填，登出可不填
	// @inject_tag: log:"cy,lmd"
	IP *string `protobuf:"bytes,6,opt,name=IP" json:"IP,omitempty" log:"cy,lmd"`
	// 价值虚拟币总量
	// @inject_tag: log:"cy"
	ValueAmount      *int32 `protobuf:"varint,7,opt,name=ValueAmount" json:"ValueAmount,omitempty" log:"cy"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiLogin) Reset()                    { *m = BiLogin{} }
func (m *BiLogin) String() string            { return proto.CompactTextString(m) }
func (*BiLogin) ProtoMessage()               {}
func (*BiLogin) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *BiLogin) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLogin) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiLogin) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *BiLogin) GetSimulator() int32 {
	if m != nil && m.Simulator != nil {
		return *m.Simulator
	}
	return 0
}

func (m *BiLogin) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *BiLogin) GetIP() string {
	if m != nil && m.IP != nil {
		return *m.IP
	}
	return ""
}

func (m *BiLogin) GetValueAmount() int32 {
	if m != nil && m.ValueAmount != nil {
		return *m.ValueAmount
	}
	return 0
}

// 创建角色日志
type BiRoleBuild struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 角色名
	// @inject_tag: log:"cy,td"
	RoleName *string `protobuf:"bytes,2,opt,name=RoleName" json:"RoleName,omitempty" log:"cy,td"`
	// 畅游的填充字段
	// @inject_tag: log:"cy"
	Null *string `protobuf:"bytes,3,opt,name=Null" json:"Null,omitempty" log:"cy"`
	// 该账号下的角色数量
	// @inject_tag: log:"td"
	RoleCount *int32 `protobuf:"varint,4,opt,name=RoleCount" json:"RoleCount,omitempty" log:"td"`
	// 系统语言
	// @inject_tag: log:"td"
	SystemLanguage   *string `protobuf:"bytes,5,opt,name=systemLanguage" json:"systemLanguage,omitempty" log:"td"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiRoleBuild) Reset()                    { *m = BiRoleBuild{} }
func (m *BiRoleBuild) String() string            { return proto.CompactTextString(m) }
func (*BiRoleBuild) ProtoMessage()               {}
func (*BiRoleBuild) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *BiRoleBuild) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRoleBuild) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *BiRoleBuild) GetNull() string {
	if m != nil && m.Null != nil {
		return *m.Null
	}
	return ""
}

func (m *BiRoleBuild) GetRoleCount() int32 {
	if m != nil && m.RoleCount != nil {
		return *m.RoleCount
	}
	return 0
}

func (m *BiRoleBuild) GetSystemLanguage() string {
	if m != nil && m.SystemLanguage != nil {
		return *m.SystemLanguage
	}
	return ""
}

// 新角色创建队伍
type BiCreateTeam struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	TeamIcon *int32 `protobuf:"varint,2,opt,name=teamIcon" json:"teamIcon,omitempty" log:"td"`
	// 分区 (1东部, 2西部)
	// @inject_tag: log:"td"
	TeamPart *int32 `protobuf:"varint,3,opt,name=teamPart" json:"teamPart,omitempty" log:"td"`
	// 队伍名称
	// @inject_tag: log:"td"
	TeamName         *string `protobuf:"bytes,4,opt,name=teamName" json:"teamName,omitempty" log:"td"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiCreateTeam) Reset()                    { *m = BiCreateTeam{} }
func (m *BiCreateTeam) String() string            { return proto.CompactTextString(m) }
func (*BiCreateTeam) ProtoMessage()               {}
func (*BiCreateTeam) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *BiCreateTeam) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiCreateTeam) GetTeamIcon() int32 {
	if m != nil && m.TeamIcon != nil {
		return *m.TeamIcon
	}
	return 0
}

func (m *BiCreateTeam) GetTeamPart() int32 {
	if m != nil && m.TeamPart != nil {
		return *m.TeamPart
	}
	return 0
}

func (m *BiCreateTeam) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

// 新角色创建
type BiCreatePlayer struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员id
	// @inject_tag: log:"td"
	PlayerId *int32 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty" log:"td"`
	// 球员名称
	// @inject_tag: log:"td"
	PlayerName       *string `protobuf:"bytes,3,opt,name=playerName" json:"playerName,omitempty" log:"td"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiCreatePlayer) Reset()                    { *m = BiCreatePlayer{} }
func (m *BiCreatePlayer) String() string            { return proto.CompactTextString(m) }
func (*BiCreatePlayer) ProtoMessage()               {}
func (*BiCreatePlayer) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *BiCreatePlayer) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiCreatePlayer) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *BiCreatePlayer) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

// 新手引导日志
type BiNewStages struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 引导步骤大类
	// @inject_tag: log:"cy"
	EventId *string `protobuf:"bytes,2,opt,name=eventId" json:"eventId,omitempty" log:"cy"`
	// @inject_tag: log:"td,nba"
	Group *int32 `protobuf:"varint,3,opt,name=Group" json:"Group,omitempty" log:"td,nba"`
	// @inject_tag: log:"td,nba"
	Step             *int32 `protobuf:"varint,4,opt,name=Step" json:"Step,omitempty" log:"td,nba"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiNewStages) Reset()                    { *m = BiNewStages{} }
func (m *BiNewStages) String() string            { return proto.CompactTextString(m) }
func (*BiNewStages) ProtoMessage()               {}
func (*BiNewStages) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *BiNewStages) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiNewStages) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *BiNewStages) GetGroup() int32 {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return 0
}

func (m *BiNewStages) GetStep() int32 {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return 0
}

// 全明星赛引导
type BiAllStarGuide struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	Step             *int32 `protobuf:"varint,2,opt,name=Step" json:"Step,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiAllStarGuide) Reset()                    { *m = BiAllStarGuide{} }
func (m *BiAllStarGuide) String() string            { return proto.CompactTextString(m) }
func (*BiAllStarGuide) ProtoMessage()               {}
func (*BiAllStarGuide) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *BiAllStarGuide) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAllStarGuide) GetStep() int32 {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return 0
}

// 登出日志
type BiLogout struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 时间戳,只有畅游不记录
	// @inject_tag: log:"lmd,nba"
	Time *int64 `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" log:"lmd,nba"`
	// 角色名
	// @inject_tag: log:"cy"
	RoleName *string `protobuf:"bytes,3,opt,name=roleName" json:"roleName,omitempty" log:"cy"`
	// 价值虚拟币总量
	// @inject_tag: log:"cy"
	TotalDiamondNum *int32 `protobuf:"varint,4,opt,name=totalDiamondNum" json:"totalDiamondNum,omitempty" log:"cy"`
	// 在线时长(秒)
	// @inject_tag: log:"cy,nba,td"
	OnlineTimes *int32 `protobuf:"varint,5,opt,name=onlineTimes" json:"onlineTimes,omitempty" log:"cy,nba,td"`
	// vip等级
	// @inject_tag: log:"cy,nba"
	Vip *int32 `protobuf:"varint,6,opt,name=vip" json:"vip,omitempty" log:"cy,nba"`
	// 下线时需要记录的用户属性
	// @inject_tag: log:"td"
	RoleProperty     *BiRoleProperty `protobuf:"bytes,7,opt,name=roleProperty" json:"roleProperty,omitempty" log:"td"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *BiLogout) Reset()                    { *m = BiLogout{} }
func (m *BiLogout) String() string            { return proto.CompactTextString(m) }
func (*BiLogout) ProtoMessage()               {}
func (*BiLogout) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

func (m *BiLogout) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLogout) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiLogout) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *BiLogout) GetTotalDiamondNum() int32 {
	if m != nil && m.TotalDiamondNum != nil {
		return *m.TotalDiamondNum
	}
	return 0
}

func (m *BiLogout) GetOnlineTimes() int32 {
	if m != nil && m.OnlineTimes != nil {
		return *m.OnlineTimes
	}
	return 0
}

func (m *BiLogout) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *BiLogout) GetRoleProperty() *BiRoleProperty {
	if m != nil {
		return m.RoleProperty
	}
	return nil
}

type BiRoleProperty struct {
	// 累计登录天数
	// @inject_tag: log:"td"
	LoginDays *int32 `protobuf:"varint,7,opt,name=loginDays" json:"loginDays,omitempty" log:"td"`
	// 连续登录天数(中断就重置)
	// @inject_tag: log:"td"
	ContinueLoginDays *int32 `protobuf:"varint,8,opt,name=continueLoginDays" json:"continueLoginDays,omitempty" log:"td"`
	// 巅峰竞技段位
	// @inject_tag: log:"td"
	PeerlessLevel *int32 `protobuf:"varint,9,opt,name=peerlessLevel" json:"peerlessLevel,omitempty" log:"td"`
	// 巅峰竞技排名
	// @inject_tag: log:"td"
	PeerlessRank *int32 `protobuf:"varint,10,opt,name=peerlessRank" json:"peerlessRank,omitempty" log:"td"`
	// 常规赛关卡通关数
	// @inject_tag: log:"td"
	RegularMatchCount *int32 `protobuf:"varint,11,opt,name=regularMatchCount" json:"regularMatchCount,omitempty" log:"td"`
	// 季后赛通关数
	// @inject_tag: log:"td"
	PlayoffMatchCount *int32 `protobuf:"varint,12,opt,name=playoffMatchCount" json:"playoffMatchCount,omitempty" log:"td"`
	// 名宿赛通关数
	// @inject_tag: log:"td"
	MascotMatchCount *int32 `protobuf:"varint,13,opt,name=mascotMatchCount" json:"mascotMatchCount,omitempty" log:"td"`
	// 巅峰挑战通关数
	// @inject_tag: log:"td"
	TowerMatchCount *int32 `protobuf:"varint,14,opt,name=towerMatchCount" json:"towerMatchCount,omitempty" log:"td"`
	// 巡演赛挑战通关数
	// @inject_tag: log:"td"
	TourMatchCount *int32 `protobuf:"varint,15,opt,name=tourMatchCount" json:"tourMatchCount,omitempty" log:"td"`
	// 分区挑战东部赛区通关数
	// @inject_tag: log:"td"
	EastMatchCount *int32 `protobuf:"varint,16,opt,name=eastMatchCount" json:"eastMatchCount,omitempty" log:"td"`
	// 分区挑战西部赛区通关数
	// @inject_tag: log:"td"
	WestMatchCount *int32 `protobuf:"varint,17,opt,name=westMatchCount" json:"westMatchCount,omitempty" log:"td"`
	// 分区挑战巅峰赛区通关数
	// @inject_tag: log:"td"
	TopMatchCount *int32 `protobuf:"varint,18,opt,name=topMatchCount" json:"topMatchCount,omitempty" log:"td"`
	// 分区挑战常规赛区通关数
	// @inject_tag: log:"td"
	CommonMatchCount *int32 `protobuf:"varint,19,opt,name=commonMatchCount" json:"commonMatchCount,omitempty" log:"td"`
	// 工资帽上限
	// @inject_tag: log:"td"
	SalaryCapLimit *int32 `protobuf:"varint,20,opt,name=salaryCapLimit" json:"salaryCapLimit,omitempty" log:"td"`
	// 阵容使用工资帽
	// @inject_tag: log:"td"
	SalaryCapUse *int32 `protobuf:"varint,21,opt,name=salaryCapUse" json:"salaryCapUse,omitempty" log:"td"`
	// 当前穿戴所有护具总强化等级
	// @inject_tag: log:"td"
	TotalEquipLevel *int32 `protobuf:"varint,22,opt,name=totalEquipLevel" json:"totalEquipLevel,omitempty" log:"td"`
	// 当前穿戴所有护具总品质
	// @inject_tag: log:"td"
	TotalEquipQuality *int32 `protobuf:"varint,23,opt,name=totalEquipQuality" json:"totalEquipQuality,omitempty" log:"td"`
	// 当前穿戴所有护具总精炼等级
	// @inject_tag: log:"td"
	TotalEquipRefine *int32 `protobuf:"varint,24,opt,name=totalEquipRefine" json:"totalEquipRefine,omitempty" log:"td"`
	// 当前最佳阵容总星数
	// @inject_tag: log:"td"
	BestSquadStar *int32 `protobuf:"varint,25,opt,name=bestSquadStar" json:"bestSquadStar,omitempty" log:"td"`
	// 总图鉴值
	// @inject_tag: log:"td"
	RosterScore *int32 `protobuf:"varint,26,opt,name=rosterScore" json:"rosterScore,omitempty" log:"td"`
	// 首发阵容(格式:品质_星_球员id)
	// @inject_tag: log:"td"
	Starter []string `protobuf:"bytes,27,rep,name=starter" json:"starter,omitempty" log:"td"`
	// 替补阵容(格式:品质_星_球员id)
	// @inject_tag: log:"td"
	Bench            []string `protobuf:"bytes,28,rep,name=bench" json:"bench,omitempty" log:"td"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BiRoleProperty) Reset()                    { *m = BiRoleProperty{} }
func (m *BiRoleProperty) String() string            { return proto.CompactTextString(m) }
func (*BiRoleProperty) ProtoMessage()               {}
func (*BiRoleProperty) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *BiRoleProperty) GetLoginDays() int32 {
	if m != nil && m.LoginDays != nil {
		return *m.LoginDays
	}
	return 0
}

func (m *BiRoleProperty) GetContinueLoginDays() int32 {
	if m != nil && m.ContinueLoginDays != nil {
		return *m.ContinueLoginDays
	}
	return 0
}

func (m *BiRoleProperty) GetPeerlessLevel() int32 {
	if m != nil && m.PeerlessLevel != nil {
		return *m.PeerlessLevel
	}
	return 0
}

func (m *BiRoleProperty) GetPeerlessRank() int32 {
	if m != nil && m.PeerlessRank != nil {
		return *m.PeerlessRank
	}
	return 0
}

func (m *BiRoleProperty) GetRegularMatchCount() int32 {
	if m != nil && m.RegularMatchCount != nil {
		return *m.RegularMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetPlayoffMatchCount() int32 {
	if m != nil && m.PlayoffMatchCount != nil {
		return *m.PlayoffMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetMascotMatchCount() int32 {
	if m != nil && m.MascotMatchCount != nil {
		return *m.MascotMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetTowerMatchCount() int32 {
	if m != nil && m.TowerMatchCount != nil {
		return *m.TowerMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetTourMatchCount() int32 {
	if m != nil && m.TourMatchCount != nil {
		return *m.TourMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetEastMatchCount() int32 {
	if m != nil && m.EastMatchCount != nil {
		return *m.EastMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetWestMatchCount() int32 {
	if m != nil && m.WestMatchCount != nil {
		return *m.WestMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetTopMatchCount() int32 {
	if m != nil && m.TopMatchCount != nil {
		return *m.TopMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetCommonMatchCount() int32 {
	if m != nil && m.CommonMatchCount != nil {
		return *m.CommonMatchCount
	}
	return 0
}

func (m *BiRoleProperty) GetSalaryCapLimit() int32 {
	if m != nil && m.SalaryCapLimit != nil {
		return *m.SalaryCapLimit
	}
	return 0
}

func (m *BiRoleProperty) GetSalaryCapUse() int32 {
	if m != nil && m.SalaryCapUse != nil {
		return *m.SalaryCapUse
	}
	return 0
}

func (m *BiRoleProperty) GetTotalEquipLevel() int32 {
	if m != nil && m.TotalEquipLevel != nil {
		return *m.TotalEquipLevel
	}
	return 0
}

func (m *BiRoleProperty) GetTotalEquipQuality() int32 {
	if m != nil && m.TotalEquipQuality != nil {
		return *m.TotalEquipQuality
	}
	return 0
}

func (m *BiRoleProperty) GetTotalEquipRefine() int32 {
	if m != nil && m.TotalEquipRefine != nil {
		return *m.TotalEquipRefine
	}
	return 0
}

func (m *BiRoleProperty) GetBestSquadStar() int32 {
	if m != nil && m.BestSquadStar != nil {
		return *m.BestSquadStar
	}
	return 0
}

func (m *BiRoleProperty) GetRosterScore() int32 {
	if m != nil && m.RosterScore != nil {
		return *m.RosterScore
	}
	return 0
}

func (m *BiRoleProperty) GetStarter() []string {
	if m != nil {
		return m.Starter
	}
	return nil
}

func (m *BiRoleProperty) GetBench() []string {
	if m != nil {
		return m.Bench
	}
	return nil
}

// 充值预订单
type BiPayPreOrder struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 订单号
	OrderId *string `protobuf:"bytes,2,opt,name=OrderId" json:"OrderId,omitempty"`
	// 商品id(配置档ID)
	PayId            *int32 `protobuf:"varint,3,opt,name=PayId" json:"PayId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPayPreOrder) Reset()                    { *m = BiPayPreOrder{} }
func (m *BiPayPreOrder) String() string            { return proto.CompactTextString(m) }
func (*BiPayPreOrder) ProtoMessage()               {}
func (*BiPayPreOrder) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *BiPayPreOrder) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPayPreOrder) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *BiPayPreOrder) GetPayId() int32 {
	if m != nil && m.PayId != nil {
		return *m.PayId
	}
	return 0
}

// 充值订单记录(收到充值成功回调)
type BiPayOrder struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 订单号
	OrderId *string `protobuf:"bytes,2,opt,name=OrderId" json:"OrderId,omitempty"`
	// 商品id(配置档ID)
	PayId            *int32 `protobuf:"varint,3,opt,name=PayId" json:"PayId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPayOrder) Reset()                    { *m = BiPayOrder{} }
func (m *BiPayOrder) String() string            { return proto.CompactTextString(m) }
func (*BiPayOrder) ProtoMessage()               {}
func (*BiPayOrder) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *BiPayOrder) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPayOrder) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *BiPayOrder) GetPayId() int32 {
	if m != nil && m.PayId != nil {
		return *m.PayId
	}
	return 0
}

// 充值成功日志(发货)
type BiRecharge struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 时间戳
	// @inject_tag: log:"lmd"
	Time *int64 `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" log:"lmd"`
	// @inject_tag: log:"lmd"
	DeviceId *string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty" log:"lmd"`
	// 充值金额(元) 畅游充值最小单位是0.01元
	// @inject_tag: log:"cy"
	Amount *float64 `protobuf:"fixed64,7,opt,name=Amount" json:"Amount,omitempty" log:"cy"`
	// 充值渠道id
	// @inject_tag: log:"cy"
	RechargeChannel *string `protobuf:"bytes,8,opt,name=rechargeChannel" json:"rechargeChannel,omitempty" log:"cy"`
	// 当次充值所兑换的虚拟币数量
	// @inject_tag: log:"cy"
	RechargeDiamondNum *int32 `protobuf:"varint,9,opt,name=rechargeDiamondNum" json:"rechargeDiamondNum,omitempty" log:"cy"`
	// 币种（1：元 2：分）
	// @inject_tag: log:"cy"
	Currency *int32 `protobuf:"varint,10,opt,name=currency" json:"currency,omitempty" log:"cy"`
	// ip
	// @inject_tag: log:"cy"
	Ip *string `protobuf:"bytes,11,opt,name=ip" json:"ip,omitempty" log:"cy"`
	// 价值虚拟币总量
	// @inject_tag: log:"cy"
	TotalDiamondNum *int32 `protobuf:"varint,12,opt,name=totalDiamondNum" json:"totalDiamondNum,omitempty" log:"cy"`
	// vip
	// @inject_tag: log:"cy"
	Vip *int32 `protobuf:"varint,13,opt,name=vip" json:"vip,omitempty" log:"cy"`
	// 商品id(配置档ID)
	PayId *int32 `protobuf:"varint,14,opt,name=PayId" json:"PayId,omitempty"`
	// 平台订单号
	OrderId *string `protobuf:"bytes,15,opt,name=OrderId" json:"OrderId,omitempty"`
	// 充值金额(元) 临时用
	// @inject_tag: log:"td"
	Money *int32 `protobuf:"varint,16,opt,name=Money" json:"Money,omitempty" log:"td"`
	// 是否是第一笔充值
	// @inject_tag: log:"td"
	IsFirst *bool `protobuf:"varint,17,opt,name=isFirst" json:"isFirst,omitempty" log:"td"`
	// 历史充值总额,单位:分
	// @inject_tag: log:"td"
	TotalAmount *int64 `protobuf:"varint,18,opt,name=totalAmount" json:"totalAmount,omitempty" log:"td"`
	// 游戏服的订单号
	// @inject_tag: log:"td"
	CpOrderId *string `protobuf:"bytes,19,opt,name=cpOrderId" json:"cpOrderId,omitempty" log:"td"`
	// 支付渠道
	// @inject_tag: log:"td"
	PayType          *string `protobuf:"bytes,20,opt,name=payType" json:"payType,omitempty" log:"td"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiRecharge) Reset()                    { *m = BiRecharge{} }
func (m *BiRecharge) String() string            { return proto.CompactTextString(m) }
func (*BiRecharge) ProtoMessage()               {}
func (*BiRecharge) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

func (m *BiRecharge) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRecharge) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiRecharge) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *BiRecharge) GetAmount() float64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *BiRecharge) GetRechargeChannel() string {
	if m != nil && m.RechargeChannel != nil {
		return *m.RechargeChannel
	}
	return ""
}

func (m *BiRecharge) GetRechargeDiamondNum() int32 {
	if m != nil && m.RechargeDiamondNum != nil {
		return *m.RechargeDiamondNum
	}
	return 0
}

func (m *BiRecharge) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

func (m *BiRecharge) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *BiRecharge) GetTotalDiamondNum() int32 {
	if m != nil && m.TotalDiamondNum != nil {
		return *m.TotalDiamondNum
	}
	return 0
}

func (m *BiRecharge) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *BiRecharge) GetPayId() int32 {
	if m != nil && m.PayId != nil {
		return *m.PayId
	}
	return 0
}

func (m *BiRecharge) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *BiRecharge) GetMoney() int32 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *BiRecharge) GetIsFirst() bool {
	if m != nil && m.IsFirst != nil {
		return *m.IsFirst
	}
	return false
}

func (m *BiRecharge) GetTotalAmount() int64 {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return 0
}

func (m *BiRecharge) GetCpOrderId() string {
	if m != nil && m.CpOrderId != nil {
		return *m.CpOrderId
	}
	return ""
}

func (m *BiRecharge) GetPayType() string {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return ""
}

// 升级日志
type BiLevelUp struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 角色名
	// @inject_tag: log:"cy"
	RoleName *string `protobuf:"bytes,7,opt,name=RoleName" json:"RoleName,omitempty" log:"cy"`
	// 升级后等级
	// @inject_tag: log:"cy,td,nba"
	CurLevel *int32 `protobuf:"varint,9,opt,name=CurLevel" json:"CurLevel,omitempty" log:"cy,td,nba"`
	// 升级前等级
	// @inject_tag: log:"cy,td,nba"
	BeforeLevel *int32 `protobuf:"varint,10,opt,name=BeforeLevel" json:"BeforeLevel,omitempty" log:"cy,td,nba"`
	// 升级时长（秒）
	LevelUpTime      *int32 `protobuf:"varint,11,opt,name=LevelUpTime" json:"LevelUpTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiLevelUp) Reset()                    { *m = BiLevelUp{} }
func (m *BiLevelUp) String() string            { return proto.CompactTextString(m) }
func (*BiLevelUp) ProtoMessage()               {}
func (*BiLevelUp) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{16} }

func (m *BiLevelUp) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLevelUp) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *BiLevelUp) GetCurLevel() int32 {
	if m != nil && m.CurLevel != nil {
		return *m.CurLevel
	}
	return 0
}

func (m *BiLevelUp) GetBeforeLevel() int32 {
	if m != nil && m.BeforeLevel != nil {
		return *m.BeforeLevel
	}
	return 0
}

func (m *BiLevelUp) GetLevelUpTime() int32 {
	if m != nil && m.LevelUpTime != nil {
		return *m.LevelUpTime
	}
	return 0
}

// 商城日志
type BiShopTrade struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 商品类型id 0.货币；1.卡牌；2.装备；3.道具。按此规则定义id，埋点完成后返回最终对照表。商品为物品时，“商品类型id”与“物品获得与消耗”日志中的“物品类型id”一致。
	ItemTypeId *int32 `protobuf:"varint,7,opt,name=itemTypeId" json:"itemTypeId,omitempty"`
	// 商品id 若商品为物品，“商品id“应与”物品获得与消耗“日志中的”物品id“一致；若商品为货币，”商品类型id“应与”货币获得与消耗“日志中的”货币id“一致
	ItemId *int32 `protobuf:"varint,8,opt,name=itemId" json:"itemId,omitempty"`
	// 商品数量
	ItemNum *int32 `protobuf:"varint,9,opt,name=itemNum" json:"itemNum,omitempty"`
	// 消耗货币id
	ConsumeMoneyId *int32 `protobuf:"varint,10,opt,name=consumeMoneyId" json:"consumeMoneyId,omitempty"`
	// 消耗货币数量
	ConsumeMoneyNum *int32 `protobuf:"varint,11,opt,name=consumeMoneyNum" json:"consumeMoneyNum,omitempty"`
	// 商城id
	ShopId *int32 `protobuf:"varint,12,opt,name=shopId" json:"shopId,omitempty"`
	// vip
	Vip              *int32 `protobuf:"varint,13,opt,name=vip" json:"vip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiShopTrade) Reset()                    { *m = BiShopTrade{} }
func (m *BiShopTrade) String() string            { return proto.CompactTextString(m) }
func (*BiShopTrade) ProtoMessage()               {}
func (*BiShopTrade) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{17} }

func (m *BiShopTrade) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiShopTrade) GetItemTypeId() int32 {
	if m != nil && m.ItemTypeId != nil {
		return *m.ItemTypeId
	}
	return 0
}

func (m *BiShopTrade) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *BiShopTrade) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *BiShopTrade) GetConsumeMoneyId() int32 {
	if m != nil && m.ConsumeMoneyId != nil {
		return *m.ConsumeMoneyId
	}
	return 0
}

func (m *BiShopTrade) GetConsumeMoneyNum() int32 {
	if m != nil && m.ConsumeMoneyNum != nil {
		return *m.ConsumeMoneyNum
	}
	return 0
}

func (m *BiShopTrade) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *BiShopTrade) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

// 转会商店日志
type BiTransferTrade struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 商品类型id 0.货币；1.卡牌；2.装备；3.道具。按此规则定义id，埋点完成后返回最终对照表。商品为物品时，“商品类型id”与“物品获得与消耗”日志中的“物品类型id”一致。
	ItemTypeId *int32 `protobuf:"varint,2,opt,name=itemTypeId" json:"itemTypeId,omitempty"`
	// 商品id 若商品为物品，“商品id“应与”物品获得与消耗“日志中的”物品id“一致；若商品为货币，”商品类型id“应与”货币获得与消耗“日志中的”货币id“一致
	ItemId *int32 `protobuf:"varint,3,opt,name=itemId" json:"itemId,omitempty"`
	// 商品数量
	ItemNum *int32 `protobuf:"varint,4,opt,name=itemNum" json:"itemNum,omitempty"`
	// 消耗货币id
	ConsumeMoneyId *int32 `protobuf:"varint,5,opt,name=consumeMoneyId" json:"consumeMoneyId,omitempty"`
	// 消耗货币数量
	ConsumeMoneyNum *int32 `protobuf:"varint,6,opt,name=consumeMoneyNum" json:"consumeMoneyNum,omitempty"`
	// 商城id
	ShopId *int32 `protobuf:"varint,7,opt,name=shopId" json:"shopId,omitempty"`
	// vip
	Vip              *int32 `protobuf:"varint,8,opt,name=vip" json:"vip,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiTransferTrade) Reset()                    { *m = BiTransferTrade{} }
func (m *BiTransferTrade) String() string            { return proto.CompactTextString(m) }
func (*BiTransferTrade) ProtoMessage()               {}
func (*BiTransferTrade) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{18} }

func (m *BiTransferTrade) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiTransferTrade) GetItemTypeId() int32 {
	if m != nil && m.ItemTypeId != nil {
		return *m.ItemTypeId
	}
	return 0
}

func (m *BiTransferTrade) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *BiTransferTrade) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *BiTransferTrade) GetConsumeMoneyId() int32 {
	if m != nil && m.ConsumeMoneyId != nil {
		return *m.ConsumeMoneyId
	}
	return 0
}

func (m *BiTransferTrade) GetConsumeMoneyNum() int32 {
	if m != nil && m.ConsumeMoneyNum != nil {
		return *m.ConsumeMoneyNum
	}
	return 0
}

func (m *BiTransferTrade) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *BiTransferTrade) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

// 货币获得与消耗日志
type BiMoney struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 获得或消耗方式id
	CauseId *int32 `protobuf:"varint,7,opt,name=causeId" json:"causeId,omitempty"`
	// 获得或消耗数量
	Num *int32 `protobuf:"varint,8,opt,name=num" json:"num,omitempty"`
	// 获得或消耗后总量
	TotalNum *int64 `protobuf:"varint,9,opt,name=totalNum" json:"totalNum,omitempty"`
	// 货币id
	MoneyId *int32 `protobuf:"varint,10,opt,name=moneyId" json:"moneyId,omitempty"`
	// vip
	Vip *int32 `protobuf:"varint,11,opt,name=vip" json:"vip,omitempty"`
	// 原因子id
	SubCauseId *int32 `protobuf:"varint,12,opt,name=subCauseId" json:"subCauseId,omitempty"`
	// 行为
	Action           *int32 `protobuf:"varint,13,opt,name=action" json:"action,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiMoney) Reset()                    { *m = BiMoney{} }
func (m *BiMoney) String() string            { return proto.CompactTextString(m) }
func (*BiMoney) ProtoMessage()               {}
func (*BiMoney) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{19} }

func (m *BiMoney) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiMoney) GetCauseId() int32 {
	if m != nil && m.CauseId != nil {
		return *m.CauseId
	}
	return 0
}

func (m *BiMoney) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *BiMoney) GetTotalNum() int64 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *BiMoney) GetMoneyId() int32 {
	if m != nil && m.MoneyId != nil {
		return *m.MoneyId
	}
	return 0
}

func (m *BiMoney) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *BiMoney) GetSubCauseId() int32 {
	if m != nil && m.SubCauseId != nil {
		return *m.SubCauseId
	}
	return 0
}

func (m *BiMoney) GetAction() int32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

// 物品获得与消耗日志
type BiItem struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 时间戳,只有公司平台需要记录
	// @inject_tag: log:"lmd"
	Time *int64 `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" log:"lmd"`
	// 道具名
	// @inject_tag: log:"lmd,nba"
	Cname *string `protobuf:"bytes,3,opt,name=Cname" json:"Cname,omitempty" log:"lmd,nba"`
	// 道具变化前数量
	// @inject_tag: log:"lmd"
	Before *int64 `protobuf:"varint,4,opt,name=Before" json:"Before,omitempty" log:"lmd"`
	// 道具变化量(带符号)
	// @inject_tag: log:"lmd,td,nba"
	Change *int32 `protobuf:"varint,5,opt,name=Change" json:"Change,omitempty" log:"lmd,td,nba"`
	// 道具变化后数量
	// @inject_tag: log:"lmd,nba"
	After *int64 `protobuf:"varint,6,opt,name=After" json:"After,omitempty" log:"lmd,nba"`
	// 物品类型
	// @inject_tag: log:"cy,td"
	ItemType *int32 `protobuf:"varint,7,opt,name=itemType" json:"itemType,omitempty" log:"cy,td"`
	// 物品配置id
	ConfigId *int32 `protobuf:"varint,8,opt,name=ConfigId" json:"ConfigId,omitempty"`
	// 获得或消耗方式id
	// @inject_tag: log:"cy,td"
	CauseId *int32 `protobuf:"varint,9,opt,name=causeId" json:"causeId,omitempty" log:"cy,td"`
	// 获得或消耗数量
	// @inject_tag: log:"cy,td"
	Num *int32 `protobuf:"varint,10,opt,name=num" json:"num,omitempty" log:"cy,td"`
	// vip
	// @inject_tag: log:"cy"
	Vip *int32 `protobuf:"varint,11,opt,name=vip" json:"vip,omitempty" log:"cy"`
	// 子原因id
	// @inject_tag: log:"cy,td"
	SubCauseId *int32 `protobuf:"varint,12,opt,name=subCauseId" json:"subCauseId,omitempty" log:"cy,td"`
	// 行为
	// @inject_tag: log:"cy,td"
	Action *int32 `protobuf:"varint,13,opt,name=action" json:"action,omitempty" log:"cy,td"`
	// 剩余总量
	// @inject_tag: log:"cy,td"
	Total *int64 `protobuf:"varint,14,opt,name=total" json:"total,omitempty" log:"cy,td"`
	// 物品唯一id,如球员,装备等
	// @inject_tag: log:"td,nba"
	InstIdStr        *string `protobuf:"bytes,15,opt,name=InstIdStr" json:"InstIdStr,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiItem) Reset()                    { *m = BiItem{} }
func (m *BiItem) String() string            { return proto.CompactTextString(m) }
func (*BiItem) ProtoMessage()               {}
func (*BiItem) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{20} }

func (m *BiItem) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiItem) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiItem) GetCname() string {
	if m != nil && m.Cname != nil {
		return *m.Cname
	}
	return ""
}

func (m *BiItem) GetBefore() int64 {
	if m != nil && m.Before != nil {
		return *m.Before
	}
	return 0
}

func (m *BiItem) GetChange() int32 {
	if m != nil && m.Change != nil {
		return *m.Change
	}
	return 0
}

func (m *BiItem) GetAfter() int64 {
	if m != nil && m.After != nil {
		return *m.After
	}
	return 0
}

func (m *BiItem) GetItemType() int32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *BiItem) GetConfigId() int32 {
	if m != nil && m.ConfigId != nil {
		return *m.ConfigId
	}
	return 0
}

func (m *BiItem) GetCauseId() int32 {
	if m != nil && m.CauseId != nil {
		return *m.CauseId
	}
	return 0
}

func (m *BiItem) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *BiItem) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *BiItem) GetSubCauseId() int32 {
	if m != nil && m.SubCauseId != nil {
		return *m.SubCauseId
	}
	return 0
}

func (m *BiItem) GetAction() int32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

func (m *BiItem) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *BiItem) GetInstIdStr() string {
	if m != nil && m.InstIdStr != nil {
		return *m.InstIdStr
	}
	return ""
}

// 任务日志
type BiTask struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 任务id
	TaskId *int32 `protobuf:"varint,2,opt,name=taskId" json:"taskId,omitempty"`
	// 结果 0 失败；1 成功 默认值：null
	// @inject_tag: log:"cy"
	Result *string `protobuf:"bytes,3,opt,name=result" json:"result,omitempty" log:"cy"`
	// 任务类型 1.日常任务  2.主线任务
	// @inject_tag: log:"cy"
	TaskType *int32 `protobuf:"varint,4,opt,name=taskType" json:"taskType,omitempty" log:"cy"`
	// 接任务还是完成任务
	// @inject_tag: log:"td"
	IsAccept         *bool  `protobuf:"varint,5,opt,name=isAccept" json:"isAccept,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiTask) Reset()                    { *m = BiTask{} }
func (m *BiTask) String() string            { return proto.CompactTextString(m) }
func (*BiTask) ProtoMessage()               {}
func (*BiTask) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{21} }

func (m *BiTask) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *BiTask) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *BiTask) GetTaskType() int32 {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return 0
}

func (m *BiTask) GetIsAccept() bool {
	if m != nil && m.IsAccept != nil {
		return *m.IsAccept
	}
	return false
}

// 关卡战斗日志
type BiPveFight struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 关卡Id
	StageId *int32 `protobuf:"varint,2,opt,name=stageId" json:"stageId,omitempty"`
	// 战斗方式 1.普通战斗；2.自动战斗；3.扫荡
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// 战斗类型
	Npcid *int32 `protobuf:"varint,4,opt,name=npcid" json:"npcid,omitempty"`
	// 战斗结果
	Result *string `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
	// 地图id
	MapId *string `protobuf:"bytes,6,opt,name=mapId" json:"mapId,omitempty"`
	// 评价星级
	// @inject_tag: log:"cy"
	Star *int32 `protobuf:"varint,7,opt,name=star" json:"star,omitempty" log:"cy"`
	// 关卡类型 1.普通关卡 2.精英关卡
	// @inject_tag: log:"cy"
	StageType *int32 `protobuf:"varint,8,opt,name=stageType" json:"stageType,omitempty" log:"cy"`
	// 关卡用时（秒）
	Time *int32 `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	// 战斗类型
	// @inject_tag: log:"td"
	MatchType        *int32 `protobuf:"varint,10,opt,name=matchType" json:"matchType,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPveFight) Reset()                    { *m = BiPveFight{} }
func (m *BiPveFight) String() string            { return proto.CompactTextString(m) }
func (*BiPveFight) ProtoMessage()               {}
func (*BiPveFight) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{22} }

func (m *BiPveFight) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPveFight) GetStageId() int32 {
	if m != nil && m.StageId != nil {
		return *m.StageId
	}
	return 0
}

func (m *BiPveFight) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BiPveFight) GetNpcid() int32 {
	if m != nil && m.Npcid != nil {
		return *m.Npcid
	}
	return 0
}

func (m *BiPveFight) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *BiPveFight) GetMapId() string {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return ""
}

func (m *BiPveFight) GetStar() int32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *BiPveFight) GetStageType() int32 {
	if m != nil && m.StageType != nil {
		return *m.StageType
	}
	return 0
}

func (m *BiPveFight) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiPveFight) GetMatchType() int32 {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return 0
}

// 完成成就日志
type BiAchievement struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 成就类型
	AchievementType *string `protobuf:"bytes,7,opt,name=AchievementType" json:"AchievementType,omitempty"`
	// 成就小类id
	SubId *int32 `protobuf:"varint,8,opt,name=subId" json:"subId,omitempty"`
	// 成就进度
	Progress         *int32 `protobuf:"varint,9,opt,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiAchievement) Reset()                    { *m = BiAchievement{} }
func (m *BiAchievement) String() string            { return proto.CompactTextString(m) }
func (*BiAchievement) ProtoMessage()               {}
func (*BiAchievement) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{23} }

func (m *BiAchievement) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAchievement) GetAchievementType() string {
	if m != nil && m.AchievementType != nil {
		return *m.AchievementType
	}
	return ""
}

func (m *BiAchievement) GetSubId() int32 {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return 0
}

func (m *BiAchievement) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

// 活动日志
type BiActivity struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 活动id
	ActivityId *int32 `protobuf:"varint,2,opt,name=ActivityId" json:"ActivityId,omitempty"`
	// 档位id
	SubId *int32 `protobuf:"varint,3,opt,name=subId" json:"subId,omitempty"`
	// 子类型,operateId==2时,表示子界面id
	SubType *int32 `protobuf:"varint,4,opt,name=subType" json:"subType,omitempty"`
	// 1代表领取奖励，2代表首次进入活动界面
	OperateId        *int32 `protobuf:"varint,5,opt,name=operateId" json:"operateId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiActivity) Reset()                    { *m = BiActivity{} }
func (m *BiActivity) String() string            { return proto.CompactTextString(m) }
func (*BiActivity) ProtoMessage()               {}
func (*BiActivity) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{24} }

func (m *BiActivity) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiActivity) GetActivityId() int32 {
	if m != nil && m.ActivityId != nil {
		return *m.ActivityId
	}
	return 0
}

func (m *BiActivity) GetSubId() int32 {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return 0
}

func (m *BiActivity) GetSubType() int32 {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return 0
}

func (m *BiActivity) GetOperateId() int32 {
	if m != nil && m.OperateId != nil {
		return *m.OperateId
	}
	return 0
}

// 激活码日志
type BiActivationCode struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 激活码id
	CodeId *string `protobuf:"bytes,7,opt,name=codeId" json:"codeId,omitempty"`
	// 礼包id
	ItemId           *string `protobuf:"bytes,8,opt,name=itemId" json:"itemId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiActivationCode) Reset()                    { *m = BiActivationCode{} }
func (m *BiActivationCode) String() string            { return proto.CompactTextString(m) }
func (*BiActivationCode) ProtoMessage()               {}
func (*BiActivationCode) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{25} }

func (m *BiActivationCode) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiActivationCode) GetCodeId() string {
	if m != nil && m.CodeId != nil {
		return *m.CodeId
	}
	return ""
}

func (m *BiActivationCode) GetItemId() string {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return ""
}

// pvp战斗日志
type BiPvpFight struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 战斗类型 用于区分战斗类型，如休闲赛，排位赛等；记录好后需返回对照表
	BattleType *int32 `protobuf:"varint,7,opt,name=battleType" json:"battleType,omitempty"`
	// 战斗模式id 用于区分不同的战斗模式，如休闲赛1v1，休闲赛3v3等
	BattleId *int32 `protobuf:"varint,8,opt,name=battleId" json:"battleId,omitempty"`
	// 战斗难度
	BattleLevel *int32 `protobuf:"varint,9,opt,name=battleLevel" json:"battleLevel,omitempty"`
	// 战斗流水id
	OrderId *int32 `protobuf:"varint,10,opt,name=orderId" json:"orderId,omitempty"`
	// 队伍id
	TeamId *int32 `protobuf:"varint,11,opt,name=teamId" json:"teamId,omitempty"`
	// 战斗结果
	Result *int32 `protobuf:"varint,12,opt,name=result" json:"result,omitempty"`
	// 战斗耗时（秒）
	Time *int32 `protobuf:"varint,13,opt,name=time" json:"time,omitempty"`
	// 对手类型
	TargetType *int32 `protobuf:"varint,14,opt,name=targetType" json:"targetType,omitempty"`
	//
	Null             *string `protobuf:"bytes,15,opt,name=null" json:"null,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiPvpFight) Reset()                    { *m = BiPvpFight{} }
func (m *BiPvpFight) String() string            { return proto.CompactTextString(m) }
func (*BiPvpFight) ProtoMessage()               {}
func (*BiPvpFight) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{26} }

func (m *BiPvpFight) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPvpFight) GetBattleType() int32 {
	if m != nil && m.BattleType != nil {
		return *m.BattleType
	}
	return 0
}

func (m *BiPvpFight) GetBattleId() int32 {
	if m != nil && m.BattleId != nil {
		return *m.BattleId
	}
	return 0
}

func (m *BiPvpFight) GetBattleLevel() int32 {
	if m != nil && m.BattleLevel != nil {
		return *m.BattleLevel
	}
	return 0
}

func (m *BiPvpFight) GetOrderId() int32 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *BiPvpFight) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *BiPvpFight) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BiPvpFight) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiPvpFight) GetTargetType() int32 {
	if m != nil && m.TargetType != nil {
		return *m.TargetType
	}
	return 0
}

func (m *BiPvpFight) GetNull() string {
	if m != nil && m.Null != nil {
		return *m.Null
	}
	return ""
}

// 匹配日志
type BiMatch struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 战斗类型  用于区分战斗类型，如休闲赛，排位赛等；记录好后需返回对照表
	BattleType *int32 `protobuf:"varint,2,opt,name=battleType" json:"battleType,omitempty"`
	// 战斗模式id 用于区分不同的战斗模式，如休闲赛1v1，休闲赛3v3等
	BattleId *int32 `protobuf:"varint,3,opt,name=battleId" json:"battleId,omitempty"`
	// 战斗难度
	BattleLevel *int32 `protobuf:"varint,4,opt,name=battleLevel" json:"battleLevel,omitempty"`
	// 战斗流水id
	OrderId *int32 `protobuf:"varint,5,opt,name=orderId" json:"orderId,omitempty"`
	// 队伍id
	TeamId *int32 `protobuf:"varint,6,opt,name=teamId" json:"teamId,omitempty"`
	// 匹配结果(1:匹配成功)
	Result *int32 `protobuf:"varint,7,opt,name=result" json:"result,omitempty"`
	// 匹配耗时(毫秒)
	UseTimeMs        *int32 `protobuf:"varint,8,opt,name=useTimeMs" json:"useTimeMs,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiMatch) Reset()                    { *m = BiMatch{} }
func (m *BiMatch) String() string            { return proto.CompactTextString(m) }
func (*BiMatch) ProtoMessage()               {}
func (*BiMatch) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{27} }

func (m *BiMatch) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiMatch) GetBattleType() int32 {
	if m != nil && m.BattleType != nil {
		return *m.BattleType
	}
	return 0
}

func (m *BiMatch) GetBattleId() int32 {
	if m != nil && m.BattleId != nil {
		return *m.BattleId
	}
	return 0
}

func (m *BiMatch) GetBattleLevel() int32 {
	if m != nil && m.BattleLevel != nil {
		return *m.BattleLevel
	}
	return 0
}

func (m *BiMatch) GetOrderId() int32 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *BiMatch) GetTeamId() int32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *BiMatch) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BiMatch) GetUseTimeMs() int32 {
	if m != nil && m.UseTimeMs != nil {
		return *m.UseTimeMs
	}
	return 0
}

// 好友日志
type BiFriend struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 好友数量
	FriendsNum *int32 `protobuf:"varint,7,opt,name=friendsNum" json:"friendsNum,omitempty"`
	// 对方id
	TargetRoleId     *int32 `protobuf:"varint,8,opt,name=targetRoleId" json:"targetRoleId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiFriend) Reset()                    { *m = BiFriend{} }
func (m *BiFriend) String() string            { return proto.CompactTextString(m) }
func (*BiFriend) ProtoMessage()               {}
func (*BiFriend) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{28} }

func (m *BiFriend) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiFriend) GetFriendsNum() int32 {
	if m != nil && m.FriendsNum != nil {
		return *m.FriendsNum
	}
	return 0
}

func (m *BiFriend) GetTargetRoleId() int32 {
	if m != nil && m.TargetRoleId != nil {
		return *m.TargetRoleId
	}
	return 0
}

// 聊天日志
type BiChat struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 聊天频道
	ChannelId *int32 `protobuf:"varint,2,opt,name=channelId" json:"channelId,omitempty"`
	// 内容类型,固定值:3
	ContentType *int32 `protobuf:"varint,3,opt,name=contentType" json:"contentType,omitempty"`
	// 聊天内容
	Content *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	// 对方id
	TargetRoleId *int32 `protobuf:"varint,5,opt,name=targetRoleId" json:"targetRoleId,omitempty"`
	// 是否好友 0表示否，1表示是
	IsFriends        *int32 `protobuf:"varint,6,opt,name=isFriends" json:"isFriends,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiChat) Reset()                    { *m = BiChat{} }
func (m *BiChat) String() string            { return proto.CompactTextString(m) }
func (*BiChat) ProtoMessage()               {}
func (*BiChat) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{29} }

func (m *BiChat) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiChat) GetChannelId() int32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *BiChat) GetContentType() int32 {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return 0
}

func (m *BiChat) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *BiChat) GetTargetRoleId() int32 {
	if m != nil && m.TargetRoleId != nil {
		return *m.TargetRoleId
	}
	return 0
}

func (m *BiChat) GetIsFriends() int32 {
	if m != nil && m.IsFriends != nil {
		return *m.IsFriends
	}
	return 0
}

// 邮件
type BiMail struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 邮件ID
	MailIdStr *string `protobuf:"bytes,2,opt,name=mailIdStr" json:"mailIdStr,omitempty"`
	// 邮件名称
	MailName *string `protobuf:"bytes,3,opt,name=mailName" json:"mailName,omitempty"`
	// 邮件类型 1.无奖励邮件 2.有奖励邮件
	MailType *int32 `protobuf:"varint,4,opt,name=mailType" json:"mailType,omitempty"`
	// 操作类型 1.点击邮件 2.点击关闭 3.点击确定（无奖励邮件只有确定按键） 4.点击领取（有奖励邮件有领取按钮） 5.点击一键领取（通过这个按键把奖励领取） 6.点击一键删除（通过这个按键把邮件删除）
	MailCaoZuo       *int32 `protobuf:"varint,5,opt,name=mailCaoZuo" json:"mailCaoZuo,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiMail) Reset()                    { *m = BiMail{} }
func (m *BiMail) String() string            { return proto.CompactTextString(m) }
func (*BiMail) ProtoMessage()               {}
func (*BiMail) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{30} }

func (m *BiMail) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiMail) GetMailIdStr() string {
	if m != nil && m.MailIdStr != nil {
		return *m.MailIdStr
	}
	return ""
}

func (m *BiMail) GetMailName() string {
	if m != nil && m.MailName != nil {
		return *m.MailName
	}
	return ""
}

func (m *BiMail) GetMailType() int32 {
	if m != nil && m.MailType != nil {
		return *m.MailType
	}
	return 0
}

func (m *BiMail) GetMailCaoZuo() int32 {
	if m != nil && m.MailCaoZuo != nil {
		return *m.MailCaoZuo
	}
	return 0
}

// 排行榜
type BiRank struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 排行榜类型
	RankType *int32 `protobuf:"varint,2,opt,name=rankType" json:"rankType,omitempty"`
	// 排名
	Rank *int32 `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	//
	Null             *string `protobuf:"bytes,4,opt,name=null" json:"null,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiRank) Reset()                    { *m = BiRank{} }
func (m *BiRank) String() string            { return proto.CompactTextString(m) }
func (*BiRank) ProtoMessage()               {}
func (*BiRank) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{31} }

func (m *BiRank) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRank) GetRankType() int32 {
	if m != nil && m.RankType != nil {
		return *m.RankType
	}
	return 0
}

func (m *BiRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *BiRank) GetNull() string {
	if m != nil && m.Null != nil {
		return *m.Null
	}
	return ""
}

// 球员槽升级
type BiPlayerSlotLevelup struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员槽序号
	Index *int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// 升级之前等级
	OldLevel *int32 `protobuf:"varint,4,opt,name=OldLevel" json:"OldLevel,omitempty"`
	// 升级之后等级
	CurLevel         *int32 `protobuf:"varint,5,opt,name=CurLevel" json:"CurLevel,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPlayerSlotLevelup) Reset()                    { *m = BiPlayerSlotLevelup{} }
func (m *BiPlayerSlotLevelup) String() string            { return proto.CompactTextString(m) }
func (*BiPlayerSlotLevelup) ProtoMessage()               {}
func (*BiPlayerSlotLevelup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{32} }

func (m *BiPlayerSlotLevelup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPlayerSlotLevelup) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *BiPlayerSlotLevelup) GetOldLevel() int32 {
	if m != nil && m.OldLevel != nil {
		return *m.OldLevel
	}
	return 0
}

func (m *BiPlayerSlotLevelup) GetCurLevel() int32 {
	if m != nil && m.CurLevel != nil {
		return *m.CurLevel
	}
	return 0
}

// 球员升星
type BiPlayerStarup struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员配置id
	PlayerConfigId *int32 `protobuf:"varint,2,opt,name=PlayerConfigId" json:"PlayerConfigId,omitempty"`
	// 球员唯一id
	PlayerInstIdStr *string `protobuf:"bytes,3,opt,name=PlayerInstIdStr" json:"PlayerInstIdStr,omitempty"`
	// 升级之前星级
	OldStar *int32 `protobuf:"varint,4,opt,name=OldStar" json:"OldStar,omitempty"`
	// 升级之后星级
	CurStar          *int32 `protobuf:"varint,5,opt,name=CurStar" json:"CurStar,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPlayerStarup) Reset()                    { *m = BiPlayerStarup{} }
func (m *BiPlayerStarup) String() string            { return proto.CompactTextString(m) }
func (*BiPlayerStarup) ProtoMessage()               {}
func (*BiPlayerStarup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{33} }

func (m *BiPlayerStarup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPlayerStarup) GetPlayerConfigId() int32 {
	if m != nil && m.PlayerConfigId != nil {
		return *m.PlayerConfigId
	}
	return 0
}

func (m *BiPlayerStarup) GetPlayerInstIdStr() string {
	if m != nil && m.PlayerInstIdStr != nil {
		return *m.PlayerInstIdStr
	}
	return ""
}

func (m *BiPlayerStarup) GetOldStar() int32 {
	if m != nil && m.OldStar != nil {
		return *m.OldStar
	}
	return 0
}

func (m *BiPlayerStarup) GetCurStar() int32 {
	if m != nil && m.CurStar != nil {
		return *m.CurStar
	}
	return 0
}

// 球员槽升阶
type BiPlayerSlotClassUp struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员配置id
	SlotIndex *int32 `protobuf:"varint,2,opt,name=slotIndex" json:"slotIndex,omitempty"`
	// 升级之前阶
	OldClass *int32 `protobuf:"varint,4,opt,name=OldClass" json:"OldClass,omitempty"`
	// 升级之后阶
	CurClass         *int32 `protobuf:"varint,5,opt,name=CurClass" json:"CurClass,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPlayerSlotClassUp) Reset()                    { *m = BiPlayerSlotClassUp{} }
func (m *BiPlayerSlotClassUp) String() string            { return proto.CompactTextString(m) }
func (*BiPlayerSlotClassUp) ProtoMessage()               {}
func (*BiPlayerSlotClassUp) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{34} }

func (m *BiPlayerSlotClassUp) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPlayerSlotClassUp) GetSlotIndex() int32 {
	if m != nil && m.SlotIndex != nil {
		return *m.SlotIndex
	}
	return 0
}

func (m *BiPlayerSlotClassUp) GetOldClass() int32 {
	if m != nil && m.OldClass != nil {
		return *m.OldClass
	}
	return 0
}

func (m *BiPlayerSlotClassUp) GetCurClass() int32 {
	if m != nil && m.CurClass != nil {
		return *m.CurClass
	}
	return 0
}

// 球员羁绊
type BiPlayerRelation struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员配置id
	PlayerConfigId *int32 `protobuf:"varint,2,opt,name=PlayerConfigId" json:"PlayerConfigId,omitempty"`
	// 球员唯一id
	PlayerInstIdStr *string `protobuf:"bytes,3,opt,name=PlayerInstIdStr" json:"PlayerInstIdStr,omitempty"`
	// 羁绊配置id
	RelationConfigId *int32 `protobuf:"varint,4,opt,name=RelationConfigId" json:"RelationConfigId,omitempty"`
	// 羁绊等级
	RelationLevel    *int32 `protobuf:"varint,5,opt,name=RelationLevel" json:"RelationLevel,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPlayerRelation) Reset()                    { *m = BiPlayerRelation{} }
func (m *BiPlayerRelation) String() string            { return proto.CompactTextString(m) }
func (*BiPlayerRelation) ProtoMessage()               {}
func (*BiPlayerRelation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{35} }

func (m *BiPlayerRelation) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPlayerRelation) GetPlayerConfigId() int32 {
	if m != nil && m.PlayerConfigId != nil {
		return *m.PlayerConfigId
	}
	return 0
}

func (m *BiPlayerRelation) GetPlayerInstIdStr() string {
	if m != nil && m.PlayerInstIdStr != nil {
		return *m.PlayerInstIdStr
	}
	return ""
}

func (m *BiPlayerRelation) GetRelationConfigId() int32 {
	if m != nil && m.RelationConfigId != nil {
		return *m.RelationConfigId
	}
	return 0
}

func (m *BiPlayerRelation) GetRelationLevel() int32 {
	if m != nil && m.RelationLevel != nil {
		return *m.RelationLevel
	}
	return 0
}

// 最佳阵容上阵
type BiBestSquadEnter struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员配置id
	PlayerConfigId *int32 `protobuf:"varint,2,opt,name=PlayerConfigId" json:"PlayerConfigId,omitempty"`
	// 球员唯一id
	PlayerInstIdStr *string `protobuf:"bytes,3,opt,name=PlayerInstIdStr" json:"PlayerInstIdStr,omitempty"`
	// 格子
	GridIndex        *int32 `protobuf:"varint,4,opt,name=GridIndex" json:"GridIndex,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiBestSquadEnter) Reset()                    { *m = BiBestSquadEnter{} }
func (m *BiBestSquadEnter) String() string            { return proto.CompactTextString(m) }
func (*BiBestSquadEnter) ProtoMessage()               {}
func (*BiBestSquadEnter) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{36} }

func (m *BiBestSquadEnter) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiBestSquadEnter) GetPlayerConfigId() int32 {
	if m != nil && m.PlayerConfigId != nil {
		return *m.PlayerConfigId
	}
	return 0
}

func (m *BiBestSquadEnter) GetPlayerInstIdStr() string {
	if m != nil && m.PlayerInstIdStr != nil {
		return *m.PlayerInstIdStr
	}
	return ""
}

func (m *BiBestSquadEnter) GetGridIndex() int32 {
	if m != nil && m.GridIndex != nil {
		return *m.GridIndex
	}
	return 0
}

// 最佳阵容购买格子
type BiBestSquadBuyGrid struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 当前格子数量
	GridCount        *int32 `protobuf:"varint,2,opt,name=GridCount" json:"GridCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiBestSquadBuyGrid) Reset()                    { *m = BiBestSquadBuyGrid{} }
func (m *BiBestSquadBuyGrid) String() string            { return proto.CompactTextString(m) }
func (*BiBestSquadBuyGrid) ProtoMessage()               {}
func (*BiBestSquadBuyGrid) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{37} }

func (m *BiBestSquadBuyGrid) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiBestSquadBuyGrid) GetGridCount() int32 {
	if m != nil && m.GridCount != nil {
		return *m.GridCount
	}
	return 0
}

// 常规赛赛季完成
type BiRegularSeasonComplete struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 赛季id
	SeasonId         *int32 `protobuf:"varint,2,opt,name=SeasonId" json:"SeasonId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiRegularSeasonComplete) Reset()                    { *m = BiRegularSeasonComplete{} }
func (m *BiRegularSeasonComplete) String() string            { return proto.CompactTextString(m) }
func (*BiRegularSeasonComplete) ProtoMessage()               {}
func (*BiRegularSeasonComplete) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{38} }

func (m *BiRegularSeasonComplete) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRegularSeasonComplete) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

// 战斗开始
type BiFightBegin struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	MatchType *int32 `protobuf:"varint,2,opt,name=MatchType" json:"MatchType,omitempty" log:"td"`
	// @inject_tag: log:"td"
	MatchId *int32 `protobuf:"varint,3,opt,name=MatchId" json:"MatchId,omitempty" log:"td"`
	// @inject_tag: log:"td"
	IsSkip3Quarter *bool `protobuf:"varint,4,opt,name=IsSkip3Quarter" json:"IsSkip3Quarter,omitempty" log:"td"`
	// @inject_tag: log:"td"
	IsSkipFight *bool `protobuf:"varint,5,opt,name=IsSkipFight" json:"IsSkipFight,omitempty" log:"td"`
	// @inject_tag: log:"td"
	IsRobot *bool `protobuf:"varint,6,opt,name=IsRobot" json:"IsRobot,omitempty" log:"td"`
	// @inject_tag: log:"td"
	FastMultiple *int32 `protobuf:"varint,9,opt,name=FastMultiple" json:"FastMultiple,omitempty" log:"td"`
	// @inject_tag: log:"td"
	FightIdStr       *string `protobuf:"bytes,11,opt,name=FightIdStr" json:"FightIdStr,omitempty" log:"td"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiFightBegin) Reset()                    { *m = BiFightBegin{} }
func (m *BiFightBegin) String() string            { return proto.CompactTextString(m) }
func (*BiFightBegin) ProtoMessage()               {}
func (*BiFightBegin) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{39} }

func (m *BiFightBegin) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiFightBegin) GetMatchType() int32 {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return 0
}

func (m *BiFightBegin) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *BiFightBegin) GetIsSkip3Quarter() bool {
	if m != nil && m.IsSkip3Quarter != nil {
		return *m.IsSkip3Quarter
	}
	return false
}

func (m *BiFightBegin) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

func (m *BiFightBegin) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *BiFightBegin) GetFastMultiple() int32 {
	if m != nil && m.FastMultiple != nil {
		return *m.FastMultiple
	}
	return 0
}

func (m *BiFightBegin) GetFightIdStr() string {
	if m != nil && m.FightIdStr != nil {
		return *m.FightIdStr
	}
	return ""
}

// 战斗结果
type BiFightResult struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	MatchType *int32 `protobuf:"varint,2,opt,name=MatchType" json:"MatchType,omitempty" log:"td"`
	// @inject_tag: log:"td"
	MatchId *int32 `protobuf:"varint,3,opt,name=MatchId" json:"MatchId,omitempty" log:"td"`
	// @inject_tag: log:"td"
	IsSkip3Quarter *bool `protobuf:"varint,4,opt,name=IsSkip3Quarter" json:"IsSkip3Quarter,omitempty" log:"td"`
	// @inject_tag: log:"td"
	IsSkipFight *bool `protobuf:"varint,5,opt,name=IsSkipFight" json:"IsSkipFight,omitempty" log:"td"`
	// @inject_tag: log:"td"
	MyScore *int32 `protobuf:"varint,6,opt,name=MyScore" json:"MyScore,omitempty" log:"td"`
	// @inject_tag: log:"td"
	OppScore *int32 `protobuf:"varint,7,opt,name=OppScore" json:"OppScore,omitempty" log:"td"`
	// @inject_tag: log:"td"
	IsWin *bool `protobuf:"varint,8,opt,name=IsWin" json:"IsWin,omitempty" log:"td"`
	// @inject_tag: log:"td"
	FastMultiple *int32 `protobuf:"varint,9,opt,name=FastMultiple" json:"FastMultiple,omitempty" log:"td"`
	// 球员id数组
	PlayerIds []int32 `protobuf:"varint,10,rep,name=PlayerIds" json:"PlayerIds,omitempty"`
	// 通关星级(三分大赛、扣篮大赛统计用)
	// @inject_tag: log:"td"
	LevelStar *int32 `protobuf:"varint,11,opt,name=LevelStar" json:"LevelStar,omitempty" log:"td"`
	// 收视分段数(王朝挑战统计用)
	// @inject_tag: log:"td"
	Viewership *int32 `protobuf:"varint,12,opt,name=Viewership" json:"Viewership,omitempty" log:"td"`
	// 哪一层(巅峰挑战和分区赛)
	// @inject_tag: log:"td"
	TowerLevel *int32 `protobuf:"varint,13,opt,name=TowerLevel" json:"TowerLevel,omitempty" log:"td"`
	// @inject_tag: log:"td"
	FightIdStr *string `protobuf:"bytes,14,opt,name=FightIdStr" json:"FightIdStr,omitempty" log:"td"`
	// 战斗使用时间(秒)
	UseTimeSec       *int32 `protobuf:"varint,15,opt,name=useTimeSec" json:"useTimeSec,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiFightResult) Reset()                    { *m = BiFightResult{} }
func (m *BiFightResult) String() string            { return proto.CompactTextString(m) }
func (*BiFightResult) ProtoMessage()               {}
func (*BiFightResult) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{40} }

func (m *BiFightResult) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiFightResult) GetMatchType() int32 {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return 0
}

func (m *BiFightResult) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *BiFightResult) GetIsSkip3Quarter() bool {
	if m != nil && m.IsSkip3Quarter != nil {
		return *m.IsSkip3Quarter
	}
	return false
}

func (m *BiFightResult) GetIsSkipFight() bool {
	if m != nil && m.IsSkipFight != nil {
		return *m.IsSkipFight
	}
	return false
}

func (m *BiFightResult) GetMyScore() int32 {
	if m != nil && m.MyScore != nil {
		return *m.MyScore
	}
	return 0
}

func (m *BiFightResult) GetOppScore() int32 {
	if m != nil && m.OppScore != nil {
		return *m.OppScore
	}
	return 0
}

func (m *BiFightResult) GetIsWin() bool {
	if m != nil && m.IsWin != nil {
		return *m.IsWin
	}
	return false
}

func (m *BiFightResult) GetFastMultiple() int32 {
	if m != nil && m.FastMultiple != nil {
		return *m.FastMultiple
	}
	return 0
}

func (m *BiFightResult) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *BiFightResult) GetLevelStar() int32 {
	if m != nil && m.LevelStar != nil {
		return *m.LevelStar
	}
	return 0
}

func (m *BiFightResult) GetViewership() int32 {
	if m != nil && m.Viewership != nil {
		return *m.Viewership
	}
	return 0
}

func (m *BiFightResult) GetTowerLevel() int32 {
	if m != nil && m.TowerLevel != nil {
		return *m.TowerLevel
	}
	return 0
}

func (m *BiFightResult) GetFightIdStr() string {
	if m != nil && m.FightIdStr != nil {
		return *m.FightIdStr
	}
	return ""
}

func (m *BiFightResult) GetUseTimeSec() int32 {
	if m != nil && m.UseTimeSec != nil {
		return *m.UseTimeSec
	}
	return 0
}

// 装备强化
type BiEquipLevelup struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 装备配置id
	EquipConfigId *int32 `protobuf:"varint,2,opt,name=EquipConfigId" json:"EquipConfigId,omitempty"`
	// 装备唯一id
	EquipInstIdStr *string `protobuf:"bytes,3,opt,name=EquipInstIdStr" json:"EquipInstIdStr,omitempty"`
	OldLevel       *int32  `protobuf:"varint,4,opt,name=OldLevel" json:"OldLevel,omitempty"`
	CurLevel       *int32  `protobuf:"varint,5,opt,name=CurLevel" json:"CurLevel,omitempty"`
	// 装备部位(EquipmentPart)
	Part             *int32 `protobuf:"varint,6,opt,name=Part" json:"Part,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiEquipLevelup) Reset()                    { *m = BiEquipLevelup{} }
func (m *BiEquipLevelup) String() string            { return proto.CompactTextString(m) }
func (*BiEquipLevelup) ProtoMessage()               {}
func (*BiEquipLevelup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{41} }

func (m *BiEquipLevelup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiEquipLevelup) GetEquipConfigId() int32 {
	if m != nil && m.EquipConfigId != nil {
		return *m.EquipConfigId
	}
	return 0
}

func (m *BiEquipLevelup) GetEquipInstIdStr() string {
	if m != nil && m.EquipInstIdStr != nil {
		return *m.EquipInstIdStr
	}
	return ""
}

func (m *BiEquipLevelup) GetOldLevel() int32 {
	if m != nil && m.OldLevel != nil {
		return *m.OldLevel
	}
	return 0
}

func (m *BiEquipLevelup) GetCurLevel() int32 {
	if m != nil && m.CurLevel != nil {
		return *m.CurLevel
	}
	return 0
}

func (m *BiEquipLevelup) GetPart() int32 {
	if m != nil && m.Part != nil {
		return *m.Part
	}
	return 0
}

// 装备精炼
type BiEquipRefine struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 装备配置id
	EquipConfigId *int32 `protobuf:"varint,2,opt,name=EquipConfigId" json:"EquipConfigId,omitempty"`
	// 装备唯一id
	EquipInstIdStr   *string `protobuf:"bytes,3,opt,name=EquipInstIdStr" json:"EquipInstIdStr,omitempty"`
	OldRefine        *int32  `protobuf:"varint,4,opt,name=OldRefine" json:"OldRefine,omitempty"`
	CurRefine        *int32  `protobuf:"varint,5,opt,name=CurRefine" json:"CurRefine,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiEquipRefine) Reset()                    { *m = BiEquipRefine{} }
func (m *BiEquipRefine) String() string            { return proto.CompactTextString(m) }
func (*BiEquipRefine) ProtoMessage()               {}
func (*BiEquipRefine) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{42} }

func (m *BiEquipRefine) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiEquipRefine) GetEquipConfigId() int32 {
	if m != nil && m.EquipConfigId != nil {
		return *m.EquipConfigId
	}
	return 0
}

func (m *BiEquipRefine) GetEquipInstIdStr() string {
	if m != nil && m.EquipInstIdStr != nil {
		return *m.EquipInstIdStr
	}
	return ""
}

func (m *BiEquipRefine) GetOldRefine() int32 {
	if m != nil && m.OldRefine != nil {
		return *m.OldRefine
	}
	return 0
}

func (m *BiEquipRefine) GetCurRefine() int32 {
	if m != nil && m.CurRefine != nil {
		return *m.CurRefine
	}
	return 0
}

// 饰品强化
type BiJewelryLevelup struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 装备配置id
	EquipConfigId *int32 `protobuf:"varint,2,opt,name=EquipConfigId" json:"EquipConfigId,omitempty"`
	// 装备唯一id
	EquipInstIdStr   *string `protobuf:"bytes,3,opt,name=EquipInstIdStr" json:"EquipInstIdStr,omitempty"`
	OldLevel         *int32  `protobuf:"varint,4,opt,name=OldLevel" json:"OldLevel,omitempty"`
	CurLevel         *int32  `protobuf:"varint,5,opt,name=CurLevel" json:"CurLevel,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiJewelryLevelup) Reset()                    { *m = BiJewelryLevelup{} }
func (m *BiJewelryLevelup) String() string            { return proto.CompactTextString(m) }
func (*BiJewelryLevelup) ProtoMessage()               {}
func (*BiJewelryLevelup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{43} }

func (m *BiJewelryLevelup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiJewelryLevelup) GetEquipConfigId() int32 {
	if m != nil && m.EquipConfigId != nil {
		return *m.EquipConfigId
	}
	return 0
}

func (m *BiJewelryLevelup) GetEquipInstIdStr() string {
	if m != nil && m.EquipInstIdStr != nil {
		return *m.EquipInstIdStr
	}
	return ""
}

func (m *BiJewelryLevelup) GetOldLevel() int32 {
	if m != nil && m.OldLevel != nil {
		return *m.OldLevel
	}
	return 0
}

func (m *BiJewelryLevelup) GetCurLevel() int32 {
	if m != nil && m.CurLevel != nil {
		return *m.CurLevel
	}
	return 0
}

// 合成事件
type BiComposition struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 消耗物品id
	ConsumeItemId *int32 `protobuf:"varint,2,opt,name=ConsumeItemId" json:"ConsumeItemId,omitempty"`
	// 消耗物品数量
	ConsumeItemCount *int32 `protobuf:"varint,3,opt,name=ConsumeItemCount" json:"ConsumeItemCount,omitempty"`
	// 合成的物品列表
	// @inject_tag: log:"td"
	GetItems         []*ItemVaryConfig `protobuf:"bytes,4,rep,name=getItems" json:"getItems,omitempty" log:"td"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BiComposition) Reset()                    { *m = BiComposition{} }
func (m *BiComposition) String() string            { return proto.CompactTextString(m) }
func (*BiComposition) ProtoMessage()               {}
func (*BiComposition) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{44} }

func (m *BiComposition) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiComposition) GetConsumeItemId() int32 {
	if m != nil && m.ConsumeItemId != nil {
		return *m.ConsumeItemId
	}
	return 0
}

func (m *BiComposition) GetConsumeItemCount() int32 {
	if m != nil && m.ConsumeItemCount != nil {
		return *m.ConsumeItemCount
	}
	return 0
}

func (m *BiComposition) GetGetItems() []*ItemVaryConfig {
	if m != nil {
		return m.GetItems
	}
	return nil
}

// 分解装备
type BiDecomposition struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 装备配置id
	EquipConfigId *int32 `protobuf:"varint,2,opt,name=EquipConfigId" json:"EquipConfigId,omitempty"`
	// 装备唯一id
	EquipInstIdStr *string `protobuf:"bytes,3,opt,name=EquipInstIdStr" json:"EquipInstIdStr,omitempty"`
	// 返还物品列表
	// @inject_tag: log:"td"
	ReturnItems      []*ItemVaryConfig `protobuf:"bytes,4,rep,name=returnItems" json:"returnItems,omitempty" log:"td"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BiDecomposition) Reset()                    { *m = BiDecomposition{} }
func (m *BiDecomposition) String() string            { return proto.CompactTextString(m) }
func (*BiDecomposition) ProtoMessage()               {}
func (*BiDecomposition) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{45} }

func (m *BiDecomposition) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiDecomposition) GetEquipConfigId() int32 {
	if m != nil && m.EquipConfigId != nil {
		return *m.EquipConfigId
	}
	return 0
}

func (m *BiDecomposition) GetEquipInstIdStr() string {
	if m != nil && m.EquipInstIdStr != nil {
		return *m.EquipInstIdStr
	}
	return ""
}

func (m *BiDecomposition) GetReturnItems() []*ItemVaryConfig {
	if m != nil {
		return m.ReturnItems
	}
	return nil
}

// 名宿 解锁
type BiLegendUnlock struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	LegendId         *int32     `protobuf:"varint,2,opt,name=LegendId" json:"LegendId,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiLegendUnlock) Reset()                    { *m = BiLegendUnlock{} }
func (m *BiLegendUnlock) String() string            { return proto.CompactTextString(m) }
func (*BiLegendUnlock) ProtoMessage()               {}
func (*BiLegendUnlock) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{46} }

func (m *BiLegendUnlock) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLegendUnlock) GetLegendId() int32 {
	if m != nil && m.LegendId != nil {
		return *m.LegendId
	}
	return 0
}

// 名宿 培养
type BiLegendCultivate struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	LegendId         *int32     `protobuf:"varint,2,opt,name=LegendId" json:"LegendId,omitempty"`
	CultivateNum     *int32     `protobuf:"varint,3,opt,name=CultivateNum" json:"CultivateNum,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiLegendCultivate) Reset()                    { *m = BiLegendCultivate{} }
func (m *BiLegendCultivate) String() string            { return proto.CompactTextString(m) }
func (*BiLegendCultivate) ProtoMessage()               {}
func (*BiLegendCultivate) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{47} }

func (m *BiLegendCultivate) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLegendCultivate) GetLegendId() int32 {
	if m != nil && m.LegendId != nil {
		return *m.LegendId
	}
	return 0
}

func (m *BiLegendCultivate) GetCultivateNum() int32 {
	if m != nil && m.CultivateNum != nil {
		return *m.CultivateNum
	}
	return 0
}

// 名宿 升级
type BiLegendLevelup struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	LegendId         *int32     `protobuf:"varint,2,opt,name=LegendId" json:"LegendId,omitempty"`
	OldLevel         *int32     `protobuf:"varint,3,opt,name=OldLevel" json:"OldLevel,omitempty"`
	CurLevel         *int32     `protobuf:"varint,4,opt,name=CurLevel" json:"CurLevel,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiLegendLevelup) Reset()                    { *m = BiLegendLevelup{} }
func (m *BiLegendLevelup) String() string            { return proto.CompactTextString(m) }
func (*BiLegendLevelup) ProtoMessage()               {}
func (*BiLegendLevelup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{48} }

func (m *BiLegendLevelup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLegendLevelup) GetLegendId() int32 {
	if m != nil && m.LegendId != nil {
		return *m.LegendId
	}
	return 0
}

func (m *BiLegendLevelup) GetOldLevel() int32 {
	if m != nil && m.OldLevel != nil {
		return *m.OldLevel
	}
	return 0
}

func (m *BiLegendLevelup) GetCurLevel() int32 {
	if m != nil && m.CurLevel != nil {
		return *m.CurLevel
	}
	return 0
}

// 名宿 升星
type BiLegendStarup struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	LegendId         *int32     `protobuf:"varint,2,opt,name=LegendId" json:"LegendId,omitempty"`
	OldStar          *int32     `protobuf:"varint,3,opt,name=OldStar" json:"OldStar,omitempty"`
	CurStar          *int32     `protobuf:"varint,4,opt,name=CurStar" json:"CurStar,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiLegendStarup) Reset()                    { *m = BiLegendStarup{} }
func (m *BiLegendStarup) String() string            { return proto.CompactTextString(m) }
func (*BiLegendStarup) ProtoMessage()               {}
func (*BiLegendStarup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{49} }

func (m *BiLegendStarup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLegendStarup) GetLegendId() int32 {
	if m != nil && m.LegendId != nil {
		return *m.LegendId
	}
	return 0
}

func (m *BiLegendStarup) GetOldStar() int32 {
	if m != nil && m.OldStar != nil {
		return *m.OldStar
	}
	return 0
}

func (m *BiLegendStarup) GetCurStar() int32 {
	if m != nil && m.CurStar != nil {
		return *m.CurStar
	}
	return 0
}

// 助理教练解锁
type BiCoachUnLock struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	CoachId          *int32     `protobuf:"varint,2,opt,name=CoachId" json:"CoachId,omitempty"`
	Quality          *int32     `protobuf:"varint,3,opt,name=Quality" json:"Quality,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiCoachUnLock) Reset()                    { *m = BiCoachUnLock{} }
func (m *BiCoachUnLock) String() string            { return proto.CompactTextString(m) }
func (*BiCoachUnLock) ProtoMessage()               {}
func (*BiCoachUnLock) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{50} }

func (m *BiCoachUnLock) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiCoachUnLock) GetCoachId() int32 {
	if m != nil && m.CoachId != nil {
		return *m.CoachId
	}
	return 0
}

func (m *BiCoachUnLock) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

// 助理教练升级
type BiCoachLevelup struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	CoachId          *int32     `protobuf:"varint,2,opt,name=CoachId" json:"CoachId,omitempty"`
	OldLevel         *int32     `protobuf:"varint,3,opt,name=OldLevel" json:"OldLevel,omitempty"`
	CurLevel         *int32     `protobuf:"varint,4,opt,name=CurLevel" json:"CurLevel,omitempty"`
	Quality          *int32     `protobuf:"varint,5,opt,name=Quality" json:"Quality,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiCoachLevelup) Reset()                    { *m = BiCoachLevelup{} }
func (m *BiCoachLevelup) String() string            { return proto.CompactTextString(m) }
func (*BiCoachLevelup) ProtoMessage()               {}
func (*BiCoachLevelup) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{51} }

func (m *BiCoachLevelup) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiCoachLevelup) GetCoachId() int32 {
	if m != nil && m.CoachId != nil {
		return *m.CoachId
	}
	return 0
}

func (m *BiCoachLevelup) GetOldLevel() int32 {
	if m != nil && m.OldLevel != nil {
		return *m.OldLevel
	}
	return 0
}

func (m *BiCoachLevelup) GetCurLevel() int32 {
	if m != nil && m.CurLevel != nil {
		return *m.CurLevel
	}
	return 0
}

func (m *BiCoachLevelup) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

// 招募
type BiRecruit struct {
	Gamer     *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	RecruitId *int32     `protobuf:"varint,2,opt,name=RecruitId" json:"RecruitId,omitempty"`
	DrawNum   *int32     `protobuf:"varint,3,opt,name=DrawNum" json:"DrawNum,omitempty"`
	// 球员(ResourceType_PlayerResource)
	GetPlayerIds []int32 `protobuf:"varint,4,rep,name=GetPlayerIds" json:"GetPlayerIds,omitempty"`
	// 道具(ResourceType_GoodsResource)
	GetItemIds []int32 `protobuf:"varint,5,rep,name=GetItemIds" json:"GetItemIds,omitempty"`
	// 是否符合心愿单
	IsWish           *bool  `protobuf:"varint,6,opt,name=IsWish" json:"IsWish,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiRecruit) Reset()                    { *m = BiRecruit{} }
func (m *BiRecruit) String() string            { return proto.CompactTextString(m) }
func (*BiRecruit) ProtoMessage()               {}
func (*BiRecruit) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{52} }

func (m *BiRecruit) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRecruit) GetRecruitId() int32 {
	if m != nil && m.RecruitId != nil {
		return *m.RecruitId
	}
	return 0
}

func (m *BiRecruit) GetDrawNum() int32 {
	if m != nil && m.DrawNum != nil {
		return *m.DrawNum
	}
	return 0
}

func (m *BiRecruit) GetGetPlayerIds() []int32 {
	if m != nil {
		return m.GetPlayerIds
	}
	return nil
}

func (m *BiRecruit) GetGetItemIds() []int32 {
	if m != nil {
		return m.GetItemIds
	}
	return nil
}

func (m *BiRecruit) GetIsWish() bool {
	if m != nil && m.IsWish != nil {
		return *m.IsWish
	}
	return false
}

// 交易行
type BiTrade struct {
	// 上架、下架是卖家信息，购买是买家信息
	// @inject_tag: log:"td,nba"
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty" log:"td,nba"`
	// 交易类型
	// @inject_tag: log:"td,nba"
	SellType *int32 `protobuf:"varint,2,opt,name=sellType" json:"sellType,omitempty" log:"td,nba"`
	// 卖家gid
	// @inject_tag: log:"td,nba"
	Seller *int32 `protobuf:"varint,3,opt,name=seller" json:"seller,omitempty" log:"td,nba"`
	// 过期时间
	// @inject_tag: log:"td,nba"
	ExpireTime *int64 `protobuf:"varint,4,opt,name=expireTime" json:"expireTime,omitempty" log:"td,nba"`
	// 商品
	// @inject_tag: log:"td,nba"
	Goods *string `protobuf:"bytes,5,opt,name=goods" json:"goods,omitempty" log:"td,nba"`
	// 价格
	// @inject_tag: log:"td,nba"
	Price            *string `protobuf:"bytes,6,opt,name=price" json:"price,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiTrade) Reset()                    { *m = BiTrade{} }
func (m *BiTrade) String() string            { return proto.CompactTextString(m) }
func (*BiTrade) ProtoMessage()               {}
func (*BiTrade) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{53} }

func (m *BiTrade) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiTrade) GetSellType() int32 {
	if m != nil && m.SellType != nil {
		return *m.SellType
	}
	return 0
}

func (m *BiTrade) GetSeller() int32 {
	if m != nil && m.Seller != nil {
		return *m.Seller
	}
	return 0
}

func (m *BiTrade) GetExpireTime() int64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

func (m *BiTrade) GetGoods() string {
	if m != nil && m.Goods != nil {
		return *m.Goods
	}
	return ""
}

func (m *BiTrade) GetPrice() string {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return ""
}

// gamer慢消息
type BiGamerSlowMsg struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 消息号
	// @inject_tag: log:"td,nba"
	CmdAct *int32 `protobuf:"varint,2,opt,name=CmdAct" json:"CmdAct,omitempty" log:"td,nba"`
	// 执行时间(ms)
	// @inject_tag: log:"td,nba"
	CostTime         *int32 `protobuf:"varint,3,opt,name=CostTime" json:"CostTime,omitempty" log:"td,nba"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiGamerSlowMsg) Reset()                    { *m = BiGamerSlowMsg{} }
func (m *BiGamerSlowMsg) String() string            { return proto.CompactTextString(m) }
func (*BiGamerSlowMsg) ProtoMessage()               {}
func (*BiGamerSlowMsg) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{54} }

func (m *BiGamerSlowMsg) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiGamerSlowMsg) GetCmdAct() int32 {
	if m != nil && m.CmdAct != nil {
		return *m.CmdAct
	}
	return 0
}

func (m *BiGamerSlowMsg) GetCostTime() int32 {
	if m != nil && m.CostTime != nil {
		return *m.CostTime
	}
	return 0
}

// 自定义球员
type BiCustomize struct {
	// 上架、下架是卖家信息，购买是买家信息
	// @inject_tag: log:"td,nba"
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty" log:"td,nba"`
	// 位置
	// @inject_tag: log:"td,nba"
	Place *int32 `protobuf:"varint,3,opt,name=place" json:"place,omitempty" log:"td,nba"`
	// 号码
	// @inject_tag: log:"td,nba"
	Number *int32 `protobuf:"varint,4,opt,name=number" json:"number,omitempty" log:"td,nba"`
	// 体型
	// @inject_tag: log:"td,nba"
	Body *int32 `protobuf:"varint,5,opt,name=body" json:"body,omitempty" log:"td,nba"`
	// 头像
	// @inject_tag: log:"td,nba"
	Portrait *int32 `protobuf:"varint,6,opt,name=portrait" json:"portrait,omitempty" log:"td,nba"`
	// 技能1
	// @inject_tag: log:"td,nba"
	Skill1 *int32 `protobuf:"varint,7,opt,name=skill1" json:"skill1,omitempty" log:"td,nba"`
	// 技能2
	// @inject_tag: log:"td,nba"
	Skill2 *int32 `protobuf:"varint,8,opt,name=skill2" json:"skill2,omitempty" log:"td,nba"`
	// 技能3
	// @inject_tag: log:"td,nba"
	Skill3 *int32 `protobuf:"varint,9,opt,name=skill3" json:"skill3,omitempty" log:"td,nba"`
	// 名字
	// @inject_tag: log:"td,nba"
	Name             *string `protobuf:"bytes,10,opt,name=name" json:"name,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiCustomize) Reset()                    { *m = BiCustomize{} }
func (m *BiCustomize) String() string            { return proto.CompactTextString(m) }
func (*BiCustomize) ProtoMessage()               {}
func (*BiCustomize) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{55} }

func (m *BiCustomize) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiCustomize) GetPlace() int32 {
	if m != nil && m.Place != nil {
		return *m.Place
	}
	return 0
}

func (m *BiCustomize) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *BiCustomize) GetBody() int32 {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return 0
}

func (m *BiCustomize) GetPortrait() int32 {
	if m != nil && m.Portrait != nil {
		return *m.Portrait
	}
	return 0
}

func (m *BiCustomize) GetSkill1() int32 {
	if m != nil && m.Skill1 != nil {
		return *m.Skill1
	}
	return 0
}

func (m *BiCustomize) GetSkill2() int32 {
	if m != nil && m.Skill2 != nil {
		return *m.Skill2
	}
	return 0
}

func (m *BiCustomize) GetSkill3() int32 {
	if m != nil && m.Skill3 != nil {
		return *m.Skill3
	}
	return 0
}

func (m *BiCustomize) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 网络统计数据
type BiNetStat struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	ServerId *int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty" log:"td"`
	// 发消息阻塞超时丢弃数量
	// @inject_tag: log:"td"
	SendTimeoutCount *int64 `protobuf:"varint,3,opt,name=sendTimeoutCount" json:"sendTimeoutCount,omitempty" log:"td"`
	// 发消息数量
	// @inject_tag: log:"td"
	SendMsgCount *int64 `protobuf:"varint,4,opt,name=sendMsgCount" json:"sendMsgCount,omitempty" log:"td"`
	// 收消息数量
	// @inject_tag: log:"td"
	RecvMsgCount *int64 `protobuf:"varint,5,opt,name=recvMsgCount" json:"recvMsgCount,omitempty" log:"td"`
	// 发消息大小
	// @inject_tag: log:"td"
	SendMsgSize *int64 `protobuf:"varint,6,opt,name=sendMsgSize" json:"sendMsgSize,omitempty" log:"td"`
	// 收消息大小
	// @inject_tag: log:"td"
	RecvMsgSize *int64 `protobuf:"varint,7,opt,name=recvMsgSize" json:"recvMsgSize,omitempty" log:"td"`
	// send时消息chan长度(消息堆积情况)
	// @inject_tag: log:"td"
	SendChanLen *int64 `protobuf:"varint,8,opt,name=sendChanLen" json:"sendChanLen,omitempty" log:"td"`
	// 最大消息长度
	// @inject_tag: log:"td"
	MaxMsgLen *uint32 `protobuf:"varint,9,opt,name=maxMsgLen" json:"maxMsgLen,omitempty" log:"td"`
	// 最大消息长度的消息号
	// @inject_tag: log:"td"
	MaxMsgLenCmd *int32 `protobuf:"varint,10,opt,name=maxMsgLenCmd" json:"maxMsgLenCmd,omitempty" log:"td"`
	// chan写入时间(微秒)
	// @inject_tag: log:"td"
	MsgWriteTime *int64 `protobuf:"varint,11,opt,name=msgWriteTime" json:"msgWriteTime,omitempty" log:"td"`
	// chan平均写入时间(微秒)
	// @inject_tag: log:"td"
	AvgWriteTime *int64 `protobuf:"varint,12,opt,name=avgWriteTime" json:"avgWriteTime,omitempty" log:"td"`
	// send时消息chan平均长度(消息堆积情况)
	// @inject_tag: log:"td"
	AvgSendChanLen *int64 `protobuf:"varint,13,opt,name=avgSendChanLen" json:"avgSendChanLen,omitempty" log:"td"`
	// send时最大消息chan长度(消息堆积情况)
	// @inject_tag: log:"td"
	MaxChanLen *int32 `protobuf:"varint,14,opt,name=maxChanLen" json:"maxChanLen,omitempty" log:"td"`
	// TrySend发消息丢弃数量
	// @inject_tag: log:"td"
	TrySendTimeoutCount *int64 `protobuf:"varint,15,opt,name=trySendTimeoutCount" json:"trySendTimeoutCount,omitempty" log:"td"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *BiNetStat) Reset()                    { *m = BiNetStat{} }
func (m *BiNetStat) String() string            { return proto.CompactTextString(m) }
func (*BiNetStat) ProtoMessage()               {}
func (*BiNetStat) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{56} }

func (m *BiNetStat) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiNetStat) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *BiNetStat) GetSendTimeoutCount() int64 {
	if m != nil && m.SendTimeoutCount != nil {
		return *m.SendTimeoutCount
	}
	return 0
}

func (m *BiNetStat) GetSendMsgCount() int64 {
	if m != nil && m.SendMsgCount != nil {
		return *m.SendMsgCount
	}
	return 0
}

func (m *BiNetStat) GetRecvMsgCount() int64 {
	if m != nil && m.RecvMsgCount != nil {
		return *m.RecvMsgCount
	}
	return 0
}

func (m *BiNetStat) GetSendMsgSize() int64 {
	if m != nil && m.SendMsgSize != nil {
		return *m.SendMsgSize
	}
	return 0
}

func (m *BiNetStat) GetRecvMsgSize() int64 {
	if m != nil && m.RecvMsgSize != nil {
		return *m.RecvMsgSize
	}
	return 0
}

func (m *BiNetStat) GetSendChanLen() int64 {
	if m != nil && m.SendChanLen != nil {
		return *m.SendChanLen
	}
	return 0
}

func (m *BiNetStat) GetMaxMsgLen() uint32 {
	if m != nil && m.MaxMsgLen != nil {
		return *m.MaxMsgLen
	}
	return 0
}

func (m *BiNetStat) GetMaxMsgLenCmd() int32 {
	if m != nil && m.MaxMsgLenCmd != nil {
		return *m.MaxMsgLenCmd
	}
	return 0
}

func (m *BiNetStat) GetMsgWriteTime() int64 {
	if m != nil && m.MsgWriteTime != nil {
		return *m.MsgWriteTime
	}
	return 0
}

func (m *BiNetStat) GetAvgWriteTime() int64 {
	if m != nil && m.AvgWriteTime != nil {
		return *m.AvgWriteTime
	}
	return 0
}

func (m *BiNetStat) GetAvgSendChanLen() int64 {
	if m != nil && m.AvgSendChanLen != nil {
		return *m.AvgSendChanLen
	}
	return 0
}

func (m *BiNetStat) GetMaxChanLen() int32 {
	if m != nil && m.MaxChanLen != nil {
		return *m.MaxChanLen
	}
	return 0
}

func (m *BiNetStat) GetTrySendTimeoutCount() int64 {
	if m != nil && m.TrySendTimeoutCount != nil {
		return *m.TrySendTimeoutCount
	}
	return 0
}

// auth服统计数据
type BiAuthStat struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	ServerId *int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty" log:"td"`
	// http请求次数
	// @inject_tag: log:"td"
	RequestCount *int64 `protobuf:"varint,3,opt,name=requestCount" json:"requestCount,omitempty" log:"td"`
	// 注册数量
	// @inject_tag: log:"td"
	RegisterCount *int64 `protobuf:"varint,4,opt,name=registerCount" json:"registerCount,omitempty" log:"td"`
	// 登录成功次数
	// @inject_tag: log:"td"
	LoginCount *int64 `protobuf:"varint,5,opt,name=loginCount" json:"loginCount,omitempty" log:"td"`
	// 登录耗时
	// @inject_tag: log:"td"
	LoginTime        *int64 `protobuf:"varint,6,opt,name=loginTime" json:"loginTime,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiAuthStat) Reset()                    { *m = BiAuthStat{} }
func (m *BiAuthStat) String() string            { return proto.CompactTextString(m) }
func (*BiAuthStat) ProtoMessage()               {}
func (*BiAuthStat) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{57} }

func (m *BiAuthStat) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAuthStat) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *BiAuthStat) GetRequestCount() int64 {
	if m != nil && m.RequestCount != nil {
		return *m.RequestCount
	}
	return 0
}

func (m *BiAuthStat) GetRegisterCount() int64 {
	if m != nil && m.RegisterCount != nil {
		return *m.RegisterCount
	}
	return 0
}

func (m *BiAuthStat) GetLoginCount() int64 {
	if m != nil && m.LoginCount != nil {
		return *m.LoginCount
	}
	return 0
}

func (m *BiAuthStat) GetLoginTime() int64 {
	if m != nil && m.LoginTime != nil {
		return *m.LoginTime
	}
	return 0
}

// logic服统计数据
type BiLogicStat struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	ServerId *int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty" log:"td"`
	// gamer登录请求次数
	// @inject_tag: log:"td"
	GamerRequest *int64 `protobuf:"varint,3,opt,name=gamerRequest" json:"gamerRequest,omitempty" log:"td"`
	// gamer新建角色数量
	// @inject_tag: log:"td"
	GamerCreate *int64 `protobuf:"varint,4,opt,name=gamerCreate" json:"gamerCreate,omitempty" log:"td"`
	// gamer登录进游戏次数
	// @inject_tag: log:"td"
	GamerLogin *int64 `protobuf:"varint,5,opt,name=gamerLogin" json:"gamerLogin,omitempty" log:"td"`
	// gamer登录接口耗时
	// @inject_tag: log:"td"
	GamerLoginTime *int64 `protobuf:"varint,6,opt,name=gamerLoginTime" json:"gamerLoginTime,omitempty" log:"td"`
	// gamer消息回调次数
	// @inject_tag: log:"td"
	GamerProcess *int64 `protobuf:"varint,7,opt,name=gamerProcess" json:"gamerProcess,omitempty" log:"td"`
	// gamer消息回调用时
	// @inject_tag: log:"td"
	GamerProcessTime *int64 `protobuf:"varint,8,opt,name=gamerProcessTime" json:"gamerProcessTime,omitempty" log:"td"`
	// 统计接收到客户端的消息数量
	// @inject_tag: log:"td"
	RecvClientMsgCount *int64 `protobuf:"varint,9,opt,name=recvClientMsgCount" json:"recvClientMsgCount,omitempty" log:"td"`
	// 统计接收到客户端的消息大小
	// @inject_tag: log:"td"
	RecvClientMsgSize *int64 `protobuf:"varint,10,opt,name=recvClientMsgSize" json:"recvClientMsgSize,omitempty" log:"td"`
	// 统计接收到客户端的最大消息
	// @inject_tag: log:"td"
	RecvClientMaxMsgSize *int64 `protobuf:"varint,11,opt,name=recvClientMaxMsgSize" json:"recvClientMaxMsgSize,omitempty" log:"td"`
	// 统计发给客户端的消息数量
	// @inject_tag: log:"td"
	SendClientMsgCount *int64 `protobuf:"varint,12,opt,name=sendClientMsgCount" json:"sendClientMsgCount,omitempty" log:"td"`
	// 统计发给客户端的消息大小
	// @inject_tag: log:"td"
	SendClientMsgSize *int64 `protobuf:"varint,13,opt,name=sendClientMsgSize" json:"sendClientMsgSize,omitempty" log:"td"`
	// 统计发给客户端的最大消息
	// @inject_tag: log:"td"
	SendClientMaxMsgSize *int64 `protobuf:"varint,14,opt,name=sendClientMaxMsgSize" json:"sendClientMaxMsgSize,omitempty" log:"td"`
	// 在线人数
	// @inject_tag: log:"td"
	OnlineNum *int32 `protobuf:"varint,15,opt,name=onlineNum" json:"onlineNum,omitempty" log:"td"`
	// GamerProxy数量
	// @inject_tag: log:"td"
	ProxyNum         *int32 `protobuf:"varint,16,opt,name=proxyNum" json:"proxyNum,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiLogicStat) Reset()                    { *m = BiLogicStat{} }
func (m *BiLogicStat) String() string            { return proto.CompactTextString(m) }
func (*BiLogicStat) ProtoMessage()               {}
func (*BiLogicStat) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{58} }

func (m *BiLogicStat) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLogicStat) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *BiLogicStat) GetGamerRequest() int64 {
	if m != nil && m.GamerRequest != nil {
		return *m.GamerRequest
	}
	return 0
}

func (m *BiLogicStat) GetGamerCreate() int64 {
	if m != nil && m.GamerCreate != nil {
		return *m.GamerCreate
	}
	return 0
}

func (m *BiLogicStat) GetGamerLogin() int64 {
	if m != nil && m.GamerLogin != nil {
		return *m.GamerLogin
	}
	return 0
}

func (m *BiLogicStat) GetGamerLoginTime() int64 {
	if m != nil && m.GamerLoginTime != nil {
		return *m.GamerLoginTime
	}
	return 0
}

func (m *BiLogicStat) GetGamerProcess() int64 {
	if m != nil && m.GamerProcess != nil {
		return *m.GamerProcess
	}
	return 0
}

func (m *BiLogicStat) GetGamerProcessTime() int64 {
	if m != nil && m.GamerProcessTime != nil {
		return *m.GamerProcessTime
	}
	return 0
}

func (m *BiLogicStat) GetRecvClientMsgCount() int64 {
	if m != nil && m.RecvClientMsgCount != nil {
		return *m.RecvClientMsgCount
	}
	return 0
}

func (m *BiLogicStat) GetRecvClientMsgSize() int64 {
	if m != nil && m.RecvClientMsgSize != nil {
		return *m.RecvClientMsgSize
	}
	return 0
}

func (m *BiLogicStat) GetRecvClientMaxMsgSize() int64 {
	if m != nil && m.RecvClientMaxMsgSize != nil {
		return *m.RecvClientMaxMsgSize
	}
	return 0
}

func (m *BiLogicStat) GetSendClientMsgCount() int64 {
	if m != nil && m.SendClientMsgCount != nil {
		return *m.SendClientMsgCount
	}
	return 0
}

func (m *BiLogicStat) GetSendClientMsgSize() int64 {
	if m != nil && m.SendClientMsgSize != nil {
		return *m.SendClientMsgSize
	}
	return 0
}

func (m *BiLogicStat) GetSendClientMaxMsgSize() int64 {
	if m != nil && m.SendClientMaxMsgSize != nil {
		return *m.SendClientMaxMsgSize
	}
	return 0
}

func (m *BiLogicStat) GetOnlineNum() int32 {
	if m != nil && m.OnlineNum != nil {
		return *m.OnlineNum
	}
	return 0
}

func (m *BiLogicStat) GetProxyNum() int32 {
	if m != nil && m.ProxyNum != nil {
		return *m.ProxyNum
	}
	return 0
}

// fight服统计数据
type BiFightStat struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	ServerId *int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty" log:"td"`
	// 当前战斗房间数量
	// @inject_tag: log:"td"
	RoomCount        *int64 `protobuf:"varint,3,opt,name=roomCount" json:"roomCount,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiFightStat) Reset()                    { *m = BiFightStat{} }
func (m *BiFightStat) String() string            { return proto.CompactTextString(m) }
func (*BiFightStat) ProtoMessage()               {}
func (*BiFightStat) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{59} }

func (m *BiFightStat) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiFightStat) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *BiFightStat) GetRoomCount() int64 {
	if m != nil && m.RoomCount != nil {
		return *m.RoomCount
	}
	return 0
}

// 内存统计数据
type BiMemStats struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// @inject_tag: log:"td"
	ServerId *int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty" log:"td"`
	// golang语言框架堆空间分配的字节数
	// @inject_tag: log:"td"
	Alloc *uint64 `protobuf:"varint,3,opt,name=Alloc" json:"Alloc,omitempty" log:"td"`
	// 从服务开始运行至今分配器为分配的堆空间总和，只有增加，释放的时候不减少
	// @inject_tag: log:"td"
	TotalAlloc *uint64 `protobuf:"varint,4,opt,name=TotalAlloc" json:"TotalAlloc,omitempty" log:"td"`
	// 服务现在系统使用的内存
	// @inject_tag: log:"td"
	Sys *uint64 `protobuf:"varint,5,opt,name=Sys" json:"Sys,omitempty" log:"td"`
	// 服务分配的堆内存字节数
	// @inject_tag: log:"td"
	HeapAlloc *uint64 `protobuf:"varint,6,opt,name=HeapAlloc" json:"HeapAlloc,omitempty" log:"td"`
	// 系统分配的作为运行栈的内存
	// @inject_tag: log:"td"
	HeapSys *uint64 `protobuf:"varint,7,opt,name=HeapSys" json:"HeapSys,omitempty" log:"td"`
	// 申请但是未分配的堆内存或者回收了的堆内存（空闲）字节数
	// @inject_tag: log:"td"
	HeapIdle *uint64 `protobuf:"varint,8,opt,name=HeapIdle" json:"HeapIdle,omitempty" log:"td"`
	// 正在使用的堆内存字节数
	// @inject_tag: log:"td"
	HeapInuse *uint64 `protobuf:"varint,9,opt,name=HeapInuse" json:"HeapInuse,omitempty" log:"td"`
	// 返回给OS的堆内存
	// @inject_tag: log:"td"
	HeapReleased *uint64 `protobuf:"varint,10,opt,name=HeapReleased" json:"HeapReleased,omitempty" log:"td"`
	// 垃圾回收器检视的内存大小
	// @inject_tag: log:"td"
	NextGC *uint64 `protobuf:"varint,11,opt,name=NextGC" json:"NextGC,omitempty" log:"td"`
	// 垃圾回收器最后一次执行时间
	// @inject_tag: log:"td"
	LastGC           *uint64 `protobuf:"varint,12,opt,name=LastGC" json:"LastGC,omitempty" log:"td"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiMemStats) Reset()                    { *m = BiMemStats{} }
func (m *BiMemStats) String() string            { return proto.CompactTextString(m) }
func (*BiMemStats) ProtoMessage()               {}
func (*BiMemStats) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{60} }

func (m *BiMemStats) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiMemStats) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *BiMemStats) GetAlloc() uint64 {
	if m != nil && m.Alloc != nil {
		return *m.Alloc
	}
	return 0
}

func (m *BiMemStats) GetTotalAlloc() uint64 {
	if m != nil && m.TotalAlloc != nil {
		return *m.TotalAlloc
	}
	return 0
}

func (m *BiMemStats) GetSys() uint64 {
	if m != nil && m.Sys != nil {
		return *m.Sys
	}
	return 0
}

func (m *BiMemStats) GetHeapAlloc() uint64 {
	if m != nil && m.HeapAlloc != nil {
		return *m.HeapAlloc
	}
	return 0
}

func (m *BiMemStats) GetHeapSys() uint64 {
	if m != nil && m.HeapSys != nil {
		return *m.HeapSys
	}
	return 0
}

func (m *BiMemStats) GetHeapIdle() uint64 {
	if m != nil && m.HeapIdle != nil {
		return *m.HeapIdle
	}
	return 0
}

func (m *BiMemStats) GetHeapInuse() uint64 {
	if m != nil && m.HeapInuse != nil {
		return *m.HeapInuse
	}
	return 0
}

func (m *BiMemStats) GetHeapReleased() uint64 {
	if m != nil && m.HeapReleased != nil {
		return *m.HeapReleased
	}
	return 0
}

func (m *BiMemStats) GetNextGC() uint64 {
	if m != nil && m.NextGC != nil {
		return *m.NextGC
	}
	return 0
}

func (m *BiMemStats) GetLastGC() uint64 {
	if m != nil && m.LastGC != nil {
		return *m.LastGC
	}
	return 0
}

// 消息统计数据
type BiMessageStat struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// message name
	// @inject_tag: log:"td"
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" log:"td"`
	// 响应时间
	// @inject_tag: log:"td"
	UseTime *int32 `protobuf:"varint,3,opt,name=useTime" json:"useTime,omitempty" log:"td"`
	// 消息大小
	// @inject_tag: log:"td"
	Size             *int32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiMessageStat) Reset()                    { *m = BiMessageStat{} }
func (m *BiMessageStat) String() string            { return proto.CompactTextString(m) }
func (*BiMessageStat) ProtoMessage()               {}
func (*BiMessageStat) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{61} }

func (m *BiMessageStat) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiMessageStat) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BiMessageStat) GetUseTime() int32 {
	if m != nil && m.UseTime != nil {
		return *m.UseTime
	}
	return 0
}

func (m *BiMessageStat) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// gm后台发的个人邮件
type BiGmUserMail struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// GM账号
	// @inject_tag: log:"td,nba"
	GmAccount *string `protobuf:"bytes,2,opt,name=gmAccount" json:"gmAccount,omitempty" log:"td,nba"`
	// 标题
	// @inject_tag: log:"td,nba"
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty" log:"td,nba"`
	// 内容
	// @inject_tag: log:"td,nba"
	Content *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty" log:"td,nba"`
	// 描述
	// @inject_tag: log:"td,nba"
	Describe *string `protobuf:"bytes,5,opt,name=describe" json:"describe,omitempty" log:"td,nba"`
	// 附件
	// @inject_tag: log:"td,nba"
	Rewards *string `protobuf:"bytes,6,opt,name=rewards" json:"rewards,omitempty" log:"td,nba"`
	// 创建时间
	// @inject_tag: log:"td,nba"
	CreateTime *int64 `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty" log:"td,nba"`
	// 开始时间
	// @inject_tag: log:"td,nba"
	StartTime *int64 `protobuf:"varint,8,opt,name=startTime" json:"startTime,omitempty" log:"td,nba"`
	// 发件人
	// @inject_tag: log:"td,nba"
	SendPlayer *string `protobuf:"bytes,9,opt,name=sendPlayer" json:"sendPlayer,omitempty" log:"td,nba"`
	// 玩家id列表
	// @inject_tag: log:"td,nba"
	Gids             []int32 `protobuf:"varint,10,rep,name=gids" json:"gids,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiGmUserMail) Reset()                    { *m = BiGmUserMail{} }
func (m *BiGmUserMail) String() string            { return proto.CompactTextString(m) }
func (*BiGmUserMail) ProtoMessage()               {}
func (*BiGmUserMail) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{62} }

func (m *BiGmUserMail) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiGmUserMail) GetGmAccount() string {
	if m != nil && m.GmAccount != nil {
		return *m.GmAccount
	}
	return ""
}

func (m *BiGmUserMail) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BiGmUserMail) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *BiGmUserMail) GetDescribe() string {
	if m != nil && m.Describe != nil {
		return *m.Describe
	}
	return ""
}

func (m *BiGmUserMail) GetRewards() string {
	if m != nil && m.Rewards != nil {
		return *m.Rewards
	}
	return ""
}

func (m *BiGmUserMail) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *BiGmUserMail) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *BiGmUserMail) GetSendPlayer() string {
	if m != nil && m.SendPlayer != nil {
		return *m.SendPlayer
	}
	return ""
}

func (m *BiGmUserMail) GetGids() []int32 {
	if m != nil {
		return m.Gids
	}
	return nil
}

// gm后台发的全服邮件
type BiGmGlobalMail struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 邮件uuid
	// @inject_tag: log:"td,nba"
	MailUuidStr *string `protobuf:"bytes,2,opt,name=mailUuidStr" json:"mailUuidStr,omitempty" log:"td,nba"`
	// 标题
	// @inject_tag: log:"td,nba"
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty" log:"td,nba"`
	// 内容
	// @inject_tag: log:"td,nba"
	Content *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty" log:"td,nba"`
	// 描述
	// @inject_tag: log:"td,nba"
	Describe *string `protobuf:"bytes,5,opt,name=describe" json:"describe,omitempty" log:"td,nba"`
	// 附件
	// @inject_tag: log:"td,nba"
	Rewards *string `protobuf:"bytes,6,opt,name=rewards" json:"rewards,omitempty" log:"td,nba"`
	// 创建时间
	// @inject_tag: log:"td,nba"
	CreateTime *int64 `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty" log:"td,nba"`
	// 开始时间
	// @inject_tag: log:"td,nba"
	StartTime *int64 `protobuf:"varint,8,opt,name=startTime" json:"startTime,omitempty" log:"td,nba"`
	// 结束时间
	// @inject_tag: log:"td,nba"
	EndTime *int64 `protobuf:"varint,9,opt,name=endTime" json:"endTime,omitempty" log:"td,nba"`
	// 定时发送时间
	// @inject_tag: log:"td,nba"
	TimingSendTime *int64 `protobuf:"varint,10,opt,name=timingSendTime" json:"timingSendTime,omitempty" log:"td,nba"`
	// 区服列表
	// @inject_tag: log:"td,nba"
	ZoneList *string `protobuf:"bytes,11,opt,name=zoneList" json:"zoneList,omitempty" log:"td,nba"`
	// 渠道
	// @inject_tag: log:"td,nba"
	Channel *string `protobuf:"bytes,12,opt,name=channel" json:"channel,omitempty" log:"td,nba"`
	// 收件人类型
	// @inject_tag: log:"td,nba"
	CondType *int32 `protobuf:"varint,13,opt,name=condType" json:"condType,omitempty" log:"td,nba"`
	// 收件人类型值区间中的左值
	// @inject_tag: log:"td,nba"
	CondValLeft *int64 `protobuf:"varint,14,opt,name=condValLeft" json:"condValLeft,omitempty" log:"td,nba"`
	// 收件人类型值区间中的右值
	// @inject_tag: log:"td,nba"
	CondValRight *int64 `protobuf:"varint,15,opt,name=condValRight" json:"condValRight,omitempty" log:"td,nba"`
	// 发件人
	// @inject_tag: log:"td,nba"
	SendPlayer *string `protobuf:"bytes,16,opt,name=sendPlayer" json:"sendPlayer,omitempty" log:"td,nba"`
	// GM账号
	// @inject_tag: log:"td,nba"
	GmAccount        *string `protobuf:"bytes,17,opt,name=gmAccount" json:"gmAccount,omitempty" log:"td,nba"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiGmGlobalMail) Reset()                    { *m = BiGmGlobalMail{} }
func (m *BiGmGlobalMail) String() string            { return proto.CompactTextString(m) }
func (*BiGmGlobalMail) ProtoMessage()               {}
func (*BiGmGlobalMail) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{63} }

func (m *BiGmGlobalMail) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiGmGlobalMail) GetMailUuidStr() string {
	if m != nil && m.MailUuidStr != nil {
		return *m.MailUuidStr
	}
	return ""
}

func (m *BiGmGlobalMail) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BiGmGlobalMail) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *BiGmGlobalMail) GetDescribe() string {
	if m != nil && m.Describe != nil {
		return *m.Describe
	}
	return ""
}

func (m *BiGmGlobalMail) GetRewards() string {
	if m != nil && m.Rewards != nil {
		return *m.Rewards
	}
	return ""
}

func (m *BiGmGlobalMail) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *BiGmGlobalMail) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *BiGmGlobalMail) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *BiGmGlobalMail) GetTimingSendTime() int64 {
	if m != nil && m.TimingSendTime != nil {
		return *m.TimingSendTime
	}
	return 0
}

func (m *BiGmGlobalMail) GetZoneList() string {
	if m != nil && m.ZoneList != nil {
		return *m.ZoneList
	}
	return ""
}

func (m *BiGmGlobalMail) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *BiGmGlobalMail) GetCondType() int32 {
	if m != nil && m.CondType != nil {
		return *m.CondType
	}
	return 0
}

func (m *BiGmGlobalMail) GetCondValLeft() int64 {
	if m != nil && m.CondValLeft != nil {
		return *m.CondValLeft
	}
	return 0
}

func (m *BiGmGlobalMail) GetCondValRight() int64 {
	if m != nil && m.CondValRight != nil {
		return *m.CondValRight
	}
	return 0
}

func (m *BiGmGlobalMail) GetSendPlayer() string {
	if m != nil && m.SendPlayer != nil {
		return *m.SendPlayer
	}
	return ""
}

func (m *BiGmGlobalMail) GetGmAccount() string {
	if m != nil && m.GmAccount != nil {
		return *m.GmAccount
	}
	return ""
}

// 进入城市赛
type BiAdventureStart struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 是否组队
	// @inject_tag: log:"td"
	IsTeam *bool `protobuf:"varint,2,opt,name=isTeam" json:"isTeam,omitempty" log:"td"`
	// 组队成员
	// @inject_tag: log:"td"
	TeamMemberIds []int32 `protobuf:"varint,3,rep,name=teamMemberIds" json:"teamMemberIds,omitempty" log:"td"`
	// 关卡难度
	// @inject_tag: log:"td"
	Difficult *int32 `protobuf:"varint,4,opt,name=difficult" json:"difficult,omitempty" log:"td"`
	// 关卡id
	// @inject_tag: log:"td"
	SectionId        *int32 `protobuf:"varint,5,opt,name=sectionId" json:"sectionId,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiAdventureStart) Reset()                    { *m = BiAdventureStart{} }
func (m *BiAdventureStart) String() string            { return proto.CompactTextString(m) }
func (*BiAdventureStart) ProtoMessage()               {}
func (*BiAdventureStart) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{64} }

func (m *BiAdventureStart) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAdventureStart) GetIsTeam() bool {
	if m != nil && m.IsTeam != nil {
		return *m.IsTeam
	}
	return false
}

func (m *BiAdventureStart) GetTeamMemberIds() []int32 {
	if m != nil {
		return m.TeamMemberIds
	}
	return nil
}

func (m *BiAdventureStart) GetDifficult() int32 {
	if m != nil && m.Difficult != nil {
		return *m.Difficult
	}
	return 0
}

func (m *BiAdventureStart) GetSectionId() int32 {
	if m != nil && m.SectionId != nil {
		return *m.SectionId
	}
	return 0
}

// 结束城市赛
type BiAdventureEnd struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 是否组队
	// @inject_tag: log:"td"
	IsTeam *bool `protobuf:"varint,2,opt,name=isTeam" json:"isTeam,omitempty" log:"td"`
	// 组队成员
	// @inject_tag: log:"td"
	TeamMemberIds []int32 `protobuf:"varint,3,rep,name=teamMemberIds" json:"teamMemberIds,omitempty" log:"td"`
	// 关卡难度
	// @inject_tag: log:"td"
	Difficult *int32 `protobuf:"varint,4,opt,name=difficult" json:"difficult,omitempty" log:"td"`
	// 粉丝进度百分比
	// @inject_tag: log:"td"
	FanProgress *int32 `protobuf:"varint,5,opt,name=fanProgress" json:"fanProgress,omitempty" log:"td"`
	// 获得道具列表
	// @inject_tag: log:"td"
	GetItems []*ItemVaryConfig `protobuf:"bytes,6,rep,name=getItems" json:"getItems,omitempty" log:"td"`
	// 关卡id
	// @inject_tag: log:"td"
	SectionId        *int32 `protobuf:"varint,7,opt,name=sectionId" json:"sectionId,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiAdventureEnd) Reset()                    { *m = BiAdventureEnd{} }
func (m *BiAdventureEnd) String() string            { return proto.CompactTextString(m) }
func (*BiAdventureEnd) ProtoMessage()               {}
func (*BiAdventureEnd) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{65} }

func (m *BiAdventureEnd) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiAdventureEnd) GetIsTeam() bool {
	if m != nil && m.IsTeam != nil {
		return *m.IsTeam
	}
	return false
}

func (m *BiAdventureEnd) GetTeamMemberIds() []int32 {
	if m != nil {
		return m.TeamMemberIds
	}
	return nil
}

func (m *BiAdventureEnd) GetDifficult() int32 {
	if m != nil && m.Difficult != nil {
		return *m.Difficult
	}
	return 0
}

func (m *BiAdventureEnd) GetFanProgress() int32 {
	if m != nil && m.FanProgress != nil {
		return *m.FanProgress
	}
	return 0
}

func (m *BiAdventureEnd) GetGetItems() []*ItemVaryConfig {
	if m != nil {
		return m.GetItems
	}
	return nil
}

func (m *BiAdventureEnd) GetSectionId() int32 {
	if m != nil && m.SectionId != nil {
		return *m.SectionId
	}
	return 0
}

// 选秀赛报名
type BiDraftJoin struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiDraftJoin) Reset()                    { *m = BiDraftJoin{} }
func (m *BiDraftJoin) String() string            { return proto.CompactTextString(m) }
func (*BiDraftJoin) ProtoMessage()               {}
func (*BiDraftJoin) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{66} }

func (m *BiDraftJoin) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

// 选秀赛比赛
type BiDraftFight struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiDraftFight) Reset()                    { *m = BiDraftFight{} }
func (m *BiDraftFight) String() string            { return proto.CompactTextString(m) }
func (*BiDraftFight) ProtoMessage()               {}
func (*BiDraftFight) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{67} }

func (m *BiDraftFight) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

// 天梯赛结束
type BiLadderMatchEnd struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 旧段位
	// @inject_tag: log:"td"
	OldDuan *int32 `protobuf:"varint,2,opt,name=oldDuan" json:"oldDuan,omitempty" log:"td"`
	// 新段位
	// @inject_tag: log:"td"
	CurDuan *int32 `protobuf:"varint,3,opt,name=curDuan" json:"curDuan,omitempty" log:"td"`
	// 旧排名
	// @inject_tag: log:"td"
	OldRank *int32 `protobuf:"varint,4,opt,name=oldRank" json:"oldRank,omitempty" log:"td"`
	// 当前排名
	// @inject_tag: log:"td"
	CurRank *int32 `protobuf:"varint,5,opt,name=curRank" json:"curRank,omitempty" log:"td"`
	// 是否获胜
	// @inject_tag: log:"td"
	IsWin *bool `protobuf:"varint,6,opt,name=isWin" json:"isWin,omitempty" log:"td"`
	// 比分
	// @inject_tag: log:"td"
	ResultScore *string `protobuf:"bytes,7,opt,name=resultScore" json:"resultScore,omitempty" log:"td"`
	// 对手ID
	// @inject_tag: log:"td"
	OppId *int32 `protobuf:"varint,8,opt,name=oppId" json:"oppId,omitempty" log:"td"`
	// 赛季第几期
	// @inject_tag: log:"td"
	SeasonIndex *int32 `protobuf:"varint,9,opt,name=seasonIndex" json:"seasonIndex,omitempty" log:"td"`
	// 是否是机器人
	// @inject_tag: log:"td"
	IsRobot          *bool  `protobuf:"varint,10,opt,name=isRobot" json:"isRobot,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiLadderMatchEnd) Reset()                    { *m = BiLadderMatchEnd{} }
func (m *BiLadderMatchEnd) String() string            { return proto.CompactTextString(m) }
func (*BiLadderMatchEnd) ProtoMessage()               {}
func (*BiLadderMatchEnd) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{68} }

func (m *BiLadderMatchEnd) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLadderMatchEnd) GetOldDuan() int32 {
	if m != nil && m.OldDuan != nil {
		return *m.OldDuan
	}
	return 0
}

func (m *BiLadderMatchEnd) GetCurDuan() int32 {
	if m != nil && m.CurDuan != nil {
		return *m.CurDuan
	}
	return 0
}

func (m *BiLadderMatchEnd) GetOldRank() int32 {
	if m != nil && m.OldRank != nil {
		return *m.OldRank
	}
	return 0
}

func (m *BiLadderMatchEnd) GetCurRank() int32 {
	if m != nil && m.CurRank != nil {
		return *m.CurRank
	}
	return 0
}

func (m *BiLadderMatchEnd) GetIsWin() bool {
	if m != nil && m.IsWin != nil {
		return *m.IsWin
	}
	return false
}

func (m *BiLadderMatchEnd) GetResultScore() string {
	if m != nil && m.ResultScore != nil {
		return *m.ResultScore
	}
	return ""
}

func (m *BiLadderMatchEnd) GetOppId() int32 {
	if m != nil && m.OppId != nil {
		return *m.OppId
	}
	return 0
}

func (m *BiLadderMatchEnd) GetSeasonIndex() int32 {
	if m != nil && m.SeasonIndex != nil {
		return *m.SeasonIndex
	}
	return 0
}

func (m *BiLadderMatchEnd) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

// 巅峰竞技结束
type BiPeerlessEnd struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 旧段位
	// @inject_tag: log:"td"
	OldDuan *int32 `protobuf:"varint,2,opt,name=oldDuan" json:"oldDuan,omitempty" log:"td"`
	// 新段位
	// @inject_tag: log:"td"
	CurDuan *int32 `protobuf:"varint,3,opt,name=curDuan" json:"curDuan,omitempty" log:"td"`
	// 旧排名
	// @inject_tag: log:"td"
	OldRank *int32 `protobuf:"varint,4,opt,name=oldRank" json:"oldRank,omitempty" log:"td"`
	// 当前排名
	// @inject_tag: log:"td"
	CurRank *int32 `protobuf:"varint,5,opt,name=curRank" json:"curRank,omitempty" log:"td"`
	// 是否获胜
	// @inject_tag: log:"td"
	IsWin *bool `protobuf:"varint,6,opt,name=isWin" json:"isWin,omitempty" log:"td"`
	// 比分
	// @inject_tag: log:"td"
	ResultScore *string `protobuf:"bytes,7,opt,name=resultScore" json:"resultScore,omitempty" log:"td"`
	// 对手ID
	// @inject_tag: log:"td"
	OppId *int32 `protobuf:"varint,8,opt,name=oppId" json:"oppId,omitempty" log:"td"`
	// 旧积分
	// @inject_tag: log:"td"
	OldScore *int32 `protobuf:"varint,10,opt,name=oldScore" json:"oldScore,omitempty" log:"td"`
	// 当前积分
	// @inject_tag: log:"td"
	CurScore *int32 `protobuf:"varint,11,opt,name=curScore" json:"curScore,omitempty" log:"td"`
	// 对手积分变化值
	// @inject_tag: log:"td"
	OppScoreChange *int32 `protobuf:"varint,12,opt,name=oppScoreChange" json:"oppScoreChange,omitempty" log:"td"`
	// 积分变化值
	// @inject_tag: log:"td"
	ScoreChange      *int32 `protobuf:"varint,13,opt,name=scoreChange" json:"scoreChange,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiPeerlessEnd) Reset()                    { *m = BiPeerlessEnd{} }
func (m *BiPeerlessEnd) String() string            { return proto.CompactTextString(m) }
func (*BiPeerlessEnd) ProtoMessage()               {}
func (*BiPeerlessEnd) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{69} }

func (m *BiPeerlessEnd) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPeerlessEnd) GetOldDuan() int32 {
	if m != nil && m.OldDuan != nil {
		return *m.OldDuan
	}
	return 0
}

func (m *BiPeerlessEnd) GetCurDuan() int32 {
	if m != nil && m.CurDuan != nil {
		return *m.CurDuan
	}
	return 0
}

func (m *BiPeerlessEnd) GetOldRank() int32 {
	if m != nil && m.OldRank != nil {
		return *m.OldRank
	}
	return 0
}

func (m *BiPeerlessEnd) GetCurRank() int32 {
	if m != nil && m.CurRank != nil {
		return *m.CurRank
	}
	return 0
}

func (m *BiPeerlessEnd) GetIsWin() bool {
	if m != nil && m.IsWin != nil {
		return *m.IsWin
	}
	return false
}

func (m *BiPeerlessEnd) GetResultScore() string {
	if m != nil && m.ResultScore != nil {
		return *m.ResultScore
	}
	return ""
}

func (m *BiPeerlessEnd) GetOppId() int32 {
	if m != nil && m.OppId != nil {
		return *m.OppId
	}
	return 0
}

func (m *BiPeerlessEnd) GetOldScore() int32 {
	if m != nil && m.OldScore != nil {
		return *m.OldScore
	}
	return 0
}

func (m *BiPeerlessEnd) GetCurScore() int32 {
	if m != nil && m.CurScore != nil {
		return *m.CurScore
	}
	return 0
}

func (m *BiPeerlessEnd) GetOppScoreChange() int32 {
	if m != nil && m.OppScoreChange != nil {
		return *m.OppScoreChange
	}
	return 0
}

func (m *BiPeerlessEnd) GetScoreChange() int32 {
	if m != nil && m.ScoreChange != nil {
		return *m.ScoreChange
	}
	return 0
}

// 竞技场结束
type BiArena struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 关卡Id
	StageId *int32 `protobuf:"varint,2,opt,name=stageId" json:"stageId,omitempty"`
	// 战斗类型 1.正常战斗 2.跳过
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// 战斗结果 0.失败 1.成功
	Result *int32 `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
	// 关卡类型
	StageType *string `protobuf:"bytes,5,opt,name=stageType" json:"stageType,omitempty"`
	// 关卡用时（秒）
	Time *int32 `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	// 挑战后剩余次数
	Echance *int32 `protobuf:"varint,7,opt,name=echance" json:"echance,omitempty"`
	// 上阵卡牌战力总和
	SumPower *int32 `protobuf:"varint,8,opt,name=sumPower" json:"sumPower,omitempty"`
	// 上阵卡牌1信息
	Hero1Info *string `protobuf:"bytes,9,opt,name=hero1Info" json:"hero1Info,omitempty"`
	// 上阵卡牌2信息
	Hero2Info *string `protobuf:"bytes,10,opt,name=hero2Info" json:"hero2Info,omitempty"`
	// 上阵卡牌3信息
	Hero3Info *string `protobuf:"bytes,11,opt,name=hero3Info" json:"hero3Info,omitempty"`
	// 上阵卡牌4信息
	Hero4Info *string `protobuf:"bytes,12,opt,name=hero4Info" json:"hero4Info,omitempty"`
	// 上阵卡牌5信息
	Hero5Info *string `protobuf:"bytes,13,opt,name=hero5Info" json:"hero5Info,omitempty"`
	// 触发羁绊信息
	JiBan *string `protobuf:"bytes,14,opt,name=jiBan" json:"jiBan,omitempty"`
	// 战前排行榜
	SRank *int32 `protobuf:"varint,15,opt,name=sRank" json:"sRank,omitempty"`
	// 战后排行榜
	ERank *int32 `protobuf:"varint,16,opt,name=eRank" json:"eRank,omitempty"`
	// 对方id
	TargetRoleId *int32 `protobuf:"varint,17,opt,name=targetRoleId" json:"targetRoleId,omitempty"`
	// 对方角色名
	TargetRoleName *string `protobuf:"bytes,18,opt,name=targetRoleName" json:"targetRoleName,omitempty"`
	// 对方上阵卡牌1信息
	TargetHero1Info *string `protobuf:"bytes,19,opt,name=targetHero1Info" json:"targetHero1Info,omitempty"`
	// 对方上阵卡牌2信息
	TargetHero2Info *string `protobuf:"bytes,20,opt,name=targetHero2Info" json:"targetHero2Info,omitempty"`
	// 对方上阵卡牌3信息
	TargetHero3Info *string `protobuf:"bytes,21,opt,name=targetHero3Info" json:"targetHero3Info,omitempty"`
	// 对方上阵卡牌4信息
	TargetHero4Info *string `protobuf:"bytes,22,opt,name=targetHero4Info" json:"targetHero4Info,omitempty"`
	// 对方上阵卡牌5信息
	TargetHero5Info  *string `protobuf:"bytes,23,opt,name=targetHero5Info" json:"targetHero5Info,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiArena) Reset()                    { *m = BiArena{} }
func (m *BiArena) String() string            { return proto.CompactTextString(m) }
func (*BiArena) ProtoMessage()               {}
func (*BiArena) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{70} }

func (m *BiArena) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiArena) GetStageId() int32 {
	if m != nil && m.StageId != nil {
		return *m.StageId
	}
	return 0
}

func (m *BiArena) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BiArena) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BiArena) GetStageType() string {
	if m != nil && m.StageType != nil {
		return *m.StageType
	}
	return ""
}

func (m *BiArena) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiArena) GetEchance() int32 {
	if m != nil && m.Echance != nil {
		return *m.Echance
	}
	return 0
}

func (m *BiArena) GetSumPower() int32 {
	if m != nil && m.SumPower != nil {
		return *m.SumPower
	}
	return 0
}

func (m *BiArena) GetHero1Info() string {
	if m != nil && m.Hero1Info != nil {
		return *m.Hero1Info
	}
	return ""
}

func (m *BiArena) GetHero2Info() string {
	if m != nil && m.Hero2Info != nil {
		return *m.Hero2Info
	}
	return ""
}

func (m *BiArena) GetHero3Info() string {
	if m != nil && m.Hero3Info != nil {
		return *m.Hero3Info
	}
	return ""
}

func (m *BiArena) GetHero4Info() string {
	if m != nil && m.Hero4Info != nil {
		return *m.Hero4Info
	}
	return ""
}

func (m *BiArena) GetHero5Info() string {
	if m != nil && m.Hero5Info != nil {
		return *m.Hero5Info
	}
	return ""
}

func (m *BiArena) GetJiBan() string {
	if m != nil && m.JiBan != nil {
		return *m.JiBan
	}
	return ""
}

func (m *BiArena) GetSRank() int32 {
	if m != nil && m.SRank != nil {
		return *m.SRank
	}
	return 0
}

func (m *BiArena) GetERank() int32 {
	if m != nil && m.ERank != nil {
		return *m.ERank
	}
	return 0
}

func (m *BiArena) GetTargetRoleId() int32 {
	if m != nil && m.TargetRoleId != nil {
		return *m.TargetRoleId
	}
	return 0
}

func (m *BiArena) GetTargetRoleName() string {
	if m != nil && m.TargetRoleName != nil {
		return *m.TargetRoleName
	}
	return ""
}

func (m *BiArena) GetTargetHero1Info() string {
	if m != nil && m.TargetHero1Info != nil {
		return *m.TargetHero1Info
	}
	return ""
}

func (m *BiArena) GetTargetHero2Info() string {
	if m != nil && m.TargetHero2Info != nil {
		return *m.TargetHero2Info
	}
	return ""
}

func (m *BiArena) GetTargetHero3Info() string {
	if m != nil && m.TargetHero3Info != nil {
		return *m.TargetHero3Info
	}
	return ""
}

func (m *BiArena) GetTargetHero4Info() string {
	if m != nil && m.TargetHero4Info != nil {
		return *m.TargetHero4Info
	}
	return ""
}

func (m *BiArena) GetTargetHero5Info() string {
	if m != nil && m.TargetHero5Info != nil {
		return *m.TargetHero5Info
	}
	return ""
}

// 挑战赛结束
type BiChallengeGames struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 关卡Id
	StageId *int32 `protobuf:"varint,2,opt,name=stageId" json:"stageId,omitempty"`
	// 战斗类型 1.正常战斗 2.跳过
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// 战斗结果 0.失败 1.成功
	Result *int32 `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
	// 关卡类型 1.王朝 2.巅峰 3.巡演 4.分区
	StageType *int32 `protobuf:"varint,5,opt,name=stageType" json:"stageType,omitempty"`
	// 关卡用时（秒）
	Time *int32 `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	// 挑战后剩余次数
	Echance *int32 `protobuf:"varint,7,opt,name=echance" json:"echance,omitempty"`
	// 上阵卡牌战力总和
	SumPower *int32 `protobuf:"varint,8,opt,name=sumPower" json:"sumPower,omitempty"`
	// 上阵卡牌1信息
	Hero1Info *string `protobuf:"bytes,9,opt,name=hero1Info" json:"hero1Info,omitempty"`
	// 上阵卡牌2信息
	Hero2Info *string `protobuf:"bytes,10,opt,name=hero2Info" json:"hero2Info,omitempty"`
	// 上阵卡牌3信息
	Hero3Info *string `protobuf:"bytes,11,opt,name=hero3Info" json:"hero3Info,omitempty"`
	// 上阵卡牌4信息
	Hero4Info *string `protobuf:"bytes,12,opt,name=hero4Info" json:"hero4Info,omitempty"`
	// 上阵卡牌5信息
	Hero5Info *string `protobuf:"bytes,13,opt,name=hero5Info" json:"hero5Info,omitempty"`
	// 触发羁绊信息
	JiBan *string `protobuf:"bytes,14,opt,name=jiBan" json:"jiBan,omitempty"`
	// 段位
	Position *int32 `protobuf:"varint,15,opt,name=position" json:"position,omitempty"`
	// 收视率
	Rating           *int32 `protobuf:"varint,16,opt,name=rating" json:"rating,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiChallengeGames) Reset()                    { *m = BiChallengeGames{} }
func (m *BiChallengeGames) String() string            { return proto.CompactTextString(m) }
func (*BiChallengeGames) ProtoMessage()               {}
func (*BiChallengeGames) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{71} }

func (m *BiChallengeGames) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiChallengeGames) GetStageId() int32 {
	if m != nil && m.StageId != nil {
		return *m.StageId
	}
	return 0
}

func (m *BiChallengeGames) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BiChallengeGames) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BiChallengeGames) GetStageType() int32 {
	if m != nil && m.StageType != nil {
		return *m.StageType
	}
	return 0
}

func (m *BiChallengeGames) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiChallengeGames) GetEchance() int32 {
	if m != nil && m.Echance != nil {
		return *m.Echance
	}
	return 0
}

func (m *BiChallengeGames) GetSumPower() int32 {
	if m != nil && m.SumPower != nil {
		return *m.SumPower
	}
	return 0
}

func (m *BiChallengeGames) GetHero1Info() string {
	if m != nil && m.Hero1Info != nil {
		return *m.Hero1Info
	}
	return ""
}

func (m *BiChallengeGames) GetHero2Info() string {
	if m != nil && m.Hero2Info != nil {
		return *m.Hero2Info
	}
	return ""
}

func (m *BiChallengeGames) GetHero3Info() string {
	if m != nil && m.Hero3Info != nil {
		return *m.Hero3Info
	}
	return ""
}

func (m *BiChallengeGames) GetHero4Info() string {
	if m != nil && m.Hero4Info != nil {
		return *m.Hero4Info
	}
	return ""
}

func (m *BiChallengeGames) GetHero5Info() string {
	if m != nil && m.Hero5Info != nil {
		return *m.Hero5Info
	}
	return ""
}

func (m *BiChallengeGames) GetJiBan() string {
	if m != nil && m.JiBan != nil {
		return *m.JiBan
	}
	return ""
}

func (m *BiChallengeGames) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *BiChallengeGames) GetRating() int32 {
	if m != nil && m.Rating != nil {
		return *m.Rating
	}
	return 0
}

// 三分扣篮大赛结束
type BiThreeSlamGames struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 关卡Id
	StageId *int32 `protobuf:"varint,2,opt,name=stageId" json:"stageId,omitempty"`
	// 战斗类型 1.正常战斗 2.跳过
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// 战斗结果 0.失败 1.成功
	Result *int32 `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
	// 关卡类型 1.三分大赛 2.扣篮大赛
	StageType *int32 `protobuf:"varint,5,opt,name=stageType" json:"stageType,omitempty"`
	// 关卡用时（秒）
	Time *int32 `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	// 挑战后剩余次数
	Echance *int32 `protobuf:"varint,7,opt,name=echance" json:"echance,omitempty"`
	// 上阵卡牌战力总和
	SumPower *int32 `protobuf:"varint,8,opt,name=sumPower" json:"sumPower,omitempty"`
	// 上阵卡牌1信息
	Hero1Info *string `protobuf:"bytes,9,opt,name=hero1Info" json:"hero1Info,omitempty"`
	// 上阵卡牌2信息
	Hero2Info *string `protobuf:"bytes,10,opt,name=hero2Info" json:"hero2Info,omitempty"`
	// 上阵卡牌3信息
	Hero3Info *string `protobuf:"bytes,11,opt,name=hero3Info" json:"hero3Info,omitempty"`
	// 上阵卡牌4信息
	Hero4Info *string `protobuf:"bytes,12,opt,name=hero4Info" json:"hero4Info,omitempty"`
	// 上阵卡牌5信息
	Hero5Info *string `protobuf:"bytes,13,opt,name=hero5Info" json:"hero5Info,omitempty"`
	// 触发羁绊信息
	JiBan *string `protobuf:"bytes,14,opt,name=jiBan" json:"jiBan,omitempty"`
	// 战前星级
	SStar *int32 `protobuf:"varint,15,opt,name=sStar" json:"sStar,omitempty"`
	// 战后星级
	EStar            *int32 `protobuf:"varint,16,opt,name=eStar" json:"eStar,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiThreeSlamGames) Reset()                    { *m = BiThreeSlamGames{} }
func (m *BiThreeSlamGames) String() string            { return proto.CompactTextString(m) }
func (*BiThreeSlamGames) ProtoMessage()               {}
func (*BiThreeSlamGames) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{72} }

func (m *BiThreeSlamGames) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiThreeSlamGames) GetStageId() int32 {
	if m != nil && m.StageId != nil {
		return *m.StageId
	}
	return 0
}

func (m *BiThreeSlamGames) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BiThreeSlamGames) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BiThreeSlamGames) GetStageType() int32 {
	if m != nil && m.StageType != nil {
		return *m.StageType
	}
	return 0
}

func (m *BiThreeSlamGames) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiThreeSlamGames) GetEchance() int32 {
	if m != nil && m.Echance != nil {
		return *m.Echance
	}
	return 0
}

func (m *BiThreeSlamGames) GetSumPower() int32 {
	if m != nil && m.SumPower != nil {
		return *m.SumPower
	}
	return 0
}

func (m *BiThreeSlamGames) GetHero1Info() string {
	if m != nil && m.Hero1Info != nil {
		return *m.Hero1Info
	}
	return ""
}

func (m *BiThreeSlamGames) GetHero2Info() string {
	if m != nil && m.Hero2Info != nil {
		return *m.Hero2Info
	}
	return ""
}

func (m *BiThreeSlamGames) GetHero3Info() string {
	if m != nil && m.Hero3Info != nil {
		return *m.Hero3Info
	}
	return ""
}

func (m *BiThreeSlamGames) GetHero4Info() string {
	if m != nil && m.Hero4Info != nil {
		return *m.Hero4Info
	}
	return ""
}

func (m *BiThreeSlamGames) GetHero5Info() string {
	if m != nil && m.Hero5Info != nil {
		return *m.Hero5Info
	}
	return ""
}

func (m *BiThreeSlamGames) GetJiBan() string {
	if m != nil && m.JiBan != nil {
		return *m.JiBan
	}
	return ""
}

func (m *BiThreeSlamGames) GetSStar() int32 {
	if m != nil && m.SStar != nil {
		return *m.SStar
	}
	return 0
}

func (m *BiThreeSlamGames) GetEStar() int32 {
	if m != nil && m.EStar != nil {
		return *m.EStar
	}
	return 0
}

// 名宿赛结束
type BiLegendGames struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 关卡Id
	StageId *int32 `protobuf:"varint,2,opt,name=stageId" json:"stageId,omitempty"`
	// 战斗类型 1.正常战斗 2.跳过
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// 战斗结果 0.失败 1.成功
	Result *int32 `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
	// 关卡类型
	StageType *string `protobuf:"bytes,5,opt,name=stageType" json:"stageType,omitempty"`
	// 关卡用时（秒）
	Time *int32 `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	// 上阵卡牌战力总和
	SumPower *int32 `protobuf:"varint,7,opt,name=sumPower" json:"sumPower,omitempty"`
	// 上阵卡牌1信息
	Hero1Info *string `protobuf:"bytes,8,opt,name=hero1Info" json:"hero1Info,omitempty"`
	// 上阵卡牌2信息
	Hero2Info *string `protobuf:"bytes,9,opt,name=hero2Info" json:"hero2Info,omitempty"`
	// 上阵卡牌3信息
	Hero3Info *string `protobuf:"bytes,10,opt,name=hero3Info" json:"hero3Info,omitempty"`
	// 上阵卡牌4信息
	Hero4Info *string `protobuf:"bytes,11,opt,name=hero4Info" json:"hero4Info,omitempty"`
	// 上阵卡牌5信息
	Hero5Info *string `protobuf:"bytes,12,opt,name=hero5Info" json:"hero5Info,omitempty"`
	// 触发羁绊信息
	JiBan *string `protobuf:"bytes,13,opt,name=jiBan" json:"jiBan,omitempty"`
	// 战前影响力
	SImpact *int32 `protobuf:"varint,14,opt,name=sImpact" json:"sImpact,omitempty"`
	// 战后影响力
	EImpact          *int32 `protobuf:"varint,15,opt,name=eImpact" json:"eImpact,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiLegendGames) Reset()                    { *m = BiLegendGames{} }
func (m *BiLegendGames) String() string            { return proto.CompactTextString(m) }
func (*BiLegendGames) ProtoMessage()               {}
func (*BiLegendGames) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{73} }

func (m *BiLegendGames) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLegendGames) GetStageId() int32 {
	if m != nil && m.StageId != nil {
		return *m.StageId
	}
	return 0
}

func (m *BiLegendGames) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BiLegendGames) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BiLegendGames) GetStageType() string {
	if m != nil && m.StageType != nil {
		return *m.StageType
	}
	return ""
}

func (m *BiLegendGames) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BiLegendGames) GetSumPower() int32 {
	if m != nil && m.SumPower != nil {
		return *m.SumPower
	}
	return 0
}

func (m *BiLegendGames) GetHero1Info() string {
	if m != nil && m.Hero1Info != nil {
		return *m.Hero1Info
	}
	return ""
}

func (m *BiLegendGames) GetHero2Info() string {
	if m != nil && m.Hero2Info != nil {
		return *m.Hero2Info
	}
	return ""
}

func (m *BiLegendGames) GetHero3Info() string {
	if m != nil && m.Hero3Info != nil {
		return *m.Hero3Info
	}
	return ""
}

func (m *BiLegendGames) GetHero4Info() string {
	if m != nil && m.Hero4Info != nil {
		return *m.Hero4Info
	}
	return ""
}

func (m *BiLegendGames) GetHero5Info() string {
	if m != nil && m.Hero5Info != nil {
		return *m.Hero5Info
	}
	return ""
}

func (m *BiLegendGames) GetJiBan() string {
	if m != nil && m.JiBan != nil {
		return *m.JiBan
	}
	return ""
}

func (m *BiLegendGames) GetSImpact() int32 {
	if m != nil && m.SImpact != nil {
		return *m.SImpact
	}
	return 0
}

func (m *BiLegendGames) GetEImpact() int32 {
	if m != nil && m.EImpact != nil {
		return *m.EImpact
	}
	return 0
}

// 联盟操作
type BiUnion struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 帮会身份标识
	Identity *int32 `protobuf:"varint,2,opt,name=identity" json:"identity,omitempty"`
	// 帮会名称
	FactionName *string `protobuf:"bytes,3,opt,name=factionName" json:"factionName,omitempty"`
	// 帮会等级
	FactionLevel *int32 `protobuf:"varint,4,opt,name=factionLevel" json:"factionLevel,omitempty"`
	// 操作前美元
	DollarAm *int64 `protobuf:"varint,5,opt,name=dollarAm" json:"dollarAm,omitempty"`
	// 操作后美元
	DollarAf *int64 `protobuf:"varint,6,opt,name=dollarAf" json:"dollarAf,omitempty"`
	// 操作前钻石
	DiamondsAm *int64 `protobuf:"varint,7,opt,name=diamondsAm" json:"diamondsAm,omitempty"`
	// 操作后钻石
	DiamondsAf *int64 `protobuf:"varint,8,opt,name=diamondsAf" json:"diamondsAf,omitempty"`
	// 操作前联盟币
	UnioncurrencyAm *int64 `protobuf:"varint,9,opt,name=unioncurrencyAm" json:"unioncurrencyAm,omitempty"`
	// 操作后联盟币
	UnioncurrencyAf *int64 `protobuf:"varint,10,opt,name=unioncurrencyAf" json:"unioncurrencyAf,omitempty"`
	// 操作后获取道具数量和id
	PropId *string `protobuf:"bytes,11,opt,name=propId" json:"propId,omitempty"`
	// 对方角色id
	TargetRoleId *int32 `protobuf:"varint,12,opt,name=targetRoleId" json:"targetRoleId,omitempty"`
	// 帮会人数
	FactionNum *int32 `protobuf:"varint,13,opt,name=factionNum" json:"factionNum,omitempty"`
	// 步骤号
	StepNumId *string `protobuf:"bytes,14,opt,name=stepNumId" json:"stepNumId,omitempty"`
	// 备用字段1
	Param1 *int32 `protobuf:"varint,15,opt,name=param1" json:"param1,omitempty"`
	// 备用字段2
	Param2           *int32 `protobuf:"varint,16,opt,name=param2" json:"param2,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiUnion) Reset()                    { *m = BiUnion{} }
func (m *BiUnion) String() string            { return proto.CompactTextString(m) }
func (*BiUnion) ProtoMessage()               {}
func (*BiUnion) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{74} }

func (m *BiUnion) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiUnion) GetIdentity() int32 {
	if m != nil && m.Identity != nil {
		return *m.Identity
	}
	return 0
}

func (m *BiUnion) GetFactionName() string {
	if m != nil && m.FactionName != nil {
		return *m.FactionName
	}
	return ""
}

func (m *BiUnion) GetFactionLevel() int32 {
	if m != nil && m.FactionLevel != nil {
		return *m.FactionLevel
	}
	return 0
}

func (m *BiUnion) GetDollarAm() int64 {
	if m != nil && m.DollarAm != nil {
		return *m.DollarAm
	}
	return 0
}

func (m *BiUnion) GetDollarAf() int64 {
	if m != nil && m.DollarAf != nil {
		return *m.DollarAf
	}
	return 0
}

func (m *BiUnion) GetDiamondsAm() int64 {
	if m != nil && m.DiamondsAm != nil {
		return *m.DiamondsAm
	}
	return 0
}

func (m *BiUnion) GetDiamondsAf() int64 {
	if m != nil && m.DiamondsAf != nil {
		return *m.DiamondsAf
	}
	return 0
}

func (m *BiUnion) GetUnioncurrencyAm() int64 {
	if m != nil && m.UnioncurrencyAm != nil {
		return *m.UnioncurrencyAm
	}
	return 0
}

func (m *BiUnion) GetUnioncurrencyAf() int64 {
	if m != nil && m.UnioncurrencyAf != nil {
		return *m.UnioncurrencyAf
	}
	return 0
}

func (m *BiUnion) GetPropId() string {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return ""
}

func (m *BiUnion) GetTargetRoleId() int32 {
	if m != nil && m.TargetRoleId != nil {
		return *m.TargetRoleId
	}
	return 0
}

func (m *BiUnion) GetFactionNum() int32 {
	if m != nil && m.FactionNum != nil {
		return *m.FactionNum
	}
	return 0
}

func (m *BiUnion) GetStepNumId() string {
	if m != nil && m.StepNumId != nil {
		return *m.StepNumId
	}
	return ""
}

func (m *BiUnion) GetParam1() int32 {
	if m != nil && m.Param1 != nil {
		return *m.Param1
	}
	return 0
}

func (m *BiUnion) GetParam2() int32 {
	if m != nil && m.Param2 != nil {
		return *m.Param2
	}
	return 0
}

// 排行榜
type BiPersonalRank struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 战力
	Power *int32 `protobuf:"varint,2,opt,name=power" json:"power,omitempty"`
	// 榜单类型
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// 榜单名次
	RankNum *string `protobuf:"bytes,4,opt,name=rankNum" json:"rankNum,omitempty"`
	// 榜单对应值
	RankZhi          *string `protobuf:"bytes,5,opt,name=rankZhi" json:"rankZhi,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BiPersonalRank) Reset()                    { *m = BiPersonalRank{} }
func (m *BiPersonalRank) String() string            { return proto.CompactTextString(m) }
func (*BiPersonalRank) ProtoMessage()               {}
func (*BiPersonalRank) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{75} }

func (m *BiPersonalRank) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiPersonalRank) GetPower() int32 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *BiPersonalRank) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BiPersonalRank) GetRankNum() string {
	if m != nil && m.RankNum != nil {
		return *m.RankNum
	}
	return ""
}

func (m *BiPersonalRank) GetRankZhi() string {
	if m != nil && m.RankZhi != nil {
		return *m.RankZhi
	}
	return ""
}

// 角色改名
type BiRoleRename struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 旧名
	// @inject_tag: log:"td"
	OldName *string `protobuf:"bytes,2,opt,name=oldName" json:"oldName,omitempty" log:"td"`
	// 新名
	// @inject_tag: log:"td"
	NewName *string `protobuf:"bytes,3,opt,name=newName" json:"newName,omitempty" log:"td"`
	// 谁改的(0:自己 1:GM)
	// @inject_tag: log:"td"
	RenameType       *int32 `protobuf:"varint,4,opt,name=renameType" json:"renameType,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiRoleRename) Reset()                    { *m = BiRoleRename{} }
func (m *BiRoleRename) String() string            { return proto.CompactTextString(m) }
func (*BiRoleRename) ProtoMessage()               {}
func (*BiRoleRename) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{76} }

func (m *BiRoleRename) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRoleRename) GetOldName() string {
	if m != nil && m.OldName != nil {
		return *m.OldName
	}
	return ""
}

func (m *BiRoleRename) GetNewName() string {
	if m != nil && m.NewName != nil {
		return *m.NewName
	}
	return ""
}

func (m *BiRoleRename) GetRenameType() int32 {
	if m != nil && m.RenameType != nil {
		return *m.RenameType
	}
	return 0
}

// 角色更改队伍id
type BiRoleChangeTeam struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 旧队伍id
	// @inject_tag: log:"td"
	OldTeamId *int32 `protobuf:"varint,2,opt,name=oldTeamId" json:"oldTeamId,omitempty" log:"td"`
	// 新队伍id
	// @inject_tag: log:"td"
	NewTeamId        *int32 `protobuf:"varint,3,opt,name=newTeamId" json:"newTeamId,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiRoleChangeTeam) Reset()                    { *m = BiRoleChangeTeam{} }
func (m *BiRoleChangeTeam) String() string            { return proto.CompactTextString(m) }
func (*BiRoleChangeTeam) ProtoMessage()               {}
func (*BiRoleChangeTeam) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{77} }

func (m *BiRoleChangeTeam) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRoleChangeTeam) GetOldTeamId() int32 {
	if m != nil && m.OldTeamId != nil {
		return *m.OldTeamId
	}
	return 0
}

func (m *BiRoleChangeTeam) GetNewTeamId() int32 {
	if m != nil && m.NewTeamId != nil {
		return *m.NewTeamId
	}
	return 0
}

// 起名操作
type BiRoleCreateName struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 操作id
	// @inject_tag: log:"td"
	OperateId *int32 `protobuf:"varint,2,opt,name=operateId" json:"operateId,omitempty" log:"td"`
	// 是否成功
	// @inject_tag: log:"td"
	IsSuccess *bool `protobuf:"varint,3,opt,name=isSuccess" json:"isSuccess,omitempty" log:"td"`
	// 失败原因
	// @inject_tag: log:"td"
	CauseId          *int32 `protobuf:"varint,4,opt,name=causeId" json:"causeId,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiRoleCreateName) Reset()                    { *m = BiRoleCreateName{} }
func (m *BiRoleCreateName) String() string            { return proto.CompactTextString(m) }
func (*BiRoleCreateName) ProtoMessage()               {}
func (*BiRoleCreateName) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{78} }

func (m *BiRoleCreateName) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRoleCreateName) GetOperateId() int32 {
	if m != nil && m.OperateId != nil {
		return *m.OperateId
	}
	return 0
}

func (m *BiRoleCreateName) GetIsSuccess() bool {
	if m != nil && m.IsSuccess != nil {
		return *m.IsSuccess
	}
	return false
}

func (m *BiRoleCreateName) GetCauseId() int32 {
	if m != nil && m.CauseId != nil {
		return *m.CauseId
	}
	return 0
}

// 默认创角
type BiRoleCreateDefault struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiRoleCreateDefault) Reset()                    { *m = BiRoleCreateDefault{} }
func (m *BiRoleCreateDefault) String() string            { return proto.CompactTextString(m) }
func (*BiRoleCreateDefault) ProtoMessage()               {}
func (*BiRoleCreateDefault) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{79} }

func (m *BiRoleCreateDefault) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

// 问卷活动
type BiActivitySurvey struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 问卷id
	// @inject_tag: log:"td"
	SurveyId *int64 `protobuf:"varint,2,opt,name=surveyId" json:"surveyId,omitempty" log:"td"`
	// 操作id
	// @inject_tag: log:"td"
	OperateId        *int32 `protobuf:"varint,3,opt,name=operateId" json:"operateId,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiActivitySurvey) Reset()                    { *m = BiActivitySurvey{} }
func (m *BiActivitySurvey) String() string            { return proto.CompactTextString(m) }
func (*BiActivitySurvey) ProtoMessage()               {}
func (*BiActivitySurvey) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{80} }

func (m *BiActivitySurvey) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiActivitySurvey) GetSurveyId() int64 {
	if m != nil && m.SurveyId != nil {
		return *m.SurveyId
	}
	return 0
}

func (m *BiActivitySurvey) GetOperateId() int32 {
	if m != nil && m.OperateId != nil {
		return *m.OperateId
	}
	return 0
}

// 小型杯赛报名
type BiLittleCupCheckIn struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 连续报名天数
	// @inject_tag: log:"td"
	Days             *int32 `protobuf:"varint,3,opt,name=days" json:"days,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiLittleCupCheckIn) Reset()                    { *m = BiLittleCupCheckIn{} }
func (m *BiLittleCupCheckIn) String() string            { return proto.CompactTextString(m) }
func (*BiLittleCupCheckIn) ProtoMessage()               {}
func (*BiLittleCupCheckIn) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{81} }

func (m *BiLittleCupCheckIn) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiLittleCupCheckIn) GetDays() int32 {
	if m != nil && m.Days != nil {
		return *m.Days
	}
	return 0
}

// 小型杯赛参与比赛
type BiLittleCupFight struct {
	Gamer            *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BiLittleCupFight) Reset()                    { *m = BiLittleCupFight{} }
func (m *BiLittleCupFight) String() string            { return proto.CompactTextString(m) }
func (*BiLittleCupFight) ProtoMessage()               {}
func (*BiLittleCupFight) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{82} }

func (m *BiLittleCupFight) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

// 激活图鉴
type BiRosterActive struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 球员配置id
	// @inject_tag: log:"td"
	PlayerCfgId      *int32 `protobuf:"varint,2,opt,name=playerCfgId" json:"playerCfgId,omitempty" log:"td"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BiRosterActive) Reset()                    { *m = BiRosterActive{} }
func (m *BiRosterActive) String() string            { return proto.CompactTextString(m) }
func (*BiRosterActive) ProtoMessage()               {}
func (*BiRosterActive) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{83} }

func (m *BiRosterActive) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiRosterActive) GetPlayerCfgId() int32 {
	if m != nil && m.PlayerCfgId != nil {
		return *m.PlayerCfgId
	}
	return 0
}

// 首发阵容调整
type BiSquadUpdate struct {
	Gamer *GamerInfo `protobuf:"bytes,1,opt,name=Gamer" json:"Gamer,omitempty"`
	// 阵容类型
	// @inject_tag: log:"td"
	SquadType *int32 `protobuf:"varint,2,opt,name=squadType" json:"squadType,omitempty" log:"td"`
	// 首发阵容(格式:品质_星_球员id)
	// @inject_tag: log:"td"
	Starter []string `protobuf:"bytes,3,rep,name=starter" json:"starter,omitempty" log:"td"`
	// 替补阵容(格式:品质_星_球员id)
	// @inject_tag: log:"td"
	Bench            []string `protobuf:"bytes,4,rep,name=bench" json:"bench,omitempty" log:"td"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BiSquadUpdate) Reset()                    { *m = BiSquadUpdate{} }
func (m *BiSquadUpdate) String() string            { return proto.CompactTextString(m) }
func (*BiSquadUpdate) ProtoMessage()               {}
func (*BiSquadUpdate) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{84} }

func (m *BiSquadUpdate) GetGamer() *GamerInfo {
	if m != nil {
		return m.Gamer
	}
	return nil
}

func (m *BiSquadUpdate) GetSquadType() int32 {
	if m != nil && m.SquadType != nil {
		return *m.SquadType
	}
	return 0
}

func (m *BiSquadUpdate) GetStarter() []string {
	if m != nil {
		return m.Starter
	}
	return nil
}

func (m *BiSquadUpdate) GetBench() []string {
	if m != nil {
		return m.Bench
	}
	return nil
}

func init() {
	proto.RegisterType((*GamerInfo)(nil), "GamerInfo")
	proto.RegisterType((*BiHeart)(nil), "BiHeart")
	proto.RegisterType((*BiHourOnline)(nil), "BiHourOnline")
	proto.RegisterType((*BiAccountReg)(nil), "BiAccountReg")
	proto.RegisterType((*BiAccountLogin)(nil), "BiAccountLogin")
	proto.RegisterType((*BiLogin)(nil), "BiLogin")
	proto.RegisterType((*BiRoleBuild)(nil), "BiRoleBuild")
	proto.RegisterType((*BiCreateTeam)(nil), "BiCreateTeam")
	proto.RegisterType((*BiCreatePlayer)(nil), "BiCreatePlayer")
	proto.RegisterType((*BiNewStages)(nil), "BiNewStages")
	proto.RegisterType((*BiAllStarGuide)(nil), "BiAllStarGuide")
	proto.RegisterType((*BiLogout)(nil), "BiLogout")
	proto.RegisterType((*BiRoleProperty)(nil), "BiRoleProperty")
	proto.RegisterType((*BiPayPreOrder)(nil), "BiPayPreOrder")
	proto.RegisterType((*BiPayOrder)(nil), "BiPayOrder")
	proto.RegisterType((*BiRecharge)(nil), "BiRecharge")
	proto.RegisterType((*BiLevelUp)(nil), "BiLevelUp")
	proto.RegisterType((*BiShopTrade)(nil), "BiShopTrade")
	proto.RegisterType((*BiTransferTrade)(nil), "BiTransferTrade")
	proto.RegisterType((*BiMoney)(nil), "BiMoney")
	proto.RegisterType((*BiItem)(nil), "BiItem")
	proto.RegisterType((*BiTask)(nil), "BiTask")
	proto.RegisterType((*BiPveFight)(nil), "BiPveFight")
	proto.RegisterType((*BiAchievement)(nil), "BiAchievement")
	proto.RegisterType((*BiActivity)(nil), "BiActivity")
	proto.RegisterType((*BiActivationCode)(nil), "BiActivationCode")
	proto.RegisterType((*BiPvpFight)(nil), "BiPvpFight")
	proto.RegisterType((*BiMatch)(nil), "BiMatch")
	proto.RegisterType((*BiFriend)(nil), "BiFriend")
	proto.RegisterType((*BiChat)(nil), "BiChat")
	proto.RegisterType((*BiMail)(nil), "BiMail")
	proto.RegisterType((*BiRank)(nil), "BiRank")
	proto.RegisterType((*BiPlayerSlotLevelup)(nil), "BiPlayerSlotLevelup")
	proto.RegisterType((*BiPlayerStarup)(nil), "BiPlayerStarup")
	proto.RegisterType((*BiPlayerSlotClassUp)(nil), "BiPlayerSlotClassUp")
	proto.RegisterType((*BiPlayerRelation)(nil), "BiPlayerRelation")
	proto.RegisterType((*BiBestSquadEnter)(nil), "BiBestSquadEnter")
	proto.RegisterType((*BiBestSquadBuyGrid)(nil), "BiBestSquadBuyGrid")
	proto.RegisterType((*BiRegularSeasonComplete)(nil), "BiRegularSeasonComplete")
	proto.RegisterType((*BiFightBegin)(nil), "BiFightBegin")
	proto.RegisterType((*BiFightResult)(nil), "BiFightResult")
	proto.RegisterType((*BiEquipLevelup)(nil), "BiEquipLevelup")
	proto.RegisterType((*BiEquipRefine)(nil), "BiEquipRefine")
	proto.RegisterType((*BiJewelryLevelup)(nil), "BiJewelryLevelup")
	proto.RegisterType((*BiComposition)(nil), "BiComposition")
	proto.RegisterType((*BiDecomposition)(nil), "BiDecomposition")
	proto.RegisterType((*BiLegendUnlock)(nil), "BiLegendUnlock")
	proto.RegisterType((*BiLegendCultivate)(nil), "BiLegendCultivate")
	proto.RegisterType((*BiLegendLevelup)(nil), "BiLegendLevelup")
	proto.RegisterType((*BiLegendStarup)(nil), "BiLegendStarup")
	proto.RegisterType((*BiCoachUnLock)(nil), "BiCoachUnLock")
	proto.RegisterType((*BiCoachLevelup)(nil), "BiCoachLevelup")
	proto.RegisterType((*BiRecruit)(nil), "BiRecruit")
	proto.RegisterType((*BiTrade)(nil), "BiTrade")
	proto.RegisterType((*BiGamerSlowMsg)(nil), "BiGamerSlowMsg")
	proto.RegisterType((*BiCustomize)(nil), "BiCustomize")
	proto.RegisterType((*BiNetStat)(nil), "BiNetStat")
	proto.RegisterType((*BiAuthStat)(nil), "BiAuthStat")
	proto.RegisterType((*BiLogicStat)(nil), "BiLogicStat")
	proto.RegisterType((*BiFightStat)(nil), "BiFightStat")
	proto.RegisterType((*BiMemStats)(nil), "BiMemStats")
	proto.RegisterType((*BiMessageStat)(nil), "BiMessageStat")
	proto.RegisterType((*BiGmUserMail)(nil), "BiGmUserMail")
	proto.RegisterType((*BiGmGlobalMail)(nil), "BiGmGlobalMail")
	proto.RegisterType((*BiAdventureStart)(nil), "BiAdventureStart")
	proto.RegisterType((*BiAdventureEnd)(nil), "BiAdventureEnd")
	proto.RegisterType((*BiDraftJoin)(nil), "BiDraftJoin")
	proto.RegisterType((*BiDraftFight)(nil), "BiDraftFight")
	proto.RegisterType((*BiLadderMatchEnd)(nil), "BiLadderMatchEnd")
	proto.RegisterType((*BiPeerlessEnd)(nil), "BiPeerlessEnd")
	proto.RegisterType((*BiArena)(nil), "BiArena")
	proto.RegisterType((*BiChallengeGames)(nil), "BiChallengeGames")
	proto.RegisterType((*BiThreeSlamGames)(nil), "BiThreeSlamGames")
	proto.RegisterType((*BiLegendGames)(nil), "BiLegendGames")
	proto.RegisterType((*BiUnion)(nil), "BiUnion")
	proto.RegisterType((*BiPersonalRank)(nil), "BiPersonalRank")
	proto.RegisterType((*BiRoleRename)(nil), "BiRoleRename")
	proto.RegisterType((*BiRoleChangeTeam)(nil), "BiRoleChangeTeam")
	proto.RegisterType((*BiRoleCreateName)(nil), "BiRoleCreateName")
	proto.RegisterType((*BiRoleCreateDefault)(nil), "BiRoleCreateDefault")
	proto.RegisterType((*BiActivitySurvey)(nil), "BiActivitySurvey")
	proto.RegisterType((*BiLittleCupCheckIn)(nil), "BiLittleCupCheckIn")
	proto.RegisterType((*BiLittleCupFight)(nil), "BiLittleCupFight")
	proto.RegisterType((*BiRosterActive)(nil), "BiRosterActive")
	proto.RegisterType((*BiSquadUpdate)(nil), "BiSquadUpdate")
}

func init() { proto.RegisterFile("bi.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 4092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x3a, 0x4b, 0x6f, 0x23, 0xc7,
	0x99, 0x10, 0x1f, 0x12, 0xd9, 0xd4, 0x6b, 0x34, 0x2f, 0x8e, 0xed, 0xc5, 0xda, 0xbd, 0xf6, 0xae,
	0xf7, 0xb0, 0xc6, 0x7a, 0xbc, 0x7b, 0x58, 0x60, 0x0d, 0x44, 0xa2, 0x66, 0x64, 0x19, 0x92, 0x46,
	0x16, 0x35, 0x63, 0x60, 0x00, 0xc3, 0x68, 0x75, 0x17, 0xc9, 0xb2, 0x9a, 0xdd, 0x3d, 0xd5, 0xdd,
	0xd2, 0xd0, 0x87, 0x3c, 0x00, 0xe7, 0x12, 0xc4, 0x48, 0x2e, 0xc9, 0x29, 0x39, 0x05, 0x41, 0x0e,
	0x09, 0x10, 0x5f, 0x12, 0x20, 0xe7, 0x5c, 0x92, 0x20, 0xc8, 0x0f, 0x48, 0xfe, 0x40, 0xce, 0xf9,
	0x05, 0xf9, 0xbe, 0xaf, 0xea, 0xeb, 0x2e, 0x8a, 0x33, 0x6c, 0x8d, 0x5f, 0xf1, 0x21, 0x37, 0xf2,
	0xab, 0xea, 0xaa, 0xef, 0xfd, 0x2c, 0xa7, 0x75, 0x22, 0x5f, 0x4b, 0x54, 0x9c, 0xc5, 0xcf, 0x39,
	0x7e, 0x1c, 0x0d, 0xf4, 0x6f, 0xf7, 0xe3, 0xa6, 0xd3, 0xde, 0xf1, 0xc6, 0x42, 0xed, 0x46, 0x83,
	0x78, 0xa3, 0xe3, 0xd4, 0x77, 0x64, 0xd0, 0x5d, 0x78, 0x71, 0xe1, 0xd5, 0xe6, 0xc6, 0x9a, 0xb3,
	0xb4, 0xe9, 0xfb, 0x71, 0x1e, 0x65, 0xdd, 0x1a, 0x00, 0xda, 0x1b, 0x2b, 0x4e, 0x73, 0x4f, 0x9c,
	0x89, 0xb0, 0x5b, 0xa7, 0xf5, 0x65, 0xa7, 0x71, 0x00, 0x5f, 0x76, 0x1b, 0xb4, 0x08, 0xbb, 0x7b,
	0x23, 0x2f, 0x8a, 0x60, 0xb9, 0x49, 0x80, 0x55, 0x67, 0xb1, 0xa7, 0x84, 0x97, 0x89, 0xee, 0x22,
	0xfc, 0xaf, 0xe3, 0xf6, 0x87, 0x71, 0x24, 0xba, 0x4b, 0xf4, 0xb1, 0xe3, 0xd4, 0xee, 0xa5, 0xdd,
	0x16, 0xed, 0xbc, 0xe2, 0xb4, 0xef, 0xa5, 0x0f, 0x84, 0x4a, 0x65, 0x1c, 0x75, 0xdb, 0xfc, 0xf1,
	0xfd, 0x14, 0x90, 0x0a, 0xba, 0x1d, 0xfe, 0xf8, 0x58, 0xc2, 0x5d, 0xcb, 0xf4, 0x0f, 0x3e, 0xde,
	0x3d, 0xec, 0xae, 0xf0, 0xc7, 0x77, 0xce, 0x44, 0x94, 0x11, 0x2a, 0x6b, 0x04, 0x82, 0xcd, 0x3b,
	0x71, 0x18, 0x74, 0xd7, 0x69, 0x33, 0x20, 0xb6, 0x2d, 0xbd, 0x71, 0x1c, 0x05, 0xdd, 0x2b, 0x04,
	0x80, 0xcf, 0xf7, 0x84, 0x37, 0xcc, 0x45, 0x2f, 0x96, 0x51, 0x77, 0x83, 0x60, 0x70, 0xdf, 0x9d,
	0x48, 0xa8, 0xe1, 0xa4, 0x7b, 0x95, 0xfe, 0xc3, 0xa9, 0x6f, 0xc5, 0x51, 0xac, 0x68, 0xcb, 0x35,
	0xfe, 0x6c, 0x3f, 0x8e, 0xb2, 0x51, 0xcf, 0x53, 0x41, 0xda, 0xbd, 0xfe, 0x62, 0x1d, 0xa8, 0x00,
	0xd8, 0xc8, 0x4b, 0xb7, 0xf2, 0xc9, 0xdd, 0x1c, 0x8e, 0xbf, 0x01, 0xfb, 0x5a, 0x1b, 0xeb, 0x4e,
	0x4b, 0x1f, 0x0f, 0xc8, 0xdf, 0x24, 0x5a, 0x61, 0xd7, 0x5d, 0x39, 0x1c, 0x65, 0x87, 0xf1, 0xb9,
	0x50, 0xdd, 0x2e, 0x5f, 0xb0, 0xa9, 0x44, 0xe4, 0x1d, 0x79, 0xd1, 0x69, 0xf7, 0x16, 0x6d, 0x03,
	0xd0, 0x61, 0xe8, 0x4d, 0x84, 0x3a, 0xc8, 0xc7, 0xdd, 0xe7, 0x08, 0x74, 0xd5, 0xe9, 0xec, 0x79,
	0x41, 0x20, 0x94, 0xe6, 0xfb, 0xf3, 0x04, 0xbc, 0xe1, 0xac, 0x1e, 0xc7, 0xb9, 0xda, 0xf7, 0x32,
	0x7f, 0xd4, 0x23, 0xf1, 0xbc, 0x40, 0x70, 0x10, 0xcf, 0x43, 0xe2, 0xc2, 0xbf, 0xb2, 0x40, 0x36,
	0x13, 0x49, 0x80, 0x17, 0x99, 0xa7, 0xfd, 0x49, 0x9a, 0x89, 0x71, 0xf7, 0x25, 0xfa, 0x0f, 0x88,
	0x6e, 0x8b, 0x33, 0xe9, 0x23, 0xa2, 0x2e, 0x41, 0xae, 0x3b, 0x2b, 0xbd, 0x50, 0x02, 0x33, 0x59,
	0x18, 0xff, 0xc6, 0x72, 0xef, 0x07, 0xa7, 0xb0, 0xeb, 0x65, 0xe6, 0x78, 0x3f, 0x13, 0x09, 0x60,
	0x09, 0xa0, 0x57, 0x08, 0xf4, 0x2f, 0xce, 0xf5, 0xe3, 0x91, 0x8c, 0x4e, 0x65, 0x34, 0xdc, 0xf6,
	0x32, 0xcf, 0xa8, 0x0d, 0x2c, 0xff, 0x3b, 0x2d, 0x03, 0x03, 0xf4, 0x4d, 0xc7, 0x93, 0x44, 0x74,
	0xff, 0x83, 0xef, 0xda, 0x12, 0x69, 0xd6, 0x7f, 0x94, 0x7b, 0x41, 0x3f, 0xf3, 0x54, 0xf7, 0x55,
	0x24, 0xc2, 0x7d, 0xcf, 0x59, 0xda, 0x92, 0x6f, 0x09, 0x4f, 0x65, 0x1b, 0xb7, 0x9c, 0x26, 0x69,
	0x26, 0xa9, 0x63, 0xe7, 0xb6, 0xf3, 0x5a, 0xa9, 0xa7, 0xac, 0x4b, 0x35, 0x22, 0x1c, 0xb4, 0x16,
	0x59, 0x56, 0x68, 0x25, 0x69, 0x4a, 0x83, 0xe5, 0x9a, 0x78, 0x32, 0xc8, 0x25, 0x29, 0x65, 0xd3,
	0x3d, 0x71, 0x96, 0xe1, 0x78, 0xe0, 0xde, 0xbd, 0x28, 0x94, 0x91, 0xf8, 0x42, 0xee, 0xf8, 0xf1,
	0x02, 0x5e, 0x62, 0x78, 0x70, 0x24, 0x86, 0xf3, 0x2e, 0x99, 0xb1, 0xb1, 0xd2, 0x6a, 0xea, 0xac,
	0xbd, 0x6c, 0x56, 0xda, 0xce, 0xb4, 0xee, 0x37, 0x67, 0x24, 0xb8, 0x58, 0xc8, 0x46, 0x8e, 0xf3,
	0xd0, 0xcb, 0x62, 0x65, 0x2c, 0x0d, 0x4e, 0x00, 0xe9, 0x91, 0x1e, 0x90, 0xb9, 0xb9, 0xff, 0xef,
	0xac, 0x16, 0xe8, 0xed, 0xc5, 0x43, 0x19, 0x55, 0x20, 0x38, 0xfd, 0xf5, 0x77, 0x16, 0x50, 0x42,
	0x95, 0xdf, 0x31, 0x8b, 0x6a, 0x44, 0x85, 0x8d, 0x68, 0x7d, 0x16, 0xd1, 0x06, 0x21, 0x0a, 0x9b,
	0x8e, 0xe2, 0x50, 0xd0, 0x5d, 0x4d, 0x8b, 0x56, 0x4d, 0x19, 0x98, 0xc2, 0x03, 0x2f, 0xcc, 0xc5,
	0xe6, 0x98, 0xb8, 0x45, 0xb4, 0xb9, 0xa9, 0xd3, 0xd9, 0x92, 0xf8, 0xd1, 0x56, 0x2e, 0xc3, 0x60,
	0x1e, 0x3e, 0xf6, 0xe1, 0x35, 0xf6, 0x12, 0x07, 0x79, 0x18, 0x96, 0xf8, 0xe0, 0xba, 0xb6, 0xa7,
	0x06, 0xdb, 0x59, 0x4a, 0xf6, 0xb2, 0xe7, 0x45, 0xc3, 0xdc, 0x1b, 0x1a, 0xac, 0xdc, 0xf7, 0x51,
	0xbc, 0x5a, 0x48, 0xc7, 0xc2, 0x1b, 0x57, 0xdc, 0x9a, 0xc1, 0x96, 0x5d, 0x70, 0xb8, 0x46, 0x8f,
	0x0c, 0xe4, 0x10, 0x14, 0xdc, 0x28, 0x93, 0x81, 0x94, 0xae, 0xd4, 0x7d, 0x07, 0x05, 0xa4, 0x2f,
	0xd0, 0x0e, 0xa1, 0xe2, 0x8a, 0x84, 0x36, 0x01, 0x6b, 0x6b, 0xec, 0x6e, 0x34, 0x84, 0x8e, 0x24,
	0xf2, 0xdc, 0x07, 0xc8, 0xa8, 0x03, 0x71, 0x0e, 0x96, 0x36, 0x14, 0x69, 0x85, 0xc0, 0x05, 0xfa,
	0x53, 0x73, 0x1c, 0x59, 0xff, 0x8e, 0x8a, 0xf3, 0xa4, 0xd4, 0x7d, 0xb4, 0x7e, 0xcd, 0x23, 0xf7,
	0xff, 0x48, 0x97, 0xc2, 0x10, 0x2d, 0x78, 0x27, 0x97, 0x41, 0x95, 0x45, 0xd1, 0xa7, 0x84, 0xa6,
	0xfb, 0xb3, 0x05, 0xa7, 0x45, 0x8a, 0x14, 0xe7, 0xd9, 0x33, 0x69, 0x92, 0x62, 0x39, 0x6a, 0xc9,
	0xdd, 0x74, 0xd6, 0xb2, 0x38, 0xf3, 0x42, 0xe3, 0xe4, 0xd1, 0x4a, 0x1b, 0xec, 0x3c, 0x63, 0xb2,
	0x72, 0xfc, 0x3c, 0xd5, 0xc6, 0x89, 0x76, 0x7c, 0x26, 0x13, 0xd2, 0xa9, 0xe6, 0xc6, 0x2b, 0xce,
	0x32, 0x1e, 0x76, 0xa8, 0xe2, 0x44, 0xa8, 0x6c, 0x42, 0x4a, 0xd5, 0xb9, 0xbd, 0xf6, 0x9a, 0xd6,
	0x29, 0x06, 0xbb, 0x3f, 0x68, 0x20, 0x95, 0x36, 0x08, 0xd5, 0x25, 0x44, 0x13, 0xd8, 0xf6, 0x26,
	0xa9, 0xb1, 0xb3, 0x5b, 0xce, 0x15, 0x10, 0x73, 0x26, 0xa3, 0x5c, 0xec, 0x15, 0x4b, 0x2d, 0x5a,
	0x02, 0x5f, 0x97, 0x08, 0xa1, 0x42, 0x91, 0xa6, 0xda, 0x91, 0xb7, 0x09, 0x7c, 0xcd, 0x59, 0x66,
	0x30, 0x85, 0x01, 0x87, 0xcf, 0x51, 0x62, 0x08, 0x96, 0x61, 0x7b, 0xf8, 0x0e, 0x2f, 0xa1, 0x64,
	0xe3, 0xc1, 0xc0, 0x5a, 0x5a, 0xa6, 0xa5, 0xae, 0xb3, 0x3e, 0xf6, 0x52, 0x3f, 0xce, 0xac, 0x95,
	0x15, 0x5a, 0x21, 0xfe, 0x40, 0xe0, 0xb1, 0x16, 0x56, 0x59, 0xbf, 0xb3, 0xe9, 0x38, 0xb2, 0xc6,
	0x70, 0xe1, 0xa5, 0xf6, 0x41, 0xeb, 0x0c, 0x3f, 0x17, 0x53, 0xf0, 0x2b, 0x4c, 0x5d, 0x16, 0x27,
	0x16, 0x78, 0x83, 0x31, 0xf2, 0xe3, 0x31, 0x88, 0xc4, 0x5a, 0xb9, 0x5a, 0x18, 0x96, 0x07, 0xf4,
	0x4d, 0x7a, 0x5e, 0xb2, 0x27, 0xc7, 0x32, 0xa3, 0x08, 0x4b, 0xfc, 0x28, 0xe0, 0x10, 0xfd, 0x21,
	0xc6, 0x16, 0xf8, 0x83, 0x7c, 0xef, 0x3c, 0xca, 0x65, 0xa2, 0xd9, 0x77, 0x83, 0xb9, 0x51, 0x2e,
	0xbc, 0x93, 0x7b, 0xa1, 0x04, 0x11, 0xde, 0xe4, 0xbb, 0xcb, 0xa5, 0x23, 0x31, 0x00, 0x25, 0xa0,
	0xb8, 0x4b, 0xc8, 0x9e, 0x4c, 0x85, 0x9d, 0x5b, 0xac, 0x2b, 0x2a, 0x06, 0x5b, 0x57, 0x7d, 0x3f,
	0x56, 0xc2, 0x44, 0x5f, 0x30, 0x85, 0x14, 0xb6, 0x00, 0x14, 0x22, 0x6f, 0x5d, 0x9b, 0xc2, 0x89,
	0x88, 0xfc, 0x11, 0x04, 0x5c, 0xf8, 0xeb, 0xbe, 0x0d, 0x21, 0x4c, 0x1e, 0x7a, 0x93, 0x43, 0x25,
	0xee, 0xa9, 0x60, 0xbe, 0x99, 0xc2, 0x59, 0xb4, 0xc7, 0x36, 0x2b, 0xf8, 0xd4, 0xf8, 0xc3, 0xa6,
	0xbb, 0xe3, 0x38, 0x74, 0xd6, 0x67, 0x3e, 0xe8, 0xf7, 0x35, 0x3c, 0xe9, 0x48, 0xf8, 0x23, 0x4f,
	0x0d, 0xc5, 0x67, 0x71, 0xd1, 0x10, 0x8a, 0x2c, 0x67, 0xbb, 0x80, 0x82, 0x50, 0xe6, 0x58, 0x0e,
	0x49, 0x3a, 0x7f, 0x7b, 0xce, 0xd9, 0xe0, 0x05, 0xcb, 0x08, 0xdb, 0xec, 0xdd, 0xfc, 0x5c, 0x41,
	0xa6, 0xe3, 0x4f, 0x8c, 0x7e, 0x83, 0x53, 0x07, 0x03, 0xec, 0x3c, 0xcd, 0x76, 0x97, 0x6d, 0x33,
	0x5d, 0xe1, 0xc4, 0x46, 0x53, 0xb8, 0xca, 0x62, 0x61, 0x0e, 0xac, 0x31, 0x07, 0x20, 0x33, 0x13,
	0x13, 0xa3, 0xa7, 0xb0, 0x2e, 0xd3, 0xbb, 0x52, 0xa5, 0x5a, 0x41, 0x5b, 0x28, 0x5c, 0xba, 0xc5,
	0x50, 0xb3, 0xc1, 0x09, 0x98, 0x9f, 0xf0, 0x39, 0x57, 0x39, 0x63, 0x4a, 0xbc, 0x09, 0xe5, 0x28,
	0xd7, 0xc8, 0x6b, 0x66, 0x4e, 0x1b, 0x3c, 0x14, 0xaa, 0xdc, 0xfd, 0xe4, 0xb2, 0xc1, 0x65, 0x89,
	0x23, 0x73, 0x2f, 0x57, 0xb6, 0xb1, 0x03, 0x12, 0x5b, 0x62, 0x00, 0xca, 0xa5, 0x81, 0x4e, 0x91,
	0xdf, 0xe9, 0xe3, 0x49, 0x12, 0x64, 0xe5, 0xee, 0xcf, 0x17, 0xd0, 0x59, 0xf7, 0x47, 0x71, 0x72,
	0xac, 0xbc, 0xf9, 0x1e, 0x15, 0x98, 0x29, 0x21, 0x40, 0x21, 0xca, 0x40, 0x85, 0xf6, 0x43, 0x20,
	0x36, 0x84, 0xc1, 0xff, 0x56, 0xc1, 0x0e, 0xf8, 0x5f, 0x8a, 0x04, 0xcc, 0x0f, 0x1c, 0x55, 0x9a,
	0x8f, 0x05, 0x71, 0x0d, 0x36, 0x3a, 0x6c, 0x68, 0x36, 0x1c, 0x3f, 0xe8, 0xf0, 0x89, 0x29, 0x60,
	0x03, 0x1b, 0x67, 0x85, 0xe3, 0xfe, 0x72, 0xc1, 0x59, 0xdb, 0x92, 0x80, 0x69, 0x94, 0x0e, 0x84,
	0x7a, 0x46, 0x8c, 0x6b, 0x17, 0x30, 0xae, 0x5f, 0xc4, 0xb8, 0xf1, 0x14, 0x8c, 0x9b, 0x4f, 0xc3,
	0x78, 0xf1, 0x02, 0xc6, 0x4b, 0x36, 0xc6, 0xc4, 0x10, 0xf7, 0x87, 0x94, 0xc1, 0xd0, 0x17, 0x15,
	0x86, 0xe6, 0x7b, 0x79, 0x2a, 0xec, 0x43, 0x22, 0xb8, 0xa1, 0x55, 0x44, 0x6d, 0xd4, 0x29, 0x66,
	0x2b, 0x65, 0x6a, 0xe3, 0x29, 0x7e, 0x9a, 0x4b, 0x3b, 0x1c, 0x94, 0xd3, 0xfc, 0xa4, 0x67, 0x0e,
	0x5c, 0x66, 0x2c, 0x3d, 0x3f, 0xc3, 0x3c, 0x5b, 0xb3, 0xf2, 0xa3, 0x9a, 0xb3, 0xb8, 0x25, 0x77,
	0x81, 0xf4, 0xcb, 0x9b, 0x2d, 0xe8, 0x7e, 0x2f, 0x2a, 0x83, 0x21, 0x1c, 0xa9, 0xb5, 0xac, 0xcc,
	0x4d, 0xd1, 0x56, 0x4d, 0xee, 0x42, 0xa6, 0xb4, 0x39, 0x40, 0x87, 0xb6, 0xc8, 0x46, 0xcf, 0xd2,
	0x30, 0x44, 0xa2, 0xe2, 0x42, 0x75, 0x28, 0x87, 0xb6, 0xfe, 0x30, 0x1f, 0xda, 0x36, 0x1f, 0x3e,
	0x1d, 0x91, 0x88, 0x01, 0x31, 0x8e, 0x8c, 0x99, 0xcc, 0x70, 0x37, 0x4a, 0x21, 0xdb, 0xe8, 0x67,
	0x4a, 0x9b, 0xb3, 0x3b, 0x44, 0x2e, 0x1c, 0x7b, 0xe9, 0xe9, 0x3c, 0x2e, 0xc0, 0xb1, 0x19, 0x6c,
	0xb1, 0x75, 0x48, 0x89, 0x34, 0x0f, 0x33, 0xc3, 0x08, 0x94, 0x0f, 0xac, 0x13, 0x65, 0x45, 0x7a,
	0x29, 0x53, 0x48, 0x7b, 0x45, 0x92, 0x11, 0x33, 0x5a, 0xee, 0xaf, 0x17, 0xc8, 0xe9, 0x9e, 0x09,
	0xaa, 0xce, 0x2a, 0x74, 0x21, 0xc5, 0xcc, 0xa9, 0xb8, 0x0e, 0x84, 0x90, 0xe1, 0xd1, 0x75, 0xa6,
	0x29, 0x4a, 0x7c, 0x28, 0x9c, 0x1b, 0x17, 0x70, 0x69, 0xb2, 0x7f, 0x1a, 0x7b, 0x49, 0x91, 0xa3,
	0xc3, 0xb7, 0x18, 0x56, 0x0c, 0xc3, 0x81, 0x01, 0x74, 0x34, 0x61, 0xda, 0x2a, 0x0e, 0x47, 0x09,
	0xb7, 0x79, 0xc3, 0x18, 0x23, 0x28, 0x6d, 0x20, 0xa6, 0xbb, 0x01, 0x06, 0x9e, 0x4d, 0x7f, 0x24,
	0xc1, 0x77, 0x8c, 0x21, 0x57, 0x9b, 0x87, 0x3a, 0xd8, 0x88, 0xb5, 0xb3, 0x90, 0x34, 0x61, 0x05,
	0xc2, 0x2a, 0xc4, 0x8c, 0x79, 0xa4, 0x8a, 0x87, 0x80, 0x78, 0xaa, 0x2f, 0x76, 0x23, 0xe4, 0xce,
	0x26, 0xc8, 0xee, 0x0c, 0x02, 0x6b, 0x85, 0x4d, 0xf3, 0xb6, 0x82, 0x41, 0xc5, 0xe9, 0x85, 0x49,
	0xc3, 0x5f, 0x4b, 0x1a, 0x40, 0x15, 0xa6, 0x52, 0x90, 0xe2, 0xb2, 0x35, 0xbb, 0xfb, 0xce, 0xba,
	0xb9, 0xcf, 0x43, 0x7d, 0xe9, 0xc5, 0xf3, 0x3d, 0x09, 0x70, 0xd9, 0x87, 0x2d, 0xc6, 0x3c, 0xdb,
	0x17, 0xfc, 0x5e, 0xdb, 0xfd, 0xad, 0x91, 0x6e, 0x52, 0x29, 0x5d, 0xc0, 0xff, 0xc4, 0xcb, 0xb2,
	0x50, 0x4c, 0xdb, 0x81, 0x86, 0x15, 0x0c, 0x02, 0x5f, 0xad, 0x21, 0xb6, 0x57, 0x07, 0xba, 0x62,
	0x13, 0x43, 0x1c, 0x96, 0x3d, 0x65, 0xfc, 0x41, 0xe9, 0x3b, 0x8d, 0x2e, 0x2c, 0x4f, 0xc9, 0x76,
	0x85, 0x0d, 0x26, 0xc3, 0xb0, 0xa9, 0xe5, 0xb2, 0xca, 0x3b, 0x22, 0xac, 0x4b, 0xb4, 0x31, 0xfc,
	0x44, 0x3b, 0x2b, 0x54, 0x80, 0xcb, 0x93, 0x50, 0x9b, 0x21, 0xa1, 0xfe, 0x24, 0x12, 0x1a, 0x17,
	0x49, 0x68, 0x5e, 0x20, 0x61, 0xf1, 0x02, 0x09, 0x85, 0xc6, 0x82, 0x81, 0xa3, 0x0f, 0xda, 0x37,
	0x09, 0xae, 0x7b, 0x0f, 0x53, 0xf9, 0xbb, 0x4a, 0x8a, 0x28, 0xa8, 0xc0, 0x72, 0x40, 0x9b, 0x52,
	0x74, 0x9b, 0x4b, 0x9c, 0xf4, 0x69, 0x16, 0x60, 0x04, 0x65, 0x66, 0xbb, 0xdf, 0x5e, 0x40, 0x27,
	0x00, 0xae, 0x6b, 0xae, 0xe0, 0x30, 0x86, 0xeb, 0x4c, 0xa4, 0xd0, 0x3b, 0x20, 0x11, 0xb3, 0x70,
	0x56, 0xf5, 0x42, 0xfb, 0x0c, 0xd0, 0x14, 0xd1, 0x17, 0x2f, 0x6d, 0x32, 0x61, 0x90, 0x38, 0x68,
	0x04, 0x35, 0xed, 0x60, 0x03, 0x8b, 0xc8, 0x7d, 0x19, 0x56, 0xa0, 0x31, 0x86, 0x2d, 0xda, 0x87,
	0xd5, 0xd8, 0xfd, 0x20, 0xc8, 0x2a, 0x53, 0x0c, 0xc4, 0x32, 0x01, 0xe0, 0x06, 0x42, 0x7a, 0x5e,
	0xfc, 0x30, 0x8f, 0x8d, 0x0d, 0xbc, 0x83, 0xf7, 0x61, 0x31, 0x50, 0x91, 0x6e, 0x40, 0xb8, 0x3d,
	0xb5, 0x44, 0x0d, 0x3a, 0x83, 0x90, 0xb2, 0x44, 0x23, 0x0d, 0xd2, 0xd5, 0xa4, 0xef, 0x5c, 0x05,
	0x33, 0xa0, 0x82, 0xb0, 0x1f, 0xc6, 0x19, 0x89, 0x3e, 0x9f, 0x9b, 0xce, 0x80, 0xed, 0xca, 0x28,
	0x10, 0x8f, 0x4b, 0x3d, 0xba, 0x17, 0x06, 0xb6, 0xca, 0xd8, 0xd9, 0x8d, 0xc6, 0xfb, 0xeb, 0x58,
	0x21, 0x99, 0x4b, 0x80, 0xb3, 0xf3, 0xcf, 0x87, 0x70, 0xae, 0xb7, 0x16, 0x91, 0xa6, 0xc6, 0xe1,
	0x5c, 0xc3, 0xcb, 0x88, 0x50, 0xe7, 0xc4, 0x0c, 0x30, 0xa0, 0x74, 0xbd, 0xd0, 0x59, 0x40, 0x80,
	0x00, 0xfa, 0xfe, 0xe1, 0x34, 0x91, 0xbd, 0xd0, 0x4b, 0xd3, 0xf9, 0x39, 0x1b, 0xfa, 0x5d, 0xd8,
	0xb9, 0x3b, 0x43, 0x28, 0x7d, 0x3b, 0x45, 0xa8, 0x86, 0xe8, 0x8b, 0xbe, 0xb7, 0x80, 0x5e, 0x4a,
	0xdf, 0x74, 0x24, 0x42, 0xf2, 0x54, 0x9f, 0x2b, 0xad, 0x50, 0xba, 0xf0, 0xb9, 0xc5, 0x27, 0x0d,
	0x2e, 0x5d, 0x78, 0xc5, 0x66, 0xfd, 0x23, 0x44, 0xa8, 0x68, 0xa5, 0xdd, 0x01, 0x35, 0x57, 0x9f,
	0x2b, 0x42, 0xc0, 0xa8, 0x1d, 0x25, 0x03, 0xcd, 0x28, 0x5d, 0xf5, 0x6f, 0x39, 0x1b, 0xd6, 0x95,
	0x5b, 0xf9, 0x04, 0x37, 0x54, 0x30, 0x1b, 0xb7, 0xf4, 0x8a, 0x46, 0x57, 0xd3, 0xbd, 0xeb, 0xdc,
	0xc4, 0x32, 0x85, 0x0a, 0xdd, 0x3e, 0xd4, 0x9b, 0x48, 0xee, 0x38, 0x09, 0x45, 0x26, 0x2a, 0x54,
	0x5f, 0x6f, 0x66, 0xbc, 0xdd, 0x5f, 0x51, 0xb7, 0x8d, 0x7c, 0xfc, 0x96, 0xa8, 0x68, 0x4a, 0x01,
	0x1a, 0xfb, 0x45, 0x28, 0xad, 0xb1, 0x26, 0x11, 0xa8, 0xf0, 0x91, 0xc0, 0x9f, 0xdd, 0xb4, 0x7f,
	0x2a, 0x93, 0x37, 0xa0, 0xa4, 0xa4, 0xda, 0xaf, 0xc1, 0x45, 0x84, 0x86, 0xd3, 0x55, 0x3a, 0x83,
	0xc0, 0xaf, 0x77, 0xd3, 0xa3, 0xf8, 0x24, 0xce, 0xc8, 0x5f, 0xb4, 0xd0, 0xb1, 0xdc, 0xc5, 0xda,
	0x19, 0xbc, 0xa5, 0x04, 0x62, 0x4c, 0x94, 0xe0, 0x06, 0xb0, 0x66, 0x2b, 0x95, 0x3e, 0xee, 0x6f,
	0x6a, 0x18, 0xc4, 0x09, 0x7c, 0x44, 0xde, 0xf5, 0xcb, 0x46, 0x7c, 0x7f, 0xa2, 0x6b, 0xdd, 0xc5,
	0x42, 0xf7, 0x93, 0x44, 0x43, 0x96, 0x38, 0x82, 0xef, 0xa6, 0xef, 0xca, 0x88, 0x3c, 0xf2, 0xd3,
	0x28, 0x2b, 0x7a, 0xd6, 0xbb, 0xe0, 0x32, 0x1d, 0xea, 0x89, 0x03, 0x88, 0xd4, 0x93, 0xac, 0xb3,
	0xc8, 0x0b, 0x1f, 0x48, 0x71, 0x2e, 0x54, 0x3a, 0x82, 0x5c, 0x71, 0x99, 0x61, 0xc7, 0xd8, 0x96,
	0xd0, 0xaa, 0xbc, 0xf2, 0x04, 0x3e, 0xad, 0x72, 0xef, 0xd8, 0x44, 0x9b, 0xbe, 0xf0, 0x75, 0x87,
	0xc2, 0xfd, 0xee, 0x02, 0xba, 0x9b, 0xb2, 0x21, 0x30, 0xdf, 0xdd, 0x80, 0xdd, 0xd0, 0xd6, 0x0b,
	0x0a, 0x0f, 0xfc, 0x22, 0xf0, 0x45, 0x7d, 0xbf, 0x84, 0xbb, 0x43, 0x0f, 0x4b, 0x1d, 0x3c, 0x1d,
	0x24, 0xbe, 0x81, 0x92, 0xb4, 0x5a, 0x0d, 0x9f, 0x23, 0x32, 0x38, 0x1a, 0x09, 0x03, 0xd3, 0xc1,
	0x28, 0x32, 0x27, 0xc0, 0xc6, 0x80, 0xb4, 0x0b, 0xf8, 0x26, 0x39, 0xa5, 0xb7, 0x81, 0xc3, 0xa1,
	0x9a, 0xfc, 0x43, 0x38, 0x02, 0x01, 0x00, 0x78, 0x80, 0x16, 0x1c, 0xa7, 0xb2, 0xca, 0x27, 0xe2,
	0x98, 0x41, 0x97, 0x6d, 0xbb, 0x3a, 0x61, 0xab, 0x71, 0xd3, 0xc6, 0x02, 0x6b, 0x5f, 0xa1, 0x55,
	0xfb, 0x25, 0xa7, 0x05, 0xb1, 0x1a, 0xa1, 0xe8, 0x98, 0xeb, 0xd4, 0xa3, 0xc3, 0x7f, 0x0f, 0xb0,
	0x57, 0x44, 0x34, 0xb8, 0xdf, 0xa2, 0x32, 0x74, 0x5b, 0xf8, 0x97, 0x46, 0xe1, 0x59, 0x38, 0xf0,
	0xb2, 0xd3, 0x51, 0x22, 0xcb, 0x55, 0x34, 0x17, 0x87, 0x37, 0x51, 0x2b, 0xf7, 0xc4, 0x10, 0xf2,
	0x87, 0xfb, 0x51, 0x18, 0xfb, 0x55, 0x41, 0x5c, 0x6f, 0x2d, 0x3c, 0xd9, 0x03, 0xe7, 0x0a, 0x7f,
	0xde, 0x43, 0x2b, 0x83, 0x34, 0x58, 0x3c, 0xd3, 0x09, 0x68, 0xa3, 0xc5, 0x97, 0xc5, 0xb4, 0xc2,
	0x3d, 0x41, 0xce, 0xe8, 0x9d, 0x97, 0xd0, 0x8d, 0xd9, 0x53, 0x6d, 0xf1, 0xd7, 0x67, 0xc4, 0xaf,
	0x23, 0xc2, 0xfb, 0x25, 0xe9, 0xd5, 0xf1, 0x7f, 0xf6, 0x0a, 0x2b, 0xc0, 0xd7, 0x2f, 0x06, 0x78,
	0x7d, 0xc1, 0x9e, 0xd6, 0x2f, 0xcf, 0x1f, 0xdd, 0x8f, 0xf6, 0x2a, 0x58, 0x8b, 0x1f, 0xe3, 0x4e,
	0xfb, 0x78, 0xee, 0x0f, 0xd6, 0x4d, 0xcc, 0x5c, 0x35, 0xa7, 0x5d, 0x82, 0x23, 0x33, 0xc7, 0x5d,
	0x82, 0x21, 0xf6, 0x95, 0xda, 0x40, 0x3e, 0x5a, 0xc0, 0x66, 0xd2, 0x91, 0xf0, 0x55, 0x2e, 0xab,
	0x7c, 0xbd, 0xd9, 0x65, 0xe3, 0xbf, 0xad, 0xbc, 0xf3, 0x72, 0x00, 0x05, 0x82, 0xde, 0x11, 0x59,
	0xe9, 0x79, 0x1b, 0x3c, 0x8d, 0xdc, 0xd1, 0x66, 0x82, 0xb0, 0x26, 0xc1, 0x20, 0x79, 0x47, 0x2f,
	0x9e, 0x8e, 0x74, 0x80, 0x72, 0x1f, 0x63, 0x39, 0x51, 0xd9, 0xa5, 0x01, 0x7a, 0x52, 0x11, 0x86,
	0x56, 0xb8, 0xc1, 0x8e, 0x0a, 0x40, 0x04, 0x0b, 0x08, 0xee, 0x12, 0x8f, 0x13, 0xa9, 0x84, 0x35,
	0x08, 0x83, 0x88, 0x31, 0x8c, 0xe3, 0x20, 0x2d, 0xcb, 0xde, 0x44, 0x49, 0x5f, 0x47, 0x98, 0x36,
	0x94, 0x77, 0xc0, 0x73, 0xba, 0x02, 0x32, 0xb4, 0xf3, 0xfd, 0x74, 0x58, 0x51, 0xdc, 0xf5, 0xc6,
	0x01, 0x14, 0x83, 0x25, 0xcb, 0x7b, 0x71, 0x9a, 0xd1, 0x65, 0x5a, 0x84, 0x3f, 0xa5, 0x2e, 0x59,
	0x2f, 0x4f, 0xb3, 0x78, 0x2c, 0x3f, 0x14, 0x15, 0xf9, 0x6c, 0x12, 0x7a, 0x3e, 0x57, 0x03, 0x70,
	0x76, 0x94, 0x8f, 0x4f, 0x04, 0x27, 0x93, 0xe0, 0xcc, 0x4f, 0xe2, 0xc0, 0xc8, 0x89, 0xea, 0xe0,
	0x58, 0x65, 0xca, 0x93, 0x99, 0xd5, 0x4c, 0x3a, 0x95, 0x61, 0xf8, 0x7a, 0xd9, 0x60, 0xa3, 0xff,
	0xb7, 0x4d, 0x61, 0xc8, 0xff, 0xdf, 0x30, 0x31, 0x11, 0xd3, 0x6f, 0xcc, 0xfb, 0x1d, 0x22, 0xfb,
	0x2f, 0x35, 0x94, 0xfb, 0x81, 0xc8, 0x40, 0x99, 0xb3, 0x4a, 0x9e, 0xab, 0x33, 0x6b, 0x90, 0x03,
	0x0e, 0x31, 0x05, 0x2b, 0x41, 0xa2, 0xe3, 0x3c, 0x2b, 0x1d, 0x62, 0x9d, 0x3a, 0xe5, 0xb0, 0x02,
	0x4c, 0x2c, 0x07, 0x56, 0x04, 0x55, 0xc2, 0x3f, 0x2b, 0xa0, 0x4d, 0x82, 0x42, 0xfc, 0x37, 0x7b,
	0xfb, 0xc0, 0x27, 0xd3, 0xf8, 0xc1, 0x7e, 0xb7, 0xde, 0x4a, 0xc0, 0x25, 0x7b, 0x27, 0x36, 0x8c,
	0xf6, 0x84, 0x8e, 0xfb, 0x75, 0x5d, 0xdc, 0x3c, 0x86, 0x8d, 0x08, 0x42, 0x02, 0x57, 0xf0, 0x9e,
	0x02, 0x04, 0x52, 0x32, 0x95, 0x2f, 0x42, 0xd3, 0xe1, 0xbb, 0x0a, 0x8a, 0xf0, 0xa2, 0x99, 0x49,
	0x38, 0x79, 0x67, 0x16, 0x54, 0x0f, 0xf0, 0xc1, 0xcf, 0x02, 0xb4, 0x6f, 0x5d, 0xb6, 0xc2, 0x33,
	0x76, 0x38, 0x99, 0x61, 0xba, 0x1e, 0x7e, 0xde, 0xb9, 0x9a, 0xa9, 0x49, 0xff, 0x22, 0x23, 0x30,
	0x13, 0xa8, 0xbb, 0x1f, 0x53, 0x91, 0xbf, 0x99, 0x67, 0xa3, 0x67, 0x67, 0x2f, 0xb1, 0xeb, 0x51,
	0x0e, 0x69, 0xac, 0xcd, 0x5a, 0x88, 0x0c, 0x0a, 0xf2, 0x48, 0x9c, 0x05, 0xd8, 0xbc, 0x05, 0xcc,
	0x68, 0xe0, 0x63, 0x73, 0x96, 0x87, 0x40, 0x44, 0x18, 0xf1, 0xd5, 0xfd, 0x7e, 0x1d, 0xb5, 0x12,
	0xe7, 0x3f, 0xfe, 0xa7, 0x42, 0x68, 0x88, 0xcb, 0x47, 0x1a, 0x2b, 0x83, 0x10, 0x48, 0x85, 0xa0,
	0x66, 0x2c, 0x5c, 0xa0, 0x43, 0x40, 0x9a, 0x34, 0x19, 0x74, 0x80, 0xa9, 0x25, 0xac, 0xc4, 0xa9,
	0x38, 0xf6, 0x50, 0xc5, 0x3e, 0x76, 0x77, 0xb4, 0xb0, 0x41, 0xb9, 0x6c, 0x28, 0xed, 0xd7, 0x12,
	0xd7, 0xed, 0xfc, 0x33, 0xfd, 0x12, 0xa0, 0x50, 0x26, 0xdd, 0xe4, 0xa4, 0xe1, 0x94, 0xb5, 0x46,
	0xda, 0xe3, 0xd0, 0xd2, 0x0b, 0xce, 0x35, 0x6b, 0x89, 0xf4, 0x83, 0x56, 0x3b, 0x7c, 0x28, 0xe9,
	0xd6, 0xf4, 0xa1, 0xcb, 0x7c, 0xe8, 0xd4, 0x1a, 0x7d, 0xb6, 0xc2, 0x87, 0x5a, 0x4b, 0xe5, 0xa1,
	0x45, 0xf3, 0x50, 0x4f, 0xf8, 0xd0, 0x33, 0xae, 0x59, 0x6d, 0xac, 0xc7, 0xd4, 0x0b, 0x5e, 0x37,
	0x6d, 0xa5, 0x8e, 0xc9, 0xb3, 0x9f, 0x5d, 0x22, 0x70, 0x81, 0x8a, 0x63, 0x2b, 0x17, 0xa9, 0xbb,
	0x7f, 0x25, 0x8d, 0xdb, 0x17, 0x63, 0x3c, 0x2d, 0x7d, 0xb6, 0xe3, 0xb0, 0xfb, 0x1a, 0x42, 0x62,
	0x40, 0x47, 0x35, 0x74, 0x0a, 0x8c, 0x73, 0x09, 0x82, 0x35, 0x08, 0xd6, 0x71, 0xea, 0xfd, 0x89,
	0xf6, 0xa0, 0x0d, 0x7a, 0x85, 0x22, 0xbc, 0x44, 0xaf, 0x2f, 0x12, 0x08, 0x42, 0x01, 0x82, 0xfa,
	0x66, 0xec, 0xd8, 0xc0, 0x5b, 0x10, 0xb0, 0x1b, 0x84, 0x5a, 0x7e, 0xc5, 0x57, 0xbb, 0x11, 0xe4,
	0xcd, 0x24, 0xb6, 0x06, 0xaa, 0x00, 0x82, 0xa0, 0x7c, 0x84, 0xe2, 0x49, 0x68, 0x8b, 0x6d, 0xa0,
	0xe3, 0x3a, 0x10, 0x8f, 0xb3, 0x9d, 0x1e, 0xc9, 0x88, 0xfe, 0xef, 0x41, 0x8a, 0x0f, 0xff, 0x51,
	0x2e, 0x0d, 0xf7, 0x5d, 0x8c, 0xb9, 0xfb, 0xa0, 0x1c, 0xde, 0x50, 0x54, 0xf1, 0x8e, 0x9d, 0x5e,
	0x8d, 0x0b, 0x76, 0x93, 0xb4, 0x97, 0x2d, 0x89, 0x14, 0xe5, 0xa6, 0x83, 0xf9, 0xef, 0xa8, 0x66,
	0xdb, 0x19, 0xe3, 0x13, 0x9f, 0x4b, 0x34, 0x57, 0x86, 0xe3, 0x99, 0x77, 0x48, 0x99, 0xcc, 0x42,
	0x51, 0x76, 0x07, 0xa6, 0xbb, 0x3b, 0xc0, 0x92, 0x40, 0xa4, 0xbe, 0x92, 0x27, 0xfc, 0x90, 0x00,
	0xb6, 0x28, 0x71, 0x4e, 0x0f, 0x77, 0x16, 0xb9, 0xaa, 0xf0, 0xf5, 0x04, 0x5f, 0x8e, 0xd9, 0xfd,
	0xe9, 0x4e, 0xac, 0xca, 0x2c, 0x53, 0xc0, 0x86, 0x36, 0xa8, 0x9f, 0x0e, 0xb4, 0xe6, 0x69, 0x12,
	0x90, 0x32, 0x94, 0x5c, 0xed, 0xb8, 0x7f, 0xae, 0x51, 0x58, 0x1b, 0xef, 0x84, 0xf1, 0x89, 0x17,
	0x56, 0x11, 0x03, 0xb6, 0x8c, 0x2d, 0x9f, 0xfb, 0xb9, 0xb4, 0x7a, 0x45, 0x5f, 0x1e, 0x39, 0x38,
	0xdb, 0xd7, 0x6e, 0xd4, 0x98, 0x33, 0x8e, 0x80, 0xe5, 0x58, 0x46, 0x43, 0x76, 0xaf, 0xc6, 0x96,
	0xe1, 0xca, 0x0f, 0xe3, 0x48, 0xec, 0x81, 0x1b, 0x34, 0x93, 0x3a, 0xc4, 0xca, 0x0c, 0xfd, 0x96,
	0x19, 0x2b, 0x40, 0x33, 0xa0, 0x14, 0x61, 0xc5, 0x6a, 0xbd, 0x05, 0x0f, 0xbc, 0x70, 0x4f, 0x0c,
	0x32, 0x63, 0xa2, 0xa0, 0x79, 0x06, 0x78, 0x44, 0xe5, 0xe7, 0xda, 0x13, 0xf8, 0xba, 0xce, 0xa5,
	0x4e, 0x29, 0xe8, 0x2b, 0x14, 0x3b, 0x3f, 0xa4, 0x8e, 0x70, 0x80, 0xcf, 0x11, 0x72, 0x85, 0x2a,
	0x38, 0xff, 0x55, 0x10, 0x76, 0x80, 0x53, 0x7c, 0x92, 0x41, 0x8c, 0x6d, 0xd1, 0x60, 0x1a, 0xfe,
	0x81, 0xad, 0x9e, 0xe8, 0x34, 0xa9, 0xce, 0x05, 0x6a, 0x20, 0x07, 0x03, 0xe9, 0x63, 0x4b, 0xb3,
	0xa8, 0xa9, 0x52, 0x41, 0x53, 0x8a, 0xa2, 0x1b, 0xfd, 0x09, 0xd5, 0x98, 0xc5, 0xe5, 0x77, 0xe6,
	0x77, 0x36, 0x3f, 0xfd, 0xd5, 0xc0, 0xb5, 0x81, 0x17, 0x1d, 0x72, 0xeb, 0xbd, 0x39, 0x53, 0xf0,
	0x2c, 0x3e, 0xb1, 0xd8, 0x98, 0x46, 0x59, 0xbf, 0x86, 0x79, 0x15, 0x3d, 0x1d, 0x24, 0x8a, 0x83,
	0xec, 0xed, 0x78, 0x6e, 0x23, 0xc4, 0xfd, 0x4f, 0xb4, 0x3f, 0xda, 0x59, 0xd5, 0x1c, 0x77, 0xff,
	0x40, 0xb5, 0xa5, 0x7e, 0x85, 0x46, 0x0d, 0x87, 0x0a, 0x4e, 0x60, 0x3b, 0x39, 0x0c, 0xb6, 0x73,
	0x2f, 0x2a, 0x93, 0x57, 0x3f, 0x57, 0x04, 0x28, 0x72, 0x7b, 0xd8, 0x41, 0x2f, 0x1e, 0x1a, 0xd6,
	0x0e, 0x02, 0x14, 0x53, 0x2a, 0x49, 0xad, 0x87, 0x45, 0xee, 0x60, 0xe8, 0x06, 0x74, 0xd9, 0x9e,
	0x20, 0xab, 0x89, 0x93, 0xc4, 0xee, 0xce, 0xa7, 0xba, 0x31, 0x44, 0x7d, 0xaa, 0x76, 0x39, 0x09,
	0xd6, 0xed, 0x19, 0x87, 0xb2, 0xdf, 0xbf, 0x2d, 0xd0, 0xc8, 0xde, 0x3c, 0xba, 0xf8, 0x6a, 0x52,
	0x02, 0x86, 0x05, 0x87, 0xea, 0x0d, 0x8e, 0x35, 0x43, 0xd7, 0x90, 0x0e, 0xd7, 0xa9, 0xb1, 0xe9,
	0xd6, 0x98, 0xf1, 0xde, 0x72, 0xc1, 0x05, 0x0b, 0xa8, 0xc7, 0x8a, 0x7f, 0xaa, 0x63, 0xce, 0x4f,
	0xaf, 0x0d, 0x3f, 0xc3, 0x8c, 0xab, 0x9c, 0x02, 0x34, 0x66, 0xe7, 0x56, 0x4d, 0xf6, 0x8c, 0x19,
	0xa7, 0x1d, 0xc4, 0x0b, 0x7c, 0x14, 0x10, 0xf9, 0xd6, 0x48, 0x05, 0x8a, 0x7b, 0xfd, 0x08, 0xb2,
	0xc5, 0x67, 0x8c, 0x84, 0x8a, 0x5f, 0xc7, 0xfb, 0x8d, 0x77, 0x35, 0xa0, 0xdb, 0x04, 0x72, 0x6c,
	0xd0, 0x1b, 0x04, 0xea, 0xd8, 0xa0, 0xff, 0x21, 0xd0, 0xb2, 0x0d, 0xfa, 0x5f, 0x02, 0xad, 0x30,
	0x63, 0x3f, 0x90, 0x5b, 0x5e, 0x64, 0x3a, 0x49, 0x38, 0x92, 0x22, 0xd1, 0xac, 0xb1, 0x68, 0x04,
	0xfd, 0x5d, 0x7f, 0xe2, 0x1c, 0xe2, 0x4a, 0xf1, 0x46, 0xa6, 0x80, 0x52, 0x37, 0x7f, 0xa3, 0x78,
	0xb8, 0x40, 0xf0, 0xb7, 0x0a, 0xfc, 0xaf, 0xce, 0x2e, 0x68, 0x2a, 0xae, 0xcd, 0x2e, 0x68, 0x5a,
	0xae, 0xcf, 0x2e, 0x68, 0x8a, 0x6e, 0xcc, 0x2e, 0x68, 0xba, 0x6e, 0x92, 0x5b, 0xfc, 0xa4, 0x86,
	0x26, 0x09, 0x32, 0x86, 0x7a, 0x0c, 0xc4, 0x8c, 0x22, 0x4c, 0xbf, 0x48, 0xc9, 0x36, 0xbf, 0xea,
	0x92, 0xa5, 0x9a, 0x4d, 0x37, 0x7d, 0x8c, 0x70, 0x91, 0x26, 0x2f, 0x83, 0xc0, 0x66, 0x92, 0xc0,
	0x5f, 0x10, 0xcb, 0x8e, 0x47, 0x4a, 0x88, 0x7e, 0xe8, 0x8d, 0xff, 0xc9, 0x32, 0x34, 0x06, 0x6a,
	0xaf, 0x94, 0xc6, 0x40, 0x7f, 0x35, 0xbb, 0x7e, 0x44, 0xcd, 0x69, 0xdd, 0xa4, 0xf9, 0xc2, 0x79,
	0x75, 0xd1, 0x71, 0xd8, 0xac, 0x59, 0x9a, 0x65, 0x4d, 0x6b, 0x96, 0x35, 0xed, 0x59, 0xd6, 0x38,
	0xb3, 0xac, 0xe9, 0xcc, 0xb2, 0x66, 0x79, 0x9a, 0x35, 0x2b, 0x9c, 0xea, 0xa4, 0xbb, 0xe3, 0xc4,
	0xf3, 0xb3, 0xf2, 0xc1, 0x91, 0x30, 0x00, 0xdd, 0x7f, 0xfe, 0x63, 0x0d, 0x3d, 0xea, 0xfd, 0xa8,
	0xa2, 0xc9, 0x88, 0x2f, 0x0e, 0x02, 0x48, 0x1f, 0xb0, 0x09, 0x54, 0x2b, 0x83, 0x3d, 0x05, 0x6d,
	0x6b, 0x32, 0x08, 0x9e, 0xc7, 0x00, 0x2f, 0xb4, 0x58, 0x83, 0x38, 0x0c, 0x3d, 0xb5, 0x39, 0x36,
	0xf5, 0x5d, 0x09, 0x19, 0x98, 0xca, 0x0e, 0xd2, 0xa8, 0x40, 0xbf, 0x9c, 0x4a, 0x37, 0xc7, 0x26,
	0xed, 0xb3, 0x61, 0x03, 0x93, 0xf7, 0x81, 0x27, 0xc9, 0x11, 0x59, 0x7e, 0x89, 0xb5, 0xc9, 0x6f,
	0x56, 0x66, 0x16, 0x06, 0x26, 0x01, 0xc4, 0x37, 0xcd, 0x8a, 0x1e, 0xd0, 0x74, 0x9e, 0x38, 0x30,
	0x2d, 0x7a, 0xf8, 0x4c, 0x0e, 0x94, 0x5b, 0x2b, 0xa5, 0x78, 0xf9, 0x75, 0xf8, 0x2a, 0x4f, 0xe6,
	0x13, 0x4f, 0x79, 0xe3, 0xd7, 0x4b, 0xe3, 0xa4, 0xff, 0xb7, 0x8d, 0xb6, 0x7d, 0x40, 0xc3, 0x43,
	0xa1, 0x20, 0x7a, 0x43, 0x9a, 0x58, 0x31, 0xfc, 0xc4, 0x66, 0x0e, 0xa9, 0xc6, 0x93, 0x74, 0x0d,
	0x13, 0x63, 0xf8, 0x9e, 0x5f, 0x0e, 0xb5, 0x19, 0xf0, 0x70, 0x24, 0xed, 0xc7, 0xbb, 0x48, 0xc4,
	0x91, 0xc0, 0x7a, 0xa5, 0x3a, 0xfe, 0x1f, 0x4c, 0x55, 0x35, 0x91, 0x38, 0xb7, 0x24, 0x07, 0xf4,
	0x2b, 0x3a, 0xa6, 0x9c, 0xea, 0xba, 0x7d, 0x74, 0x34, 0xf4, 0x94, 0x98, 0x62, 0x70, 0xd5, 0x0b,
	0x61, 0x2c, 0x61, 0xc3, 0xe0, 0x58, 0xcf, 0xdb, 0x8b, 0xa2, 0x13, 0xae, 0x31, 0xa0, 0xba, 0x79,
	0xf0, 0xc1, 0x87, 0x52, 0x96, 0x7f, 0x50, 0x81, 0xf9, 0xd4, 0xe3, 0x8a, 0x5a, 0x39, 0xdb, 0xee,
	0xe7, 0x3e, 0x75, 0x00, 0xea, 0x3c, 0x03, 0xe2, 0x87, 0x3d, 0x1a, 0xf5, 0xff, 0xc6, 0x21, 0x6a,
	0x79, 0xcb, 0xb6, 0x18, 0x78, 0xf3, 0xe7, 0x52, 0xee, 0x51, 0xf1, 0x64, 0x03, 0x74, 0xbc, 0x9f,
	0x43, 0xb1, 0x3b, 0xa9, 0xaa, 0x88, 0x69, 0x93, 0x41, 0xab, 0x3e, 0x8d, 0xa9, 0xa6, 0xf5, 0x4d,
	0x1c, 0x2e, 0xee, 0x49, 0x7c, 0xa6, 0xd0, 0xcb, 0x93, 0xde, 0x48, 0xf8, 0xa7, 0xbb, 0x55, 0x4f,
	0xcd, 0x03, 0x7c, 0x6b, 0xab, 0x3f, 0xff, 0x2f, 0x4a, 0x57, 0xf9, 0xf3, 0xca, 0xf4, 0xf6, 0x6b,
	0xfa, 0x69, 0x2f, 0xb6, 0x7b, 0x88, 0x0e, 0x51, 0x51, 0xbe, 0xe9, 0x97, 0xd5, 0xbd, 0x41, 0x31,
	0x33, 0x70, 0xdf, 0x43, 0x57, 0x49, 0x83, 0xd0, 0xfb, 0x49, 0x50, 0xd1, 0xb2, 0x47, 0xe3, 0xc0,
	0x9d, 0xd3, 0x73, 0x3c, 0x7e, 0x64, 0x5a, 0x9f, 0x7e, 0x64, 0x8a, 0x4d, 0xdd, 0xf6, 0xdf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x0c, 0x3b, 0x61, 0x74, 0xb7, 0x33, 0x00, 0x00,
}
